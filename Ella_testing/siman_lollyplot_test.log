----------------------------------------------------------------------------------------------------
      name:  <unnamed>
       log:  C:\ian\git\siman\Ella_testing\siman_lollyplot_test.log
  log type:  text
 opened on:  17 Aug 2023, 16:14:53

. siman which
C:\ian\git\siman\siman.ado
*! version 0.2     27mar2023
C:\ian\git\siman\siman_setup.ado
*!   version 0.8.0  04july2023
C:\ian\git\siman\siman_describe.ado
*! version 0.4     21jul2022  
C:\ian\git\siman\siman_analyse.ado
*! version 0.6.3   16aug2023
C:\ian\git\siman\siman_table.ado
*! version 0.8   23dec2022     IW major rewrite: never pools over dgms, targets or methods
C:\ian\git\siman\siman_reshape.ado
*! version 0.3.1   08mar2023   nodescribe option
C:\ian\git\siman\siman_lollyplot.ado
*! version 1.12.1  17aug2023   IW 
C:\ian\git\siman\siman_zipplot.ado
*! version 1.8.5 04july2023  EMZ
C:\ian\git\siman\siman_comparemethodsscatter.ado
*! version 1.9.11 18july2023
C:\ian\git\siman\siman_blandaltman.ado
*! version 1.6.7 11july2023
C:\ian\git\siman\siman_swarm.ado
*! version 1.9.3 26june2023
C:\ian\git\siman\siman_scatter.ado
*! version 1.6.4 26june2023
C:\ian\git\siman\siman_nestloop.ado
*! version 1.8.2   17aug2023
C:\ian\git\siman\siman_trellis.ado
*! version 1.7.2  09may2023

. 
. local i 0

. 
. // ONE DGMVAR
. * multiple targets
. use `pathtest'data/simlongESTPM_longE_longM.dta, clear

. foreach var in rep dgm estimand method est se true {
  2.         rename `var' my`var'
  3. }

. siman setup, rep(myrep) dgm(mydgm) target(myestimand) method(mymethod) ///
>         estimate(myest) se(myse) true(mytrue)

                   SUMMARY OF DATA
_____________________________________________________

The siman format is:              format 1: long-long
The format for targets is:        long
The format for methods is:        long
The number of targets is:         2
The target values are:            beta gamma

The number of methods is:         2
The method values are:            1 2

Data generating mechanism (dgm)
The total number of dgms is:      2
The dgm variables (# levels):     mydgm (2) 

Estimates are contained in the dataset

The estimates variable is:        myest
The se variable is:               myse
The df variable is:               N/A
The ci variables are:             N/A
The p variable is:                N/A
The true variable is:             mytrue
_____________________________________________________

. qui siman analyse

. siman lol bias relprec power cover, refpower(10)  name(l`++i', replace)
Drawing 2 graphs (one per target)...

. 
end of do-file

. siman lol bias relprec power cover if myesti=="beta", refpower(10)
Drawing graph...

. siman lol bias relprec power cover if myesti=="beta", refpower(10) labfo(%6.2f)
Drawing graph...

. siman lol bias relprec power cover if myesti=="beta", refpower(10) name(g1,replace)
Drawing graph...

. siman lol bias relprec power cover if myesti=="beta", refpower(10) labfo(%6.3f) name(g2,replace)
Drawing graph...

. siman lol bias relprec power cover if myesti=="beta", refpower(10) labfo(%6.3f %6.0f) name(g2,repl
> ace)
Drawing graph...

. siman lol bias relprec power cover if myesti=="beta", refpower(10) labfo(%6.3f %6.0f) name(g2,repl
> ace) mlabpos(3)
Drawing graph...
invalid 'mlabpos' 
r(198);

. tr 2: siman lol bias relprec power cover if myesti=="beta", refpower(10) labfo(%6.3f %6.0f) name(g
> 2,replace) mlabpos(3)
  - `macval(cmdline)'
  =  siman lol bias relprec power cover if myesti=="beta", refpower(10) labfo(%6.3f %6.0f) name(g2,r
> eplace) mlabpos(3)
    -------------------------------------------------------------------------------- begin siman ---
    - version 13
    - syntax [anything] [if] [in], [which *]
    - if "`anything'"=="cms" local anything comparemethodsscatter
    = if "lol bias relprec power cover"=="cms" local anything comparemethodsscatter
    - foreach thing in `_dta[siman_allthings]' {
    = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetu
> p insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummet
> hod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype
>  cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m
> 1 t1 simananalyserun ifanalyse estchange sechange {
    - local `thing' : char _dta[siman_`thing']
    = local allthings : char _dta[siman_allthings]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local rep : char _dta[siman_rep]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local dgm : char _dta[siman_dgm]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local target : char _dta[siman_target]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local method : char _dta[siman_method]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local estimate : char _dta[siman_estimate]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local se : char _dta[siman_se]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local df : char _dta[siman_df]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local ci : char _dta[siman_ci]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local p : char _dta[siman_p]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local true : char _dta[siman_true]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local order : char _dta[siman_order]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local lci : char _dta[siman_lci]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local uci : char _dta[siman_uci]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local ifsetup : char _dta[siman_ifsetup]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local insetup : char _dta[siman_insetup]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local format : char _dta[siman_format]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local targetformat : char _dta[siman_targetformat]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local methodformat : char _dta[siman_methodformat]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local nformat : char _dta[siman_nformat]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local ntarget : char _dta[siman_ntarget]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local ndgm : char _dta[siman_ndgm]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local nmethod : char _dta[siman_nmethod]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local numtarget : char _dta[siman_numtarget]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local valtarget : char _dta[siman_valtarget]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local nummethod : char _dta[siman_nummethod]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local valmethod : char _dta[siman_valmethod]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local ntrue : char _dta[siman_ntrue]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local ntruevalue : char _dta[siman_ntruevalue]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local dgmvar : char _dta[siman_dgmvar]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local numdgm : char _dta[siman_numdgm]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local dgmcreated : char _dta[siman_dgmcreated]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local targetlabels : char _dta[siman_targetlabels]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local methodcreated : char _dta[siman_methodcreated]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local descriptiontype : char _dta[siman_descriptiontype]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local cidescriptiontype : char _dta[siman_cidescriptiontype]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local truedescriptiontype : char _dta[siman_truedescriptiontype]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local estvars : char _dta[siman_estvars]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local sevars : char _dta[siman_sevars]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local dfvars : char _dta[siman_dfvars]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local civars : char _dta[siman_civars]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local pvars : char _dta[siman_pvars]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local truevars : char _dta[siman_truevars]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local simansetuprun : char _dta[siman_simansetuprun]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local m1 : char _dta[siman_m1]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local t1 : char _dta[siman_t1]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local simananalyserun : char _dta[siman_simananalyserun]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local ifanalyse : char _dta[siman_ifanalyse]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local estchange : char _dta[siman_estchange]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local sechange : char _dta[siman_sechange]
    - }
    - local subcmds0 setup
    - local subcmds1 describe analyse table reshape lollyplot zipplot comparemethodsscatter blandalt
> man swarm scatter nestloop trellis
    - local subcmds2
    - local subcmds `subcmds0' `subcmds1' `subcmds'
    = local subcmds setup describe analyse table reshape lollyplot zipplot comparemethodsscatter bla
> ndaltman swarm scatter nestloop trellis 
    - if mi("`anything'") {
    = if mi("lol bias relprec power cover") {
      di as error "Syntax: siman <subcommand>"
      exit 198
      }
    - if "`anything'"=="which" {
    = if "lol bias relprec power cover"=="which" {
      which siman
      foreach subcmd of local subcmds {
      cap noi which siman_`subcmd'
      }
      exit
      }
    - gettoken subcmd rest : anything
    - if length("`subcmd'")>=3 {
    = if length("lol")>=3 {
    - foreach thing in `subcmds' {
    = foreach thing in setup describe analyse table reshape lollyplot zipplot comparemethodsscatter 
> blandaltman swarm scatter nestloop trellis {
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("setup","lol")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("describe","lol")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("analyse","lol")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("table","lol")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("reshape","lol")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("lollyplot","lol")==1 {
    - local subcmd `thing'
    = local subcmd lollyplot
    - local knowncmd 1
    - }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("zipplot","lollyplot")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("comparemethodsscatter","lollyplot")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("blandaltman","lollyplot")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("swarm","lollyplot")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("scatter","lollyplot")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("nestloop","lollyplot")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("trellis","lollyplot")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - }
    - cap which siman_`subcmd'
    = cap which siman_lollyplot
    - if _rc {
      di as error "`subcmd' is not a valid siman subcommand"
      if length("`subcmd'")<3 di as error "Minimum abbreviation length is 3"
      exit 198
      }
    - local type0 : list subcmd in subcmds0
    - if `type0' & !mi("`allthings'") {
    = if 0 & !mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup ins
> etup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod v
> almethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cide
> scriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 
> simananalyserun ifanalyse estchange sechange") {
      di as error "Data are already in siman format"
      exit 459
      }
    - local type1 : list subcmd in subcmds1
    - if `type1' & mi("`allthings'") {
    = if 1 & mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup inse
> tup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod va
> lmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cides
> criptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 s
> imananalyserun ifanalyse estchange sechange") {
      di as error "Data are not in siman format: use siman setup"
      exit 459
      }
    - if mi(`"`options'"') siman_`subcmd' `rest' `if' `in'
    = if mi(`"refpower(10) labfo(%6.3f %6.0f) name(g2,replace) mlabpos(3)"') siman_lollyplot  bias r
> elprec power cover if myesti=="beta" 
    - else siman_`subcmd' `rest' `if' `in', `options'
    = else siman_lollyplot  bias relprec power cover if myesti=="beta" , refpower(10) labfo(%6.3f %6
> .0f) name(g2,replace) mlabpos(3)
      -------------------------------------------------------------------- begin siman_lollyplot ---
      - version 15
      - syntax [anything] [if] [, BYGRaphoptions(string) LABFormat(string) COLors(string) MSymbol(st
> ring) name(string) refpower(real 80) * dgmwidth(int 30) pmwidth(int 24) debug pause ]
      - foreach thing in `_dta[siman_allthings]' {
      = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifse
> tup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget numm
> ethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptionty
> pe cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun
>  m1 t1 simananalyserun ifanalyse estchange sechange {
      - local `thing' : char _dta[siman_`thing']
      = local allthings : char _dta[siman_allthings]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local rep : char _dta[siman_rep]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local dgm : char _dta[siman_dgm]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local target : char _dta[siman_target]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local method : char _dta[siman_method]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local estimate : char _dta[siman_estimate]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local se : char _dta[siman_se]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local df : char _dta[siman_df]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local ci : char _dta[siman_ci]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local p : char _dta[siman_p]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local true : char _dta[siman_true]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local order : char _dta[siman_order]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local lci : char _dta[siman_lci]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local uci : char _dta[siman_uci]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local ifsetup : char _dta[siman_ifsetup]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local insetup : char _dta[siman_insetup]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local format : char _dta[siman_format]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local targetformat : char _dta[siman_targetformat]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local methodformat : char _dta[siman_methodformat]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local nformat : char _dta[siman_nformat]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local ntarget : char _dta[siman_ntarget]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local ndgm : char _dta[siman_ndgm]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local nmethod : char _dta[siman_nmethod]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local numtarget : char _dta[siman_numtarget]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local valtarget : char _dta[siman_valtarget]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local nummethod : char _dta[siman_nummethod]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local valmethod : char _dta[siman_valmethod]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local ntrue : char _dta[siman_ntrue]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local ntruevalue : char _dta[siman_ntruevalue]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local dgmvar : char _dta[siman_dgmvar]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local numdgm : char _dta[siman_numdgm]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local dgmcreated : char _dta[siman_dgmcreated]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local targetlabels : char _dta[siman_targetlabels]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local methodcreated : char _dta[siman_methodcreated]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local descriptiontype : char _dta[siman_descriptiontype]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local cidescriptiontype : char _dta[siman_cidescriptiontype]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local truedescriptiontype : char _dta[siman_truedescriptiontype]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local estvars : char _dta[siman_estvars]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local sevars : char _dta[siman_sevars]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local dfvars : char _dta[siman_dfvars]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local civars : char _dta[siman_civars]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local pvars : char _dta[siman_pvars]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local truevars : char _dta[siman_truevars]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local simansetuprun : char _dta[siman_simansetuprun]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local m1 : char _dta[siman_m1]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local t1 : char _dta[siman_t1]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local simananalyserun : char _dta[siman_simananalyserun]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local ifanalyse : char _dta[siman_ifanalyse]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local estchange : char _dta[siman_estchange]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local sechange : char _dta[siman_sechange]
      - }
      - if "`simananalyserun'"=="0" | "`simananalyserun'"=="" {
      = if "1"=="0" | "1"=="" {
        di as error "siman analyse has not been run.  Please use siman analyse first before siman lo
> llyplot."
        exit 498
        }
      - qui levelsof _perfmeascode, local(allpms) clean
      - if "`anything'"=="" {
      = if "bias relprec power cover"=="" {
        if !mi("`true'") {
        local pmdefault bias empse cover
        }
        else {
        local pmdefault mean empse relerror
        local missedmessage " and no true value"
        }
        di as text "Performance measures not specified`missedmessage': defaulting to `pmdefault'"
        local pmlist `pmdefault'
        }
      - else if "`anything'"=="all" local pmlist `allpms'
      = else if "bias relprec power cover"=="all" local pmlist bias bsims ciwidth cover empse mean m
> odelse mse power relerror relprec rmse sesims
      - else local pmlist `anything'
      = else local pmlist bias relprec power cover
      - local wrongpms : list pmlist - allpms
      - if !mi("`wrongpms'") {
      = if !mi("") {
        di as error "Performance measures wrongly specified: `wrongpms'"
        exit 498
        }
      - local npm : word count `pmlist'
      = local npm : word count bias relprec power cover
      - if !mi("`debug'") local digraph_cmd digraph_cmd
      = if !mi("") local digraph_cmd digraph_cmd
      - if !mi(`"`name'"') {
      = if !mi(`"g2,replace"') {
      - gettoken name nameopts : name, parse(",")
      - }
      - else {
        local name simanlolly
        local nameopts , replace
        }
      - preserve
      - if `nformat'!=1 {
      = if 1!=1 {
        siman reshape, longlong nodescribe
        foreach thing in `_dta[siman_allthings]' {
        local `thing' : char _dta[siman_`thing']
        }
        }
      - qui drop if `rep'>0
      = qui drop if myrep>0
      - qui replace `estimate' = 0 if _perfmeascode=="relprec" & mi(`estimate')
      = qui replace myest = 0 if _perfmeascode=="relprec" & mi(myest)
      - if ("`if'"=="" & "`ifanalyse'"!="") local iflollyplot = `"`ifanalyse'"'
      = if ("if myesti=="beta" "=="" & ""!="") local iflollyplot = `""'
      - else local iflollyplot = `"`if'"'
      = else local iflollyplot = `"if myesti=="beta" "'
      - qui tempvar touseif
      - qui generate `touseif' = 0
      = qui generate __000000 = 0
      - qui replace `touseif' = 1 `iflollyplot'
      = qui replace __000000 = 1 if myesti=="beta" 
      - qui sort `dgm' `target' `method' `touseif'
      = qui sort mydgm myestimand mymethod __000000
      - capture by `dgm' `target' `method': assert `touseif'==`touseif'[_n-1] if _n>1
      = capture by mydgm myestimand mymethod: assert __000000==__000000[_n-1] if _n>1
      - if _rc == 9 {
        di as error "The 'if' option can not be applied to 'rep' in siman lollyplot.  If you have no
> t specified an 'if' in siman lollyplot, but you specified one in siman setup/analyse, then that 'i
> f' will have been applied to siman lollyplot."
        exit 498
        }
      - qui keep if `touseif'
      = qui keep if __000000
      - foreach u of var * {
      - if substr("`u'",strlen("`u'"),1)=="_" {
      = if substr("myrep",strlen("myrep"),1)=="_" {
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        }
        }
      - }
      - if substr("`u'",strlen("`u'"),1)=="_" {
      = if substr("mydgm",strlen("mydgm"),1)=="_" {
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        }
        }
      - }
      - if substr("`u'",strlen("`u'"),1)=="_" {
      = if substr("myestimand",strlen("myestimand"),1)=="_" {
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        }
        }
      - }
      - if substr("`u'",strlen("`u'"),1)=="_" {
      = if substr("mymethod",strlen("mymethod"),1)=="_" {
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        }
        }
      - }
      - if substr("`u'",strlen("`u'"),1)=="_" {
      = if substr("mytrue",strlen("mytrue"),1)=="_" {
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        }
        }
      - }
      - if substr("`u'",strlen("`u'"),1)=="_" {
      = if substr("myest",strlen("myest"),1)=="_" {
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        }
        }
      - }
      - if substr("`u'",strlen("`u'"),1)=="_" {
      = if substr("myse",strlen("myse"),1)=="_" {
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        }
        }
      - }
      - if substr("`u'",strlen("`u'"),1)=="_" {
      = if substr("_perfmeascode",strlen("_perfmeascode"),1)=="_" {
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        }
        }
      - }
      - if substr("`u'",strlen("`u'"),1)=="_" {
      = if substr("_dataset",strlen("_dataset"),1)=="_" {
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        }
        }
      - }
      - if substr("`u'",strlen("`u'"),1)=="_" {
      = if substr("__000000",strlen("__000000"),1)=="_" {
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        }
        }
      - }
      - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1,
>  index("`estimate'","_") - 1)
      = if substr("myest",strlen("myest"),1)=="_" local estimate = substr("myest", 1, index("myest",
> "_") - 1)
      - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
      = if substr("myse",strlen("myse"),1)=="_" local se = substr("myse", 1, index("myse","_") - 1)
      - capture confirm variable _pm
      - if _rc {
      - gen _pm = - `rep'
      = gen _pm = - myrep
      - }
      - else {
        di as error "siman lollyplot would like to create a variable '_pm', but that name already ex
> ists in your dataset.  Please rename your variable _pm as something else."
        exit 498
        }
      - tempvar ref
      - qui gen `ref'=.
      = qui gen __000001=.
      - qui replace `ref' = 0 if inlist(_perfmeascode, "bias", "relerror", "relprec")
      = qui replace __000001 = 0 if inlist(_perfmeascode, "bias", "relerror", "relprec")
      - qui replace `ref' = $S_level if _perfmeascode=="cover"
      = qui replace __000001 = 95 if _perfmeascode=="cover"
      - qui replace `ref' = `refpower' if _perfmeascode=="power"
      = qui replace __000001 = 10 if _perfmeascode=="power"
      - local labformat1 : word 1 of `labformat'
      = local labformat1 : word 1 of %6.3f %6.0f
      - if mi("`labformat1'") local labformat1 %12.4g
      = if mi("%6.3f") local labformat1 %12.4g
      - local labformat2 : word 2 of `labformat'
      = local labformat2 : word 2 of %6.3f %6.0f
      - if mi("`labformat2'") local labformat2 %6.1f
      = if mi("%6.0f") local labformat2 %6.1f
      - local labformat3 : word 3 of `labformat'
      = local labformat3 : word 3 of %6.3f %6.0f
      - if mi("`labformat3'") local labformat3 %6.0f
      = if mi("") local labformat3 %6.0f
      - qui gen thelab = string(`estimate',"`labformat1'")
      = qui gen thelab = string(myest,"%6.3f")
      - qui replace thelab = string(`estimate',"`labformat2'") if inlist( _perfmeascode,"relprec","r
> elerr","power","cover")
      = qui replace thelab = string(myest,"%6.0f") if inlist( _perfmeascode,"relprec","relerr","powe
> r","cover")
      - qui replace thelab = string(`estimate',"`labformat3'") if inlist( _perfmeascode,"bsims","ses
> ims")
      = qui replace thelab = string(myest,"%6.0f") if inlist( _perfmeascode,"bsims","sesims")
      - tempvar lci uci l r
      - qui gen float `lci' = `estimate' + (`se'*invnorm(.025))
      = qui gen float __000002 = myest + (myse*invnorm(.025))
      - qui gen float `uci' = `estimate' + (`se'*invnorm(.975))
      = qui gen float __000003 = myest + (myse*invnorm(.975))
      - qui gen `l' = "("
      = qui gen __000004 = "("
      - qui gen `r' = ")"
      = qui gen __000005 = ")"
      - capture confirm string variable `method'
      = capture confirm string variable mymethod
      - if !_rc {
        rename `method' `method'0
        encode `method'0, generate(`method')
        drop `method'0
        }
      - qui levelsof `method', local(methodlevels)
      = qui levelsof mymethod, local(methodlevels)
      - local nmethods = r(r)
      - if `dgmcreated' == 1 {
      = if 0 == 1 {
        qui gen dgm = 1
        local dgm "dgm"
        local ndgm=1
        }
      - qui gen tokeep = 0
      - foreach pm of local pmlist {
      - qui replace tokeep = 1 if _perfmeascode == "`pm'"
      = qui replace tokeep = 1 if _perfmeascode == "bias"
      - }
      - qui replace tokeep = 1 if _perfmeascode == "`pm'"
      = qui replace tokeep = 1 if _perfmeascode == "relprec"
      - }
      - qui replace tokeep = 1 if _perfmeascode == "`pm'"
      = qui replace tokeep = 1 if _perfmeascode == "power"
      - }
      - qui replace tokeep = 1 if _perfmeascode == "`pm'"
      = qui replace tokeep = 1 if _perfmeascode == "cover"
      - }
      - qui drop if tokeep == 0
      - qui drop tokeep
      - qui levelsof _pm, local(pmlevels)
      - if !mi("`if'") {
      = if !mi("if myesti=="beta" ") {
      - local ampersand = " &"
      - local if = `"`if' `ampersand'"'
      = local if = `"if myesti=="beta"   &"'
      - }
      - else local if "if"
      - local graphpos = `nmethods'*3
      = local graphpos = 2*3
      - local i 0
      - foreach j of local methodlevels {
      - local label`j' : label (`method') `j'
      = local label1 : label (mymethod) 1
      - local ++i
      - local mcol`j' : word `i' of `colors'
      = local mcol1 : word 1 of 
      - if mi("`mcol`j'") local mcol`j' "scheme p`i'"
      = if mi("`mcol1") local mcol1 "scheme p1"
      - local msym`j' : word `i' of `msymbol'
      = local msym1 : word 1 of 
      - if mi("`msym`j'") & `j'==1 local msym`j' O
      = if mi("`msym1") & 1==1 local msym1 O
      - else if mi("`msym`j'") & `j'>1 local msym`j' `msym`=`j'-1'
      = else if mi("`msym1") & 1>1 local msym1 `msym0
      - }
      - local label`j' : label (`method') `j'
      = local label2 : label (mymethod) 2
      - local ++i
      - local mcol`j' : word `i' of `colors'
      = local mcol2 : word 2 of 
      - if mi("`mcol`j'") local mcol`j' "scheme p`i'"
      = if mi("`mcol2") local mcol2 "scheme p2"
      - local msym`j' : word `i' of `msymbol'
      = local msym2 : word 2 of 
      - if mi("`msym`j'") & `j'==1 local msym`j' O
      = if mi("`msym2") & 2==1 local msym2 O
      - else if mi("`msym`j'") & `j'>1 local msym`j' `msym`=`j'-1'
      = else if mi("`msym2") & 2>1 local msym2 `msym1
      - }
      - if !mi("`target'") {
      = if !mi("myestimand") {
      - qui levelsof `target', local(targetlevels) clean
      = qui levelsof myestimand, local(targetlevels) clean
      - local ntargetlevels = r(r)
      - }
      - else {
        local target `""_null""'
        local targetlevels _null
        local ntargetlevels 0
        }
      - if `ntargetlevels'>1 di as text "Drawing `ntargetlevels' graphs (one per target)..."
      = if 1>1 di as text "Drawing 1 graphs (one per target)..."
      - else di as text "Drawing graph..."
Drawing graph...
      - local ndgmvars : word count `dgm'
      = local ndgmvars : word count mydgm
      - if `ndgmvars'>1 {
      = if 1>1 {
        tempvar dgmgroup
        egen `dgmgroup' = group(`dgm'), label
        local varname novarname
        }
      - else local dgmgroup `dgm'
      = else local dgmgroup mydgm
      - qui maketitlevar `dgmgroup', `varname'
      = qui maketitlevar mydgm, 
      - local dgmtitlevar = r(newvars)
      - qui levelsof `dgmtitlevar', local(dgmnames)
      = qui levelsof mydgmtitle, local(dgmnames)
      - local ndgmlevels = r(r)
      - padding `dgmnames', width(`dgmwidth')
      = padding `"mydgm: 1"' `"mydgm: 2"', width(30)
      - local titlepadded = s(titlepadded)
      - if `ndgmvars'>1 local titlepadded `"`"`dgm'"' `"`titlepadded'"'"'
      = if 1>1 local titlepadded `"`"mydgm"' `"                  mydgm: 1                           
>          mydgm: 2                  "'"'
      - qui levelsof _perfmeascode, local(pmlevels)
      - padding `pmlevels', width(`pmwidth') reverse
      = padding `"bias"' `"cover"' `"power"' `"relprec"', width(24) reverse
      - local ytitlepadded = s(titlepadded)
      - foreach thistarget of local targetlevels {
      - if `ntargetlevels'>0 {
      = if 1>0 {
      - local targetcond `target'=="`thistarget'"
      = local targetcond myestimand=="beta"
      - local note `target'=`thistarget'
      = local note myestimand=beta
      - if !mi("`debug'") di as text `"Drawing graph for `targetcond'"'
      = if !mi("") di as text `"Drawing graph for myestimand=="beta""'
      - }
      - else {
        local targetcond 1
        local note
        }
      - local graph_cmd twoway
      - local i 1
      - local graphorder
      - foreach thismethod of local methodlevels {
      - local methtargetcond `method'==`thismethod' & `targetcond'
      = local methtargetcond mymethod==1 & myestimand=="beta"
      - local graphorder `graphorder' `=4*`i'-3' "`method': `label`i''"
      = local graphorder  1 "mymethod: 1"
      - local graph_cmd `graph_cmd' scatter `method' `estimate' if `methtargetcond', mcol(`mcol`i'')
>  msym(`msym`i'') mlab(thelab) ||
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) ||
      - local graph_cmd `graph_cmd' scatter `method' `lci' if `methtargetcond', mlabcol(`mcol`i'') m
> sym(i) mlab(`l') mlabpos(0) ||
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) ||
      - local graph_cmd `graph_cmd' scatter `method' `uci' if `methtargetcond', mlabcol(`mcol`i'') m
> sym(i) mlab(`r') mlabpos(0) ||
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) ||
      - local graph_cmd `graph_cmd' rspike `estimate' `ref' `method' if `methtargetcond', horiz lcol
> (`mcol`i'') ||
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() ||
      - local ++i
      - }
      - local methtargetcond `method'==`thismethod' & `targetcond'
      = local methtargetcond mymethod==2 & myestimand=="beta"
      - local graphorder `graphorder' `=4*`i'-3' "`method': `label`i''"
      = local graphorder 1 "mymethod: 1" 5 "mymethod: 2"
      - local graph_cmd `graph_cmd' scatter `method' `estimate' if `methtargetcond', mcol(`mcol`i'')
>  msym(`msym`i'') mlab(thelab) ||
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() 
> msym() mlab(thelab) ||
      - local graph_cmd `graph_cmd' scatter `method' `lci' if `methtargetcond', mlabcol(`mcol`i'') m
> sym(i) mlab(`l') mlabpos(0) ||
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() 
> msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() ms
> ym(i) mlab(__000004) mlabpos(0) ||
      - local graph_cmd `graph_cmd' scatter `method' `uci' if `methtargetcond', mlabcol(`mcol`i'') m
> sym(i) mlab(`r') mlabpos(0) ||
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() 
> msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() ms
> ym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="beta", 
> mlabcol() msym(i) mlab(__000005) mlabpos(0) ||
      - local graph_cmd `graph_cmd' rspike `estimate' `ref' `method' if `methtargetcond', horiz lcol
> (`mcol`i'') ||
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() 
> msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() ms
> ym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="beta", 
> mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==2 & mye
> stimand=="beta", horiz lcol() ||
      - local ++i
      - }
      - local graph_cmd `graph_cmd' scatter `method' `ref' if `targetcond', msym(i) c(l) col(gray) l
> pattern(dash)
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() 
> msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() ms
> ym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="beta", 
> mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==2 & mye
> stimand=="beta", horiz lcol() || scatter mymethod __000001 if myestimand=="beta", msym(i) c(l) col
> (gray) lpattern(dash)
      - local graph_cmd `graph_cmd' , by(_perfmeascode `dgm', note(`"`note'"') col(`ndgmlevels') xre
> scale title(`titlepadded', size(medium) just(center)) imargin(r=5) `bygraphoptions')
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() 
> msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() ms
> ym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="beta", 
> mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==2 & mye
> stimand=="beta", horiz lcol() || scatter mymethod __000001 if myestimand=="beta", msym(i) c(l) col
> (gray) lpattern(dash) , by(_perfmeascode mydgm, note(`"myestimand=beta"') col(2) xrescale title(  
>                 mydgm: 1                                    mydgm: 2                  , size(mediu
> m) just(center)) imargin(r=5) )
      - local graph_cmd `graph_cmd' subtitle("") ylab(none)
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() 
> msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() ms
> ym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="beta", 
> mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==2 & mye
> stimand=="beta", horiz lcol() || scatter mymethod __000001 if myestimand=="beta", msym(i) c(l) col
> (gray) lpattern(dash) , by(_perfmeascode mydgm, note(`"myestimand=beta"') col(2) xrescale title(  
>                 mydgm: 1                                    mydgm: 2                  , size(mediu
> m) just(center)) imargin(r=5) ) subtitle("") ylab(none)
      - local graph_cmd `graph_cmd' ytitle(`"`ytitlepadded'"', size(medium)) yscale(reverse)
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() 
> msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() ms
> ym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="beta", 
> mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==2 & mye
> stimand=="beta", horiz lcol() || scatter mymethod __000001 if myestimand=="beta", msym(i) c(l) col
> (gray) lpattern(dash) , by(_perfmeascode mydgm, note(`"myestimand=beta"') col(2) xrescale title(  
>                 mydgm: 1                                    mydgm: 2                  , size(mediu
> m) just(center)) imargin(r=5) ) subtitle("") ylab(none) ytitle(`"     relprec          power      
>      cover             bias       "', size(medium)) yscale(reverse)
      - local graph_cmd `graph_cmd' legend(order(`graphorder'))
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() 
> msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() ms
> ym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="beta", 
> mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==2 & mye
> stimand=="beta", horiz lcol() || scatter mymethod __000001 if myestimand=="beta", msym(i) c(l) col
> (gray) lpattern(dash) , by(_perfmeascode mydgm, note(`"myestimand=beta"') col(2) xrescale title(  
>                 mydgm: 1                                    mydgm: 2                  , size(mediu
> m) just(center)) imargin(r=5) ) subtitle("") ylab(none) ytitle(`"     relprec          power      
>      cover             bias       "', size(medium)) yscale(reverse) legend(order(1 "mymethod: 1" 5
>  "mymethod: 2"))
      - if `ntargetlevels'<=1 local graph_cmd `graph_cmd' name(`name'`nameopts')
      = if 1<=1 local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", m
> col() msym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabco
> l() msym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="b
> eta", mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1
>  & myestimand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta",
>  mcol() msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlab
> col() msym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand==
> "beta", mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod=
> =2 & myestimand=="beta", horiz lcol() || scatter mymethod __000001 if myestimand=="beta", msym(i) 
> c(l) col(gray) lpattern(dash) , by(_perfmeascode mydgm, note(`"myestimand=beta"') col(2) xrescale 
> title(                  mydgm: 1                                    mydgm: 2                  , si
> ze(medium) just(center)) imargin(r=5) ) subtitle("") ylab(none) ytitle(`"     relprec          pow
> er           cover             bias       "', size(medium)) yscale(reverse) legend(order(1 "mymeth
> od: 1" 5 "mymethod: 2")) name(g2,replace)
      - else local graph_cmd `graph_cmd' name(`name'_`thistarget'`nameopts')
      = else local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol
> () msym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol()
>  msym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta
> ", mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & 
> myestimand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mc
> ol() msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol
> () msym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="be
> ta", mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==2 
> & myestimand=="beta", horiz lcol() || scatter mymethod __000001 if myestimand=="beta", msym(i) c(l
> ) col(gray) lpattern(dash) , by(_perfmeascode mydgm, note(`"myestimand=beta"') col(2) xrescale tit
> le(                  mydgm: 1                                    mydgm: 2                  , size(
> medium) just(center)) imargin(r=5) ) subtitle("") ylab(none) ytitle(`"     relprec          power 
>           cover             bias       "', size(medium)) yscale(reverse) legend(order(1 "mymethod:
>  1" 5 "mymethod: 2")) name(g2,replace) name(g2_beta,replace)
      - local graph_cmd `graph_cmd' `options'
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() 
> msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() ms
> ym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="beta", 
> mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==2 & mye
> stimand=="beta", horiz lcol() || scatter mymethod __000001 if myestimand=="beta", msym(i) c(l) col
> (gray) lpattern(dash) , by(_perfmeascode mydgm, note(`"myestimand=beta"') col(2) xrescale title(  
>                 mydgm: 1                                    mydgm: 2                  , size(mediu
> m) just(center)) imargin(r=5) ) subtitle("") ylab(none) ytitle(`"     relprec          power      
>      cover             bias       "', size(medium)) yscale(reverse) legend(order(1 "mymethod: 1" 5
>  "mymethod: 2")) name(g2,replace) mlabpos(3)
      - global F9 `graph_cmd'
      = global F9 twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() msym() m
> lab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym(i) ml
> ab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", mlabcol(
> ) msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myestimand=
> ="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() msym()
>  mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() msym(i) 
> mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="beta", mlabco
> l() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==2 & myestiman
> d=="beta", horiz lcol() || scatter mymethod __000001 if myestimand=="beta", msym(i) c(l) col(gray)
>  lpattern(dash) , by(_perfmeascode mydgm, note(`"myestimand=beta"') col(2) xrescale title(        
>           mydgm: 1                                    mydgm: 2                  , size(medium) jus
> t(center)) imargin(r=5) ) subtitle("") ylab(none) ytitle(`"     relprec          power           c
> over             bias       "', size(medium)) yscale(reverse) legend(order(1 "mymethod: 1" 5 "myme
> thod: 2")) name(g2,replace) mlabpos(3)
      - if !mi("`debug'") di as text "Graph command is: " as input `"`graph_cmd'"'
      = if !mi("") di as text "Graph command is: " as input `"twoway scatter mymethod myest if mymet
> hod==1 & myestimand=="beta", mcol() msym() mlab(thelab) || scatter mymethod __000002 if mymethod==
> 1 & myestimand=="beta", mlabcol() msym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 i
> f mymethod==1 & myestimand=="beta", mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __
> 000001 mymethod if mymethod==1 & myestimand=="beta", horiz lcol() || scatter mymethod myest if mym
> ethod==2 & myestimand=="beta", mcol() msym() mlab(thelab) || scatter mymethod __000002 if mymethod
> ==2 & myestimand=="beta", mlabcol() msym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003
>  if mymethod==2 & myestimand=="beta", mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest 
> __000001 mymethod if mymethod==2 & myestimand=="beta", horiz lcol() || scatter mymethod __000001 i
> f myestimand=="beta", msym(i) c(l) col(gray) lpattern(dash) , by(_perfmeascode mydgm, note(`"myest
> imand=beta"') col(2) xrescale title(                  mydgm: 1                                    
> mydgm: 2                  , size(medium) just(center)) imargin(r=5) ) subtitle("") ylab(none) ytit
> le(`"     relprec          power           cover             bias       "', size(medium)) yscale(r
> everse) legend(order(1 "mymethod: 1" 5 "mymethod: 2")) name(g2,replace) mlabpos(3)"'
      - if !mi("`pause'") pause
      = if !mi("") pause
      - `graph_cmd'
      = twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() msym() mlab(thelab
> ) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym(i) mlab(__00000
> 4) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", mlabcol() msym(i) 
> mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myestimand=="beta", h
> oriz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() msym() mlab(thel
> ab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() msym(i) mlab(__000
> 004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="beta", mlabcol() msym(i
> ) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==2 & myestimand=="beta",
>  horiz lcol() || scatter mymethod __000001 if myestimand=="beta", msym(i) c(l) col(gray) lpattern(
> dash) , by(_perfmeascode mydgm, note(`"myestimand=beta"') col(2) xrescale title(                  
> mydgm: 1                                    mydgm: 2                  , size(medium) just(center))
>  imargin(r=5) ) subtitle("") ylab(none) ytitle(`"     relprec          power           cover      
>        bias       "', size(medium)) yscale(reverse) legend(order(1 "mymethod: 1" 5 "mymethod: 2"))
>  name(g2,replace) mlabpos(3)
invalid 'mlabpos' 
        }
      ---------------------------------------------------------------------- end siman_lollyplot ---
    ---------------------------------------------------------------------------------- end siman ---
r(198);

. tr 2: siman lol bias relprec power cover if myesti=="beta", refpower(10) labfo(%6.3f %6.0f) name(g
> 2,replace) bygr(mlabpos(3))
  - `macval(cmdline)'
  =  siman lol bias relprec power cover if myesti=="beta", refpower(10) labfo(%6.3f %6.0f) name(g2,r
> eplace) bygr(mlabpos(3))
    -------------------------------------------------------------------------------- begin siman ---
    - version 13
    - syntax [anything] [if] [in], [which *]
    - if "`anything'"=="cms" local anything comparemethodsscatter
    = if "lol bias relprec power cover"=="cms" local anything comparemethodsscatter
    - foreach thing in `_dta[siman_allthings]' {
    = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetu
> p insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummet
> hod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype
>  cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m
> 1 t1 simananalyserun ifanalyse estchange sechange {
    - local `thing' : char _dta[siman_`thing']
    = local allthings : char _dta[siman_allthings]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local rep : char _dta[siman_rep]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local dgm : char _dta[siman_dgm]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local target : char _dta[siman_target]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local method : char _dta[siman_method]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local estimate : char _dta[siman_estimate]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local se : char _dta[siman_se]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local df : char _dta[siman_df]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local ci : char _dta[siman_ci]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local p : char _dta[siman_p]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local true : char _dta[siman_true]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local order : char _dta[siman_order]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local lci : char _dta[siman_lci]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local uci : char _dta[siman_uci]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local ifsetup : char _dta[siman_ifsetup]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local insetup : char _dta[siman_insetup]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local format : char _dta[siman_format]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local targetformat : char _dta[siman_targetformat]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local methodformat : char _dta[siman_methodformat]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local nformat : char _dta[siman_nformat]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local ntarget : char _dta[siman_ntarget]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local ndgm : char _dta[siman_ndgm]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local nmethod : char _dta[siman_nmethod]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local numtarget : char _dta[siman_numtarget]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local valtarget : char _dta[siman_valtarget]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local nummethod : char _dta[siman_nummethod]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local valmethod : char _dta[siman_valmethod]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local ntrue : char _dta[siman_ntrue]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local ntruevalue : char _dta[siman_ntruevalue]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local dgmvar : char _dta[siman_dgmvar]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local numdgm : char _dta[siman_numdgm]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local dgmcreated : char _dta[siman_dgmcreated]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local targetlabels : char _dta[siman_targetlabels]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local methodcreated : char _dta[siman_methodcreated]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local descriptiontype : char _dta[siman_descriptiontype]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local cidescriptiontype : char _dta[siman_cidescriptiontype]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local truedescriptiontype : char _dta[siman_truedescriptiontype]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local estvars : char _dta[siman_estvars]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local sevars : char _dta[siman_sevars]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local dfvars : char _dta[siman_dfvars]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local civars : char _dta[siman_civars]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local pvars : char _dta[siman_pvars]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local truevars : char _dta[siman_truevars]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local simansetuprun : char _dta[siman_simansetuprun]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local m1 : char _dta[siman_m1]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local t1 : char _dta[siman_t1]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local simananalyserun : char _dta[siman_simananalyserun]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local ifanalyse : char _dta[siman_ifanalyse]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local estchange : char _dta[siman_estchange]
    - }
    - local `thing' : char _dta[siman_`thing']
    = local sechange : char _dta[siman_sechange]
    - }
    - local subcmds0 setup
    - local subcmds1 describe analyse table reshape lollyplot zipplot comparemethodsscatter blandalt
> man swarm scatter nestloop trellis
    - local subcmds2
    - local subcmds `subcmds0' `subcmds1' `subcmds'
    = local subcmds setup describe analyse table reshape lollyplot zipplot comparemethodsscatter bla
> ndaltman swarm scatter nestloop trellis 
    - if mi("`anything'") {
    = if mi("lol bias relprec power cover") {
      di as error "Syntax: siman <subcommand>"
      exit 198
      }
    - if "`anything'"=="which" {
    = if "lol bias relprec power cover"=="which" {
      which siman
      foreach subcmd of local subcmds {
      cap noi which siman_`subcmd'
      }
      exit
      }
    - gettoken subcmd rest : anything
    - if length("`subcmd'")>=3 {
    = if length("lol")>=3 {
    - foreach thing in `subcmds' {
    = foreach thing in setup describe analyse table reshape lollyplot zipplot comparemethodsscatter 
> blandaltman swarm scatter nestloop trellis {
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("setup","lol")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("describe","lol")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("analyse","lol")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("table","lol")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("reshape","lol")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("lollyplot","lol")==1 {
    - local subcmd `thing'
    = local subcmd lollyplot
    - local knowncmd 1
    - }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("zipplot","lollyplot")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("comparemethodsscatter","lollyplot")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("blandaltman","lollyplot")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("swarm","lollyplot")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("scatter","lollyplot")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("nestloop","lollyplot")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - if strpos("`thing'","`subcmd'")==1 {
    = if strpos("trellis","lollyplot")==1 {
      local subcmd `thing'
      local knowncmd 1
      }
    - }
    - }
    - cap which siman_`subcmd'
    = cap which siman_lollyplot
    - if _rc {
      di as error "`subcmd' is not a valid siman subcommand"
      if length("`subcmd'")<3 di as error "Minimum abbreviation length is 3"
      exit 198
      }
    - local type0 : list subcmd in subcmds0
    - if `type0' & !mi("`allthings'") {
    = if 0 & !mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup ins
> etup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod v
> almethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cide
> scriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 
> simananalyserun ifanalyse estchange sechange") {
      di as error "Data are already in siman format"
      exit 459
      }
    - local type1 : list subcmd in subcmds1
    - if `type1' & mi("`allthings'") {
    = if 1 & mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup inse
> tup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod va
> lmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cides
> criptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 s
> imananalyserun ifanalyse estchange sechange") {
      di as error "Data are not in siman format: use siman setup"
      exit 459
      }
    - if mi(`"`options'"') siman_`subcmd' `rest' `if' `in'
    = if mi(`"refpower(10) labfo(%6.3f %6.0f) name(g2,replace) bygr(mlabpos(3))"') siman_lollyplot  
> bias relprec power cover if myesti=="beta" 
    - else siman_`subcmd' `rest' `if' `in', `options'
    = else siman_lollyplot  bias relprec power cover if myesti=="beta" , refpower(10) labfo(%6.3f %6
> .0f) name(g2,replace) bygr(mlabpos(3))
      -------------------------------------------------------------------- begin siman_lollyplot ---
      - version 15
      - syntax [anything] [if] [, BYGRaphoptions(string) LABFormat(string) COLors(string) MSymbol(st
> ring) name(string) refpower(real 80) * dgmwidth(int 30) pmwidth(int 24) debug pause ]
      - foreach thing in `_dta[siman_allthings]' {
      = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifse
> tup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget numm
> ethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptionty
> pe cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun
>  m1 t1 simananalyserun ifanalyse estchange sechange {
      - local `thing' : char _dta[siman_`thing']
      = local allthings : char _dta[siman_allthings]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local rep : char _dta[siman_rep]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local dgm : char _dta[siman_dgm]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local target : char _dta[siman_target]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local method : char _dta[siman_method]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local estimate : char _dta[siman_estimate]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local se : char _dta[siman_se]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local df : char _dta[siman_df]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local ci : char _dta[siman_ci]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local p : char _dta[siman_p]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local true : char _dta[siman_true]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local order : char _dta[siman_order]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local lci : char _dta[siman_lci]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local uci : char _dta[siman_uci]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local ifsetup : char _dta[siman_ifsetup]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local insetup : char _dta[siman_insetup]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local format : char _dta[siman_format]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local targetformat : char _dta[siman_targetformat]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local methodformat : char _dta[siman_methodformat]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local nformat : char _dta[siman_nformat]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local ntarget : char _dta[siman_ntarget]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local ndgm : char _dta[siman_ndgm]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local nmethod : char _dta[siman_nmethod]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local numtarget : char _dta[siman_numtarget]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local valtarget : char _dta[siman_valtarget]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local nummethod : char _dta[siman_nummethod]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local valmethod : char _dta[siman_valmethod]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local ntrue : char _dta[siman_ntrue]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local ntruevalue : char _dta[siman_ntruevalue]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local dgmvar : char _dta[siman_dgmvar]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local numdgm : char _dta[siman_numdgm]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local dgmcreated : char _dta[siman_dgmcreated]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local targetlabels : char _dta[siman_targetlabels]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local methodcreated : char _dta[siman_methodcreated]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local descriptiontype : char _dta[siman_descriptiontype]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local cidescriptiontype : char _dta[siman_cidescriptiontype]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local truedescriptiontype : char _dta[siman_truedescriptiontype]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local estvars : char _dta[siman_estvars]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local sevars : char _dta[siman_sevars]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local dfvars : char _dta[siman_dfvars]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local civars : char _dta[siman_civars]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local pvars : char _dta[siman_pvars]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local truevars : char _dta[siman_truevars]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local simansetuprun : char _dta[siman_simansetuprun]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local m1 : char _dta[siman_m1]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local t1 : char _dta[siman_t1]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local simananalyserun : char _dta[siman_simananalyserun]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local ifanalyse : char _dta[siman_ifanalyse]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local estchange : char _dta[siman_estchange]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local sechange : char _dta[siman_sechange]
      - }
      - if "`simananalyserun'"=="0" | "`simananalyserun'"=="" {
      = if "1"=="0" | "1"=="" {
        di as error "siman analyse has not been run.  Please use siman analyse first before siman lo
> llyplot."
        exit 498
        }
      - qui levelsof _perfmeascode, local(allpms) clean
      - if "`anything'"=="" {
      = if "bias relprec power cover"=="" {
        if !mi("`true'") {
        local pmdefault bias empse cover
        }
        else {
        local pmdefault mean empse relerror
        local missedmessage " and no true value"
        }
        di as text "Performance measures not specified`missedmessage': defaulting to `pmdefault'"
        local pmlist `pmdefault'
        }
      - else if "`anything'"=="all" local pmlist `allpms'
      = else if "bias relprec power cover"=="all" local pmlist bias bsims ciwidth cover empse mean m
> odelse mse power relerror relprec rmse sesims
      - else local pmlist `anything'
      = else local pmlist bias relprec power cover
      - local wrongpms : list pmlist - allpms
      - if !mi("`wrongpms'") {
      = if !mi("") {
        di as error "Performance measures wrongly specified: `wrongpms'"
        exit 498
        }
      - local npm : word count `pmlist'
      = local npm : word count bias relprec power cover
      - if !mi("`debug'") local digraph_cmd digraph_cmd
      = if !mi("") local digraph_cmd digraph_cmd
      - if !mi(`"`name'"') {
      = if !mi(`"g2,replace"') {
      - gettoken name nameopts : name, parse(",")
      - }
      - else {
        local name simanlolly
        local nameopts , replace
        }
      - preserve
      - if `nformat'!=1 {
      = if 1!=1 {
        siman reshape, longlong nodescribe
        foreach thing in `_dta[siman_allthings]' {
        local `thing' : char _dta[siman_`thing']
        }
        }
      - qui drop if `rep'>0
      = qui drop if myrep>0
      - qui replace `estimate' = 0 if _perfmeascode=="relprec" & mi(`estimate')
      = qui replace myest = 0 if _perfmeascode=="relprec" & mi(myest)
      - if ("`if'"=="" & "`ifanalyse'"!="") local iflollyplot = `"`ifanalyse'"'
      = if ("if myesti=="beta" "=="" & ""!="") local iflollyplot = `""'
      - else local iflollyplot = `"`if'"'
      = else local iflollyplot = `"if myesti=="beta" "'
      - qui tempvar touseif
      - qui generate `touseif' = 0
      = qui generate __000000 = 0
      - qui replace `touseif' = 1 `iflollyplot'
      = qui replace __000000 = 1 if myesti=="beta" 
      - qui sort `dgm' `target' `method' `touseif'
      = qui sort mydgm myestimand mymethod __000000
      - capture by `dgm' `target' `method': assert `touseif'==`touseif'[_n-1] if _n>1
      = capture by mydgm myestimand mymethod: assert __000000==__000000[_n-1] if _n>1
      - if _rc == 9 {
        di as error "The 'if' option can not be applied to 'rep' in siman lollyplot.  If you have no
> t specified an 'if' in siman lollyplot, but you specified one in siman setup/analyse, then that 'i
> f' will have been applied to siman lollyplot."
        exit 498
        }
      - qui keep if `touseif'
      = qui keep if __000000
      - foreach u of var * {
      - if substr("`u'",strlen("`u'"),1)=="_" {
      = if substr("myrep",strlen("myrep"),1)=="_" {
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        }
        }
      - }
      - if substr("`u'",strlen("`u'"),1)=="_" {
      = if substr("mydgm",strlen("mydgm"),1)=="_" {
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        }
        }
      - }
      - if substr("`u'",strlen("`u'"),1)=="_" {
      = if substr("myestimand",strlen("myestimand"),1)=="_" {
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        }
        }
      - }
      - if substr("`u'",strlen("`u'"),1)=="_" {
      = if substr("mymethod",strlen("mymethod"),1)=="_" {
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        }
        }
      - }
      - if substr("`u'",strlen("`u'"),1)=="_" {
      = if substr("mytrue",strlen("mytrue"),1)=="_" {
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        }
        }
      - }
      - if substr("`u'",strlen("`u'"),1)=="_" {
      = if substr("myest",strlen("myest"),1)=="_" {
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        }
        }
      - }
      - if substr("`u'",strlen("`u'"),1)=="_" {
      = if substr("myse",strlen("myse"),1)=="_" {
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        }
        }
      - }
      - if substr("`u'",strlen("`u'"),1)=="_" {
      = if substr("_perfmeascode",strlen("_perfmeascode"),1)=="_" {
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        }
        }
      - }
      - if substr("`u'",strlen("`u'"),1)=="_" {
      = if substr("_dataset",strlen("_dataset"),1)=="_" {
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        }
        }
      - }
      - if substr("`u'",strlen("`u'"),1)=="_" {
      = if substr("__000000",strlen("__000000"),1)=="_" {
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        }
        }
      - }
      - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1,
>  index("`estimate'","_") - 1)
      = if substr("myest",strlen("myest"),1)=="_" local estimate = substr("myest", 1, index("myest",
> "_") - 1)
      - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
      = if substr("myse",strlen("myse"),1)=="_" local se = substr("myse", 1, index("myse","_") - 1)
      - capture confirm variable _pm
      - if _rc {
      - gen _pm = - `rep'
      = gen _pm = - myrep
      - }
      - else {
        di as error "siman lollyplot would like to create a variable '_pm', but that name already ex
> ists in your dataset.  Please rename your variable _pm as something else."
        exit 498
        }
      - tempvar ref
      - qui gen `ref'=.
      = qui gen __000001=.
      - qui replace `ref' = 0 if inlist(_perfmeascode, "bias", "relerror", "relprec")
      = qui replace __000001 = 0 if inlist(_perfmeascode, "bias", "relerror", "relprec")
      - qui replace `ref' = $S_level if _perfmeascode=="cover"
      = qui replace __000001 = 95 if _perfmeascode=="cover"
      - qui replace `ref' = `refpower' if _perfmeascode=="power"
      = qui replace __000001 = 10 if _perfmeascode=="power"
      - local labformat1 : word 1 of `labformat'
      = local labformat1 : word 1 of %6.3f %6.0f
      - if mi("`labformat1'") local labformat1 %12.4g
      = if mi("%6.3f") local labformat1 %12.4g
      - local labformat2 : word 2 of `labformat'
      = local labformat2 : word 2 of %6.3f %6.0f
      - if mi("`labformat2'") local labformat2 %6.1f
      = if mi("%6.0f") local labformat2 %6.1f
      - local labformat3 : word 3 of `labformat'
      = local labformat3 : word 3 of %6.3f %6.0f
      - if mi("`labformat3'") local labformat3 %6.0f
      = if mi("") local labformat3 %6.0f
      - qui gen thelab = string(`estimate',"`labformat1'")
      = qui gen thelab = string(myest,"%6.3f")
      - qui replace thelab = string(`estimate',"`labformat2'") if inlist( _perfmeascode,"relprec","r
> elerr","power","cover")
      = qui replace thelab = string(myest,"%6.0f") if inlist( _perfmeascode,"relprec","relerr","powe
> r","cover")
      - qui replace thelab = string(`estimate',"`labformat3'") if inlist( _perfmeascode,"bsims","ses
> ims")
      = qui replace thelab = string(myest,"%6.0f") if inlist( _perfmeascode,"bsims","sesims")
      - tempvar lci uci l r
      - qui gen float `lci' = `estimate' + (`se'*invnorm(.025))
      = qui gen float __000002 = myest + (myse*invnorm(.025))
      - qui gen float `uci' = `estimate' + (`se'*invnorm(.975))
      = qui gen float __000003 = myest + (myse*invnorm(.975))
      - qui gen `l' = "("
      = qui gen __000004 = "("
      - qui gen `r' = ")"
      = qui gen __000005 = ")"
      - capture confirm string variable `method'
      = capture confirm string variable mymethod
      - if !_rc {
        rename `method' `method'0
        encode `method'0, generate(`method')
        drop `method'0
        }
      - qui levelsof `method', local(methodlevels)
      = qui levelsof mymethod, local(methodlevels)
      - local nmethods = r(r)
      - if `dgmcreated' == 1 {
      = if 0 == 1 {
        qui gen dgm = 1
        local dgm "dgm"
        local ndgm=1
        }
      - qui gen tokeep = 0
      - foreach pm of local pmlist {
      - qui replace tokeep = 1 if _perfmeascode == "`pm'"
      = qui replace tokeep = 1 if _perfmeascode == "bias"
      - }
      - qui replace tokeep = 1 if _perfmeascode == "`pm'"
      = qui replace tokeep = 1 if _perfmeascode == "relprec"
      - }
      - qui replace tokeep = 1 if _perfmeascode == "`pm'"
      = qui replace tokeep = 1 if _perfmeascode == "power"
      - }
      - qui replace tokeep = 1 if _perfmeascode == "`pm'"
      = qui replace tokeep = 1 if _perfmeascode == "cover"
      - }
      - qui drop if tokeep == 0
      - qui drop tokeep
      - qui levelsof _pm, local(pmlevels)
      - if !mi("`if'") {
      = if !mi("if myesti=="beta" ") {
      - local ampersand = " &"
      - local if = `"`if' `ampersand'"'
      = local if = `"if myesti=="beta"   &"'
      - }
      - else local if "if"
      - local graphpos = `nmethods'*3
      = local graphpos = 2*3
      - local i 0
      - foreach j of local methodlevels {
      - local label`j' : label (`method') `j'
      = local label1 : label (mymethod) 1
      - local ++i
      - local mcol`j' : word `i' of `colors'
      = local mcol1 : word 1 of 
      - if mi("`mcol`j'") local mcol`j' "scheme p`i'"
      = if mi("`mcol1") local mcol1 "scheme p1"
      - local msym`j' : word `i' of `msymbol'
      = local msym1 : word 1 of 
      - if mi("`msym`j'") & `j'==1 local msym`j' O
      = if mi("`msym1") & 1==1 local msym1 O
      - else if mi("`msym`j'") & `j'>1 local msym`j' `msym`=`j'-1'
      = else if mi("`msym1") & 1>1 local msym1 `msym0
      - }
      - local label`j' : label (`method') `j'
      = local label2 : label (mymethod) 2
      - local ++i
      - local mcol`j' : word `i' of `colors'
      = local mcol2 : word 2 of 
      - if mi("`mcol`j'") local mcol`j' "scheme p`i'"
      = if mi("`mcol2") local mcol2 "scheme p2"
      - local msym`j' : word `i' of `msymbol'
      = local msym2 : word 2 of 
      - if mi("`msym`j'") & `j'==1 local msym`j' O
      = if mi("`msym2") & 2==1 local msym2 O
      - else if mi("`msym`j'") & `j'>1 local msym`j' `msym`=`j'-1'
      = else if mi("`msym2") & 2>1 local msym2 `msym1
      - }
      - if !mi("`target'") {
      = if !mi("myestimand") {
      - qui levelsof `target', local(targetlevels) clean
      = qui levelsof myestimand, local(targetlevels) clean
      - local ntargetlevels = r(r)
      - }
      - else {
        local target `""_null""'
        local targetlevels _null
        local ntargetlevels 0
        }
      - if `ntargetlevels'>1 di as text "Drawing `ntargetlevels' graphs (one per target)..."
      = if 1>1 di as text "Drawing 1 graphs (one per target)..."
      - else di as text "Drawing graph..."
Drawing graph...
      - local ndgmvars : word count `dgm'
      = local ndgmvars : word count mydgm
      - if `ndgmvars'>1 {
      = if 1>1 {
        tempvar dgmgroup
        egen `dgmgroup' = group(`dgm'), label
        local varname novarname
        }
      - else local dgmgroup `dgm'
      = else local dgmgroup mydgm
      - qui maketitlevar `dgmgroup', `varname'
      = qui maketitlevar mydgm, 
      - local dgmtitlevar = r(newvars)
      - qui levelsof `dgmtitlevar', local(dgmnames)
      = qui levelsof mydgmtitle, local(dgmnames)
      - local ndgmlevels = r(r)
      - padding `dgmnames', width(`dgmwidth')
      = padding `"mydgm: 1"' `"mydgm: 2"', width(30)
      - local titlepadded = s(titlepadded)
      - if `ndgmvars'>1 local titlepadded `"`"`dgm'"' `"`titlepadded'"'"'
      = if 1>1 local titlepadded `"`"mydgm"' `"                  mydgm: 1                           
>          mydgm: 2                  "'"'
      - qui levelsof _perfmeascode, local(pmlevels)
      - padding `pmlevels', width(`pmwidth') reverse
      = padding `"bias"' `"cover"' `"power"' `"relprec"', width(24) reverse
      - local ytitlepadded = s(titlepadded)
      - foreach thistarget of local targetlevels {
      - if `ntargetlevels'>0 {
      = if 1>0 {
      - local targetcond `target'=="`thistarget'"
      = local targetcond myestimand=="beta"
      - local note `target'=`thistarget'
      = local note myestimand=beta
      - if !mi("`debug'") di as text `"Drawing graph for `targetcond'"'
      = if !mi("") di as text `"Drawing graph for myestimand=="beta""'
      - }
      - else {
        local targetcond 1
        local note
        }
      - local graph_cmd twoway
      - local i 1
      - local graphorder
      - foreach thismethod of local methodlevels {
      - local methtargetcond `method'==`thismethod' & `targetcond'
      = local methtargetcond mymethod==1 & myestimand=="beta"
      - local graphorder `graphorder' `=4*`i'-3' "`method': `label`i''"
      = local graphorder  1 "mymethod: 1"
      - local graph_cmd `graph_cmd' scatter `method' `estimate' if `methtargetcond', mcol(`mcol`i'')
>  msym(`msym`i'') mlab(thelab) ||
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) ||
      - local graph_cmd `graph_cmd' scatter `method' `lci' if `methtargetcond', mlabcol(`mcol`i'') m
> sym(i) mlab(`l') mlabpos(0) ||
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) ||
      - local graph_cmd `graph_cmd' scatter `method' `uci' if `methtargetcond', mlabcol(`mcol`i'') m
> sym(i) mlab(`r') mlabpos(0) ||
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) ||
      - local graph_cmd `graph_cmd' rspike `estimate' `ref' `method' if `methtargetcond', horiz lcol
> (`mcol`i'') ||
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() ||
      - local ++i
      - }
      - local methtargetcond `method'==`thismethod' & `targetcond'
      = local methtargetcond mymethod==2 & myestimand=="beta"
      - local graphorder `graphorder' `=4*`i'-3' "`method': `label`i''"
      = local graphorder 1 "mymethod: 1" 5 "mymethod: 2"
      - local graph_cmd `graph_cmd' scatter `method' `estimate' if `methtargetcond', mcol(`mcol`i'')
>  msym(`msym`i'') mlab(thelab) ||
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() 
> msym() mlab(thelab) ||
      - local graph_cmd `graph_cmd' scatter `method' `lci' if `methtargetcond', mlabcol(`mcol`i'') m
> sym(i) mlab(`l') mlabpos(0) ||
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() 
> msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() ms
> ym(i) mlab(__000004) mlabpos(0) ||
      - local graph_cmd `graph_cmd' scatter `method' `uci' if `methtargetcond', mlabcol(`mcol`i'') m
> sym(i) mlab(`r') mlabpos(0) ||
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() 
> msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() ms
> ym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="beta", 
> mlabcol() msym(i) mlab(__000005) mlabpos(0) ||
      - local graph_cmd `graph_cmd' rspike `estimate' `ref' `method' if `methtargetcond', horiz lcol
> (`mcol`i'') ||
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() 
> msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() ms
> ym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="beta", 
> mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==2 & mye
> stimand=="beta", horiz lcol() ||
      - local ++i
      - }
      - local graph_cmd `graph_cmd' scatter `method' `ref' if `targetcond', msym(i) c(l) col(gray) l
> pattern(dash)
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() 
> msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() ms
> ym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="beta", 
> mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==2 & mye
> stimand=="beta", horiz lcol() || scatter mymethod __000001 if myestimand=="beta", msym(i) c(l) col
> (gray) lpattern(dash)
      - local graph_cmd `graph_cmd' , by(_perfmeascode `dgm', note(`"`note'"') col(`ndgmlevels') xre
> scale title(`titlepadded', size(medium) just(center)) imargin(r=5) `bygraphoptions')
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() 
> msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() ms
> ym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="beta", 
> mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==2 & mye
> stimand=="beta", horiz lcol() || scatter mymethod __000001 if myestimand=="beta", msym(i) c(l) col
> (gray) lpattern(dash) , by(_perfmeascode mydgm, note(`"myestimand=beta"') col(2) xrescale title(  
>                 mydgm: 1                                    mydgm: 2                  , size(mediu
> m) just(center)) imargin(r=5) mlabpos(3))
      - local graph_cmd `graph_cmd' subtitle("") ylab(none)
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() 
> msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() ms
> ym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="beta", 
> mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==2 & mye
> stimand=="beta", horiz lcol() || scatter mymethod __000001 if myestimand=="beta", msym(i) c(l) col
> (gray) lpattern(dash) , by(_perfmeascode mydgm, note(`"myestimand=beta"') col(2) xrescale title(  
>                 mydgm: 1                                    mydgm: 2                  , size(mediu
> m) just(center)) imargin(r=5) mlabpos(3)) subtitle("") ylab(none)
      - local graph_cmd `graph_cmd' ytitle(`"`ytitlepadded'"', size(medium)) yscale(reverse)
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() 
> msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() ms
> ym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="beta", 
> mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==2 & mye
> stimand=="beta", horiz lcol() || scatter mymethod __000001 if myestimand=="beta", msym(i) c(l) col
> (gray) lpattern(dash) , by(_perfmeascode mydgm, note(`"myestimand=beta"') col(2) xrescale title(  
>                 mydgm: 1                                    mydgm: 2                  , size(mediu
> m) just(center)) imargin(r=5) mlabpos(3)) subtitle("") ylab(none) ytitle(`"     relprec          p
> ower           cover             bias       "', size(medium)) yscale(reverse)
      - local graph_cmd `graph_cmd' legend(order(`graphorder'))
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() 
> msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() ms
> ym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="beta", 
> mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==2 & mye
> stimand=="beta", horiz lcol() || scatter mymethod __000001 if myestimand=="beta", msym(i) c(l) col
> (gray) lpattern(dash) , by(_perfmeascode mydgm, note(`"myestimand=beta"') col(2) xrescale title(  
>                 mydgm: 1                                    mydgm: 2                  , size(mediu
> m) just(center)) imargin(r=5) mlabpos(3)) subtitle("") ylab(none) ytitle(`"     relprec          p
> ower           cover             bias       "', size(medium)) yscale(reverse) legend(order(1 "myme
> thod: 1" 5 "mymethod: 2"))
      - if `ntargetlevels'<=1 local graph_cmd `graph_cmd' name(`name'`nameopts')
      = if 1<=1 local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", m
> col() msym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabco
> l() msym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="b
> eta", mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1
>  & myestimand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta",
>  mcol() msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlab
> col() msym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand==
> "beta", mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod=
> =2 & myestimand=="beta", horiz lcol() || scatter mymethod __000001 if myestimand=="beta", msym(i) 
> c(l) col(gray) lpattern(dash) , by(_perfmeascode mydgm, note(`"myestimand=beta"') col(2) xrescale 
> title(                  mydgm: 1                                    mydgm: 2                  , si
> ze(medium) just(center)) imargin(r=5) mlabpos(3)) subtitle("") ylab(none) ytitle(`"     relprec   
>        power           cover             bias       "', size(medium)) yscale(reverse) legend(order
> (1 "mymethod: 1" 5 "mymethod: 2")) name(g2,replace)
      - else local graph_cmd `graph_cmd' name(`name'_`thistarget'`nameopts')
      = else local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol
> () msym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol()
>  msym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta
> ", mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & 
> myestimand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mc
> ol() msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol
> () msym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="be
> ta", mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==2 
> & myestimand=="beta", horiz lcol() || scatter mymethod __000001 if myestimand=="beta", msym(i) c(l
> ) col(gray) lpattern(dash) , by(_perfmeascode mydgm, note(`"myestimand=beta"') col(2) xrescale tit
> le(                  mydgm: 1                                    mydgm: 2                  , size(
> medium) just(center)) imargin(r=5) mlabpos(3)) subtitle("") ylab(none) ytitle(`"     relprec      
>     power           cover             bias       "', size(medium)) yscale(reverse) legend(order(1 
> "mymethod: 1" 5 "mymethod: 2")) name(g2,replace) name(g2_beta,replace)
      - local graph_cmd `graph_cmd' `options'
      = local graph_cmd twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() ms
> ym() mlab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym
> (i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", ml
> abcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myest
> imand=="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() 
> msym() mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() ms
> ym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="beta", 
> mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==2 & mye
> stimand=="beta", horiz lcol() || scatter mymethod __000001 if myestimand=="beta", msym(i) c(l) col
> (gray) lpattern(dash) , by(_perfmeascode mydgm, note(`"myestimand=beta"') col(2) xrescale title(  
>                 mydgm: 1                                    mydgm: 2                  , size(mediu
> m) just(center)) imargin(r=5) mlabpos(3)) subtitle("") ylab(none) ytitle(`"     relprec          p
> ower           cover             bias       "', size(medium)) yscale(reverse) legend(order(1 "myme
> thod: 1" 5 "mymethod: 2")) name(g2,replace) 
      - global F9 `graph_cmd'
      = global F9 twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() msym() m
> lab(thelab) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym(i) ml
> ab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", mlabcol(
> ) msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myestimand=
> ="beta", horiz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() msym()
>  mlab(thelab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() msym(i) 
> mlab(__000004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="beta", mlabco
> l() msym(i) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==2 & myestiman
> d=="beta", horiz lcol() || scatter mymethod __000001 if myestimand=="beta", msym(i) c(l) col(gray)
>  lpattern(dash) , by(_perfmeascode mydgm, note(`"myestimand=beta"') col(2) xrescale title(        
>           mydgm: 1                                    mydgm: 2                  , size(medium) jus
> t(center)) imargin(r=5) mlabpos(3)) subtitle("") ylab(none) ytitle(`"     relprec          power  
>          cover             bias       "', size(medium)) yscale(reverse) legend(order(1 "mymethod: 
> 1" 5 "mymethod: 2")) name(g2,replace)
      - if !mi("`debug'") di as text "Graph command is: " as input `"`graph_cmd'"'
      = if !mi("") di as text "Graph command is: " as input `"twoway scatter mymethod myest if mymet
> hod==1 & myestimand=="beta", mcol() msym() mlab(thelab) || scatter mymethod __000002 if mymethod==
> 1 & myestimand=="beta", mlabcol() msym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003 i
> f mymethod==1 & myestimand=="beta", mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest __
> 000001 mymethod if mymethod==1 & myestimand=="beta", horiz lcol() || scatter mymethod myest if mym
> ethod==2 & myestimand=="beta", mcol() msym() mlab(thelab) || scatter mymethod __000002 if mymethod
> ==2 & myestimand=="beta", mlabcol() msym(i) mlab(__000004) mlabpos(0) || scatter mymethod __000003
>  if mymethod==2 & myestimand=="beta", mlabcol() msym(i) mlab(__000005) mlabpos(0) || rspike myest 
> __000001 mymethod if mymethod==2 & myestimand=="beta", horiz lcol() || scatter mymethod __000001 i
> f myestimand=="beta", msym(i) c(l) col(gray) lpattern(dash) , by(_perfmeascode mydgm, note(`"myest
> imand=beta"') col(2) xrescale title(                  mydgm: 1                                    
> mydgm: 2                  , size(medium) just(center)) imargin(r=5) mlabpos(3)) subtitle("") ylab(
> none) ytitle(`"     relprec          power           cover             bias       "', size(medium)
> ) yscale(reverse) legend(order(1 "mymethod: 1" 5 "mymethod: 2")) name(g2,replace)"'
      - if !mi("`pause'") pause
      = if !mi("") pause
      - `graph_cmd'
      = twoway scatter mymethod myest if mymethod==1 & myestimand=="beta", mcol() msym() mlab(thelab
> ) || scatter mymethod __000002 if mymethod==1 & myestimand=="beta", mlabcol() msym(i) mlab(__00000
> 4) mlabpos(0) || scatter mymethod __000003 if mymethod==1 & myestimand=="beta", mlabcol() msym(i) 
> mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==1 & myestimand=="beta", h
> oriz lcol() || scatter mymethod myest if mymethod==2 & myestimand=="beta", mcol() msym() mlab(thel
> ab) || scatter mymethod __000002 if mymethod==2 & myestimand=="beta", mlabcol() msym(i) mlab(__000
> 004) mlabpos(0) || scatter mymethod __000003 if mymethod==2 & myestimand=="beta", mlabcol() msym(i
> ) mlab(__000005) mlabpos(0) || rspike myest __000001 mymethod if mymethod==2 & myestimand=="beta",
>  horiz lcol() || scatter mymethod __000001 if myestimand=="beta", msym(i) c(l) col(gray) lpattern(
> dash) , by(_perfmeascode mydgm, note(`"myestimand=beta"') col(2) xrescale title(                  
> mydgm: 1                                    mydgm: 2                  , size(medium) just(center))
>  imargin(r=5) mlabpos(3)) subtitle("") ylab(none) ytitle(`"     relprec          power           c
> over             bias       "', size(medium)) yscale(reverse) legend(order(1 "mymethod: 1" 5 "myme
> thod: 2")) name(g2,replace)
option mlabpos() not allowed
        }
      ---------------------------------------------------------------------- end siman_lollyplot ---
    ---------------------------------------------------------------------------------- end siman ---
r(198);

. local g them_

. mac l _g
_g:             them_

. di substr("`g'",length("`g'"),1)
_

. do "C:\Users\rmjwiww\AppData\Local\Temp\STD3cbc_000000.tmp"

. local i 3

. local m3 drop_

.         if substr("`mlab`i'",length("`mlab`i'"),1)=="_" /// remove final _
>                 local mlab`i' = substr("`mlab`i'",1,length("`mlab`i'")-1)

. mac l _m3
_m3:            drop_

. 
end of do-file

. do "C:\Users\rmjwiww\AppData\Local\Temp\STD3cbc_000000.tmp"

. local i 3

. local mlab3 drop_

.         if substr("`mlab`i'",length("`mlab`i'"),1)=="_" /// remove final _
>                 local mlab`i' = substr("`mlab`i'",1,length("`mlab`i'")-1)

. mac l _mlab3
_mlab3:         drop_

. 
end of do-file

. do "C:\Users\rmjwiww\AppData\Local\Temp\STD3cbc_000000.tmp"

. local i 3

. local mlab3 drop_

.         di substr("`mlab`i'",length("`mlab`i'"),1)
3

.         if substr("`mlab`i'",length("`mlab`i'"),1)=="_" /// remove final _
>                 local mlab`i' = substr("`mlab`i'",1,length("`mlab`i'")-1)

. mac l _mlab3
_mlab3:         drop_

. 
end of do-file

. do "C:\Users\rmjwiww\AppData\Local\Temp\STD3cbc_000000.tmp"

. local i 3

. local mlab3 drop_

.         di substr("`mlab`i''",length("`mlab`i'"),1)


.         if substr("`mlab`i''",length("`mlab`i'"),1)=="_" /// remove final _
>                 local mlab`i' = substr("`mlab`i'",1,length("`mlab`i'")-1)

. mac l _mlab3
_mlab3:         drop_

. 
end of do-file

. do "C:\Users\rmjwiww\AppData\Local\Temp\STD3cbc_000000.tmp"

. local i 3

. local mlab3 drop_

.         di substr("`mlab`i''",length("`mlab`i''"),1)
_

.         if substr("`mlab`i''",length("`mlab`i''"),1)=="_" /// remove final _
>                 local mlab`i' = substr("`mlab`i''",1,length("`mlab`i''")-1)

. mac l _mlab3
_mlab3:         drop

. 
end of do-file

. do "C:\Users\rmjwiww\AppData\Local\Temp\STD3cbc_000000.tmp"

. local i 3

. local mlab3 drop__

.         di substr("`mlab`i''",length("`mlab`i''"),1)
_

.         if substr("`mlab`i''",length("`mlab`i''"),1)=="_" /// remove final _
>                 local mlab`i' = substr("`mlab`i''",1,length("`mlab`i''")-1)

. mac l _mlab3
_mlab3:         drop_

. 
end of do-file

. do "C:\Users\rmjwiww\AppData\Local\Temp\STD3cbc_000000.tmp"

. local i 3

. local mlab3 drop

.         di substr("`mlab`i''",length("`mlab`i''"),1)
p

.         if substr("`mlab`i''",length("`mlab`i''"),1)=="_" /// remove final _
>                 local mlab`i' = substr("`mlab`i''",1,length("`mlab`i''")-1)

. mac l _mlab3
_mlab3:         drop

. 
end of do-file

. do "C:\Users\rmjwiww\AppData\Local\Temp\STD3cbc_000000.tmp"

. use extendedtestdata2, clear
file extendedtestdata2.dta not found
r(601);

end of do-file

r(601);

. do "C:\Users\rmjwiww\AppData\Local\Temp\STD3cbc_000000.tmp"

. use data/extendedtestdata_postfile.dta, clear

. 
. * siman setup requires beta, pmiss to be integer
. gen true = 1 if estimand=="mean0"
(72,000 missing values generated)

. replace true = 1+beta if estimand=="mean1"
(36,000 real changes made)

. replace true = beta if estimand=="effect"
(36,000 real changes made)

. 
. rename beta _beta

. gen beta=string(_beta)

. sencode beta, replace

. 
. rename pmiss _pmiss

. gen pmiss=string(_pmiss)

. sencode pmiss, replace

. 
. drop _pmiss _beta

. save extendedtestdata2, replace
(file extendedtestdata2.dta not found)
file extendedtestdata2.dta saved

. 
end of do-file

. do "C:\Users\rmjwiww\AppData\Local\Temp\STD3cbc_000000.tmp"

. use extendedtestdata2, clear

. replace method=="CCA_" if method=="CCA"
== invalid name
r(198);

end of do-file

r(198);

. do "C:\Users\rmjwiww\AppData\Local\Temp\STD3cbc_000000.tmp"

. * method is string (as in source data)
. use extendedtestdata2, clear

. replace method="CCA_" if method=="CCA"
(36,000 real changes made)

. tab method if beta==1 & pmiss==1 & mech=="MCAR" & estimand=="effect" & rep>0, su(b) // CCA, MeanIm
> p, Noadj

            |            Summary of b
     method |        Mean   Std. dev.       Freq.
------------+------------------------------------
       CCA_ |   .00253414   .15817009       1,000
    MeanImp |   .00217613    .1525731       1,000
      Noadj |  -.00349635   .19110948       1,000
------------+------------------------------------
      Total |   .00040464   .16811256       3,000

. siman setup, rep(rep) dgm(beta pmiss mech) method(method) target(estimand) est(b) se(se) true(true
> )
  variable mech was long now byte
  (324,000 bytes saved)
Warning: variable mech, which appears in dgm(), was stored as a string. It has been
encoded as numeric so that subsequent siman commands will work. If you require a
different order, encode mech as numeric before running -siman setup-.

                   SUMMARY OF DATA
_____________________________________________________

The siman format is:              format 1: long-long
The format for targets is:        long
The format for methods is:        long
The number of targets is:         3
The target values are:            effect mean0 mean1

The number of methods is:         3
The method values are:            CCA

Data generating mechanism (dgm)
The total number of dgms is:      12
The dgm variables (# levels):     beta (3) pmiss (2) mech (2) 

Estimates are contained in the dataset

The estimates variable is:        b
The se variable is:               se
The df variable is:               N/A
The ci variables are:             N/A
The p variable is:                N/A
The true variable is:             true
_____________________________________________________

. qui siman analyse
CCA not found
r(111);

end of do-file

r(111);

. do "C:\Users\rmjwiww\AppData\Local\Temp\STD3cbc_000000.tmp"

. * method is string (as in source data)
. use extendedtestdata2, clear

. replace method="CCA_" if method=="CCA"
(36,000 real changes made)

. tab method if beta==1 & pmiss==1 & mech=="MCAR" & estimand=="effect" & rep>0, su(b) // CCA, MeanIm
> p, Noadj

            |            Summary of b
     method |        Mean   Std. dev.       Freq.
------------+------------------------------------
       CCA_ |   .00253414   .15817009       1,000
    MeanImp |   .00217613    .1525731       1,000
      Noadj |  -.00349635   .19110948       1,000
------------+------------------------------------
      Total |   .00040464   .16811256       3,000

. siman setup, rep(rep) dgm(beta pmiss mech) method(method) target(estimand) est(b) se(se) true(true
> )
  variable mech was long now byte
  (324,000 bytes saved)
Warning: variable mech, which appears in dgm(), was stored as a string. It has been
encoded as numeric so that subsequent siman commands will work. If you require a
different order, encode mech as numeric before running -siman setup-.

                   SUMMARY OF DATA
_____________________________________________________

The siman format is:              format 1: long-long
The format for targets is:        long
The format for methods is:        long
The number of targets is:         3
The target values are:            effect mean0 mean1

The number of methods is:         3
The method values are:            CCA

Data generating mechanism (dgm)
The total number of dgms is:      12
The dgm variables (# levels):     beta (3) pmiss (2) mech (2) 

Estimates are contained in the dataset

The estimates variable is:        b
The se variable is:               se
The df variable is:               N/A
The ci variables are:             N/A
The p variable is:                N/A
The true variable is:             true
_____________________________________________________

. qui siman analyse
CCA not found
r(111);

end of do-file

r(111);

. do "C:\Users\rmjwiww\AppData\Local\Temp\STD3cbc_000000.tmp"

. * method is string (as in source data)
. use extendedtestdata2, clear

. *replace method="CCA_" if method=="CCA"
. tab method if beta==1 & pmiss==1 & mech=="MCAR" & estimand=="effect" & rep>0, su(b) // CCA, MeanIm
> p, Noadj

            |            Summary of b
     method |        Mean   Std. dev.       Freq.
------------+------------------------------------
        CCA |   .00253414   .15817009       1,000
    MeanImp |   .00217613    .1525731       1,000
      Noadj |  -.00349635   .19110948       1,000
------------+------------------------------------
      Total |   .00040464   .16811256       3,000

. siman setup, rep(rep) dgm(beta pmiss mech) method(method) target(estimand) est(b) se(se) true(true
> )
  variable mech was long now byte
  (324,000 bytes saved)
Warning: variable mech, which appears in dgm(), was stored as a string. It has been
encoded as numeric so that subsequent siman commands will work. If you require a
different order, encode mech as numeric before running -siman setup-.

                   SUMMARY OF DATA
_____________________________________________________

The siman format is:              format 1: long-long
The format for targets is:        long
The format for methods is:        long
The number of targets is:         3
The target values are:            effect mean0 mean1

The number of methods is:         3
The method values are:            CCA MeanImp Noadj

Data generating mechanism (dgm)
The total number of dgms is:      12
The dgm variables (# levels):     beta (3) pmiss (2) mech (2) 

Estimates are contained in the dataset

The estimates variable is:        b
The se variable is:               se
The df variable is:               N/A
The ci variables are:             N/A
The p variable is:                N/A
The true variable is:             true
_____________________________________________________

. qui siman analyse

. siman nestloop empse if estimand=="effect", name(mstring,replace)
Drawing graph...

. 
end of do-file

. do "C:\Users\rmjwiww\AppData\Local\Temp\STD3cbc_000000.tmp"

. * method is string (as in source data)
. use extendedtestdata2, clear

. replace method="CCA_" if method=="CCA"
(36,000 real changes made)

. tab method if beta==1 & pmiss==1 & mech=="MCAR" & estimand=="effect" & rep>0, su(b) // CCA, MeanIm
> p, Noadj

            |            Summary of b
     method |        Mean   Std. dev.       Freq.
------------+------------------------------------
       CCA_ |   .00253414   .15817009       1,000
    MeanImp |   .00217613    .1525731       1,000
      Noadj |  -.00349635   .19110948       1,000
------------+------------------------------------
      Total |   .00040464   .16811256       3,000

. siman setup, rep(rep) dgm(beta pmiss mech) method(method) target(estimand) est(b) se(se) true(true
> )
  variable mech was long now byte
  (324,000 bytes saved)
Warning: variable mech, which appears in dgm(), was stored as a string. It has been
encoded as numeric so that subsequent siman commands will work. If you require a
different order, encode mech as numeric before running -siman setup-.

                   SUMMARY OF DATA
_____________________________________________________

The siman format is:              format 1: long-long
The format for targets is:        long
The format for methods is:        long
The number of targets is:         3
The target values are:            effect mean0 mean1

The number of methods is:         3
The method values are:            CCA

Data generating mechanism (dgm)
The total number of dgms is:      12
The dgm variables (# levels):     beta (3) pmiss (2) mech (2) 

Estimates are contained in the dataset

The estimates variable is:        b
The se variable is:               se
The df variable is:               N/A
The ci variables are:             N/A
The p variable is:                N/A
The true variable is:             true
_____________________________________________________

. qui siman analyse
CCA not found
r(111);

end of do-file

r(111);

. do "C:\Users\rmjwiww\AppData\Local\Temp\STD3cbc_000000.tmp"

. * method is string (as in source data)
. use extendedtestdata2, clear

. replace method="CCA_" if method=="CCA"
(36,000 real changes made)

. tab method if beta==1 & pmiss==1 & mech=="MCAR" & estimand=="effect" & rep>0, su(b) // CCA, MeanIm
> p, Noadj

            |            Summary of b
     method |        Mean   Std. dev.       Freq.
------------+------------------------------------
       CCA_ |   .00253414   .15817009       1,000
    MeanImp |   .00217613    .1525731       1,000
      Noadj |  -.00349635   .19110948       1,000
------------+------------------------------------
      Total |   .00040464   .16811256       3,000

. siman setup, rep(rep) dgm(beta pmiss mech) method(method) target(estimand) est(b) se(se) true(true
> )
  variable mech was long now byte
  (324,000 bytes saved)
Warning: variable mech, which appears in dgm(), was stored as a string. It has been
encoded as numeric so that subsequent siman commands will work. If you require a
different order, encode mech as numeric before running -siman setup-.

                   SUMMARY OF DATA
_____________________________________________________

The siman format is:              format 1: long-long
The format for targets is:        long
The format for methods is:        long
The number of targets is:         3
The target values are:            effect mean0 mean1

The number of methods is:         3
The method values are:            CCA

Data generating mechanism (dgm)
The total number of dgms is:      12
The dgm variables (# levels):     beta (3) pmiss (2) mech (2) 

Estimates are contained in the dataset

The estimates variable is:        b
The se variable is:               se
The df variable is:               N/A
The ci variables are:             N/A
The p variable is:                N/A
The true variable is:             true
_____________________________________________________

. siman analyse
CCA not found
r(111);

end of do-file

r(111);

. do "C:\Users\rmjwiww\AppData\Local\Temp\STD3cbc_000000.tmp"

. * method is string (as in source data)
. use extendedtestdata2, clear

. replace method="CCA_" if method=="CCA"
(36,000 real changes made)

. tab method if beta==1 & pmiss==1 & mech=="MCAR" & estimand=="effect" & rep>0, su(b) // CCA, MeanIm
> p, Noadj

            |            Summary of b
     method |        Mean   Std. dev.       Freq.
------------+------------------------------------
       CCA_ |   .00253414   .15817009       1,000
    MeanImp |   .00217613    .1525731       1,000
      Noadj |  -.00349635   .19110948       1,000
------------+------------------------------------
      Total |   .00040464   .16811256       3,000

. siman setup, rep(rep) dgm(beta pmiss mech) method(method) target(estimand) est(b) se(se) true(true
> )
  variable mech was long now byte
  (324,000 bytes saved)
Warning: variable mech, which appears in dgm(), was stored as a string. It has been
encoded as numeric so that subsequent siman commands will work. If you require a
different order, encode mech as numeric before running -siman setup-.

                   SUMMARY OF DATA
_____________________________________________________

The siman format is:              format 1: long-long
The format for targets is:        long
The format for methods is:        long
The number of targets is:         3
The target values are:            effect mean0 mean1

The number of methods is:         3
The method values are:            CCA

Data generating mechanism (dgm)
The total number of dgms is:      12
The dgm variables (# levels):     beta (3) pmiss (2) mech (2) 

Estimates are contained in the dataset

The estimates variable is:        b
The se variable is:               se
The df variable is:               N/A
The ci variables are:             N/A
The p variable is:                N/A
The true variable is:             true
_____________________________________________________

. tr 2: siman analyse
    - `macval(cmdline)'
    =  siman analyse
      ------------------------------------------------------------------------------ begin siman ---
      - version 13
      - syntax [anything] [if] [in], [which *]
      - if "`anything'"=="cms" local anything comparemethodsscatter
      = if "analyse"=="cms" local anything comparemethodsscatter
      - foreach thing in `_dta[siman_allthings]' {
      = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifse
> tup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget numm
> ethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptionty
> pe cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun
>  m1 t1 {
      - local `thing' : char _dta[siman_`thing']
      = local allthings : char _dta[siman_allthings]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local rep : char _dta[siman_rep]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local dgm : char _dta[siman_dgm]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local target : char _dta[siman_target]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local method : char _dta[siman_method]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local estimate : char _dta[siman_estimate]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local se : char _dta[siman_se]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local df : char _dta[siman_df]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local ci : char _dta[siman_ci]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local p : char _dta[siman_p]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local true : char _dta[siman_true]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local order : char _dta[siman_order]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local lci : char _dta[siman_lci]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local uci : char _dta[siman_uci]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local ifsetup : char _dta[siman_ifsetup]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local insetup : char _dta[siman_insetup]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local format : char _dta[siman_format]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local targetformat : char _dta[siman_targetformat]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local methodformat : char _dta[siman_methodformat]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local nformat : char _dta[siman_nformat]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local ntarget : char _dta[siman_ntarget]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local ndgm : char _dta[siman_ndgm]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local nmethod : char _dta[siman_nmethod]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local numtarget : char _dta[siman_numtarget]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local valtarget : char _dta[siman_valtarget]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local nummethod : char _dta[siman_nummethod]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local valmethod : char _dta[siman_valmethod]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local ntrue : char _dta[siman_ntrue]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local ntruevalue : char _dta[siman_ntruevalue]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local dgmvar : char _dta[siman_dgmvar]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local numdgm : char _dta[siman_numdgm]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local dgmcreated : char _dta[siman_dgmcreated]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local targetlabels : char _dta[siman_targetlabels]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local methodcreated : char _dta[siman_methodcreated]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local descriptiontype : char _dta[siman_descriptiontype]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local cidescriptiontype : char _dta[siman_cidescriptiontype]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local truedescriptiontype : char _dta[siman_truedescriptiontype]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local estvars : char _dta[siman_estvars]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local sevars : char _dta[siman_sevars]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local dfvars : char _dta[siman_dfvars]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local civars : char _dta[siman_civars]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local pvars : char _dta[siman_pvars]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local truevars : char _dta[siman_truevars]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local simansetuprun : char _dta[siman_simansetuprun]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local m1 : char _dta[siman_m1]
      - }
      - local `thing' : char _dta[siman_`thing']
      = local t1 : char _dta[siman_t1]
      - }
      - local subcmds0 setup
      - local subcmds1 describe analyse table reshape lollyplot zipplot comparemethodsscatter blanda
> ltman swarm scatter nestloop trellis
      - local subcmds2
      - local subcmds `subcmds0' `subcmds1' `subcmds'
      = local subcmds setup describe analyse table reshape lollyplot zipplot comparemethodsscatter b
> landaltman swarm scatter nestloop trellis 
      - if mi("`anything'") {
      = if mi("analyse") {
        di as error "Syntax: siman <subcommand>"
        exit 198
        }
      - if "`anything'"=="which" {
      = if "analyse"=="which" {
        which siman
        foreach subcmd of local subcmds {
        cap noi which siman_`subcmd'
        }
        exit
        }
      - gettoken subcmd rest : anything
      - if length("`subcmd'")>=3 {
      = if length("analyse")>=3 {
      - foreach thing in `subcmds' {
      = foreach thing in setup describe analyse table reshape lollyplot zipplot comparemethodsscatte
> r blandaltman swarm scatter nestloop trellis {
      - if strpos("`thing'","`subcmd'")==1 {
      = if strpos("setup","analyse")==1 {
        local subcmd `thing'
        local knowncmd 1
        }
      - }
      - if strpos("`thing'","`subcmd'")==1 {
      = if strpos("describe","analyse")==1 {
        local subcmd `thing'
        local knowncmd 1
        }
      - }
      - if strpos("`thing'","`subcmd'")==1 {
      = if strpos("analyse","analyse")==1 {
      - local subcmd `thing'
      = local subcmd analyse
      - local knowncmd 1
      - }
      - }
      - if strpos("`thing'","`subcmd'")==1 {
      = if strpos("table","analyse")==1 {
        local subcmd `thing'
        local knowncmd 1
        }
      - }
      - if strpos("`thing'","`subcmd'")==1 {
      = if strpos("reshape","analyse")==1 {
        local subcmd `thing'
        local knowncmd 1
        }
      - }
      - if strpos("`thing'","`subcmd'")==1 {
      = if strpos("lollyplot","analyse")==1 {
        local subcmd `thing'
        local knowncmd 1
        }
      - }
      - if strpos("`thing'","`subcmd'")==1 {
      = if strpos("zipplot","analyse")==1 {
        local subcmd `thing'
        local knowncmd 1
        }
      - }
      - if strpos("`thing'","`subcmd'")==1 {
      = if strpos("comparemethodsscatter","analyse")==1 {
        local subcmd `thing'
        local knowncmd 1
        }
      - }
      - if strpos("`thing'","`subcmd'")==1 {
      = if strpos("blandaltman","analyse")==1 {
        local subcmd `thing'
        local knowncmd 1
        }
      - }
      - if strpos("`thing'","`subcmd'")==1 {
      = if strpos("swarm","analyse")==1 {
        local subcmd `thing'
        local knowncmd 1
        }
      - }
      - if strpos("`thing'","`subcmd'")==1 {
      = if strpos("scatter","analyse")==1 {
        local subcmd `thing'
        local knowncmd 1
        }
      - }
      - if strpos("`thing'","`subcmd'")==1 {
      = if strpos("nestloop","analyse")==1 {
        local subcmd `thing'
        local knowncmd 1
        }
      - }
      - if strpos("`thing'","`subcmd'")==1 {
      = if strpos("trellis","analyse")==1 {
        local subcmd `thing'
        local knowncmd 1
        }
      - }
      - }
      - cap which siman_`subcmd'
      = cap which siman_analyse
      - if _rc {
        di as error "`subcmd' is not a valid siman subcommand"
        if length("`subcmd'")<3 di as error "Minimum abbreviation length is 3"
        exit 198
        }
      - local type0 : list subcmd in subcmds0
      - if `type0' & !mi("`allthings'") {
      = if 0 & !mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup i
> nsetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod
>  valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype ci
> descriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t
> 1") {
        di as error "Data are already in siman format"
        exit 459
        }
      - local type1 : list subcmd in subcmds1
      - if `type1' & mi("`allthings'") {
      = if 1 & mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup in
> setup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod 
> valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cid
> escriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1
> ") {
        di as error "Data are not in siman format: use siman setup"
        exit 459
        }
      - if mi(`"`options'"') siman_`subcmd' `rest' `if' `in'
      = if mi(`""') siman_analyse   
        -------------------------------------------------------------------- begin siman_analyse ---
        - version 15
        - syntax [anything] [if], [PERFONLY replace noTABle]
        - capture which simsum.ado
        - if _rc == 111 {
          di as error "simsum needs to be installed to run siman analyse. Please use {stata: ssc ins
> tall simsum}"
          exit 498
          }
        - vercheck simsum, vermin(2.0.3) quietly
        - foreach thing in `_dta[siman_allthings]' {
        = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci if
> setup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nu
> mmethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated description
> type cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetupr
> un m1 t1 {
        - local `thing' : char _dta[siman_`thing']
        = local allthings : char _dta[siman_allthings]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local rep : char _dta[siman_rep]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local dgm : char _dta[siman_dgm]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local target : char _dta[siman_target]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local method : char _dta[siman_method]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local estimate : char _dta[siman_estimate]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local se : char _dta[siman_se]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local df : char _dta[siman_df]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local ci : char _dta[siman_ci]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local p : char _dta[siman_p]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local true : char _dta[siman_true]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local order : char _dta[siman_order]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local lci : char _dta[siman_lci]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local uci : char _dta[siman_uci]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local ifsetup : char _dta[siman_ifsetup]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local insetup : char _dta[siman_insetup]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local format : char _dta[siman_format]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local targetformat : char _dta[siman_targetformat]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local methodformat : char _dta[siman_methodformat]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local nformat : char _dta[siman_nformat]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local ntarget : char _dta[siman_ntarget]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local ndgm : char _dta[siman_ndgm]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local nmethod : char _dta[siman_nmethod]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local numtarget : char _dta[siman_numtarget]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local valtarget : char _dta[siman_valtarget]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local nummethod : char _dta[siman_nummethod]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local valmethod : char _dta[siman_valmethod]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local ntrue : char _dta[siman_ntrue]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local ntruevalue : char _dta[siman_ntruevalue]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local dgmvar : char _dta[siman_dgmvar]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local numdgm : char _dta[siman_numdgm]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local dgmcreated : char _dta[siman_dgmcreated]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local targetlabels : char _dta[siman_targetlabels]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local methodcreated : char _dta[siman_methodcreated]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local descriptiontype : char _dta[siman_descriptiontype]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local cidescriptiontype : char _dta[siman_cidescriptiontype]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local truedescriptiontype : char _dta[siman_truedescriptiontype]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local estvars : char _dta[siman_estvars]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local sevars : char _dta[siman_sevars]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local dfvars : char _dta[siman_dfvars]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local civars : char _dta[siman_civars]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local pvars : char _dta[siman_pvars]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local truevars : char _dta[siman_truevars]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local simansetuprun : char _dta[siman_simansetuprun]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local m1 : char _dta[siman_m1]
        - }
        - local `thing' : char _dta[siman_`thing']
        = local t1 : char _dta[siman_t1]
        - }
        - if "`method'"=="" {
        = if "method"=="" {
          di as error "The variable 'method' is missing so siman analyse can not be run.  Please cre
> ate a variable in your dataset called method containing the method value(s)."
          exit 498
          }
        - if "`simananalyserun'"=="1" & "`replace'" == "" {
        = if ""=="1" & "" == "" {
          di as error "There are already performance measures in the dataset.  If you would like to 
> replace these, please use the 'replace' option"
          exit 498
          }
        - if mi("`estimate'") | mi("`se'") {
        = if mi("b") | mi("se") {
          di as error "siman analyse requires est() and se() to be specified in set-up"
          exit 498
          }
        - local estimatesindi = (`rep'[_N]>0)
        = local estimatesindi = (rep[_N]>0)
        - if "`simananalyserun'"=="1" & "`replace'" == "replace" & `estimatesindi'==1 {
        = if ""=="1" & "" == "replace" & 1==1 {
          qui drop if `rep'<0
          qui drop _perfmeascode
          qui drop _dataset
          }
        - else if "`simananalyserun'"=="1" & "`replace'" == "replace" & `estimatesindi'==0 {
        = else if ""=="1" & "" == "replace" & 1==0 {
          di as error "There are no estimates data in the data set.  Please re-load data and use sim
> an setup to import data."
          exit 498
          }
        - local simananalyserun = 0
        - if "`simansetuprun'"=="0" | "`simansetuprun'"=="" {
        = if "1"=="0" | "1"=="" {
          di as error "siman setup has not been run.  Please use siman setup first before siman anal
> yse."
          exit 498
          }
        - cap confirm variable `true'
        = cap confirm variable true
        - if _rc==0 local truevariable `true'
        = if _rc==0 local truevariable true
        - if ("`if'"=="" & "`ifsetup'"!="") local ifanalyse = `"`ifsetup'"'
        = if (""=="" & ""!="") local ifanalyse = `""'
        - else local ifanalyse = `"`if'"'
        = else local ifanalyse = `""'
        - qui tempvar touse
        - qui generate `touse' = 0
        = qui generate __000000 = 0
        - qui replace `touse' = 1 `ifanalyse'
        = qui replace __000000 = 1 
        - preserve
        - if `nformat'!=1 {
        = if 1!=1 {
          qui siman_reshape, longlong
          local method method
          }
        - qui sort `dgm' `target' `method' `touse'
        = qui sort beta pmiss mech estimand method __000000
        - capture by `dgm' `target' `method': assert `touse'==`touse'[_n-1] if _n>1
        = capture by beta pmiss mech estimand method: assert __000000==__000000[_n-1] if _n>1
        - if _rc == 9 {
          di as error "The 'if' option can not be applied to 'rep' in siman analyse."
          exit 498
          }
        - restore
        - qui keep if `touse'
        = qui keep if __000000
        - qui unab allnames : *
        - tempfile estimatesdata
        - qui save `estimatesdata'
        = qui save C:\Users\rmjwiww\AppData\Local\Temp\ST_3cbc_000002.tmp
        - qui drop if `rep'<0
        = qui drop if rep<0
        - local methodstringindi = 0
        - capture confirm string variable `method'
        = capture confirm string variable method
        - if !_rc local methodstringindi = 1
        - local optionlist `estimate' `se'
        = local optionlist b se
        - foreach u of var * {
        - if substr("`u'",strlen("`u'"),1)=="_" {
        = if substr("rep",strlen("rep"),1)=="_" {
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          }
          }
        - }
        - if substr("`u'",strlen("`u'"),1)=="_" {
        = if substr("method",strlen("method"),1)=="_" {
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          }
          }
        - }
        - if substr("`u'",strlen("`u'"),1)=="_" {
        = if substr("estimand",strlen("estimand"),1)=="_" {
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          }
          }
        - }
        - if substr("`u'",strlen("`u'"),1)=="_" {
        = if substr("b",strlen("b"),1)=="_" {
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          }
          }
        - }
        - if substr("`u'",strlen("`u'"),1)=="_" {
        = if substr("se",strlen("se"),1)=="_" {
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          }
          }
        - }
        - if substr("`u'",strlen("`u'"),1)=="_" {
        = if substr("true",strlen("true"),1)=="_" {
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          }
          }
        - }
        - if substr("`u'",strlen("`u'"),1)=="_" {
        = if substr("beta",strlen("beta"),1)=="_" {
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          }
          }
        - }
        - if substr("`u'",strlen("`u'"),1)=="_" {
        = if substr("pmiss",strlen("pmiss"),1)=="_" {
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          }
          }
        - }
        - if substr("`u'",strlen("`u'"),1)=="_" {
        = if substr("mech",strlen("mech"),1)=="_" {
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          }
          }
        - }
        - if substr("`u'",strlen("`u'"),1)=="_" {
        = if substr("__000000",strlen("__000000"),1)=="_" {
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          }
          }
        - }
        - local estchange = 0
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" {
        = if substr("b",strlen("b"),1)=="_" {
          local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
          local estchange = 1
          }
        - local sechange = 0
        - if substr("`se'",strlen("`se'"),1)=="_" {
        = if substr("se",strlen("se"),1)=="_" {
          local se = substr("`se'", 1, index("`se'","_") - 1)
          local sechange = 1
          }
        - local optionlist `estimate' `se'
        = local optionlist b se
        - if `nformat'==1 {
        = if 1==1 {
        - local methodformat : value label `method'
        = local methodformat : value label method
        - qui order `rep' `dgm' `target' `method'
        = qui order rep beta pmiss mech estimand method
        - qui sort `rep' `dgm' `target' `method'
        = qui sort rep beta pmiss mech estimand method
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 3
        - qui levels `method', local(levels)
        = qui levels method, local(levels)
        - tokenize `"`levels'"'
        = tokenize `"`"CCA_"' `"MeanImp"' `"Noadj"'"'
        - forvalues f = 1/`nmethodlabels' {
        = forvalues f = 1/3 {
        - if substr("``f''",strlen("``f''"),1)=="_" local f = substr("``f''", 1, index("``f''","_") 
> - 1)
        = if substr("CCA_",strlen("CCA_"),1)=="_" local f = substr("CCA_", 1, index("CCA_","_") - 1)
        - local methodlabel`f' = "``f''"
        = local methodlabelCCA = ""
        - if `f'==1 local methodlist `methodlabel`f''
        = if CCA==1 local methodlist 
CCA not found
          else if `f'>=2 local methodlist `methodlist' `methodlabel`f''
          }
          local valmethod = "`methodlist'"
          local estsimsum = "`estimate'"
          local sesimsum = "`se'"
          capture confirm variable _perfmeascode
          if !_rc {
          di as error "siman would like to name a variable '_perfmeascode', but that name already ex
> ists in your dataset.  Please rename your variable _perfmeascode as something else."
          exit 498
          }
          capture confirm variable _dataset
          if !_rc {
          di as error "siman would like to name a variable '_dataset', but that name already exists 
> in your data.  Please rename your variable _dataset as something else."
          exit 498
          }
          qui simsum `estsimsum' `if', true(`true') se(`sesimsum') method(`method') id(`rep') by(`tr
> uevariable' `dgm' `target') max(20) `anything' clear mcse gen(_perfmeas)
          foreach v in `methodlist' {
          if !mi("`se'") {
          qui rename `estimate'`v'_mcse `se'`v'
          }
          else qui rename `estimate'`v'_mcse se`v'
          }
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          if `methodstringindi'==1 {
          qui reshape long `optionlistreshape', i(`dgm' `target' _perfmeasnum) j(`method' "`valmetho
> d'") string
          }
          else {
          qui reshape long `optionlistreshape', i(`dgm' `target' _perfmeasnum) j(`method' "`valmetho
> d'")
          label value `method' `methodformat'
          }
          }
        ---------------------------------------------------------------------- end siman_analyse ---
      -------------------------------------------------------------------------------- end siman ---
r(111);

end of do-file

r(111);

. do "C:\Users\rmjwiww\AppData\Local\Temp\STD3cbc_000000.tmp"

. use `pathtest'data/simlongESTPM_longE_longM.dta, clear

. 
end of do-file

. de

Contains data from data/simlongESTPM_longE_longM.dta
 Observations:         8,000                  
    Variables:             7                  21 Jul 2023 14:50
----------------------------------------------------------------------------------------------------
Variable      Storage   Display    Value
    name         type    format    label      Variable label
----------------------------------------------------------------------------------------------------
rep             float   %43.0g     perfmeasnum
                                              dataset number
dgm             float   %9.0g                 
estimand        str5    %9s                   
method          byte    %9.0g                 
true            float   %9.0g                 
est             float   %9.0g                 
se              float   %9.0g                 
----------------------------------------------------------------------------------------------------
Sorted by: rep  dgm  estimand  method

. tab method

     method |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 |      4,000       50.00       50.00
          2 |      4,000       50.00      100.00
------------+-----------------------------------
      Total |      8,000      100.00

. do "C:\ian\git\siman\Ella_testing\siman_nestloop_test.do"

. /*
> test new siman nestloop
> siman_nestloop_test.do
> IW 14/8/2023
> updated 16/8/2023 
> 17/8/2023 added tests of dgmorder and edge cases
> */
. 
. prog drop _all

. local path C:\ian\git\siman\ // for IW only

. adopath ++ `path'
  [1]              "C:\ian\git\siman\"
  [2]              "c:\ian\git\siman"
  [3]  (BASE)      "C:\Program Files\Stata17\ado\base/"
  [4]  (SITE)      "C:\Program Files\Stata17\ado\site/"
  [5]              "."
  [6]  (PERSONAL)  "n:\Home\ado\personal/"
  [7]  (PLUS)      "n:\Home\ado\plus/"
  [8]  (OLDPLACE)  "c:\ado/"

. cd `path'Ella_testing
C:\ian\git\siman\Ella_testing

. cap log close
