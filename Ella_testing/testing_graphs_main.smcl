{smcl}
{com}{sf}{ul off}{txt}{.-}
      name:  {res}<unnamed>
       {txt}log:  {res}C:\git\siman\Ella_testing\testing_graphs_main.smcl
  {txt}log type:  {res}smcl
 {txt}opened on:  {res}14 Nov 2023, 10:55:12
{txt}
{com}. siman which
{txt}C:\git\siman\siman.ado
{res}*!version 0.3  08aug2023
{txt}C:\git\siman\siman_setup.ado
{res}*!   version 0.8.5  13nov2023
{txt}C:\git\siman\siman_describe.ado
{res}*! version 0.5   17oct2022  
{txt}C:\git\siman\siman_analyse.ado
{res}*! version 0.6.10 13nov2023
{txt}C:\git\siman\siman_table.ado
{res}*! version 0.8.1   25oct2023
{txt}C:\git\siman\siman_reshape.ado
{res}*!  version 0.3.4   06nov2023
{txt}C:\git\siman\siman_lollyplot.ado
{res}*! version 1.13.1  25oct2023
{txt}C:\git\siman\siman_zipplot.ado
{res}*! version 1.8.12 25oct2023
{txt}C:\git\siman\siman_comparemethodsscatter.ado
{res}*! version 1.9.18 25oct2023
{txt}C:\git\siman\siman_blandaltman.ado
{res}*! version 1.6.11 16oct2023  EMZ produce error message if >=, <= or methlist(x/y) is used.
{txt}C:\git\siman\siman_swarm.ado
{res}*! version 1.9.7 03oct2023
{txt}C:\git\siman\siman_scatter.ado
{res}*! version 1.6.7 03oct2023
{txt}C:\git\siman\siman_nestloop.ado
{res}*! version 1.8.2   17aug2023
{txt}
{com}. 
. ********************************
. ********************************
. * DGM defined by 1 variable:
. * numeric
. * numeric with string labels
. * string
. * missing
. 
. * DGM defined by multiple variables with multiple levels:
. * numeric
. * numeric with string labels
. * string
. 
. * TARGET and METHOD:
. * wide or long
. * numeric
. * numeric with string labels
. * string
. * missing
. 
. * method: methlist option for subset of multiple methods
. 
. * TRUE
. * numeric value
. * numeric variable 1 level
. * numeric variable >1 level
. * missing
. ********************************
. ********************************
. 
. 
. * DGM numeric, 1 var
. *********************
. * target long and string, method long and numeric, true variable 1 level
. use data/simlongESTPM_longE_longM.dta, clear
{txt}
{com}. siman setup, rep(rep) dgm(dgm) target(estimand) method(method) estimate(est) se(se) true(true)

{txt}{col 20}SUMMARY OF DATA
_____________________________________________________

The siman format is:{res}{col 35}format 1: long-long
{txt}The format for targets is:{res}{col 35}long
{txt}The format for methods is:{res}{col 35}long
{txt}The number of targets is:{res}{col 35}2
{txt}The target values are:{res}{col 35}beta gamma

{txt}The number of methods is:{res}{col 35}2
{txt}The method values are:{res}{col 35}1 2

Data generating mechanism (dgm)
{txt}The total number of dgms is: {res}{col 35}2
{txt}The dgm variables (# levels): {res}{col 35}dgm (2) 

Estimates are contained in the dataset

{txt}The estimates variable is:{res}{col 35}est
{txt}The se variable is:{res}{col 35}se
{txt}The df variable is:{res}{col 35}N/A
{txt}The ci variables are:{res}{col 35}N/A
{txt}The p variable is:{res}{col 35}N/A
{txt}The true variable is:{res}{col 35}true
{txt}_____________________________________________________

{com}. siman comparemethodsscatter if estimand=="beta" & dgm==2
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    true
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number true
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("est",strlen("est"),1)=="_" local estimate = substr("est", 1, index("est","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("true",strlen("true"),1)=="_" local true = substr("true", 1, index("true","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    true
        - local numberdgms: word count `dgm'
        = local numberdgms: word count dgm
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 1!=1 local optionlist est se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 2
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 1 {c -(}
          - capture assert `varlist' == int(`varlist') if `touse'
          = capture assert method == int(method) if __000003
          - if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
          - tempname Vals
          - qui tab `varlist' if `touse', `missing' matrow(`Vals')
          = qui tab method if __000003,  matrow(__000004)
          - local nvals = r(r)
          - forval i = 1 / `nvals' {c -(}
          = forval i = 1 / 2 {c -(}
          - local val = `Vals'[`i',1]
          = local val = __000004[1,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 1 < 2 local vals "1 "
          - else local vals "`vals'`val'"
          = else local vals "1 1"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[2,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 2 < 2 local vals "1 2 "
          - else local vals "`vals'`val'"
          = else local vals "1 2"
          - {c )-}
          - {c )-}
          - else {c -(}
            tempvar select counter
            bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
            generate `counter' = sum(`select') * (`select' == 1)
            sort `counter'
            qui count if `counter' == 0
            local j = 1 + r(N)
            local nvals = _N
            if "`clean'" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
            else {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
            else local vals `"`vals'`"`=`varlist'[`i']'"'"'
            {c )-}
            {c )-}
            {c )-}
          - di as txt `"`vals'"'
          = di as txt `"1 2"'
          - return local levels `"`vals'"'
          = return local levels `"1 2"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"1 2"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"1 2"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/2 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("1",strlen("1"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "1"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist 1
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist 1 1
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("2",strlen("2"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "2"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist 2
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist 1 2
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "1 2"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "1"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 0 == 0 {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        = qui reshape wide "est se", i(rep dgm "estimand") j(method "1 2")
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide est se , i(rep dgm estimand ) j(method 1 2 )
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 0 == 1 & "0" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/2 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] true
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if "true"!="" char _dta[siman_truevars] true
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "single"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "single"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "1 2"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
Working.....
{res}{txt}
{com}. * graphs
. siman scatter, ytitle("test y-title") xtitle("test x-title") name("scatter_test1", replace) 
{txt}working.....
{res}{txt}
{com}. 
. siman swarm, graphoptions(ytitle("test y-title") xtitle("test x-title") name("swarm_test1", replace)) 
{txt}working.....

{com}. 
. siman zipplot, scheme(scheme(s2color)) legend(order(3 "Carrot" 4 "Stalk")) xtit("x-title") ytit("y-title") ylab(0 40 100) noncoveroptions(pstyle(p3)) ///
> coveroptions(pstyle(p4)) scatteroptions(mcol(gray%50)) truegraphoptions(pstyle(p6)) name("zipplot_test1", replace)
{txt}Drawing 1 graphs (1 per true value)...
{res}{txt}
{com}. 
. siman comparemethodsscatter, title("testtitle") subgr(xtit("testaxis")) name("cms_test1", replace) 
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    true
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number true
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("est",strlen("est"),1)=="_" local estimate = substr("est", 1, index("est","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("true",strlen("true"),1)=="_" local true = substr("true", 1, index("true","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    true
        - local numberdgms: word count `dgm'
        = local numberdgms: word count dgm
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 1!=1 local optionlist est se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 2
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 1 {c -(}
          - capture assert `varlist' == int(`varlist') if `touse'
          = capture assert method == int(method) if __000003
          - if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
          - tempname Vals
          - qui tab `varlist' if `touse', `missing' matrow(`Vals')
          = qui tab method if __000003,  matrow(__000004)
          - local nvals = r(r)
          - forval i = 1 / `nvals' {c -(}
          = forval i = 1 / 2 {c -(}
          - local val = `Vals'[`i',1]
          = local val = __000004[1,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 1 < 2 local vals "1 "
          - else local vals "`vals'`val'"
          = else local vals "1 1"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[2,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 2 < 2 local vals "1 2 "
          - else local vals "`vals'`val'"
          = else local vals "1 2"
          - {c )-}
          - {c )-}
          - else {c -(}
            tempvar select counter
            bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
            generate `counter' = sum(`select') * (`select' == 1)
            sort `counter'
            qui count if `counter' == 0
            local j = 1 + r(N)
            local nvals = _N
            if "`clean'" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
            else {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
            else local vals `"`vals'`"`=`varlist'[`i']'"'"'
            {c )-}
            {c )-}
            {c )-}
          - di as txt `"`vals'"'
          = di as txt `"1 2"'
          - return local levels `"`vals'"'
          = return local levels `"1 2"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"1 2"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"1 2"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/2 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("1",strlen("1"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "1"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist 1
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist 1 1
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("2",strlen("2"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "2"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist 2
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist 1 2
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "1 2"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "1"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 0 == 0 {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        = qui reshape wide "est se", i(rep dgm "estimand") j(method "1 2")
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide est se , i(rep dgm estimand ) j(method 1 2 )
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 0 == 1 & "0" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/2 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] true
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if "true"!="" char _dta[siman_truevars] true
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "single"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "single"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "1 2"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
Working.....
{res}{txt}
{com}. 
. siman blandaltman, ytitle("test y-title") xtitle("test x-title") name("ba_test1", replace) 
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    true
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number true
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("est",strlen("est"),1)=="_" local estimate = substr("est", 1, index("est","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("true",strlen("true"),1)=="_" local true = substr("true", 1, index("true","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    true
        - local numberdgms: word count `dgm'
        = local numberdgms: word count dgm
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 1!=1 local optionlist est se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 2
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 1 {c -(}
          - capture assert `varlist' == int(`varlist') if `touse'
          = capture assert method == int(method) if __000003
          - if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
          - tempname Vals
          - qui tab `varlist' if `touse', `missing' matrow(`Vals')
          = qui tab method if __000003,  matrow(__000004)
          - local nvals = r(r)
          - forval i = 1 / `nvals' {c -(}
          = forval i = 1 / 2 {c -(}
          - local val = `Vals'[`i',1]
          = local val = __000004[1,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 1 < 2 local vals "1 "
          - else local vals "`vals'`val'"
          = else local vals "1 1"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[2,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 2 < 2 local vals "1 2 "
          - else local vals "`vals'`val'"
          = else local vals "1 2"
          - {c )-}
          - {c )-}
          - else {c -(}
            tempvar select counter
            bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
            generate `counter' = sum(`select') * (`select' == 1)
            sort `counter'
            qui count if `counter' == 0
            local j = 1 + r(N)
            local nvals = _N
            if "`clean'" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
            else {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
            else local vals `"`vals'`"`=`varlist'[`i']'"'"'
            {c )-}
            {c )-}
            {c )-}
          - di as txt `"`vals'"'
          = di as txt `"1 2"'
          - return local levels `"`vals'"'
          = return local levels `"1 2"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"1 2"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"1 2"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/2 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("1",strlen("1"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "1"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist 1
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist 1 1
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("2",strlen("2"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "2"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist 2
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist 1 2
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "1 2"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "1"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 0 == 0 {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        = qui reshape wide "est se", i(rep dgm "estimand") j(method "1 2")
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide est se , i(rep dgm estimand ) j(method 1 2 )
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 0 == 1 & "0" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/2 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] true
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if "true"!="" char _dta[siman_truevars] true
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "single"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "single"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "1 2"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
working....
{res}{txt}
{com}. 
. siman analyse
    {txt}- set tracedepth 1
    - if "`method'"=="" {c -(}
    = if "method"=="" {c -(}
      di as error "The variable 'method' is missing so siman analyse can not be run.  Please create a variable in your dataset called method containing the method value(s)."
      exit 498
      {c )-}
    - if "`simananalyserun'"=="1" & "`replace'" == "" {c -(}
    = if ""=="1" & "" == "" {c -(}
      di as error "There are already performance measures in the dataset.  If you would like to replace these, please use the 'replace' option"
      exit 498
      {c )-}
    - if mi("`estimate'") | mi("`se'") {c -(}
    = if mi("est") | mi("se") {c -(}
      di as error "siman analyse requires est() and se() to be specified in set-up"
      exit 498
      {c )-}
    - local estimatesindi = (`rep'[_N]>0)
    = local estimatesindi = (rep[_N]>0)
    - if "`simananalyserun'"=="1" & "`replace'" == "replace" & `estimatesindi'==1 {c -(}
    = if ""=="1" & "" == "replace" & 1==1 {c -(}
      qui drop if `rep'<0
      qui drop _perfmeascode
      qui drop _dataset
      {c )-}
    - else if "`simananalyserun'"=="1" & "`replace'" == "replace" & `estimatesindi'==0 {c -(}
    = else if ""=="1" & "" == "replace" & 1==0 {c -(}
      di as error "There are no estimates data in the data set.  Please re-load data and use siman setup to import data."
      exit 498
      {c )-}
    - local simananalyserun = 0
    - if "`simansetuprun'"=="0" | "`simansetuprun'"=="" {c -(}
    = if "1"=="0" | "1"=="" {c -(}
      di as error "siman setup has not been run.  Please use siman setup first before siman analyse."
      exit 498
      {c )-}
    - cap confirm variable `true'
    = cap confirm variable true
    - if _rc==0 {c -(}
    - local extratrue : list true - dgm
    - if !mi("`extratrue'") local truevariable `true'
    = if !mi("true") local truevariable true
    - {c )-}
    - if ("`if'"=="" & "`ifsetup'"!="") local ifanalyse = `"`ifsetup'"'
    = if (""=="" & ""!="") local ifanalyse = `""'
    - else local ifanalyse = `"`if'"'
    = else local ifanalyse = `""'
    - qui tempvar touse
    - qui generate `touse' = 0
    = qui generate __000000 = 0
    - qui replace `touse' = 1 `ifanalyse'
    = qui replace __000000 = 1 
    - preserve
    - if `nformat'!=1 {c -(}
    = if 1!=1 {c -(}
      qui siman_reshape, longlong
      if `methodcreated' == 0 local method method
      else local method `method'
      {c )-}
    - qui sort `dgm' `target' `method' `touse'
    = qui sort dgm estimand method __000000
    - capture by `dgm' `target' `method': assert `touse'==`touse'[_n-1] if _n>1
    = capture by dgm estimand method: assert __000000==__000000[_n-1] if _n>1
    - if _rc == 9 {c -(}
      di as error "The 'if' option can not be applied to 'rep' in siman analyse."
      exit 498
      {c )-}
    - restore
    - qui keep if `touse'
    = qui keep if __000000
    - qui unab allnames : *
      {hline 79} begin unab {hline}
      - version 6
      - gettoken user 0: 0, parse(" :")
      - gettoken colon 0: 0, parse(" :")
      - if `"`colon'"' != ":" {c -(} error 198 {c )-}
      = if `":"' != ":" {c -(} error 198 {c )-}
      - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000) NAME(string)]
      - c_local `user' `varlist'
      = c_local allnames rep dgm estimand method true est se __000000
      - local n : word count `varlist'
      = local n : word count rep dgm estimand method true est se __000000
      - if `n'>=`min' & `n'<=`max' {c -(} exit {c )-}
      = if 8>=1 & 8<=120000 {c -(} exit {c )-}
      {hline 81} end unab {hline}
    - tempfile estimatesdata
    - qui save `estimatesdata'
    = qui save C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp
    - qui drop if `rep'<0
    = qui drop if rep<0
    - local methodstringindi = 0
    - capture confirm string variable `method'
    = capture confirm string variable method
    - if !_rc local methodstringindi = 1
    - local optionlist `estimate' `se'
    = local optionlist est se
    - foreach u of var * {c -(}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("rep",strlen("rep"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("dgm",strlen("dgm"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("estimand",strlen("estimand"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("method",strlen("method"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("true",strlen("true"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("est",strlen("est"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("se",strlen("se"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("__000000",strlen("__000000"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - local estchange = 0
    - if substr("`estimate'",strlen("`estimate'"),1)=="_" {c -(}
    = if substr("est",strlen("est"),1)=="_" {c -(}
      local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
      local estchange = 1
      {c )-}
    - local sechange = 0
    - if substr("`se'",strlen("`se'"),1)=="_" {c -(}
    = if substr("se",strlen("se"),1)=="_" {c -(}
      local se = substr("`se'", 1, index("`se'","_") - 1)
      local sechange = 1
      {c )-}
    - local optionlist `estimate' `se'
    = local optionlist est se
    - if `nformat'==1 {c -(}
    = if 1==1 {c -(}
    - local methodformat : value label `method'
    = local methodformat : value label method
    - qui order `rep' `dgm' `target' `method'
    = qui order rep dgm estimand method
      {hline 78} begin order {hline}
      - version 11
      - if (_caller()<11) {c -(}
        _order `macval(0)'
        exit
        {c )-}
      - syntax varlist[, Before(varname) After(varname) first last SEQuential ALPHAbetic]
      - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'" == "" & "`alphabetic'" == "" & "`sequential'" == "") {c -(}
      = if (`""' == "" & `""' == "" & "" == "" & "" == "" & "" == "" & "" == "") {c -(}
      - _order `macval(0)'
      = _order rep dgm estimand method
      - exit
      {hline 80} end order {hline}
    - qui sort `rep' `dgm' `target' `method'
    = qui sort rep dgm estimand method
    - qui tab `method'
    = qui tab method
    - local nmethodlabels = `r(r)'
    = local nmethodlabels = 2
    - qui levels `method', local(levels)
    = qui levels method, local(levels)
      {hline 77} begin levels {hline}
      - version 8
      - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
      - if "`separate'" == "" local sep " "
      = if "" == "" local sep " "
      - else local sep "`separate'"
      = else local sep ""
      - if "`missing'" != "" local novarlist "novarlist"
      = if "" != "" local novarlist "novarlist"
      - marksample touse, strok `novarlist'
      = marksample touse, strok 
      - capture confirm numeric variable `varlist'
      = capture confirm numeric variable method
      - local isnum = _rc != 7
      - if `isnum' {c -(}
      = if 1 {c -(}
      - capture assert `varlist' == int(`varlist') if `touse'
      = capture assert method == int(method) if __000002
      - if _rc {c -(}
        di as err "`varlist' contains non-integer values"
        exit 459
        {c )-}
      - tempname Vals
      - qui tab `varlist' if `touse', `missing' matrow(`Vals')
      = qui tab method if __000002,  matrow(__000003)
      - local nvals = r(r)
      - forval i = 1 / `nvals' {c -(}
      = forval i = 1 / 2 {c -(}
      - local val = `Vals'[`i',1]
      = local val = __000003[1,1]
      - if `i' < `nvals' local vals "`vals'`val'`sep'"
      = if 1 < 2 local vals "1 "
      - else local vals "`vals'`val'"
      = else local vals "1 1"
      - {c )-}
      - local val = `Vals'[`i',1]
      = local val = __000003[2,1]
      - if `i' < `nvals' local vals "`vals'`val'`sep'"
      = if 2 < 2 local vals "1 2 "
      - else local vals "`vals'`val'"
      = else local vals "1 2"
      - {c )-}
      - {c )-}
      - else {c -(}
        tempvar select counter
        bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
        generate `counter' = sum(`select') * (`select' == 1)
        sort `counter'
        qui count if `counter' == 0
        local j = 1 + r(N)
        local nvals = _N
        if "`clean'" != "" {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals "`vals'`=`varlist'[`i']'`sep'"
        {c )-}
        else local vals "`vals'`=`varlist'[`i']'"
        {c )-}
        {c )-}
        else {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
        {c )-}
        else local vals `"`vals'`"`=`varlist'[`i']'"'"'
        {c )-}
        {c )-}
        {c )-}
      - di as txt `"`vals'"'
      = di as txt `"1 2"'
      - return local levels `"`vals'"'
      = return local levels `"1 2"'
      - if "`local'" != "" {c -(}
      = if "levels" != "" {c -(}
      - c_local `local' `"`vals'"'
      = c_local levels `"1 2"'
      - {c )-}
      {hline 79} end levels {hline}
    - tokenize `"`levels'"'
    = tokenize `"1 2"'
    - forvalues f = 1/`nmethodlabels' {c -(}
    = forvalues f = 1/2 {c -(}
    - if substr("``f''",strlen("``f''"),1)=="_" local g = substr("``f''", 1, index("``f''","_") - 1)
    = if substr("1",strlen("1"),1)=="_" local g = substr("1", 1, index("1","_") - 1)
    - if `methodstringindi' == 0 & `methodlabels'!=1 local methodlabel`f' = "`g'"
    = if 0 == 0 & 0!=1 local methodlabel1 = ""
    - else local methodlabel`f' = "``g''"
    = else local methodlabel1 = ""
    - if `f'==1 local methodlist `methodlabel`f''
    = if 1==1 local methodlist 
    - else if `f'>=2 local methodlist `methodlist' `methodlabel`f''
    = else if 1>=2 local methodlist  
    - {c )-}
    - if substr("``f''",strlen("``f''"),1)=="_" local g = substr("``f''", 1, index("``f''","_") - 1)
    = if substr("2",strlen("2"),1)=="_" local g = substr("2", 1, index("2","_") - 1)
    - if `methodstringindi' == 0 & `methodlabels'!=1 local methodlabel`f' = "`g'"
    = if 0 == 0 & 0!=1 local methodlabel2 = ""
    - else local methodlabel`f' = "``g''"
    = else local methodlabel2 = ""
    - if `f'==1 local methodlist `methodlabel`f''
    = if 2==1 local methodlist 
    - else if `f'>=2 local methodlist `methodlist' `methodlabel`f''
    = else if 2>=2 local methodlist  
    - {c )-}
    - local estsimsum = "`estimate'"
    = local estsimsum = "est"
    - local sesimsum = "`se'"
    = local sesimsum = "se"
    - capture confirm variable _perfmeascode
    - if !_rc {c -(}
      di as error "siman would like to name a variable '_perfmeascode', but that name already exists in your dataset.  Please rename your variable _perfmeascode as something else."
      exit 498
      {c )-}
    - capture confirm variable _dataset
    - if !_rc {c -(}
      di as error "siman would like to name a variable '_dataset', but that name already exists in your data.  Please rename your variable _dataset as something else."
      exit 498
      {c )-}
    - qui simsum `estsimsum' `if', true(`true') se(`sesimsum') method(`method') id(`rep') by(`truevariable' `dgm' `target') max(20) `anything' clear mcse gen(_perfmeas) `force'
    = qui simsum est , true(true) se(se) method(method) id(rep) by(true dgm estimand) max(20)  clear mcse gen(_perfmeas) 
      {hline 77} begin simsum {hline}
      - version 10
      - if _caller() >= 12 {c -(}
      - local hidden hidden
      - {c )-}
      - return `hidden' local simsum_version "2.0.3"
      = return hidden local simsum_version "2.0.3"
      - syntax varlist [if] [in], [true(string) METHodvar(varname) id(varlist) se(varlist) SEPrefix(string) SESuffix(string) graph GRAPH2(string) noMEMcheck max(real 10) semax(real 100) dropbig nolistbig listmiss level(real $S_level) by(varlist) mcse robust MODELSEMethod(string) ref(string) null(real 0) df(string) DFPrefix(string) DFSuffix(string) bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power force nolist listsep format(string) sepby(varlist) ABbreviate(passthru) clear saving(string) gen(string) TRANSpose debug ]
      = syntax varlist [if] [in], [true(string) METHodvar(varname) id(varlist) se(varlist) SEPrefix(string) SESuffix(string) graph GRAPH2(string) noMEMcheck max(real 10) semax(real 100) dropbig nolistbig listmiss level(real 95) by(varlist) mcse robust MODELSEMethod(string) ref(string) null(real 0) df(string) DFPrefix(string) DFSuffix(string) bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power force nolist listsep format(string) sepby(varlist) ABbreviate(passthru) clear saving(string) gen(string) TRANSpose debug ]
      - if "`modelsemethod'"=="" local modelsemethod rmse
      = if ""=="" local modelsemethod rmse
      - if "`modelsemethod'"!="rmse" & "`modelsemethod'"!="mean" {c -(}
      = if "rmse"!="rmse" & "rmse"!="mean" {c -(}
        di as error "Syntax: modelsemethod(rmse|mean)"
        exit 498
        {c )-}
      - if !mi("`graph2'") local graph graph
      = if !mi("") local graph graph
      - if "`by'"!="" {c -(}
      = if "true dgm estimand"!="" {c -(}
      - local byby by(`by')
      = local byby by(true dgm estimand)
      - local byvar `by'
      = local byvar true dgm estimand
      - {c )-}
      - else {c -(}
        tempvar byvar
        gen `byvar'=0
        {c )-}
      - local i 0
      - foreach beta of varlist `varlist' {c -(}
      = foreach beta of varlist est {c -(}
      - local ++i
      - local beta`i' `beta'
      = local beta1 est
      - local betalist `betalist' `beta'
      = local betalist  est
      - {c )-}
      - local m `i'
      = local m 1
      - if "`seprefix'"!="" | "`sesuffix'"!="" {c -(}
      = if ""!="" | ""!="" {c -(}
        if "`se'"!="" {c -(}
        di as error "Can't specify se() with seprefix() or sesuffix()"
        exit 498
        {c )-}
        forvalues i=1/`m' {c -(}
        local se`i' `seprefix'`beta`i''`sesuffix'
        confirm var `se`i''
        local selist `selist' `se`i''
        {c )-}
        {c )-}
      - else if "`se'"!="" {c -(}
      = else if "se"!="" {c -(}
      - local i 0
      - foreach sevar of varlist `se' {c -(}
      = foreach sevar of varlist se {c -(}
      - local ++i
      - local se`i' `sevar'
      = local se1 se
      - local selist `selist' `se`i''
      = local selist  se
      - {c )-}
      - if `i'<`m' {c -(}
      = if 1<1 {c -(}
        di as error "Fewer variables in se(`se') than in `betalist'"
        exit 498
        {c )-}
      - if `i'>`m' {c -(}
      = if 1>1 {c -(}
        di as error "More variables in se(`se') than in `betalist'"
        exit 498
        {c )-}
      - {c )-}
      - if "`dfprefix'"!="" | "`dfsuffix'"!="" {c -(}
      = if ""!="" | ""!="" {c -(}
        if "`df'"!="" {c -(}
        di as error "Can't specify df() with dfprefix() or dfsuffix()"
        exit 498
        {c )-}
        forvalues i=1/`m' {c -(}
        local df`i' `dfprefix'`beta`i''`dfsuffix'
        confirm var `df`i''
        local dflist `dflist' `df`i''
        {c )-}
        {c )-}
      - else if "`df'"!="" {c -(}
      = else if ""!="" {c -(}
        cap confirm number `df'
        if !_rc local dftype number
        else {c -(}
        cap assert `df'==`df'
        if !_rc local dftype varname
        else {c -(}
        cap confirm var `df'
        if !_rc local dftype varlist
        else local dftype error
        {c )-}
        {c )-}
        if inlist("`dftype'","number","varname") {c -(}
        forvalues i=1/`m' {c -(}
        local df`i' `df'
        {c )-}
        if "`dftype'"=="varname" local dflist `df'
        cap assert !mi(`df')
        if _rc di as error "Warning: missing values in df()"
        {c )-}
        else if "`dftype'"=="varlist" {c -(}
        local i 0
        foreach dfvar of varlist `df' {c -(}
        local ++i
        local df`i' `dfvar'
        local dflist `dflist' `dfvar'
        cap assert !mi(`df`i'')
        if _rc di as error "Warning: missing values in df()"
        {c )-}
        if `i'!=`m' local dftype error
        {c )-}
        if "`dftype'"=="error" {c -(}
        di as error "df must contain number, string or varlist of same length as estimates"
        exit 498
        {c )-}
        {c )-}
      - local allpms bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power
      - foreach pm of local allpms {c -(}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  bsims
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  sesims
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  bias
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  mean
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  empse
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  relprec
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  mse
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  rmse
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  modelse
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  ciwidth
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  relerror
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  cover
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  power
      - {c )-}
      - if mi("`origoutput'") {c -(}
      = if mi("") {c -(}
      - foreach pm of local allpms {c -(}
      - local `pm' `pm'
      = local bsims bsims
      - {c )-}
      - local `pm' `pm'
      = local sesims sesims
      - {c )-}
      - local `pm' `pm'
      = local bias bias
      - {c )-}
      - local `pm' `pm'
      = local mean mean
      - {c )-}
      - local `pm' `pm'
      = local empse empse
      - {c )-}
      - local `pm' `pm'
      = local relprec relprec
      - {c )-}
      - local `pm' `pm'
      = local mse mse
      - {c )-}
      - local `pm' `pm'
      = local rmse rmse
      - {c )-}
      - local `pm' `pm'
      = local modelse modelse
      - {c )-}
      - local `pm' `pm'
      = local ciwidth ciwidth
      - {c )-}
      - local `pm' `pm'
      = local relerror relerror
      - {c )-}
      - local `pm' `pm'
      = local cover cover
      - {c )-}
      - local `pm' `pm'
      = local power power
      - {c )-}
      - {c )-}
      - if "`se1'"=="" {c -(}
      = if "se"=="" {c -(}
        foreach perfmeas in sesims modelse ciwidth relerror cover power {c -(}
        if !mi("``perfmeas''") local droppm1 `droppm1' `perfmeas'
        local `perfmeas'
        {c )-}
        if !mi("`droppm1'") {c -(}
        if !mi("`origoutput'") di as error "" _c
        else di as text "" _c
        di "SE not reported, so ignoring performance measures: `droppm1'"
        {c )-}
        {c )-}
      - if "`true'"=="" {c -(}
      = if "true"=="" {c -(}
        foreach perfmeas in bias mse rmse cover {c -(}
        if !mi("``perfmeas''") local droppm2 `droppm2' `perfmeas'
        local `perfmeas'
        {c )-}
        if !mi("`droppm2'") {c -(}
        if !mi("`origoutput'") di as error "" _c
        else di as text "" _c
        di "true() not specified, so ignoring performance measures: `droppm2'"
        {c )-}
        {c )-}
      - foreach pm of local allpms {c -(}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("bsims") local output  bsims
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("sesims") local output bsims sesims
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("bias") local output bsims sesims bias
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("mean") local output bsims sesims bias mean
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("empse") local output bsims sesims bias mean empse
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("relprec") local output bsims sesims bias mean empse relprec
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("mse") local output bsims sesims bias mean empse relprec mse
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("rmse") local output bsims sesims bias mean empse relprec mse rmse
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("modelse") local output bsims sesims bias mean empse relprec mse rmse modelse
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("ciwidth") local output bsims sesims bias mean empse relprec mse rmse modelse ciwidth
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("relerror") local output bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("cover") local output bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("power") local output bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power
      - {c )-}
      - if "`output'"=="" {c -(}
      = if "bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power"=="" {c -(}
        di as error "No performance measures specified"
        exit 498
        {c )-}
      - if inlist("`output'","bsims","sesims","bims sesims") & "`mcse'"=="mcse" {c -(}
      = if inlist("bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power","bsims","sesims","bims sesims") & "mcse"=="mcse" {c -(}
        di as error "Only bsims and/or sesims specified - mcse ignored"
        local mcse
        {c )-}
      - if "`methodvar'"!="" {c -(}
      = if "method"!="" {c -(}
      - if `m'>1 {c -(}
      = if 1>1 {c -(}
        di as error "Only one estimate variable allowed with long format"
        exit 498
        {c )-}
      - if "`id'"=="" {c -(}
      = if "rep"=="" {c -(}
        di as error "id() is required with long format"
        exit 498
        {c )-}
      - {c )-}
      - if "`list'"=="nolist" & "`clear'"=="" & "`saving'"=="" {c -(}
      = if ""=="nolist" & "clear"=="" & ""=="" {c -(}
        di as error "No output requested! Please specify clear or saving(), or don't specify nolist"
        exit 498
        {c )-}
      - if "`gen'"=="" local gen perfmeas
      = if "_perfmeas"=="" local gen perfmeas
      - cap confirm new variable `gen'num
      = cap confirm new variable _perfmeasnum
      - local rc1=_rc
      - cap confirm new variable `gen'code
      = cap confirm new variable _perfmeascode
      - if _rc | `rc1' {c -(}
      = if _rc | 0 {c -(}
        di as error as smcl "{c -(}p{c )-}Variable `gen'num and/or `gen'code already exists. This is probably because the current data are -simsum- output. If this is what you want, use the gen() option.{c -(}p_end{c )-}"
        exit 498
        {c )-}
      - if "`memcheck'"!="nomemcheck" {c -(}
      = if ""!="nomemcheck" {c -(}
      - qui desc, short
      - if r(width)/r(widthmax)>0.45 {c -(}
        di as error "simsum is memory-hungry and can fail slowly if memory is more than 50% occupied."
        di as error as smcl "Please increase the memory using {c -(}help memory:set memory{c )-}, or use the nomemcheck option."
        exit 498
        {c )-}
      - {c )-}
      - marksample touse, novarlist
      - qui count if `touse'
      = qui count if __000001
      - if r(N)==0 {c -(}
        di in red "no observations"
        exit 2000
        {c )-}
      - if "`bias'"=="bias" | "`mse'"=="mse" | "`rmse'"=="rmse" | "`cover'"=="cover" {c -(}
      = if "bias"=="bias" | "mse"=="mse" | "rmse"=="rmse" | "cover"=="cover" {c -(}
      - tempvar truevar
      - qui gen `truevar' = `true'
      = qui gen __000002 = true
      - qui count if missing(`truevar') & `touse'
      = qui count if missing(__000002) & __000001
      - if r(N)>0 {c -(}
        di as error "Missing values found for true value `true'"
        exit 498
        {c )-}
      - {c )-}
      - preserve
      - qui keep if `touse'
      = qui keep if __000001
      - if "`methodvar'"!="" {c -(}
      = if "method"!="" {c -(}
      - local origformat long
      - local betastub `betalist'
      = local betastub est
      - qui levelsof `methodvar', local(methods)
      = qui levelsof method, local(methods)
      - local label : val label `methodvar'
      = local label : val label method
      - local i 0
      - foreach method in `methods' {c -(}
      = foreach method in 1 2 {c -(}
      - if strpos("`method'"," ") {c -(}
      = if strpos("1"," ") {c -(}
        di as error `"Sorry, I can't handle method = "`method'". Please recode it without spaces."'
        exit 498
        {c )-}
      - if strtoname("b`method'")!="b`method'" {c -(}
      = if strtoname("b1")!="b1" {c -(}
        di as error `"Sorry, I can't handle method = "`method'". Please recode it using standard characters."'
        exit 498
        {c )-}
      - local ++i
      - local beta`i' `betalist'`method'
      = local beta1 est1
      - local newbetalist `newbetalist' `betalist'`method'
      = local newbetalist  est1
      - if "`selist'"!="" local se`i' `selist'`method'
      = if "se"!="" local se1 se1
      - if "`selist'"!="" local newselist `newselist' `selist'`method'
      = if "se"!="" local newselist  se1
      - if "`dftype'"=="number" local df`i' `df'
      = if ""=="number" local df1 
      - if "`dftype'"=="varname" local df`i' `dflist'`method'
      = if ""=="varname" local df1 1
      - if "`label'"!="" local label`i' : label `label' `method'
      = if ""!="" local label1 : label  1
      - else local label`i' "`method'"
      = else local label1 "1"
      - if "`label`i''"=="`ref'" local refmethod `i'
      = if "1"=="" local refmethod 1
      - {c )-}
      - if strpos("`method'"," ") {c -(}
      = if strpos("2"," ") {c -(}
        di as error `"Sorry, I can't handle method = "`method'". Please recode it without spaces."'
        exit 498
        {c )-}
      - if strtoname("b`method'")!="b`method'" {c -(}
      = if strtoname("b2")!="b2" {c -(}
        di as error `"Sorry, I can't handle method = "`method'". Please recode it using standard characters."'
        exit 498
        {c )-}
      - local ++i
      - local beta`i' `betalist'`method'
      = local beta2 est2
      - local newbetalist `newbetalist' `betalist'`method'
      = local newbetalist est1 est2
      - if "`selist'"!="" local se`i' `selist'`method'
      = if "se"!="" local se2 se2
      - if "`selist'"!="" local newselist `newselist' `selist'`method'
      = if "se"!="" local newselist se1 se2
      - if "`dftype'"=="number" local df`i' `df'
      = if ""=="number" local df2 
      - if "`dftype'"=="varname" local df`i' `dflist'`method'
      = if ""=="varname" local df2 2
      - if "`label'"!="" local label`i' : label `label' `method'
      = if ""!="" local label2 : label  2
      - else local label`i' "`method'"
      = else local label2 "2"
      - if "`label`i''"=="`ref'" local refmethod `i'
      = if "2"=="" local refmethod 2
      - {c )-}
      - local m `i'
      = local m 2
      - if "`refmethod'"=="" {c -(}
      = if ""=="" {c -(}
      - if "`ref'"!="" {c -(}
      = if ""!="" {c -(}
        if "`label'"=="" local offenders values
        else local offenders value labels
        di as error "Error in ref(): `ref' is not one of the `offenders' of `methodvar'"
        exit 498
        {c )-}
      - else local refmethod 1
      - {c )-}
      - di as text "Reshaping data to wide format ..."
      - keep `betalist' `selist' `dflist' `by' `byvar' `id' `methodvar' `touse' `truevar'
      = keep est se  true dgm estimand true dgm estimand rep method __000001 __000002
      - cap confirm string var `methodvar'
      = cap confirm string var method
      - if _rc==0 local string string
      - local bfmt0: format `betalist'
      = local bfmt0: format est
      - qui reshape wide `betalist' `selist' `dflist', i(`by' `id') j(`methodvar') `string'
      = qui reshape wide est se , i(true dgm estimand rep) j(method) 
      - local betalist `newbetalist'
      = local betalist est1 est2
      - local selist `newselist'
      = local selist se1 se2
      - {c )-}
      - else {c -(}
        local origformat wide
        forvalues i=1/`m' {c -(}
        local label`i' : var label `beta`i''
        if "`label`i''"=="" local label`i' "`beta`i''"
        if "`beta`i''"=="`ref'" local refmethod `i'
        {c )-}
        if "`refmethod'"=="" {c -(}
        if "`ref'"!="" {c -(}
        di as error "ref(`ref') is not one of the listed point estimates"
        exit 498
        {c )-}
        else local refmethod 1
        {c )-}
        keep `betalist' `selist' `dflist' `by' `byvar' `id' `touse' `truevar'
        {c )-}
      - if mi("`force'") {c -(}
      = if mi("") {c -(}
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - tempvar betafreq`i'
      = tempvar betafreq1
      - egen `betafreq`i'' = count(`beta`i''), `byby'
      = egen __000003 = count(est1), by(true dgm estimand)
      - cap assert `betafreq`i''!=1
      = cap assert __000003!=1
      - if _rc {c -(}
        di as error "Only one observation for `beta`i''. If this is what you intended, use the force option."
        exit 498
        {c )-}
      - {c )-}
      - tempvar betafreq`i'
      = tempvar betafreq2
      - egen `betafreq`i'' = count(`beta`i''), `byby'
      = egen __000004 = count(est2), by(true dgm estimand)
      - cap assert `betafreq`i''!=1
      = cap assert __000004!=1
      - if _rc {c -(}
        di as error "Only one observation for `beta`i''. If this is what you intended, use the force option."
        exit 498
        {c )-}
      - {c )-}
      - {c )-}
      - tempvar missing
      - gen `missing' = 0
      = gen __000005 = 0
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - qui replace `missing' = missing(`beta`i'') & `touse'
      = qui replace __000005 = missing(est1) & __000001
      - if "`se`i''"!="" qui replace `missing' = 1 if missing(`se`i'') & `touse'
      = if "se1"!="" qui replace __000005 = 1 if missing(se1) & __000001
      - if "`se`i''"!="" qui replace `missing' = 1 if `se`i''==0 & `touse'
      = if "se1"!="" qui replace __000005 = 1 if se1==0 & __000001
      - qui count if `missing'
      = qui count if __000005
      - if r(N)>0 {c -(}
        if "`se`i''"!="" {c -(}
        qui replace `missing' = missing(`beta`i'') & missing(`se`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have both estimate and SE missing"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        di as text "--> no action taken"
        {c )-}
        qui replace `missing' = !missing(`se`i'') & missing(`beta`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have estimate missing and SE observed"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `se`i'' = . if `missing'
        di as text "--> SE changed to missing"
        {c )-}
        qui replace `missing' = missing(`se`i'') & !missing(`beta`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have estimate observed and SE missing"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `beta`i'' = . if `missing'
        di as text "--> estimate changed to missing"
        {c )-}
        qui replace `missing' = (`se`i''==0) & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have zero values of SE"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `beta`i'' = . if `missing'
        qui replace `se`i'' = . if `missing'
        di as text "--> estimate and SE changed to missing"
        {c )-}
        {c )-}
        {c )-}
      - {c )-}
      - qui replace `missing' = missing(`beta`i'') & `touse'
      = qui replace __000005 = missing(est2) & __000001
      - if "`se`i''"!="" qui replace `missing' = 1 if missing(`se`i'') & `touse'
      = if "se2"!="" qui replace __000005 = 1 if missing(se2) & __000001
      - if "`se`i''"!="" qui replace `missing' = 1 if `se`i''==0 & `touse'
      = if "se2"!="" qui replace __000005 = 1 if se2==0 & __000001
      - qui count if `missing'
      = qui count if __000005
      - if r(N)>0 {c -(}
        if "`se`i''"!="" {c -(}
        qui replace `missing' = missing(`beta`i'') & missing(`se`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have both estimate and SE missing"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        di as text "--> no action taken"
        {c )-}
        qui replace `missing' = !missing(`se`i'') & missing(`beta`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have estimate missing and SE observed"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `se`i'' = . if `missing'
        di as text "--> SE changed to missing"
        {c )-}
        qui replace `missing' = missing(`se`i'') & !missing(`beta`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have estimate observed and SE missing"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `beta`i'' = . if `missing'
        di as text "--> estimate changed to missing"
        {c )-}
        qui replace `missing' = (`se`i''==0) & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have zero values of SE"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `beta`i'' = . if `missing'
        qui replace `se`i'' = . if `missing'
        di as text "--> estimate and SE changed to missing"
        {c )-}
        {c )-}
        {c )-}
      - {c )-}
      - drop `missing'
      = drop __000005
      - if "`graph'"=="graph" {c -(}
      = if ""=="graph" {c -(}
        tempfile graph
        set graphics off
        forvalues i=1/`m' {c -(}
        cap gr7 `se`i'' `beta`i'', xla yla b2title("`beta`i''") l1title("`se`i''") t1title("`label`i''") saving(`graph'`i', replace) `graph2'
        if !_rc local gphlist `gphlist' `graph'`i'
        {c )-}
        if "`selist'"=="" local title Point estimates by method
        else local title Std error vs. point estimate by method
        set graphics on
        gr7 using `gphlist', title(`title')
        {c )-}
      - tempvar infb infse
      - gen `infb' = 0
      = gen __000006 = 0
      - gen `infse' = 0
      = gen __000007 = 0
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - qui summ `beta`i''
      = qui summ est1
      - if r(sd)<=0 {c -(}
        di as text "Warning for method `label`i'': estimate doesn't vary"
        continue
        {c )-}
      - qui replace `infb' = (abs(`beta`i''-r(mean))/r(sd) > `max') & !missing(`beta`i'')
      = qui replace __000006 = (abs(est1-r(mean))/r(sd) > 20) & !missing(est1)
      - if "`se`i''"!="" {c -(}
      = if "se1"!="" {c -(}
      - qui summ `se`i''
      = qui summ se1
      - if r(mean)<=0 {c -(}
        di as text "Warning for method `label`i'': `se`i'' is always 0"
        {c )-}
      - else qui replace `infse' = (`se`i''/r(mean) > `semax') & !missing(`se`i'')
      = else qui replace __000007 = (se1/r(mean) > 100) & !missing(se1)
      - {c )-}
      - qui count if `infb'
      = qui count if __000006
      - local ninfb = r(N)
      - qui count if `infse'
      = qui count if __000007
      - local ninfse = r(N)
      - if `ninfb'+`ninfse' > 0 {c -(}
      = if 0+0 > 0 {c -(}
        local text = cond("`dropbig'"=="dropbig","text","error")
        local warning = cond("`dropbig'"=="dropbig","Warning","Error")
        di as `text' `"`warning' for method `label`i'': "' as result `ninfb' as `text' `" observation(s) have standardised estimate > `max'"' _c
        if "`se`i''"!="" di as `text' `" and "' as result `ninfse' as `text' `" observation(s) have scaled SE > `semax'"'
        else di
        if "`listbig'"!="nolistbig" l `by' `id' `beta`i'' `se`i'' if `infb'|`infse', sepby(`sepby')
        else di as `text' "--> remove nolistbig option to list these observation(s)"
        if "`dropbig'"=="dropbig" {c -(}
        qui replace `beta`i'' = . if `infb'|`infse'
        if "`se`i''"!="" qui replace `se`i'' = . if `infb'|`infse'
        di as text `"--> estimate "' _c
        if "`se`i''"!="" di as text `"and SE "' _c
        di as text `"have been changed to missing values for these observation(s)"'
        {c )-}
        else {c -(}
        di as error "--> use dropbig option to drop these observation(s)"
        di as error "--> use max() option to change acceptable limit of point estimates"
        if "`se'"!="" di as error "--> use semax() option to change acceptable limit of standard errors"
        exit 498
        {c )-}
        {c )-}
      - {c )-}
      - qui summ `beta`i''
      = qui summ est2
      - if r(sd)<=0 {c -(}
        di as text "Warning for method `label`i'': estimate doesn't vary"
        continue
        {c )-}
      - qui replace `infb' = (abs(`beta`i''-r(mean))/r(sd) > `max') & !missing(`beta`i'')
      = qui replace __000006 = (abs(est2-r(mean))/r(sd) > 20) & !missing(est2)
      - if "`se`i''"!="" {c -(}
      = if "se2"!="" {c -(}
      - qui summ `se`i''
      = qui summ se2
      - if r(mean)<=0 {c -(}
        di as text "Warning for method `label`i'': `se`i'' is always 0"
        {c )-}
      - else qui replace `infse' = (`se`i''/r(mean) > `semax') & !missing(`se`i'')
      = else qui replace __000007 = (se2/r(mean) > 100) & !missing(se2)
      - {c )-}
      - qui count if `infb'
      = qui count if __000006
      - local ninfb = r(N)
      - qui count if `infse'
      = qui count if __000007
      - local ninfse = r(N)
      - if `ninfb'+`ninfse' > 0 {c -(}
      = if 0+0 > 0 {c -(}
        local text = cond("`dropbig'"=="dropbig","text","error")
        local warning = cond("`dropbig'"=="dropbig","Warning","Error")
        di as `text' `"`warning' for method `label`i'': "' as result `ninfb' as `text' `" observation(s) have standardised estimate > `max'"' _c
        if "`se`i''"!="" di as `text' `" and "' as result `ninfse' as `text' `" observation(s) have scaled SE > `semax'"'
        else di
        if "`listbig'"!="nolistbig" l `by' `id' `beta`i'' `se`i'' if `infb'|`infse', sepby(`sepby')
        else di as `text' "--> remove nolistbig option to list these observation(s)"
        if "`dropbig'"=="dropbig" {c -(}
        qui replace `beta`i'' = . if `infb'|`infse'
        if "`se`i''"!="" qui replace `se`i'' = . if `infb'|`infse'
        di as text `"--> estimate "' _c
        if "`se`i''"!="" di as text `"and SE "' _c
        di as text `"have been changed to missing values for these observation(s)"'
        {c )-}
        else {c -(}
        di as error "--> use dropbig option to drop these observation(s)"
        di as error "--> use max() option to change acceptable limit of point estimates"
        if "`se'"!="" di as error "--> use semax() option to change acceptable limit of standard errors"
        exit 498
        {c )-}
        {c )-}
      - {c )-}
      - di as text _newline "Starting to process results ..."
      - if `level'<1 local level=`level'*100
      = if 95<1 local level=95*100
      - if "`robust'"=="robust" & ("`relprec'"=="relprec" | "`relerror'"=="relerror") {c -(}
      = if ""=="robust" & ("relprec"=="relprec" | "relerror"=="relerror") {c -(}
        forvalues i=1/`m' {c -(}
        tempvar betamean`i'
        egen `betamean`i'' = mean(`beta`i''), `byby'
        {c )-}
        {c )-}
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - tempvar crit`i'
      = tempvar crit1
      - gen `crit`i'' = -invnorm((1-`level'/100)/2)
      = gen __000008 = -invnorm((1-95/100)/2)
      - if "`df`i''"!="" qui replace `crit`i'' = invttail(`df`i'',(1-`level'/100)/2) if !mi(`df`i'')
      = if ""!="" qui replace __000008 = invttail(,(1-95/100)/2) if !mi()
      - assert !mi(`crit`i'')
      = assert !mi(__000008)
      - local collcount `collcount' bsims_`i'=`beta`i''
      = local collcount  bsims_1=est1
      - if "`bias'"=="bias" {c -(}
      = if "bias"=="bias" {c -(}
      - qui gen bias_`i' = `beta`i'' - `truevar'
      = qui gen bias_1 = est1 - __000002
      - local collmean `collmean' bias_`i'
      = local collmean  bias_1
      - local collsd `collsd' biassd_`i' = bias_`i'
      = local collsd  biassd_1 = bias_1
      - {c )-}
      - if "`mean'"=="mean" {c -(}
      = if "mean"=="mean" {c -(}
      - local collmean `collmean' mean_`i' = `beta`i''
      = local collmean bias_1 mean_1 = est1
      - local collsd `collsd' meansd_`i' = `beta`i''
      = local collsd biassd_1 = bias_1 meansd_1 = est1
      - {c )-}
      - if "`relerror'"=="relerror" | "`modelse'"=="modelse" {c -(}
      = if "relerror"=="relerror" | "modelse"=="modelse" {c -(}
      - qui gen var_`i'=`se`i''^2
      = qui gen var_1=se1^2
      - {c )-}
      - if "`empse'"=="empse" | "`relerror'"=="relerror" | "`relprec'"=="relprec" | "`bias'"=="bias" {c -(}
      = if "empse"=="empse" | "relerror"=="relerror" | "relprec"=="relprec" | "bias"=="bias" {c -(}
      - local collsd `collsd' empse_`i'=`beta`i''
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1
      - {c )-}
      - if "`mse'"=="mse" | "`rmse'"=="rmse" {c -(}
      = if "mse"=="mse" | "rmse"=="rmse" {c -(}
      - qui gen mse_`i' = (`beta`i'' - `truevar')^2
      = qui gen mse_1 = (est1 - __000002)^2
      - local collmean `collmean' mse_`i'
      = local collmean bias_1 mean_1 = est1 mse_1
      - local collsd `collsd' msesd_`i'=mse_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1
      - {c )-}
      - if "`relprec'"=="relprec" & `i'!=`refmethod' {c -(}
      = if "relprec"=="relprec" & 1!=1 {c -(}
        qui byvar `byvar', r(rho N) gen unique: corr `beta`refmethod'' `beta`i''
        rename Rrho_ corr_`i'
        rename RN_ ncorr_`i'
        local collsum `collsum' corr_`i' ncorr_`i'
        {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" | "`sesims'"=="sesims" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" | "sesims"=="sesims" {c -(}
      - local collcount `collcount' sesims_`i'=`se`i''
      = local collcount bsims_1=est1 sesims_1=se1
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" {c -(}
      - local collmean `collmean' modelse_`i'=`se`i''
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1
      - local collmean `collmean' varmean_`i'=var_`i'
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1
      - local collsd `collsd' varsd_`i'=var_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1
      - local collsd `collsd' modelsesd_`i'=`se`i''
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1
      - {c )-}
      - if "`ciwidth'"=="ciwidth" {c -(}
      = if "ciwidth"=="ciwidth" {c -(}
      - qui gen ciwidth_`i' = 2*(`crit`i'')*`se`i''
      = qui gen ciwidth_1 = 2*(__000008)*se1
      - local collmean `collmean' ciwidth_`i'
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1
      - local collsd `collsd' ciwidthsd_`i' = ciwidth_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1
      - {c )-}
      - if "`cover'"=="cover" | "`power'"=="power" {c -(}
      = if "cover"=="cover" | "power"=="power" {c -(}
      - if "`cover'"=="cover" local collcount `collcount' bothsims_`i'=cover_`i'
      = if "cover"=="cover" local collcount bsims_1=est1 sesims_1=se1 bothsims_1=cover_1
      - else local collcount `collcount' bothsims_`i'=power_`i'
      = else local collcount bsims_1=est1 sesims_1=se1 bothsims_1=cover_1 bothsims_1=power_1
      - {c )-}
      - if "`cover'"=="cover" {c -(}
      = if "cover"=="cover" {c -(}
      - qui gen cover_`i' = 100*(abs(`beta`i''-`truevar')<(`crit`i'')*`se`i'') if !missing(`beta`i'') & !missing(`se`i'')
      = qui gen cover_1 = 100*(abs(est1-__000002)<(__000008)*se1) if !missing(est1) & !missing(se1)
      - local collmean `collmean' cover_`i'
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1
      - {c )-}
      - if "`power'"=="power" {c -(}
      = if "power"=="power" {c -(}
      - qui gen power_`i' = 100*(abs(`beta`i''-`null')>=(`crit`i'')*`se`i'') if !missing(`beta`i'') & !missing(`se`i'')
      = qui gen power_1 = 100*(abs(est1-0)>=(__000008)*se1) if !missing(est1) & !missing(se1)
      - local collmean `collmean' power_`i'
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1
      - {c )-}
      - if "`robust'"=="robust" {c -(}
      = if ""=="robust" {c -(}
        if "`empse'"=="empse" {c -(}
        tempvar empseT`i' empseB`i' empseTT`i' empseBB`i' empseTB`i'
        qui gen `empseT`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `empseB`i'' = 1
        qui gen `empseTT`i'' = `empseT`i''^2
        qui gen `empseBB`i'' = `empseB`i''^2
        qui gen `empseTB`i'' = `empseT`i''*`empseB`i''
        local collsum `collsum' `empseT`i'' `empseB`i'' `empseTT`i'' `empseTB`i'' `empseBB`i''
        {c )-}
        if "`relprec'"=="relprec" {c -(}
        tempvar relprecT`i' relprecB`i' relprecTT`i' relprecBB`i' relprecTB`i'
        qui gen `relprecT`i'' = (`beta`refmethod''-`betamean`refmethod'')^2
        qui gen `relprecB`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `relprecTT`i'' = `relprecT`i''^2
        qui gen `relprecBB`i'' = `relprecB`i''^2
        qui gen `relprecTB`i'' = `relprecT`i''*`relprecB`i''
        local collsum `collsum' `relprecT`i'' `relprecB`i'' `relprecTT`i'' `relprecTB`i'' `relprecBB`i''
        {c )-}
        if "`relerror'"=="relerror" {c -(}
        tempvar relerrorT`i' relerrorB`i' relerrorTT`i' relerrorBB`i' relerrorTB`i'
        qui gen `relerrorT`i'' = `se`i''^2
        qui gen `relerrorB`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `relerrorTT`i'' = `relerrorT`i''^2
        qui gen `relerrorBB`i'' = `relerrorB`i''^2
        qui gen `relerrorTB`i'' = `relerrorT`i''*`relerrorB`i''
        local collsum `collsum' `relerrorT`i'' `relerrorB`i'' `relerrorTT`i'' `relerrorTB`i'' `relerrorBB`i''
        {c )-}
        {c )-}
      - {c )-}
      - tempvar crit`i'
      = tempvar crit2
      - gen `crit`i'' = -invnorm((1-`level'/100)/2)
      = gen __000009 = -invnorm((1-95/100)/2)
      - if "`df`i''"!="" qui replace `crit`i'' = invttail(`df`i'',(1-`level'/100)/2) if !mi(`df`i'')
      = if ""!="" qui replace __000009 = invttail(,(1-95/100)/2) if !mi()
      - assert !mi(`crit`i'')
      = assert !mi(__000009)
      - local collcount `collcount' bsims_`i'=`beta`i''
      = local collcount bsims_1=est1 sesims_1=se1 bothsims_1=cover_1 bsims_2=est2
      - if "`bias'"=="bias" {c -(}
      = if "bias"=="bias" {c -(}
      - qui gen bias_`i' = `beta`i'' - `truevar'
      = qui gen bias_2 = est2 - __000002
      - local collmean `collmean' bias_`i'
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2
      - local collsd `collsd' biassd_`i' = bias_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2
      - {c )-}
      - if "`mean'"=="mean" {c -(}
      = if "mean"=="mean" {c -(}
      - local collmean `collmean' mean_`i' = `beta`i''
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = est2
      - local collsd `collsd' meansd_`i' = `beta`i''
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = est2
      - {c )-}
      - if "`relerror'"=="relerror" | "`modelse'"=="modelse" {c -(}
      = if "relerror"=="relerror" | "modelse"=="modelse" {c -(}
      - qui gen var_`i'=`se`i''^2
      = qui gen var_2=se2^2
      - {c )-}
      - if "`empse'"=="empse" | "`relerror'"=="relerror" | "`relprec'"=="relprec" | "`bias'"=="bias" {c -(}
      = if "empse"=="empse" | "relerror"=="relerror" | "relprec"=="relprec" | "bias"=="bias" {c -(}
      - local collsd `collsd' empse_`i'=`beta`i''
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = est2 empse_2=est2
      - {c )-}
      - if "`mse'"=="mse" | "`rmse'"=="rmse" {c -(}
      = if "mse"=="mse" | "rmse"=="rmse" {c -(}
      - qui gen mse_`i' = (`beta`i'' - `truevar')^2
      = qui gen mse_2 = (est2 - __000002)^2
      - local collmean `collmean' mse_`i'
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = est2 mse_2
      - local collsd `collsd' msesd_`i'=mse_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = est2 empse_2=est2 msesd_2=mse_2
      - {c )-}
      - if "`relprec'"=="relprec" & `i'!=`refmethod' {c -(}
      = if "relprec"=="relprec" & 2!=1 {c -(}
      - qui byvar `byvar', r(rho N) gen unique: corr `beta`refmethod'' `beta`i''
      = qui byvar true dgm estimand, r(rho N) gen unique: corr est1 est2
      - rename Rrho_ corr_`i'
      = rename Rrho_ corr_2
      - rename RN_ ncorr_`i'
      = rename RN_ ncorr_2
      - local collsum `collsum' corr_`i' ncorr_`i'
      = local collsum  corr_2 ncorr_2
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" | "`sesims'"=="sesims" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" | "sesims"=="sesims" {c -(}
      - local collcount `collcount' sesims_`i'=`se`i''
      = local collcount bsims_1=est1 sesims_1=se1 bothsims_1=cover_1 bsims_2=est2 sesims_2=se2
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" {c -(}
      - local collmean `collmean' modelse_`i'=`se`i''
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = est2 mse_2 modelse_2=se2
      - local collmean `collmean' varmean_`i'=var_`i'
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = est2 mse_2 modelse_2=se2 varmean_2=var_2
      - local collsd `collsd' varsd_`i'=var_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = est2 empse_2=est2 msesd_2=mse_2 varsd_2=var_2
      - local collsd `collsd' modelsesd_`i'=`se`i''
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = est2 empse_2=est2 msesd_2=mse_2 varsd_2=var_2 modelsesd_2=se2
      - {c )-}
      - if "`ciwidth'"=="ciwidth" {c -(}
      = if "ciwidth"=="ciwidth" {c -(}
      - qui gen ciwidth_`i' = 2*(`crit`i'')*`se`i''
      = qui gen ciwidth_2 = 2*(__000009)*se2
      - local collmean `collmean' ciwidth_`i'
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = est2 mse_2 modelse_2=se2 varmean_2=var_2 ciwidth_2
      - local collsd `collsd' ciwidthsd_`i' = ciwidth_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = est2 empse_2=est2 msesd_2=mse_2 varsd_2=var_2 modelsesd_2=se2 ciwidthsd_2 = ciwidth_2
      - {c )-}
      - if "`cover'"=="cover" | "`power'"=="power" {c -(}
      = if "cover"=="cover" | "power"=="power" {c -(}
      - if "`cover'"=="cover" local collcount `collcount' bothsims_`i'=cover_`i'
      = if "cover"=="cover" local collcount bsims_1=est1 sesims_1=se1 bothsims_1=cover_1 bsims_2=est2 sesims_2=se2 bothsims_2=cover_2
      - else local collcount `collcount' bothsims_`i'=power_`i'
      = else local collcount bsims_1=est1 sesims_1=se1 bothsims_1=cover_1 bsims_2=est2 sesims_2=se2 bothsims_2=cover_2 bothsims_2=power_2
      - {c )-}
      - if "`cover'"=="cover" {c -(}
      = if "cover"=="cover" {c -(}
      - qui gen cover_`i' = 100*(abs(`beta`i''-`truevar')<(`crit`i'')*`se`i'') if !missing(`beta`i'') & !missing(`se`i'')
      = qui gen cover_2 = 100*(abs(est2-__000002)<(__000009)*se2) if !missing(est2) & !missing(se2)
      - local collmean `collmean' cover_`i'
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = est2 mse_2 modelse_2=se2 varmean_2=var_2 ciwidth_2 cover_2
      - {c )-}
      - if "`power'"=="power" {c -(}
      = if "power"=="power" {c -(}
      - qui gen power_`i' = 100*(abs(`beta`i''-`null')>=(`crit`i'')*`se`i'') if !missing(`beta`i'') & !missing(`se`i'')
      = qui gen power_2 = 100*(abs(est2-0)>=(__000009)*se2) if !missing(est2) & !missing(se2)
      - local collmean `collmean' power_`i'
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = est2 mse_2 modelse_2=se2 varmean_2=var_2 ciwidth_2 cover_2 power_2
      - {c )-}
      - if "`robust'"=="robust" {c -(}
      = if ""=="robust" {c -(}
        if "`empse'"=="empse" {c -(}
        tempvar empseT`i' empseB`i' empseTT`i' empseBB`i' empseTB`i'
        qui gen `empseT`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `empseB`i'' = 1
        qui gen `empseTT`i'' = `empseT`i''^2
        qui gen `empseBB`i'' = `empseB`i''^2
        qui gen `empseTB`i'' = `empseT`i''*`empseB`i''
        local collsum `collsum' `empseT`i'' `empseB`i'' `empseTT`i'' `empseTB`i'' `empseBB`i''
        {c )-}
        if "`relprec'"=="relprec" {c -(}
        tempvar relprecT`i' relprecB`i' relprecTT`i' relprecBB`i' relprecTB`i'
        qui gen `relprecT`i'' = (`beta`refmethod''-`betamean`refmethod'')^2
        qui gen `relprecB`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `relprecTT`i'' = `relprecT`i''^2
        qui gen `relprecBB`i'' = `relprecB`i''^2
        qui gen `relprecTB`i'' = `relprecT`i''*`relprecB`i''
        local collsum `collsum' `relprecT`i'' `relprecB`i'' `relprecTT`i'' `relprecTB`i'' `relprecBB`i''
        {c )-}
        if "`relerror'"=="relerror" {c -(}
        tempvar relerrorT`i' relerrorB`i' relerrorTT`i' relerrorBB`i' relerrorTB`i'
        qui gen `relerrorT`i'' = `se`i''^2
        qui gen `relerrorB`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `relerrorTT`i'' = `relerrorT`i''^2
        qui gen `relerrorBB`i'' = `relerrorB`i''^2
        qui gen `relerrorTB`i'' = `relerrorT`i''*`relerrorB`i''
        local collsum `collsum' `relerrorT`i'' `relerrorB`i'' `relerrorTT`i'' `relerrorTB`i'' `relerrorBB`i''
        {c )-}
        {c )-}
      - {c )-}
      - if "`collmean'"!="" local collmean (mean) `collmean'
      = if "bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = est2 mse_2 modelse_2=se2 varmean_2=var_2 ciwidth_2 cover_2 power_2"!="" local collmean (mean) bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = est2 mse_2 modelse_2=se2 varmean_2=var_2 ciwidth_2 cover_2 power_2
      - if "`collsd'"!="" local collsd (sd) `collsd'
      = if "biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = est2 empse_2=est2 msesd_2=mse_2 varsd_2=var_2 modelsesd_2=se2 ciwidthsd_2 = ciwidth_2"!="" local collsd (sd) biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = est2 empse_2=est2 msesd_2=mse_2 varsd_2=var_2 modelsesd_2=se2 ciwidthsd_2 = ciwidth_2
      - if "`collcount'"!="" local collcount (count) `collcount'
      = if "bsims_1=est1 sesims_1=se1 bothsims_1=cover_1 bsims_2=est2 sesims_2=se2 bothsims_2=cover_2"!="" local collcount (count) bsims_1=est1 sesims_1=se1 bothsims_1=cover_1 bsims_2=est2 sesims_2=se2 bothsims_2=cover_2
      - if "`collsum'"!="" local collsum (sum) `collsum'
      = if "corr_2 ncorr_2"!="" local collsum (sum) corr_2 ncorr_2
      - collapse `collmean' `collsd' `collcount' `collsum', by(`byvar')
      = collapse (mean) bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = est2 mse_2 modelse_2=se2 varmean_2=var_2 ciwidth_2 cover_2 power_2 (sd) biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = est2 empse_2=est2 msesd_2=mse_2 varsd_2=var_2 modelsesd_2=se2 ciwidthsd_2 = ciwidth_2 (count) bsims_1=est1 sesims_1=se1 bothsims_1=cover_1 bsims_2=est2 sesims_2=se2 bothsims_2=cover_2 (sum) corr_2 ncorr_2, by(true dgm estimand)
      - if !mi("`debug'") {c -(}
      = if !mi("") {c -(}
        di as input "Data after collapse:"
        l
        {c )-}
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - qui gen k_`i' = bsims_`i'/(bsims_`i'-1)
      = qui gen k_1 = bsims_1/(bsims_1-1)
      - if "`bias'"=="bias" {c -(}
      = if "bias"=="bias" {c -(}
      - qui gen bias_mcse_`i' = biassd_`i' / sqrt(bsims_`i')
      = qui gen bias_mcse_1 = biassd_1 / sqrt(bsims_1)
      - {c )-}
      - if "`mean'"=="mean" {c -(}
      = if "mean"=="mean" {c -(}
      - qui gen mean_mcse_`i' = meansd_`i' / sqrt(bsims_`i')
      = qui gen mean_mcse_1 = meansd_1 / sqrt(bsims_1)
      - {c )-}
      - if ("`empse'"=="empse" | "`relerror'"=="relerror") & "`robust'"=="" {c -(}
      = if ("empse"=="empse" | "relerror"=="relerror") & ""=="" {c -(}
      - qui gen empse_mcse_`i' = empse_`i'/sqrt(2*(bsims_`i'-1))
      = qui gen empse_mcse_1 = empse_1/sqrt(2*(bsims_1-1))
      - {c )-}
      - else if ("`empse'"=="empse") & "`robust'"=="robust" {c -(}
      = else if ("empse"=="empse") & ""=="robust" {c -(}
        qui replace `empseTT`i''=`empseTT`i''*(k_`i'^2)
        qui replace `empseTB`i''=`empseTB`i''*k_`i'
        qui replace `empseT`i'' =`empseT`i'' *k_`i'
        qui gen empse_mcse_`i' = sqrt(k_`i') * sqrt(`empseTT`i'' -2*(`empseT`i''/`empseB`i'')*`empseTB`i'' +(`empseT`i''/`empseB`i'')^2*`empseBB`i'') / `empseB`i''
        qui replace empse_mcse_`i' = empse_mcse_`i' / (2*empse_`i')
        {c )-}
      - if "`relprec'"=="relprec" {c -(}
      = if "relprec"=="relprec" {c -(}
      - if `i'!=`refmethod' {c -(}
      = if 1!=1 {c -(}
        qui gen relprec_`i' = 100 * ((empse_`refmethod'/empse_`i')^2-1)
        if "`robust'"=="" {c -(}
        qui gen relprec_mcse_`i' = 200 * (empse_`refmethod'/empse_`i')^2 * sqrt((1-(corr_`i')^2)/(ncorr_`i'-1))
        {c )-}
        else {c -(}
        qui gen relprec_mcse_`i' = 100 * sqrt(`relprecTT`i'' -2*(`relprecT`i''/`relprecB`i'')*`relprecTB`i'' +(`relprecT`i''/`relprecB`i'')^2*`relprecBB`i'') / `relprecB`i''
        {c )-}
        {c )-}
      - else {c -(}
      - qui gen relprec_`i' = .
      = qui gen relprec_1 = .
      - qui gen relprec_mcse_`i' = .
      = qui gen relprec_mcse_1 = .
      - {c )-}
      - {c )-}
      - if "`mse'"=="mse" {c -(}
      = if "mse"=="mse" {c -(}
      - qui gen mse_mcse_`i' = msesd_`i' / sqrt(bsims_`i')
      = qui gen mse_mcse_1 = msesd_1 / sqrt(bsims_1)
      - {c )-}
      - if "`rmse'"=="rmse" {c -(}
      = if "rmse"=="rmse" {c -(}
      - qui gen rmse_`i' = sqrt(mse_`i')
      = qui gen rmse_1 = sqrt(mse_1)
      - qui gen rmse_mcse_`i' = msesd_`i' / (2 * sqrt(bsims_`i') * rmse_`i')
      = qui gen rmse_mcse_1 = msesd_1 / (2 * sqrt(bsims_1) * rmse_1)
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" {c -(}
      - if "`modelsemethod'"=="rmse" {c -(}
      = if "rmse"=="rmse" {c -(}
      - qui replace modelse_`i' = sqrt(varmean_`i')
      = qui replace modelse_1 = sqrt(varmean_1)
      - qui gen modelse_mcse_`i' = varsd_`i' / sqrt(4 * sesims_`i' * varmean_`i')
      = qui gen modelse_mcse_1 = varsd_1 / sqrt(4 * sesims_1 * varmean_1)
      - {c )-}
      - else if "`modelsemethod'"=="mean" {c -(}
      = else if "rmse"=="mean" {c -(}
        qui gen modelse_mcse_`i' = modelsesd_`i' / sqrt(sesims_`i')
        {c )-}
      - {c )-}
      - if "`ciwidth'"=="ciwidth" {c -(}
      = if "ciwidth"=="ciwidth" {c -(}
      - qui gen ciwidth_mcse_`i' = ciwidthsd_`i' / sqrt(bsims_`i')
      = qui gen ciwidth_mcse_1 = ciwidthsd_1 / sqrt(bsims_1)
      - {c )-}
      - if "`relerror'"=="relerror" {c -(}
      = if "relerror"=="relerror" {c -(}
      - qui gen relerror_`i' = 100*(modelse_`i'/empse_`i'-1)
      = qui gen relerror_1 = 100*(modelse_1/empse_1-1)
      - if "`robust'"=="" qui gen relerror_mcse_`i' = 100*(modelse_`i'/empse_`i') * sqrt((modelse_mcse_`i'/modelse_`i')^2 + (empse_mcse_`i'/empse_`i')^2 )
      = if ""=="" qui gen relerror_mcse_1 = 100*(modelse_1/empse_1) * sqrt((modelse_mcse_1/modelse_1)^2 + (empse_mcse_1/empse_1)^2 )
      - else {c -(}
        qui gen relerror_mcse_`i' = sqrt(`relerrorTT`i'' -2*(`relerrorT`i''/`relerrorB`i'')*`relerrorTB`i'' +(`relerrorT`i''/`relerrorB`i'')^2*`relerrorBB`i'') / `relerrorB`i''
        qui replace relerror_mcse_`i' = relerror_mcse_`i' * 100 / (2*(1+relerror_`i'/100))
        {c )-}
      - {c )-}
      - if "`cover'"=="cover" {c -(}
      = if "cover"=="cover" {c -(}
      - qui gen cover_mcse_`i' = sqrt(cover_`i'*(100-cover_`i')/bothsims_`i') if bothsims_`i'>1
      = qui gen cover_mcse_1 = sqrt(cover_1*(100-cover_1)/bothsims_1) if bothsims_1>1
      - {c )-}
      - if "`power'"=="power" {c -(}
      = if "power"=="power" {c -(}
      - qui gen power_mcse_`i' = sqrt(power_`i'*(100-power_`i')/bothsims_`i') if bothsims_`i'>1
      = qui gen power_mcse_1 = sqrt(power_1*(100-power_1)/bothsims_1) if bothsims_1>1
      - {c )-}
      - cap drop varmean_`i'
      = cap drop varmean_1
      - cap drop varsd_`i'
      = cap drop varsd_1
      - {c )-}
      - qui gen k_`i' = bsims_`i'/(bsims_`i'-1)
      = qui gen k_2 = bsims_2/(bsims_2-1)
      - if "`bias'"=="bias" {c -(}
      = if "bias"=="bias" {c -(}
      - qui gen bias_mcse_`i' = biassd_`i' / sqrt(bsims_`i')
      = qui gen bias_mcse_2 = biassd_2 / sqrt(bsims_2)
      - {c )-}
      - if "`mean'"=="mean" {c -(}
      = if "mean"=="mean" {c -(}
      - qui gen mean_mcse_`i' = meansd_`i' / sqrt(bsims_`i')
      = qui gen mean_mcse_2 = meansd_2 / sqrt(bsims_2)
      - {c )-}
      - if ("`empse'"=="empse" | "`relerror'"=="relerror") & "`robust'"=="" {c -(}
      = if ("empse"=="empse" | "relerror"=="relerror") & ""=="" {c -(}
      - qui gen empse_mcse_`i' = empse_`i'/sqrt(2*(bsims_`i'-1))
      = qui gen empse_mcse_2 = empse_2/sqrt(2*(bsims_2-1))
      - {c )-}
      - else if ("`empse'"=="empse") & "`robust'"=="robust" {c -(}
      = else if ("empse"=="empse") & ""=="robust" {c -(}
        qui replace `empseTT`i''=`empseTT`i''*(k_`i'^2)
        qui replace `empseTB`i''=`empseTB`i''*k_`i'
        qui replace `empseT`i'' =`empseT`i'' *k_`i'
        qui gen empse_mcse_`i' = sqrt(k_`i') * sqrt(`empseTT`i'' -2*(`empseT`i''/`empseB`i'')*`empseTB`i'' +(`empseT`i''/`empseB`i'')^2*`empseBB`i'') / `empseB`i''
        qui replace empse_mcse_`i' = empse_mcse_`i' / (2*empse_`i')
        {c )-}
      - if "`relprec'"=="relprec" {c -(}
      = if "relprec"=="relprec" {c -(}
      - if `i'!=`refmethod' {c -(}
      = if 2!=1 {c -(}
      - qui gen relprec_`i' = 100 * ((empse_`refmethod'/empse_`i')^2-1)
      = qui gen relprec_2 = 100 * ((empse_1/empse_2)^2-1)
      - if "`robust'"=="" {c -(}
      = if ""=="" {c -(}
      - qui gen relprec_mcse_`i' = 200 * (empse_`refmethod'/empse_`i')^2 * sqrt((1-(corr_`i')^2)/(ncorr_`i'-1))
      = qui gen relprec_mcse_2 = 200 * (empse_1/empse_2)^2 * sqrt((1-(corr_2)^2)/(ncorr_2-1))
      - {c )-}
      - else {c -(}
        qui gen relprec_mcse_`i' = 100 * sqrt(`relprecTT`i'' -2*(`relprecT`i''/`relprecB`i'')*`relprecTB`i'' +(`relprecT`i''/`relprecB`i'')^2*`relprecBB`i'') / `relprecB`i''
        {c )-}
      - {c )-}
      - else {c -(}
        qui gen relprec_`i' = .
        qui gen relprec_mcse_`i' = .
        {c )-}
      - {c )-}
      - if "`mse'"=="mse" {c -(}
      = if "mse"=="mse" {c -(}
      - qui gen mse_mcse_`i' = msesd_`i' / sqrt(bsims_`i')
      = qui gen mse_mcse_2 = msesd_2 / sqrt(bsims_2)
      - {c )-}
      - if "`rmse'"=="rmse" {c -(}
      = if "rmse"=="rmse" {c -(}
      - qui gen rmse_`i' = sqrt(mse_`i')
      = qui gen rmse_2 = sqrt(mse_2)
      - qui gen rmse_mcse_`i' = msesd_`i' / (2 * sqrt(bsims_`i') * rmse_`i')
      = qui gen rmse_mcse_2 = msesd_2 / (2 * sqrt(bsims_2) * rmse_2)
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" {c -(}
      - if "`modelsemethod'"=="rmse" {c -(}
      = if "rmse"=="rmse" {c -(}
      - qui replace modelse_`i' = sqrt(varmean_`i')
      = qui replace modelse_2 = sqrt(varmean_2)
      - qui gen modelse_mcse_`i' = varsd_`i' / sqrt(4 * sesims_`i' * varmean_`i')
      = qui gen modelse_mcse_2 = varsd_2 / sqrt(4 * sesims_2 * varmean_2)
      - {c )-}
      - else if "`modelsemethod'"=="mean" {c -(}
      = else if "rmse"=="mean" {c -(}
        qui gen modelse_mcse_`i' = modelsesd_`i' / sqrt(sesims_`i')
        {c )-}
      - {c )-}
      - if "`ciwidth'"=="ciwidth" {c -(}
      = if "ciwidth"=="ciwidth" {c -(}
      - qui gen ciwidth_mcse_`i' = ciwidthsd_`i' / sqrt(bsims_`i')
      = qui gen ciwidth_mcse_2 = ciwidthsd_2 / sqrt(bsims_2)
      - {c )-}
      - if "`relerror'"=="relerror" {c -(}
      = if "relerror"=="relerror" {c -(}
      - qui gen relerror_`i' = 100*(modelse_`i'/empse_`i'-1)
      = qui gen relerror_2 = 100*(modelse_2/empse_2-1)
      - if "`robust'"=="" qui gen relerror_mcse_`i' = 100*(modelse_`i'/empse_`i') * sqrt((modelse_mcse_`i'/modelse_`i')^2 + (empse_mcse_`i'/empse_`i')^2 )
      = if ""=="" qui gen relerror_mcse_2 = 100*(modelse_2/empse_2) * sqrt((modelse_mcse_2/modelse_2)^2 + (empse_mcse_2/empse_2)^2 )
      - else {c -(}
        qui gen relerror_mcse_`i' = sqrt(`relerrorTT`i'' -2*(`relerrorT`i''/`relerrorB`i'')*`relerrorTB`i'' +(`relerrorT`i''/`relerrorB`i'')^2*`relerrorBB`i'') / `relerrorB`i''
        qui replace relerror_mcse_`i' = relerror_mcse_`i' * 100 / (2*(1+relerror_`i'/100))
        {c )-}
      - {c )-}
      - if "`cover'"=="cover" {c -(}
      = if "cover"=="cover" {c -(}
      - qui gen cover_mcse_`i' = sqrt(cover_`i'*(100-cover_`i')/bothsims_`i') if bothsims_`i'>1
      = qui gen cover_mcse_2 = sqrt(cover_2*(100-cover_2)/bothsims_2) if bothsims_2>1
      - {c )-}
      - if "`power'"=="power" {c -(}
      = if "power"=="power" {c -(}
      - qui gen power_mcse_`i' = sqrt(power_`i'*(100-power_`i')/bothsims_`i') if bothsims_`i'>1
      = qui gen power_mcse_2 = sqrt(power_2*(100-power_2)/bothsims_2) if bothsims_2>1
      - {c )-}
      - cap drop varmean_`i'
      = cap drop varmean_2
      - cap drop varsd_`i'
      = cap drop varsd_2
      - {c )-}
      - if !mi("`debug'") {c -(}
      = if !mi("") {c -(}
        di as input "Data after post-processing:"
        l
        {c )-}
      - local alpha=100-`level'
      = local alpha=100-95
      - local bsimsname Non-missing point estimates
      - local sesimsname Non-missing standard errors
      - local biasname Bias in point estimate
      - local meanname Mean of point estimate
      - local empsename Empirical standard error
      - local relprecname % gain in precision relative to method `label`refmethod''
      = local relprecname % gain in precision relative to method 1
      - local msename Mean squared error
      - local rmsename Root mean squared error
      - if "`modelsemethod'" =="mean" local modelsename Mean model-based standard error `sebeta'
      = if "rmse" =="mean" local modelsename Mean model-based standard error 
      - if "`modelsemethod'" =="rmse" local modelsename RMS model-based standard error `sebeta'
      = if "rmse" =="rmse" local modelsename RMS model-based standard error 
      - local ciwidthname Mean conf. interval width
      - local relerrorname Relative % error in standard error
      - local covername % coverage of nominal `level'% conf. interval
      = local covername % coverage of nominal 95% conf. interval
      - local powername % power of `alpha'% level test
      = local powername % power of 5% level test
      - local keeplist `byvar'
      = local keeplist true dgm estimand
      - foreach name in `output' {c -(}
      = foreach name in bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power {c -(}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "bsims"!="bsims" & "bsims"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename bsims_1 method1bsims
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims
      - if `domcse' {c -(}
      = if 0 {c -(}
        rename `name'_mcse_`i' method`i'`name'_mcse
        local keeplist `keeplist' method`i'`name'_mcse
        {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename bsims_2 method2bsims
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims
      - if `domcse' {c -(}
      = if 0 {c -(}
        rename `name'_mcse_`i' method`i'`name'_mcse
        local keeplist `keeplist' method`i'`name'_mcse
        {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "sesims"!="bsims" & "sesims"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename sesims_1 method1sesims
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims
      - if `domcse' {c -(}
      = if 0 {c -(}
        rename `name'_mcse_`i' method`i'`name'_mcse
        local keeplist `keeplist' method`i'`name'_mcse
        {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename sesims_2 method2sesims
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims
      - if `domcse' {c -(}
      = if 0 {c -(}
        rename `name'_mcse_`i' method`i'`name'_mcse
        local keeplist `keeplist' method`i'`name'_mcse
        {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "bias"!="bsims" & "bias"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename bias_1 method1bias
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename bias_mcse_1 method1bias_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename bias_2 method2bias
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename bias_mcse_2 method2bias_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "mean"!="bsims" & "mean"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename mean_1 method1mean
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename mean_mcse_1 method1mean_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename mean_2 method2mean
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename mean_mcse_2 method2mean_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "empse"!="bsims" & "empse"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename empse_1 method1empse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename empse_mcse_1 method1empse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename empse_2 method2empse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename empse_mcse_2 method2empse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "relprec"!="bsims" & "relprec"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename relprec_1 method1relprec
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename relprec_mcse_1 method1relprec_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename relprec_2 method2relprec
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename relprec_mcse_2 method2relprec_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "mse"!="bsims" & "mse"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename mse_1 method1mse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename mse_mcse_1 method1mse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename mse_2 method2mse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename mse_mcse_2 method2mse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "rmse"!="bsims" & "rmse"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename rmse_1 method1rmse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename rmse_mcse_1 method1rmse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename rmse_2 method2rmse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename rmse_mcse_2 method2rmse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "modelse"!="bsims" & "modelse"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename modelse_1 method1modelse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename modelse_mcse_1 method1modelse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename modelse_2 method2modelse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename modelse_mcse_2 method2modelse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "ciwidth"!="bsims" & "ciwidth"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename ciwidth_1 method1ciwidth
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename ciwidth_mcse_1 method1ciwidth_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename ciwidth_2 method2ciwidth
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename ciwidth_mcse_2 method2ciwidth_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "relerror"!="bsims" & "relerror"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename relerror_1 method1relerror
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename relerror_mcse_1 method1relerror_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename relerror_2 method2relerror
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename relerror_mcse_2 method2relerror_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "cover"!="bsims" & "cover"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename cover_1 method1cover
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename cover_mcse_1 method1cover_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename cover_2 method2cover
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename cover_mcse_2 method2cover_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "power"!="bsims" & "power"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename power_1 method1power
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse method1power
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename power_mcse_1 method1power_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse method1power method1power_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename power_2 method2power
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse method1power method1power_mcse method2power
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename power_mcse_2 method2power_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse method1power method1power_mcse method2power method2power_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - local methodlist `methodlist' method`i'
      = local methodlist  method1
      - {c )-}
      - local methodlist `methodlist' method`i'
      = local methodlist method1 method2
      - {c )-}
      - keep `keeplist'
      = keep true dgm estimand method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse method1power method1power_mcse method2power method2power_mcse
      - qui reshape long `methodlist', i(`byvar') j(`gen'code) string
      = qui reshape long method1 method2, i(true dgm estimand) j(_perfmeascode) string
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - char method`i'[varname] "`label`i''"
      = char method1[varname] "1"
      - label var method`i' "`label`i''"
      = label var method1 "1"
      - {c )-}
      - char method`i'[varname] "`label`i''"
      = char method2[varname] "2"
      - label var method`i' "`label`i''"
      = label var method2 "2"
      - {c )-}
      - local i 0
      - qui gen mcse = .
      - qui gen `gen'num = .
      = qui gen _perfmeasnum = .
      - foreach perfmeas in bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power {c -(}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="bsims"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="bsims_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="bsims" if _perfmeascode=="bsims_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 1 if _perfmeascode=="bsims" | _perfmeascode=="bsims_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "bsims"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "bsims"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "bsims"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "bsims"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "bsims"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "bsims"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "bsims"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "bsims"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "bsims"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "bsims"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "bsims"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "bsims"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "bsims"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 1 "Non-missing point estimates", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="sesims"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="sesims_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="sesims" if _perfmeascode=="sesims_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 2 if _perfmeascode=="sesims" | _perfmeascode=="sesims_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "sesims"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "sesims"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "sesims"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "sesims"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "sesims"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "sesims"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "sesims"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "sesims"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "sesims"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "sesims"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "sesims"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "sesims"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "sesims"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 2 "Non-missing standard errors", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="bias"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="bias_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="bias" if _perfmeascode=="bias_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 3 if _perfmeascode=="bias" | _perfmeascode=="bias_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "bias"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "bias"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "bias"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "bias"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "bias"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "bias"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "bias"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "bias"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "bias"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "bias"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "bias"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "bias"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "bias"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 3 "Bias in point estimate", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="mean"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="mean_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="mean" if _perfmeascode=="mean_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 4 if _perfmeascode=="mean" | _perfmeascode=="mean_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "mean"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "mean"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "mean"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "mean"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "mean"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "mean"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "mean"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "mean"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "mean"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "mean"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "mean"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "mean"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "mean"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 4 "Mean of point estimate", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="empse"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="empse_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="empse" if _perfmeascode=="empse_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 5 if _perfmeascode=="empse" | _perfmeascode=="empse_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "empse"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "empse"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "empse"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "empse"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "empse"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "empse"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "empse"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "empse"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "empse"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "empse"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "empse"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "empse"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "empse"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 5 "Empirical standard error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="relprec"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="relprec_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="relprec" if _perfmeascode=="relprec_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 6 if _perfmeascode=="relprec" | _perfmeascode=="relprec_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "relprec"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "relprec"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "relprec"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "relprec"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "relprec"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "relprec"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "relprec"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "relprec"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "relprec"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "relprec"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "relprec"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "relprec"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "relprec"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 6 "% precision gain relative to method 1", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="mse"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="mse_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="mse" if _perfmeascode=="mse_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 7 if _perfmeascode=="mse" | _perfmeascode=="mse_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "mse"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "mse"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "mse"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "mse"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "mse"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "mse"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "mse"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "mse"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "mse"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "mse"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "mse"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "mse"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "mse"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 7 "Mean squared error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="rmse"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="rmse_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="rmse" if _perfmeascode=="rmse_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 8 if _perfmeascode=="rmse" | _perfmeascode=="rmse_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "rmse"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "rmse"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "rmse"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "rmse"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "rmse"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "rmse"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "rmse"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "rmse"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "rmse"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "rmse"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "rmse"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "rmse"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "rmse"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 8 "Root mean squared error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="modelse"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="modelse_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="modelse" if _perfmeascode=="modelse_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 9 if _perfmeascode=="modelse" | _perfmeascode=="modelse_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "modelse"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "modelse"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "modelse"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "modelse"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "modelse"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "modelse"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "modelse"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "modelse"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "modelse"=="modelse" {c -(}
      - if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
      = if "rmse" =="mean" local label "Mean model-based standard error"
      - if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
      = if "rmse" =="rmse" local label "RMS model-based standard error"
      - {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "modelse"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "modelse"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "modelse"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "modelse"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 9 "RMS model-based standard error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="ciwidth"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="ciwidth_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="ciwidth" if _perfmeascode=="ciwidth_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 10 if _perfmeascode=="ciwidth" | _perfmeascode=="ciwidth_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "ciwidth"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "ciwidth"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "ciwidth"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "ciwidth"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "ciwidth"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "ciwidth"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "ciwidth"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "ciwidth"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "ciwidth"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "ciwidth"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "ciwidth"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "ciwidth"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "ciwidth"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 10 "Mean conf. interval width", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="relerror"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="relerror_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="relerror" if _perfmeascode=="relerror_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 11 if _perfmeascode=="relerror" | _perfmeascode=="relerror_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "relerror"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "relerror"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "relerror"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "relerror"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "relerror"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "relerror"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "relerror"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "relerror"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "relerror"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "relerror"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "relerror"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "relerror"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "relerror"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 11 "Relative % error in standard error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="cover"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="cover_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="cover" if _perfmeascode=="cover_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 12 if _perfmeascode=="cover" | _perfmeascode=="cover_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "cover"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "cover"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "cover"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "cover"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "cover"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "cover"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "cover"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "cover"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "cover"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "cover"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "cover"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "cover"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "cover"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 12 "% coverage of nominal 95% conf. interval", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="power"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="power_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="power" if _perfmeascode=="power_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 13 if _perfmeascode=="power" | _perfmeascode=="power_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "power"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "power"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "power"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "power"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "power"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "power"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "power"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "power"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "power"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "power"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "power"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "power"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "power"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 13 "% power of 5% level test", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - assert !mi(mcse)
      - foreach var in `methodlist' {c -(}
      = foreach var in method1 method2 {c -(}
      - rename `var' `var'_
      = rename method1 method1_
      - local methodlist2 `methodlist2' `var'_
      = local methodlist2  method1_
      - {c )-}
      - rename `var' `var'_
      = rename method2 method2_
      - local methodlist2 `methodlist2' `var'_
      = local methodlist2 method1_ method2_
      - {c )-}
      - qui reshape wide `methodlist2', i(`byvar' `gen'num) j(mcse)
      = qui reshape wide method1_ method2_, i(true dgm estimand _perfmeasnum) j(mcse)
      - local ids `gen'num `by'
      = local ids _perfmeasnum true dgm estimand
      - local betas
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename method`i'_0 `beta`i''
      = rename method1_0 est1
      - label var `beta`i'' "`label`i''"
      = label var est1 "1"
      - char `beta`i''[varname] "`label`i''"
      = char est1[varname] "1"
      - local betasnomcse `betasnomcse' `beta`i''
      = local betasnomcse  est1
      - local betas `betas' `beta`i''
      = local betas  est1
      - if "`mcse'"=="mcse" {c -(}
      = if "mcse"=="mcse" {c -(}
      - rename method`i'_1 `beta`i''_mcse
      = rename method1_1 est1_mcse
      - local betas `betas' `beta`i''_mcse
      = local betas est1 est1_mcse
      - label var `beta`i''_mcse "`label`i'' (MCse)"
      = label var est1_mcse "1 (MCse)"
      - char `beta`i''_mcse[varname] "(MCse)"
      = char est1_mcse[varname] "(MCse)"
      - {c )-}
      - {c )-}
      - rename method`i'_0 `beta`i''
      = rename method2_0 est2
      - label var `beta`i'' "`label`i''"
      = label var est2 "2"
      - char `beta`i''[varname] "`label`i''"
      = char est2[varname] "2"
      - local betasnomcse `betasnomcse' `beta`i''
      = local betasnomcse est1 est2
      - local betas `betas' `beta`i''
      = local betas est1 est1_mcse est2
      - if "`mcse'"=="mcse" {c -(}
      = if "mcse"=="mcse" {c -(}
      - rename method`i'_1 `beta`i''_mcse
      = rename method2_1 est2_mcse
      - local betas `betas' `beta`i''_mcse
      = local betas est1 est1_mcse est2 est2_mcse
      - label var `beta`i''_mcse "`label`i'' (MCse)"
      = label var est2_mcse "2 (MCse)"
      - char `beta`i''_mcse[varname] "(MCse)"
      = char est2_mcse[varname] "(MCse)"
      - {c )-}
      - {c )-}
      - char `gen'num[varname] "Performance measure"
      = char _perfmeasnum[varname] "Performance measure"
      - label var `gen'num "Performance measure"
      = label var _perfmeasnum "Performance measure"
      - label var `gen'code "Performance measure"
      = label var _perfmeascode "Performance measure"
      - order `ids' `betas'
      = order _perfmeasnum true dgm estimand est1 est1_mcse est2 est2_mcse
      - sort `gen'num `by'
      = sort _perfmeasnum true dgm estimand
      - tokenize `format'
      = tokenize 
      - local bfmt "`1'"
      = local bfmt ""
      - local pctfmt "`2'"
      = local pctfmt ""
      - local nfmt "`3'"
      = local nfmt ""
      - if "`bfmt'"=="" {c -(}
      = if ""=="" {c -(}
      - if mi("`methodvar'") local bfmt: format `beta1'
      = if mi("method") local bfmt: format est1
      - else local bfmt `bfmt0'
      = else local bfmt %9.0g
      - {c )-}
      - if "`pctfmt'"=="" | "`pctfmt'"=="=" | "`pctfmt'"=="." local pctfmt `bfmt'
      = if ""=="" | ""=="=" | ""=="." local pctfmt %9.0g
      - if "`nfmt'"=="" local nfmt %7.0f
      = if ""=="" local nfmt %7.0f
      - if mi("`transpose'") {c -(}
      = if mi("") {c -(}
      - if "`list'"!="nolist" {c -(}
      = if ""!="nolist" {c -(}
      - if "`listsep'"=="" {c -(}
      = if ""=="" {c -(}
      - qui format `betas' `bfmt'
      = qui format est1 est1_mcse est2 est2_mcse %9.0g
      - list `ids' `betas', noo subvarname sepby(`gen'num `sepby') `abbreviate'
      = list _perfmeasnum true dgm estimand est1 est1_mcse est2 est2_mcse, noo subvarname sepby(_perfmeasnum ) 
      - {c )-}
      - else {c -(}
        foreach perfmeas in `output' {c -(}
        di as text _new "``perfmeas'name'"
        local thisbetas = cond(inlist("`perfmeas'","bsims","sesims"), "betasnomcse", "betas")
        if inlist("`perfmeas'","bsims","sesims") local format `nfmt'
        else if inlist("`perfmeas'","bias","empse","modelse","mse") local format `bfmt'
        else local format `pctfmt'
        qui format `betas' `format'
        list `by' ``thisbetas'' if `gen'code=="`perfmeas'", noo subvarname sepby(`gen'num `sepby') `abbreviate'
        {c )-}
        {c )-}
      - {c )-}
      - qui format `betas' `bfmt'
      = qui format est1 est1_mcse est2 est2_mcse %9.0g
      - char `gen'num[varname]
      = char _perfmeasnum[varname]
      - {c )-}
      - else {c -(}
        di "Transposing results ..."
        drop `gen'num
        if "`origformat'"=="long" {c -(}
        {c )-}
        else if "`origformat'"=="wide" {c -(}
        foreach var of varlist `betas' {c -(}
        rename `var' b_`var'
        {c )-}
        local betastub b_
        {c )-}
        else exit 499
        qui reshape long `betastub', i(`gen'code `by') j(method) string
        qui reshape wide `betastub', i(`by' method) j(`gen'code) string
        if "`mcse'"=="mcse" {c -(}
        gen type = cond(substr(method,length(method)-4,5)=="_mcse","mcse","est")
        qui replace method = substr(method,1,length(method)-5) if type=="mcse"
        local type type
        local sep2 method
        {c )-}
        sort `by' method `type'
        foreach varname of varlist `betastub'* {c -(}
        local varname2 = substr("`varname'", 1+length("`betastub'"), .)
        rename `varname' `varname2'
        label var `varname2'
        {c )-}
        cap format `bias' `empse' `mse' `modelse' `bfmt'
        cap format `relprec' `relerror' `cover' `power' `pctfmt'
        cap format `bsims' `sesims' `sesims' `nfmt'
        if "`list'"!="nolist" {c -(}
        l `by' method `type' `bsims' `sesims' `bias' `empse' `relprec' `mse' `modelse' `relerror' `cover' `power', sepby(`by' `sep2') noo
        {c )-}
        {c )-}
      - if "`saving'"!="" {c -(}
      = if ""!="" {c -(}
        if "`by'"=="" drop `byvar'
        save `saving'
        {c )-}
      - if "`clear'"=="clear" {c -(}
      = if "clear"=="clear" {c -(}
      - restore, not
      - di as text "Results are now in memory."
      - {c )-}
      {hline 79} end simsum {hline}
    - if `methodlabels' == 0 local methodloop `metlist'
    = if 0 == 0 local methodloop 
    - else local methodloop `methodvalues'
    = else local methodloop 
    - foreach v in `methodloop' {c -(}
    = foreach v in  {c -(}
      if !mi("`se'") {c -(}
      if substr(" `estimate'`v'",strlen(" `estimate'`v'"),1)=="_" qui rename `estimate'`v'mcse `se'`v'
      else qui rename `estimate'`v'_mcse `se'`v'
      {c )-}
      else if substr(" `estimate'`v'",strlen(" `estimate'`v'"),1)=="_" qui rename `estimate'`v'mcse se`v'
      else qui rename `estimate'`v'_mcse se`v'
      {c )-}
    - local optionlistreshape `optionlist'
    = local optionlistreshape est se
    - local exclude "`true'"
    = local exclude "true"
    - local optionlistreshape: list optionlistreshape - exclude
    - if !mi("`metlist'") local methodreshape `metlist'
    = if !mi("") local methodreshape 
    - else local methodreshape `valmethod'
    = else local methodreshape 1 2
    - if `methodstringindi'==1 {c -(}
    = if 0==1 {c -(}
      qui reshape long `optionlistreshape', i(`dgm' `target' _perfmeasnum) j(`method' "`methodreshape'") string
      {c )-}
    - else if `methodstringindi'==0 & `methodlabels' == 0 {c -(}
    = else if 0==0 & 0 == 0 {c -(}
    - qui reshape long `optionlistreshape', i(`dgm' `target' _perfmeasnum) j(`method' "`methodreshape'")
    = qui reshape long est se, i(dgm estimand _perfmeasnum) j(method "1 2")
      {hline 76} begin reshape {hline}
      - u_mi_not_mi_set reshape other
      - if _caller() <= 10 {c -(}
        reshape_10 `0'
        exit
        {c )-}
      - if _caller() >= 12 {c -(}
      - global ReS_Call : di "version " string(_caller()) ":"
      - {c )-}
      - version 5.0, missing
      - if "`1'"=="clear" {c -(}
      = if "long"=="clear" {c -(}
        char _dta[ReS_ver]
        char _dta[ReS_i]
        char _dta[ReS_j]
        char _dta[ReS_jv]
        char _dta[ReS_Xij]
        char _dta[Res_Xi]
        char _dta[ReS_atwl]
        char _dta[ReS_str]
        local xijn : char _dta[ReS_Xij_n]
        if "`xijn'" != "" {c -(}
        forvalues i = 1/`xijn' {c -(}
        char _dta[ReS_Xij_wide`i']
        char _dta[ReS_Xij_long`i']
        {c )-}
        char _dta[ReS_Xij_n]
        {c )-}
        exit
        {c )-}
      - if "`1'"=="wide" | "`1'"=="long" {c -(}
      = if "long"=="wide" | "long"=="long" {c -(}
      - DoNew `*'
      = DoNew long est se, i(dgm estimand _perfmeasnum) j(method 1 2 )
      - exit
      {hline 78} end reshape {hline}
    - label value `method' `methodformat'
    = label value method 
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("value", "val") > 0 ) {c -(}
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {c -(}
      = if "" != "" {c -(}
        local fix ", nofix"
        {c )-}
      - gettoken var rest : anything
      - while `"`rest'"' != "" {c -(}
      = while `""' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
      - local vlist : list anything - lab
      - if "`lab'" == "." {c -(}
      = if "" == "." {c -(}
        local lab ""
        {c )-}
      - foreach var of varlist `vlist' {c -(}
      = foreach var of varlist method {c -(}
      - `vv' _label `val' `var' `lab' `fix'
      = version 15, missing: _label value method  
      - {c )-}
      - {c )-}
      - else {c -(}
        `vv' _label `macval(0)'
        {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - else if `methodstringindi'==0 & `methodlabels' == 1 {c -(}
    = else if 0==0 & 0 == 1 {c -(}
      qui reshape long `optionlistreshape', i(`dgm' `target' _perfmeasnum) j(`method' "`methodvalues'")
      label value `method' `methodformat'
      {c )-}
    - {c )-}
    - else if `nformat'==3 {c -(}
    = else if 1==3 {c -(}
      qui order `rep' `dgm' `target'
      qui sort `rep' `dgm' `target'
      if `methodstringindi' == 0 & "`methodlabels'" == "1" local methodloop `methodvalues'
      else local methodloop `valmethod'
      foreach v in `methodloop' {c -(}
      if substr("`v'",strlen("`v'"),1)=="_" local v = substr("`v'", 1, index("`v'","_") - 1)
      local estlist`v' `estvars'`v'
      local estlist `estlist' `estlist`v''
      local selist`v' `sevars'`v'
      local selist `selist' `selist`v''
      {c )-}
      qui simsum `estlist' `if', true(`true') se(`selist') id(`rep') by(`truevariable' `dgm' `target') max(20) `anything' clear mcse gen(_perfmeas) `force'
      foreach v in `valmethod' {c -(}
      if substr("`v'",strlen("`v'"),1)=="_" local v = substr("`v'", 1, index("`v'","_") - 1)
      if `estchange' == 1 {c -(}
      qui rename `estimate'_`v'_mcse `se'`v'
      {c )-}
      else {c -(}
      if substr(" `estimate'`v'",strlen(" `estimate'`v'"),1)=="_" qui rename `estimate'`v'mcse `se'`v'
      else qui rename `estimate'`v'_mcse `se'`v'
      {c )-}
      if `sechange' == 1 qui rename `se'`v' `se'_`v'
      {c )-}
      {c )-}
    - qui gen indi = -_perfmeasnum
    - qui levelsof _perfmeasnum, local(lablevels)
      {hline 75} begin levelsof {hline}
      - version 15.0
      - syntax varname [if] [in] [, Separate(str) MISSing Local(name local) Clean MATROW(name) MATCELL(name) HEXadecimal ]
      - if ("`missing'" == "") {c -(}
      = if ("" == "") {c -(}
      - marksample touse, strok
      - {c )-}
      - else {c -(}
        marksample touse, strok novarlist
        {c )-}
      - if (`"`separate'"' == "") {c -(}
      = if (`""' == "") {c -(}
      - local separate " "
      - {c )-}
      - local typ : type `varlist'
      = local typ : type _perfmeasnum
      - if ("`typ'" == "strL" | substr("`typ'", 1, 3) == "str") {c -(}
      = if ("float" == "strL" | substr("float", 1, 3) == "str") {c -(}
        NoHexadecimal `hexadecimal'
        NoMatrow `matrow'
        {c )-}
      - mata: st_rclear()
      - if ("`typ'" == "strL") {c -(}
      = if ("float" == "strL") {c -(}
        LevelsOfStrL `varlist' if `touse', separate(`"`separate'"') `clean' matcell(`matcell')
        {c )-}
      - else if (substr("`typ'", 1, 3) == "str") {c -(}
      = else if (substr("float", 1, 3) == "str") {c -(}
        local isclean = ("`clean'" != "")
        mata: LevelsOfString("`varlist'", "`touse'", `"`separate'"', `isclean', "`matcell'")
        {c )-}
      - else {c -(}
      - local isint = inlist("`typ'", "byte", "int", "long")
      = local isint = inlist("float", "byte", "int", "long")
      - mata: LevelsOfReal("`varlist'", "`touse'", `"`separate'"', `isint', 1, "`matrow'", "`matcell'", "`hexadecimal'" != "")
      = mata: LevelsOfReal("_perfmeasnum", "__000001", `" "', 0, 1, "", "", "" != "")
      - if ("`usetab'" == "usetab") {c -(}
      = if ("" == "usetab") {c -(}
        cap LevelsOfTab `varlist' if `touse', `missing' separate(`"`separate'"') matrow(`matrow') matcell(`matcell') `hexadecimal'
        if (_rc) {c -(}
        mata: LevelsOfReal("`varlist'", "`touse'", `"`separate'"', `isint', 0, "`matrow'", "`matcell'", "`hexadecimal'" != "")
        {c )-}
        {c )-}
      - {c )-}
      - if ("`local'" != "") {c -(}
      = if ("lablevels" != "") {c -(}
      - c_local `local' `"`r(levels)'"'
      = c_local lablevels `"1 2 3 4 5 6 7 8 9 10 11 12 13"'
      - {c )-}
      - di as text `"`r(levels)'"'
      = di as text `"1 2 3 4 5 6 7 8 9 10 11 12 13"'
      {hline 77} end levelsof {hline}
    - foreach lablevel of local lablevels {c -(}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 1
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -1 "Non-missing point estimates", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -1 "Non-missing point estimates", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 2
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -2 "Non-missing standard errors", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -2 "Non-missing standard errors", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 3
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -3 "Bias in point estimate", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -3 "Bias in point estimate", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 4
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -4 "Mean of point estimate", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -4 "Mean of point estimate", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 5
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -5 "Empirical standard error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -5 "Empirical standard error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 6
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -6 "% precision gain relative to method 1", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -6 "% precision gain relative to method 1", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 7
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -7 "Mean squared error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -7 "Mean squared error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 8
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -8 "Root mean squared error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -8 "Root mean squared error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 9
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -9 "RMS model-based standard error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -9 "RMS model-based standard error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 10
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -10 "Mean conf. interval width", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -10 "Mean conf. interval width", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 11
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -11 "Relative % error in standard error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -11 "Relative % error in standard error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 12
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -12 "% coverage of nominal 95% conf. interval", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -12 "% coverage of nominal 95% conf. interval", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 13
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -13 "% power of 5% level test", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -13 "% power of 5% level test", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - label values indi indilab
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("values", "val") > 0 ) {c -(}
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {c -(}
      = if "" != "" {c -(}
        local fix ", nofix"
        {c )-}
      - gettoken var rest : anything
      - while `"`rest'"' != "" {c -(}
      = while `" indilab"' != "" {c -(}
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "indilab"
      - {c )-}
      - while `"`rest'"' != "" {c -(}
      = while `""' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
      - local vlist : list anything - lab
      - if "`lab'" == "." {c -(}
      = if "indilab" == "." {c -(}
        local lab ""
        {c )-}
      - foreach var of varlist `vlist' {c -(}
      = foreach var of varlist indi {c -(}
      - `vv' _label `val' `var' `lab' `fix'
      = version 15, missing: _label values indi indilab 
      - {c )-}
      - {c )-}
      - else {c -(}
        `vv' _label `macval(0)'
        {c )-}
      {hline 80} end label {hline}
    - qui drop _perfmeasnum
    - if `methodstringindi'==1 {c -(}
    = if 0==1 {c -(}
      capture quietly tostring `method', replace
      {c )-}
    - qui append using `estimatesdata'
    = qui append using C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp
      {hline 77} begin append {hline}
      - version 11
      - if (_caller() < 11) {c -(}
        local version : di "version " string(_caller()) ":"
        `version' _append `0'
        exit
        {c )-}
      - syntax [anything(everything)] [, GENerate(name) * ]
      - gettoken using filenames : anything
      - if (`"`using'"' != "using") {c -(}
      = if (`"using"' != "using") {c -(}
        di as err "using required"
        exit 100
        {c )-}
      - if (`"`filenames'"' == "") {c -(}
      = if (`" C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp"' == "") {c -(}
        di as err "invalid file specification"
        exit 198
        {c )-}
      - foreach filename of local filenames {c -(}
      - capture quietly describe using `"`filename'"'
      = capture quietly describe using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp"'
      - if (_rc) {c -(}
        di as err `"file `filename' not found"'
        exit 601
        {c )-}
      - {c )-}
      - if ("`generate'" != "") {c -(}
      = if ("" != "") {c -(}
        confirm new var `generate'
        local filenum 0
        gen byte `generate' = `filenum'
        local ++filenum
        local filenumpos = _N + 1
        {c )-}
      - foreach filename of local filenames {c -(}
      - capture noisily _append using `"`filename'"', `options'
      = capture noisily _append using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp"', 
      - if _rc {c -(}
        if ("`generate'" != "") {c -(}
        capture quietly drop if `generate' > 0
        capture quietly drop `generate'
        {c )-}
        exit _rc
        {c )-}
      - if ("`generate'" != "") {c -(}
      = if ("" != "") {c -(}
        quietly replace `generate' = `filenum' in `filenumpos'/L
        local ++filenum
        local filenumpos = _N + 1
        {c )-}
      - {c )-}
      {hline 79} end append {hline}
    - qui replace indi = `rep' if `rep'>0 & `rep'!=.
    = qui replace indi = rep if rep>0 & rep!=.
    - qui drop `rep'
    = qui drop rep
    - qui rename indi `rep'
    = qui rename indi rep
      =struct rename_peldf {c -(}
      =        string scalar        element
      =        real scalar  elementtype
      =        real scalar            arg
      =        real scalar            match
      =struct rename_patterndf {c -(}
      =        real scalar  patterntype
      =        string scalar            original
      =        struct rename_peldf rowvector          ellist
      =        real rowvector            n_of
      =        string rowvector            varnames
      =        string matrix            pieces
      =struct rename_optiondf {c -(}
      =        real scalar       isrecase
      =        real scalar       isrecase_upper, isrecase_lower, isrecase_proper
      =        real scalar       isdryrun
      =        real scalar       isrenumber, isaddnumber
      =        real scalar            from
      =        real scalar       issort
      =        real scalar       isdebug
      =        real scalar       istest
      =        real scalar       isr
      =void rename_optiondf_init(struct rename_optiondf scalar option)
      =        option.isrecase = option.isdryrun = 0
      =                                option.isrecase_proper = 0
      =        option.isrenumber = option.isaddnumber = 0
      =        option.issort     = 0
      =        option.isdebug    = 0
      =        option.istest     = 0
      =        option.isr        = 0
      =struct rename_renamedf {c -(}
      =        struct rename_patterndf rowvector      oldplist
      =        struct rename_patterndf rowvector      newplist
      =        struct rename_optiondf scalar       option
      =void rename_cmd(string scalar thirdarg)
      =        string scalar    input
      =real scalar can_do_fast(string scalar input)
      =        string rowvector    token
      =        real scalar    rc
      =        if (length(token)!=2) return(0)
      =        if (!st_isname(token[1])) return(0)
      =        if (!st_isname(token[2])) return(0)
      =        if (token[1] == token[2]) return(0)
      =        return(1)
      =void rename_cmd_u(string scalar input)
      =        struct rename_renamedf scalar       ren
      =                dump_pattern(ren.oldplist, "old after parsing", 0)
      =                dump_pattern(ren.newplist, "new after parsing", 0)
      =void xeq_old_to_new(struct rename_renamedf scalar ren)
      =                dump_pattern(ren.oldplist, "old after linkage", 0)
      =                dump_pattern(ren.newplist, "new after linkage", 0)
      =                dump_pattern(ren.oldplist, "old final", 1)
      =                dump_pattern(ren.newplist, "new final", 1)
      =void xeq_recase(struct rename_renamedf scalar ren)
      =        fillin_old_varnames(ren.oldplist, ren.newplist, 0)
      =                dump_pattern(ren.oldplist, "old final", 1)
      =                dump_pattern(ren.newplist, "new final", 1)
      =void parse_cmd(struct rename_renamedf scalar ren, string scalar input)
      =        real scalar            c
      =        string scalar            lhs, ops
      =        string scalar            oldnames, newnames
      =        parse_cmd_pat_els(ren.oldplist, oldnames, 0)
      =                parse_cmd_pat_els(ren.newplist, newnames, 1)
      =real scalar parse_cmd_commaloc(string scalar s)
      =        real scalar    i, L
      =        real scalar    nestlev
      =        string scalar    c
      =void getarg(string scalar input, string scalar arg, string scalar rest)
      =        real scalar    L, npar, i
      =        string scalar    c
      =void parse_cmd_options(struct rename_optiondf scalar option, string scalar ops)
      =        string scalar            token
      =        transmorphic      t
      =        rename_optiondf_init(option)
      =void confirm_options_consistent(struct rename_optiondf scalar option)
      =        string rowvector    list
      =void parse_cmd_options_u(struct rename_optiondf scalar option, string scalar token, transmorphic t)
      =real scalar parse_cmd_options_u_std(struct rename_optiondf scalar option, string scalar source)
      =        real scalar    l
      =                option.isdebug = 1
      =                option.isdryrun = 1
      =                option.isrecase = option.isrecase_lower = 1
      =                option.isrecase = option.isrecase_proper= 1
      =                option.isr = 1
      =                option.issort = 1
      =                option.istest = 1
      =                option.isrecase = option.isrecase_upper = 1
      =        else    return(0)
      =        return(1)
      =real scalar parse_cmd_options_u_number(struct rename_optiondf scalar option, string scalar source,
      =                                                                transmorphic t)
      =        string scalar            token
      =        real scalar            from
      =        real scalar            l
      =        string scalar            op
      =        if (option.isrenumber | option.isaddnumber)  return(0)
      =                option.isrenumber = 1
      =                option.isaddnumber = 1
      =                return(1)
      =        return(1)
      =void parse_cmd_pat_els(struct rename_patterndf rowvector pat, string scalar toparse, real pattype)
      =        string scalar            token, curlist
      =        transmorphic      t
      =        real scalar       first
      =        first   = 1
      =                                first    = 1
      =                                first   = 0
      =void parse_cmd_pat_el(struct rename_patterndf rowvector pat, string scalar token, real pattype)
      =        string scalar            mytoken
      =        struct rename_patterndf scalar      mypat
      =        real scalar            i, j
      =        real matrix            found
      =        mypat.n_of        = J(1, (8), 0)
      =        confirm_not_empty(mytoken, pattype==0 ?
      =                if (i=strpos(mytoken, "*")) found = (found \ (i, (3)))
      =                if (i=strpos(mytoken, "?")) found = (found \ (i, (4) ))
      =                if (i=strpos(mytoken, "#")) found = (found \ (i, (5)))
      =                if (i=strpos(mytoken, "(")) found = (found \ (i, (6)))
      =                if (i=strpos(mytoken, "=")) found = (found \ (i, (7)))
      =                if (i=strpos(mytoken, ".")) found = (found \ (i, (8)))
      =                        if (i==(3)) {c -(}
      =                        else if (i==(4)) {c -(}
      =                        else if (i==(5)) {c -(}
      =                        else if (i==(6)) {c -(}
      =                        else if (i==(7)) {c -(}
      =                        else if (i==(8)) {c -(}
      =string scalar set_subscript(struct rename_patterndf scalar pat, string scalar token, real pt)
      =        real scalar    i
      =        string scalar    c
      =        if (pt != 1) {c -(}
      =        if (pt != 1)              return(token)
      =void set_pat_ETstrlist(struct rename_patterndf scalar pat, string scalar token)
      =        struct rename_peldf scalar          el
      =        el.elementtype = (1)
      =        pat.n_of[(1)] = pat.n_of[(1)] + 1
      =string scalar set_pat_str(struct rename_patterndf scalar pat, string scalar token)
      =        struct rename_peldf scalar          el
      =        el.elementtype = (2)
      =string scalar set_pat_ETstar(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar          el
      =        if (pat.patterntype == 0 && length(pat.ellist)) {c -(}
      =                if (pat.ellist[length(pat.ellist)].elementtype == (3)) {c -(}
      =        el.elementtype = (3)
      =string scalar set_pat_ETnum_v(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar          el
      =        if (pat.patterntype == 0 && length(pat.ellist)) {c -(}
      =                if (pat.ellist[length(pat.ellist)].elementtype == (5)) {c -(}
      =        el.elementtype = (5)
      =string scalar set_pat_ETeq(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar  el
      =        if (pat.patterntype == 0) {c -(}
      =        el.elementtype = (7)
      =string scalar set_pat_ETodot(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar  el
      =        if (pat.patterntype == 0) {c -(}
      =        el.elementtype = (8)
      =string scalar set_pat_ETqm(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar  el
      =        el.elementtype = (4)
      =string scalar set_pat_ETnum_f(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar          el
      =        real scalar            j
      =        el.elementtype = (6)
      =        if (el.arg > 10) {c -(}
      =void make_patternlist_lengths_equal(struct rename_renamedf scalar ren)
      =void build_recase_newpattern(struct rename_renamedf scalar ren)
      =        real scalar    i
      =        ren.newplist = rename_patterndf(length(ren.oldplist))
      =                ren.newplist[i].n_of        = J(1, (8), 0)
      =void link_patterns(struct rename_renamedf scalar ren)
      =        real scalar    i, jn
      =real scalar check_and_fix_ETnum(struct rename_patterndf scalar newp, struct rename_optiondf scalar option)
      =        real scalar            n, j, jn
      =        real scalar  tt
      =                if (tt==(5) | tt==(6)) {c -(}
      =                                (tt==(5) ? (9) : (10))
      =struct rename_linklocdf {c -(}
      =        real scalar    j_old, last_sequential_j_old
      =        real scalar    j_new
      =        real scalar    jn
      =        real rowvector    mapsub
      =void rename_linklocdf_init(struct rename_linklocdf scalar ll, real scalar jn)
      =void rename_linklocdf_next(struct rename_linklocdf scalar ll, struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp)
      =        real scalar subscr
      =real scalar map_subscript(real scalar subscr, real rowvector mapsub, struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp)
      =void link_patterns_u(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar jn)
      =        struct rename_linklocdf scalar      ll
      =        rename_linklocdf_init(ll, jn)
      =        rename_linklocdf_next(ll, oldp, newp)
      =                rename_linklocdf_next(ll, oldp, newp)
      =real rowvector pelidx_of_wcidx(struct rename_patterndf scalar oldp)
      =        real rowvector            toret
      =        real scalar            i
      =        real scalar  tt
      =                if (tt!=(1) & tt!=(2)) toret = (toret, i)
      =void confirm_wildcards_link(struct rename_patterndf scalar oldp, real scalar j_old,
      =                            struct rename_patterndf scalar newp, real scalar j_new)
      =        real scalar  tt_old, tt_new
      =        if (tt_new == (3)) return
      =        if (tt_new == (8))  return
      =        if (tt_new == (4)) {c -(}
      =                if (tt_old == (4)) return
      =        if (tt_new==(5) | tt_new==(6)) {c -(}
      =                if (tt_old==(5) | tt_old==(6)) return
      =string scalar printable_wildcard(struct rename_peldf scalar el)
      =        real scalar  tt
      =        if (tt == (3))  return("*")
      =        if (tt == (4))    return("?")
      =        if (tt == (8))  return(".")
      =        if (tt == (5)) return("#")
      =        if (tt == (6)) return("(" + el.arg*"*" + ")")
      =real scalar count_wildcards(struct rename_patterndf scalar pat)
      =        return(pat.n_of[(3)]  +
      =               pat.n_of[(4)]    +
      =               pat.n_of[(5)] +
      =               pat.n_of[(6)] +
      =               pat.n_of[(8)])
      =real scalar is_wildcard(real scalar tt)
      =        return( tt == (3)  |
      =                tt == (4)    |
      =                tt == (5) |
      =                tt == (6) |
      =                tt == (9) |
      =                tt == (10) |
      =                tt == (8)  )
      =real scalar find_next_wildcard(struct rename_peldf rowvector d, real scalar j0)
      =        real scalar    j
      =void fillin_old_varnames(struct rename_patterndf rowvector oldplist, struct rename_patterndf rowvector newplist,
      =                                                        real scalar issort)
      =        real scalar    i
      =        string scalar    tmpname
      =void fillin_old_varnames_u(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp,
      =                                        real scalar issort, string scalar tmpname)
      =        string rowvector            varnames, piece
      =        real scalar            i, n, nvars, nels
      =        string matrix            pieces
      =        real scalar  tt
      =        real scalar       filter_varlist, fillin_pieces
      =        filter_varlist = (oldp.n_of[(5)] + oldp.n_of[(6)] != 0)
      =        fillin_pieces  = (newp.n_of[(5)] + newp.n_of[(6)] +
      =                          newp.n_of[(3)]  + newp.n_of[(4)]    != 0)
      =        if (issort) fillin_pieces = 1
      =                        if (tt==(3) | tt==(4)) {c -(}
      =string scalar varlistpattern(struct rename_peldf rowvector ellist)
      =        real scalar    j
      =        string scalar    result
      =        if (ellist[1].elementtype == (1)) return(ellist[1].element)
      =string scalar varlist_el(struct rename_peldf scalar el)
      =        if (el.elementtype == (2))    return(el.element)
      =        if (el.elementtype == (3))   return("*")
      =        if (el.elementtype == (4))     return("?")
      =        if (el.elementtype == (5))  return("?*")
      =        if (el.elementtype == (6))  return(el.arg*"?")
      =struct rename_matchdf {c -(}
      =        real scalar    j0, j1
      =        real scalar    i0, i1
      =        string scalar    name
      =        string rowvector    pieces
      =real scalar matchvarname(string rowvector pieces, struct rename_peldf rowvector ellist, string scalar name)
      =        struct rename_matchdf scalar        m
      =                if (ellist[1].elementtype==(1)) {c -(}
      =                        return(1)
      =        if (!match_step(m, ellist)) return(0)
      =        return(1)
      =void match_setup(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, string scalar name)
      =real scalar match_step(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        real scalar            lefttomatch
      =        real scalar      mr
      =        real scalar     r
      =                if ((r=match_query_done(m))!=(-1)) return(r)
      =                if (match_simplification(m, ellist)==-1) return(0)
      =                if ((r=match_query_done(m))!=(-1)) return(r)
      =                        if (match_step_1(m, ellist)==-1) return(0)
      =                        if ((r=match_query_done(m))!=(-1)) return(r)
      =                        return(0)
      =                        if (mr==-1 | mr==0) return(0)
      =                        if (mr==-1 | mr==0) return(0)
      =real scalar match_step_1(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        if (ellist[m.j0].elementtype==(5)) {c -(}
      =                return(match_ETnum_v(m, ellist, 1))
      =        if (ellist[m.j0].elementtype==(3)) {c -(}
      =        return(-1)
      =real scalar match_step_2(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        if (ellist[m.j0].elementtype==(5)) {c -(}
      =                return(match_ETnum_v(m, ellist, 1))
      =        if (ellist[m.j0+1].elementtype==(5)) {c -(}
      =                return(match_ETnum_v(m, ellist, 0))
      =        return(-1)
      =real scalar match_step_3p(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        real scalar    j
      =        if (ellist[m.j0].elementtype==(3)) {c -(}
      =                if (ellist[j].elementtype==(3)) {c -(}
      =                if (ellist[j].elementtype==(5)) {c -(}
      =                        return(match_ETnum_v(m, ellist, 0))
      =        if (ellist[m.j0].elementtype==(5)) {c -(}
      =                return(match_ETnum_v(m, ellist, 1))
      =        return(-1)
      =real scalar match_query_done(struct rename_matchdf scalar m)
      =                if (m.i0 < m.i1) return(0)
      =                return(1)
      =        return((-1))
      =real scalar match_simplification(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        real scalar      mr
      =        while ((m.i1 >m.i0 & m.j1> m.j0)) {c -(}
      =                mr = match_fixed(m, ellist, 1)
      =                if (mr==-1) return(-1)
      =                if (mr==0)   break
      =        while ((m.i1 >m.i0 & m.j1> m.j0)) {c -(}
      =                mr = match_fixed(m, ellist, 0)
      =                if (mr==-1) return(-1)
      =                if (mr==0)   break
      =real scalar match_fixed(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, real scalar s)
      =        real scalar    j
      =        j = (s==1 ? m.j0 : m.j1-1)
      =        if (ellist[j].elementtype==(2))   return(match_ETstr(m, ellist, s))
      =        if (ellist[j].elementtype==(6)) return(match_ETnum_f(m, ellist, s))
      =        if (ellist[j].elementtype==(4))    return(match_ETqm(m, ellist, s))
      =        return(0)
      =real scalar match_ETstr(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, real scalar s)
      =        real scalar    j, len
      =        j = (s==1 ? m.j0 : m.j1-1)
      =        if (ellist[j].elementtype != (2)) return(0)
      =        if ((s==1 ?  usubstr(m.name, m.i0, len) :
      =                return(-1)
      =        return(1)
      =real scalar match_ETnum_f(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, real scalar s)
      =        real scalar    j, i, len
      =        string scalar    str, c
      =        j = (s==1 ? m.j0 : m.j1-1)
      =        if (ellist[j].elementtype != (6)) return(0)
      =        str = (s==1 ?  usubstr(m.name, m.i0, len) : usubstr(m.name, -len, .))
      =        if (ustrlen(str)!=len) return(-1)
      =                if (c<"0" | c>"9") return(-1)
      =        return(1)
      =real scalar match_ETqm(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, real scalar s)
      =        if (ellist[s==1 ? m.j0 : m.j1-1].elementtype != (4)) {c -(}
      =                return(0)
      =        if (m.i0==m.i1) return(-1)
      =        return(1)
      =real scalar match_ETnum_v(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, real scalar s)
      =        real scalar            j, i0, i1, len
      =        string scalar            c
      =        string scalar            c1
      =        struct rename_matchdf scalar        hold
      =        j = (s==1 ? m.j0 : m.j1-1)
      =        if (ellist[j].elementtype != (5)) return(0)
      =        if (s==1) {c -(}
      =                if (match_step(m, ellist)==1) return(1)
      =        return(-1)
      =real scalar match_ETstar_left(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        real scalar            len, newlen
      =        struct rename_matchdf scalar        hold
      =        real scalar       next_is_ETnum_v
      =        if (ellist[m.j0].elementtype != (3)) return(0)
      =                post_match_piece(m, 1, len)
      =                return(1)
      =        next_is_ETnum_v = (ellist[m.j0+1].elementtype==(5))
      =                post_match_piece(m, 1, len)
      =                if (match_step(m, ellist)==1) {c -(}
      =                                        post_match_piece(m, 1, newlen)
      =                        return(1)
      =        return(-1)
      =real scalar mstargiveback(string scalar s)
      =        real scalar    l
      =        string scalar    c
      =        string scalar    c1
      =void post_match_piece(struct rename_matchdf scalar m, real scalar s, real scalar len)
      =        if (s==1) {c -(}
      =void sort_old_varnames(struct rename_renamedf scalar ren)
      =        real scalar i
      =void sort_appropriate_field(struct rename_patterndf rowvector oldplist, struct rename_patterndf rowvector newplist)
      =        real scalar            i
      =        real scalar            j
      =real scalar j_of_renumber(struct rename_patterndf scalar plist)
      =        real scalar            j
      =        real scalar  tt
      =                if (tt==(9) | tt==(10)) return(j)
      =real scalar j_of_number(struct rename_patterndf scalar plist)
      =        real scalar            j, jtoret
      =        real scalar  tt
      =                if (tt==(3) | tt==(4) | tt==(5) | tt==(6)) {c -(}
      =void sort_on_field(struct rename_patterndf scalar plist, real scalar j)
      =        real scalar  tt
      =        real colvector            o
      =        string colvector            vc
      =                if (tt==(5) | tt==(6)) {c -(}
      =void fillin_new_varnames_recase(struct rename_renamedf scalar ren)
      =        real scalar    i
      =void fillin_new_varnames(struct rename_patterndf rowvector oldplist, struct rename_patterndf rowvector newplist, real scalar from)
      =        real scalar    i
      =void fillin_new_varnames_u(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar from)
      =        real scalar    i
      =        if (newp.ellist[1].elementtype==(1)) {c -(}
      =void fillin_new_varnames_u_u(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar from, real scalar i)
      =        real scalar            j
      =        string scalar            name
      =        real scalar  tt
      =                if (tt==(2)) {c -(}
      =                else if (tt==(3)) {c -(}
      =                else if (tt==(4)) {c -(}
      =                else if (tt==(5)) {c -(}
      =                else if (tt==(6)) {c -(}
      =                else if (tt==(7)) {c -(}
      =                else if (tt==(9)) {c -(}
      =                else if (tt==(10)) {c -(}
      =                else if (tt != (8)) {c -(}
      =string scalar fmt_ETnum_f(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar i, real scalar j)
      =        real scalar    n, len
      =        string scalar    res, orig
      =string scalar fmt_ETnum_f_r(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar j, real scalar from)
      =        real scalar    n, len
      =        string scalar res
      =string matrix build_toren(struct rename_patterndf rowvector oldplist, struct rename_patterndf rowvector newplist)
      =        string matrix    toren
      =        real scalar    i, N, n, k, k2
      =        real colvector    toselect
      =        string rowvector    lastrow, newrow
      =        real scalar hasomissions
      =                                hasomissions = 1
      =void perform_renames(string matrix toren, struct rename_optiondf scalar option)
      =        real scalar       use_intermediary
      =        string matrix            toren_nonulls
      =                        perform_dryrun(toren, toren_nonulls, 0)
      =void confirm_newnames_new(string matrix toren)
      =        real scalar    i
      =        real rowvector    varnum
      =        string rowvector    tocheck, badvar
      =void perform_set_r(string matrix toren)
      =void perform_test(string matrix toren, real scalar use_intermediary)
      =        real scalar    i
      =void perform_rename_straight(string matrix toren)
      =        real scalar    i
      =        real scalar    breakstatus
      =void perform_rename_intermediary(string matrix toren)
      =        real scalar    i
      =        real scalar    breakstatus
      =        string rowvector    tmpname
      =void perform_dryrun(string matrix toren, string matrix toren_nonulls, real scalar use_intermediary)
      =        real scalar    i
      =        real scalar    maxlen
      =        string scalar    sfmt, sfmtit
      =void dryrun_note1(string matrix toren, string matrix toren_nonulls)
      =        real scalar    i
      =        real scalar    nulls
      =void dryrun_note2(string matrix toren, real scalar use_intermediary)
      =        string colvector    dupnames, newname, oldname
      =real scalar names_not_jointly_unique(string matrix toren)
      =        real scalar    n0, n1
      =        string colvector    fulllist
      =void confirm_names_unique(string matrix toren)
      =void confirm_names_unique_1(string matrix toren, real scalar j)
      =        string colvector    names, corresponding
      =        string scalar    s
      =        real scalar    n
      =string colvector corresponding_names(string matrix toren, string scalar name, real scalar js, real scalar jd)
      =        real scalar    i
      =        string colvector    dups
      =void confirm_new_varnames_valid(string matrix toren)
      =        real scalar    i, n
      =        real colvector    bad
      =void confirm_not_empty(string scalar str, string scalar expected)
      =void errprint_bf_list(string vector list , |real scalar USER_MAXEL)
      =        real scalar            MAXEL
      =        real scalar            i, top
      =        real scalar       chopped
      =                        chopped = 1
      =                        chopped = 0
      =void errprint_bf_string(string scalar user_s, |real scalar USER_MAXLEN)
      =        real scalar            MAXLEN
      =        real scalar            len_last, target_last
      =        real scalar            len_remaining
      =        real scalar            i
      =        string rowvector            els
      =        string scalar            s, first, last
      =        real scalar       cont
      =        cont = 1
      =                else            cont   = 0
      =        string scalar    indent
      =void error_preceding_dash( pattype)
      =                        (pattype==0 ? "oldname" : "newname" ) )
      =void error_following_dash( pattype, string scalar what)
      =                        (pattype==0 ? "oldname" : "newname" ) )
      =void option_not_allowed(string scalar option)
      =void option_number_misspecified(string scalar op)
      =void error_ETnum_f_too_long(real scalar n_digits)
      =        errprintf("the {c -(}bf:(###...#){c )-} pattern is %g.\n", 10)
      =void error_patternlengths_unequal(struct rename_patterndf rowvector oldplist, struct rename_patterndf rowvector newplist)
      =        string scalar    s_old, s_new
      =void error_too_many_renumbers(string scalar op, struct rename_patterndf scalar newp)
      =void error_strlist_length(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp)
      =        real scalar    n_old, n_new
      =        string scalar    s_old, s_new
      =void error_missing_ETnum(string scalar opname, struct rename_patterndf scalar newp)
      =void error_too_many_wildcards(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp,
      =                                                        real scalar isaddnumber)
      =void error_wildcardmatch_qm(struct rename_patterndf scalar oldp, real scalar j_old,
      =                            struct rename_patterndf scalar newp, real scalar j_new)
      =void error_wildcardmatch_hash(struct rename_patterndf scalar oldp, real scalar j_old,
      =                              struct rename_patterndf scalar newp, real scalar j_new)
      =void error_no_right_bracket(string scalar original)
      =void error_inside_brackets(string scalar original)
      =void error_newnumber_subscripted(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp)
      =void error_subscript_invalid(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar subscr)
      =void error_subscripts_in_old(struct rename_patterndf scalar pat)
      =void dump_pattern(struct rename_patterndf rowvector pat, string scalar typ, real scalar incl_names)
      =        real scalar    i, j, n
      =        real scalar    nv, k, m
      =                        pat[i].n_of[(2)],
      =                        pat[i].n_of[(3)],
      =                        pat[i].n_of[(4)],
      =                        pat[i].n_of[(5)],
      =                        pat[i].n_of[(6)],
      =                        pat[i].n_of[(7)],
      =                        pat[i].n_of[(8)])
      =string scalar dump_xlate_tt(real scalar t)
      =        if (t==(1))     return("ETstrlist")
      =        if (t==(2))         return("ETstr")
      =        if (t==(3))        return("ETstar")
      =        if (t==(4))          return("ETqm")
      =        if (t==(5))       return("ETnum_v")
      =        if (t==(6))       return("ETnum_f")
      =        if (t==(7))          return("ETeq")
      =        if (t==(8))        return("ETodot")
      =        if (t==(9))     return("ETnum_v_r")
      =        if (t==(10))     return("ETnum_f_r")
      =void dump_options(struct rename_renamedf scalar ren)
      =void match_debug(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, string scalar msg)
      =string rowvector list_subtract(string rowvector a, string rowvector b)
      =        string rowvector result
      =string rowvector expand_varlist(string scalar pattern, string scalar tmpname)
      =        real scalar    rc
      =        string rowvector    result
      =string scalar ordinal_suffix(real scalar i)
      =        real scalar    lastdigit
      {hline 77} begin rename {hline}
      - version 12
      - mata: rename_cmd("`3'")
      = mata: rename_cmd("")
      {hline 79} end rename {hline}
    - qui gen byte _dataset = `rep'>0 if `rep'!=.
    = qui gen byte _dataset = rep>0 if rep!=.
    - label define estimatesperformancelab 0 "Performance" 1 "Estimates"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define estimatesperformancelab 0 "Performance" 1 "Estimates"
      - {c )-}
      {hline 80} end label {hline}
    - label values _dataset estimatesperformancelab
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("values", "val") > 0 ) {c -(}
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {c -(}
      = if "" != "" {c -(}
        local fix ", nofix"
        {c )-}
      - gettoken var rest : anything
      - while `"`rest'"' != "" {c -(}
      = while `" estimatesperformancelab"' != "" {c -(}
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "estimatesperformancelab"
      - {c )-}
      - while `"`rest'"' != "" {c -(}
      = while `""' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
      - local vlist : list anything - lab
      - if "`lab'" == "." {c -(}
      = if "estimatesperformancelab" == "." {c -(}
        local lab ""
        {c )-}
      - foreach var of varlist `vlist' {c -(}
      = foreach var of varlist _dataset {c -(}
      - `vv' _label `val' `var' `lab' `fix'
      = version 15, missing: _label values _dataset estimatesperformancelab 
      - {c )-}
      - {c )-}
      - else {c -(}
        `vv' _label `macval(0)'
        {c )-}
      {hline 80} end label {hline}
    - if "`perfonly'"!="" qui drop if `rep'>0 & `rep'!=.
    = if ""!="" qui drop if rep>0 & rep!=.
    - qui order `allnames'
    = qui order rep dgm estimand method true est se __000000
      {hline 78} begin order {hline}
      - version 11
      - if (_caller()<11) {c -(}
        _order `macval(0)'
        exit
        {c )-}
      - syntax varlist[, Before(varname) After(varname) first last SEQuential ALPHAbetic]
      - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'" == "" & "`alphabetic'" == "" & "`sequential'" == "") {c -(}
      = if (`""' == "" & `""' == "" & "" == "" & "" == "" & "" == "" & "" == "") {c -(}
      - _order `macval(0)'
      = _order rep dgm estimand method true est se __000000
      - exit
      {hline 80} end order {hline}
    - if `methodcreated'!=1 {c -(}
    = if 0!=1 {c -(}
    - cap confirm numeric variable `method'
    = cap confirm numeric variable method
    - if _rc local methodstringindi = 1
    - else local methodstringindi = 0
    - local methodlabels = 0
    - if `nformat'==1 | (`nformat'==3 & `nmethod'==1) {c -(}
    = if 1==1 | (1==3 & 1==1) {c -(}
    - if `nmethod'!=0 {c -(}
    = if 1!=0 {c -(}
    - qui tab `method',m
    = qui tab method,m
    - local nmethodlabels = `r(r)'
    = local nmethodlabels = 2
    - cap qui labelsof `method'
    = cap qui labelsof method
      {hline 75} begin labelsof {hline}
      - version 8
      - syntax name [, Label ]
      - if "`label'"=="" {c -(}
      = if ""=="" {c -(}
      - local labdef: value label `namelist'
      = local labdef: value label method
      - if `"`labdef'"'=="" {c -(}
      = if `""'=="" {c -(}
      - exit
      {hline 77} end labelsof {hline}
    - cap qui ret list
    - if `"`r(labels)'"'!="" {c -(}
    = if `""'!="" {c -(}
      local 0 = `"`r(labels)'"'
      forvalues i = 1/`nmethodlabels' {c -(}
      gettoken `method'label`i' 0 : 0, parse(": ")
      local methlist `methlist' ``method'label`i''
      local methodlabels = 1
      {c )-}
      {c )-}
    - else {c -(}
    - qui levels `method', local(levels)
    = qui levels method, local(levels)
      {hline 77} begin levels {hline}
      - version 8
      - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
      - if "`separate'" == "" local sep " "
      = if "" == "" local sep " "
      - else local sep "`separate'"
      = else local sep ""
      - if "`missing'" != "" local novarlist "novarlist"
      = if "" != "" local novarlist "novarlist"
      - marksample touse, strok `novarlist'
      = marksample touse, strok 
      - capture confirm numeric variable `varlist'
      = capture confirm numeric variable method
      - local isnum = _rc != 7
      - if `isnum' {c -(}
      = if 1 {c -(}
      - capture assert `varlist' == int(`varlist') if `touse'
      = capture assert method == int(method) if __000002
      - if _rc {c -(}
        di as err "`varlist' contains non-integer values"
        exit 459
        {c )-}
      - tempname Vals
      - qui tab `varlist' if `touse', `missing' matrow(`Vals')
      = qui tab method if __000002,  matrow(__000003)
      - local nvals = r(r)
      - forval i = 1 / `nvals' {c -(}
      = forval i = 1 / 2 {c -(}
      - local val = `Vals'[`i',1]
      = local val = __000003[1,1]
      - if `i' < `nvals' local vals "`vals'`val'`sep'"
      = if 1 < 2 local vals "1 "
      - else local vals "`vals'`val'"
      = else local vals "1 1"
      - {c )-}
      - local val = `Vals'[`i',1]
      = local val = __000003[2,1]
      - if `i' < `nvals' local vals "`vals'`val'`sep'"
      = if 2 < 2 local vals "1 2 "
      - else local vals "`vals'`val'"
      = else local vals "1 2"
      - {c )-}
      - {c )-}
      - else {c -(}
        tempvar select counter
        bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
        generate `counter' = sum(`select') * (`select' == 1)
        sort `counter'
        qui count if `counter' == 0
        local j = 1 + r(N)
        local nvals = _N
        if "`clean'" != "" {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals "`vals'`=`varlist'[`i']'`sep'"
        {c )-}
        else local vals "`vals'`=`varlist'[`i']'"
        {c )-}
        {c )-}
        else {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
        {c )-}
        else local vals `"`vals'`"`=`varlist'[`i']'"'"'
        {c )-}
        {c )-}
        {c )-}
      - di as txt `"`vals'"'
      = di as txt `"1 2"'
      - return local levels `"`vals'"'
      = return local levels `"1 2"'
      - if "`local'" != "" {c -(}
      = if "levels" != "" {c -(}
      - c_local `local' `"`vals'"'
      = c_local levels `"1 2"'
      - {c )-}
      {hline 79} end levels {hline}
    - tokenize `"`levels'"'
    = tokenize `"1 2"'
    - if `methodstringindi' == 0 {c -(}
    = if 0 == 0 {c -(}
    - forvalues i = 1/`nmethodlabels' {c -(}
    = forvalues i = 1/2 {c -(}
    - local `method'label`i' `i'
    = local methodlabel1 1
    - local methlist `methlist' ``method'label`i''
    = local methlist  1
    - {c )-}
    - local `method'label`i' `i'
    = local methodlabel2 2
    - local methlist `methlist' ``method'label`i''
    = local methlist 1 2
    - {c )-}
    - {c )-}
    - else forvalues i = 1/`nmethodlabels' {c -(}
    = else forvalues i = 1/2 {c -(}
      local `method'label`i' ``i''
      local methlist `methlist' ``method'label`i''
      {c )-}
    - {c )-}
    - {c )-}
    - {c )-}
    - if `nformat'==1 {c -(}
    = if 1==1 {c -(}
    - local valmethod = "`methlist'"
    = local valmethod = "1 2"
    - {c )-}
    - else if `nformat'==2 {c -(}
    = else if 1==2 {c -(}
      local valmethod = "`method'"
      {c )-}
    - else if `nformat'==3 {c -(}
    = else if 1==3 {c -(}
      if `nmethod'==1 {c -(}
      local valmethod = "`methlist'"
      {c )-}
      else if `nmethod'>=1 & `nmethod'!=. {c -(}
      local valmethod = "`methlist'"
      {c )-}
      {c )-}
    - {c )-}
    - local simananalyserun = 1
    - local allthings `allthings' simananalyserun ifanalyse estchange sechange
    = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 simananalyserun ifanalyse estchange sechange
    - foreach thing in `allthings' {c -(}
    = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 simananalyserun ifanalyse estchange sechange {c -(}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 simananalyserun ifanalyse estchange sechange
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_rep] rep
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_dgm] dgm
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_target] estimand
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_method] method
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_estimate] est
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_se] se
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_df] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ci] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_p] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_true] true
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_order] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_lci] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_uci] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ifsetup] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_insetup] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_format] format 1: long-long
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_targetformat] long
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_methodformat] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_nformat] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ntarget] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ndgm] 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_nmethod] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_numtarget] 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_valtarget] beta gamma
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_nummethod] 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_valmethod] 1 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ntrue] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ntruevalue] single
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_dgmvar] dgm
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_numdgm] 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_dgmcreated] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_targetlabels] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_methodcreated] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_methodlabels] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_methodvalues] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ntruestub] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_descriptiontype] variable
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_cidescriptiontype] variables
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_truedescriptiontype] variable
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_estvars] est
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_sevars] se
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_dfvars] N/A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_civars] N/A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_pvars] N/A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_truevars] true
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_simansetuprun] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_m1] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_t1] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_simananalyserun] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ifanalyse] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_estchange] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_sechange] 0
    - {c )-}
    - di as text "siman analyse has run successfully"
siman analyse has run successfully
    - if "`table'"!="notable" {c -(}
    = if ""!="notable" {c -(}
    - cap noi siman_table
      {hline 72} begin siman_table {hline}
      - version 15
      - syntax [anything] [if], [Column(varlist) debug]
      - foreach thing in `_dta[siman_allthings]' {c -(}
      = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 simananalyserun ifanalyse estchange sechange {c -(}
      - local `thing' : char _dta[siman_`thing']
      = local allthings : char _dta[siman_allthings]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local rep : char _dta[siman_rep]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgm : char _dta[siman_dgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local target : char _dta[siman_target]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local method : char _dta[siman_method]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estimate : char _dta[siman_estimate]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local se : char _dta[siman_se]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local df : char _dta[siman_df]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ci : char _dta[siman_ci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local p : char _dta[siman_p]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local true : char _dta[siman_true]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local order : char _dta[siman_order]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local lci : char _dta[siman_lci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local uci : char _dta[siman_uci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifsetup : char _dta[siman_ifsetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local insetup : char _dta[siman_insetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local format : char _dta[siman_format]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetformat : char _dta[siman_targetformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodformat : char _dta[siman_methodformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nformat : char _dta[siman_nformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntarget : char _dta[siman_ntarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ndgm : char _dta[siman_ndgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nmethod : char _dta[siman_nmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numtarget : char _dta[siman_numtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valtarget : char _dta[siman_valtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nummethod : char _dta[siman_nummethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valmethod : char _dta[siman_valmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntrue : char _dta[siman_ntrue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruevalue : char _dta[siman_ntruevalue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmvar : char _dta[siman_dgmvar]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numdgm : char _dta[siman_numdgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmcreated : char _dta[siman_dgmcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetlabels : char _dta[siman_targetlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodcreated : char _dta[siman_methodcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodlabels : char _dta[siman_methodlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodvalues : char _dta[siman_methodvalues]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruestub : char _dta[siman_ntruestub]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local descriptiontype : char _dta[siman_descriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local cidescriptiontype : char _dta[siman_cidescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truedescriptiontype : char _dta[siman_truedescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estvars : char _dta[siman_estvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sevars : char _dta[siman_sevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dfvars : char _dta[siman_dfvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local civars : char _dta[siman_civars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local pvars : char _dta[siman_pvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truevars : char _dta[siman_truevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simansetuprun : char _dta[siman_simansetuprun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m1 : char _dta[siman_m1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local t1 : char _dta[siman_t1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simananalyserun : char _dta[siman_simananalyserun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifanalyse : char _dta[siman_ifanalyse]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estchange : char _dta[siman_estchange]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sechange : char _dta[siman_sechange]
      - {c )-}
      - if "`simananalyserun'"=="0" | "`simananalyserun'"=="" {c -(}
      = if "1"=="0" | "1"=="" {c -(}
        di as error "siman analyse has not been run.  Please use siman_analyse first before siman_table."
        exit 498
        {c )-}
      - preserve
      - if `nformat'!=1 {c -(}
      = if 1!=1 {c -(}
        qui siman_reshape, longlong
        foreach thing in `_dta[siman_allthings]' {c -(}
        local `thing' : char _dta[siman_`thing']
        {c )-}
        {c )-}
      - foreach val in `estvars' `sevars' {c -(}
      = foreach val in est se {c -(}
      - if strpos("`val'","_")!=0 {c -(}
      = if strpos("est","_")!=0 {c -(}
        if substr("`val'",strlen("`val'"),1)=="_" {c -(}
        local l = substr("`val'", 1,strlen("`val'","_") - 1)
        local `l'vars = "`l'"
        {c )-}
        {c )-}
      - {c )-}
      - if strpos("`val'","_")!=0 {c -(}
      = if strpos("se","_")!=0 {c -(}
        if substr("`val'",strlen("`val'"),1)=="_" {c -(}
        local l = substr("`val'", 1,strlen("`val'","_") - 1)
        local `l'vars = "`l'"
        {c )-}
        {c )-}
      - {c )-}
      - qui drop if `rep'>0
      = qui drop if rep>0
      - tempvar touse
      - marksample touse
      - if `dgmcreated' local dgm
      = if 0 local dgm
      - cap bysort `dgm' `method' `target' : assert `touse'==`touse'[1]
      = cap bysort dgm method estimand : assert __000002==__000002[1]
      - if _rc {c -(}
        di as error "'if' can only be used for dgm, method and target."
        exit 498
        {c )-}
      - if "`anything'"!="" {c -(}
      = if ""!="" {c -(}
        tempvar keep
        gen `keep' = 0
        foreach thing of local anything {c -(}
        qui count if _perfmeascode == "`thing'"
        if r(N)==0 di as error "Warning: performance measure not found: `thing'"
        qui replace `keep' = 1 if _perfmeascode == "`thing'"
        {c )-}
        qui keep if `keep'
        drop `keep'
        {c )-}
      - local perfvar = "bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power"
      - qui gen _perfmeascodeorder=.
      - local p = 0
      - foreach perf of local perfvar {c -(}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 0 if _perfmeascode == "bsims"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels  0 "bsims"
      - local p = `p' + 1
      = local p = 0 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 1 if _perfmeascode == "sesims"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims"
      - local p = `p' + 1
      = local p = 1 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 2 if _perfmeascode == "bias"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias"
      - local p = `p' + 1
      = local p = 2 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 3 if _perfmeascode == "mean"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean"
      - local p = `p' + 1
      = local p = 3 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 4 if _perfmeascode == "empse"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse"
      - local p = `p' + 1
      = local p = 4 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 5 if _perfmeascode == "relprec"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec"
      - local p = `p' + 1
      = local p = 5 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 6 if _perfmeascode == "mse"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse"
      - local p = `p' + 1
      = local p = 6 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 7 if _perfmeascode == "rmse"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse"
      - local p = `p' + 1
      = local p = 7 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 8 if _perfmeascode == "modelse"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse"
      - local p = `p' + 1
      = local p = 8 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 9 if _perfmeascode == "ciwidth"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth"
      - local p = `p' + 1
      = local p = 9 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 10 if _perfmeascode == "relerror"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth" 10 "relerror"
      - local p = `p' + 1
      = local p = 10 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 11 if _perfmeascode == "cover"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth" 10 "relerror" 11 "cover"
      - local p = `p' + 1
      = local p = 11 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 12 if _perfmeascode == "power"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth" 10 "relerror" 11 "cover" 12 "power"
      - local p = `p' + 1
      = local p = 12 + 1
      - {c )-}
      - label define perfl `perflabels'
      = label define perfl 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth" 10 "relerror" 11 "cover" 12 "power"
      - label values _perfmeascodeorder perfl
      - label variable _perfmeascodeorder "performance measure"
      - if "`sevars'" == "N/A" local sevars
      = if "se" == "N/A" local sevars
      - if `dgmcreated' local dgmvar
      = if 0 local dgmvar
      - foreach onedgmvar in `dgmvar' {c -(}
      = foreach onedgmvar in dgm {c -(}
      - summ `onedgmvar' `if', meanonly
      = summ dgm , meanonly
      - if r(min)<r(max) local newdgmvar `newdgmvar' `onedgmvar'
      = if r(min)<r(max) local newdgmvar  dgm
      - else if !mi("`debug'") di as error "Ignoring non-varying dgmvar: `onedgmvar'"
      = else if !mi("") di as error "Ignoring non-varying dgmvar: dgm"
      - {c )-}
      - local dgmvar `newdgmvar'
      = local dgmvar dgm
      - local myfactors _perfmeascodeorder `dgmvar' `target' `method'
      = local myfactors _perfmeascodeorder dgm estimand method
      - if !mi("`debug'") di as input "Factors to display: `myfactors'"
      = if !mi("") di as input "Factors to display: _perfmeascodeorder dgm estimand method"
      - tempvar group
      - foreach thing in dgmvar target method {c -(}
      - local n`thing'vars = wordcount("``thing''")
      = local ndgmvarvars = wordcount("dgm")
      - if !mi("`thing'") {c -(}
      = if !mi("dgmvar") {c -(}
      - egen `group' = group(``thing'')
      = egen __000003 = group(dgm)
      - qui levelsof `group'
      = qui levelsof __000003
      - local n`thing'levels = r(r)
      = local ndgmvarlevels = r(r)
      - {c )-}
      - else n`thing'levels = 1
      = else ndgmvarlevels = 1
      - if !mi("`debug'") di "`n`thing'levels' levels, `thing': `n`thing'vars' variables (``thing'')"
      = if !mi("") di "2 levels, dgmvar: 1 variables (dgm)"
      - drop `group'
      = drop __000003
      - {c )-}
      - local n`thing'vars = wordcount("``thing''")
      = local ntargetvars = wordcount("estimand")
      - if !mi("`thing'") {c -(}
      = if !mi("target") {c -(}
      - egen `group' = group(``thing'')
      = egen __000003 = group(estimand)
      - qui levelsof `group'
      = qui levelsof __000003
      - local n`thing'levels = r(r)
      = local ntargetlevels = r(r)
      - {c )-}
      - else n`thing'levels = 1
      = else ntargetlevels = 1
      - if !mi("`debug'") di "`n`thing'levels' levels, `thing': `n`thing'vars' variables (``thing'')"
      = if !mi("") di "2 levels, target: 1 variables (estimand)"
      - drop `group'
      = drop __000003
      - {c )-}
      - local n`thing'vars = wordcount("``thing''")
      = local nmethodvars = wordcount("method")
      - if !mi("`thing'") {c -(}
      = if !mi("method") {c -(}
      - egen `group' = group(``thing'')
      = egen __000003 = group(method)
      - qui levelsof `group'
      = qui levelsof __000003
      - local n`thing'levels = r(r)
      = local nmethodlevels = r(r)
      - {c )-}
      - else n`thing'levels = 1
      = else nmethodlevels = 1
      - if !mi("`debug'") di "`n`thing'levels' levels, `thing': `n`thing'vars' variables (``thing'')"
      = if !mi("") di "2 levels, method: 1 variables (method)"
      - drop `group'
      = drop __000003
      - {c )-}
      - if "`column'"=="" {c -(}
      = if ""=="" {c -(}
      - if `nmethodlevels'>1 local column `method'
      = if 2>1 local column method
      - else if `ntargetlevels'>1 local column `target'
      = else if 2>1 local column estimand
      - else local column : word 1 of `dgmvar'
      = else local column : word 1 of dgm
      - {c )-}
      - if !strpos("`column'","perfmeas") local row _perfmeascodeorder
      = if !strpos("method","perfmeas") local row _perfmeascodeorder
      - else di as error "siman table doesn't yet know how to format the table when perfmeas is in the columns"
      - local by : list myfactors - column
      - local by : list by - row
      - if wordcount("`by'")>4 {c -(}
      = if wordcount("dgm estimand")>4 {c -(}
        di as error "There are too many factors to display. Consider using an if condition for your dgmvars."
        {c )-}
      - local tablecommand tabdisp `row' `column' `if', by(`by') c(`estvars' `sevars') stubwidth(20)
      = local tablecommand tabdisp _perfmeascodeorder method , by(dgm estimand) c(est se) stubwidth(20)
      - if !mi("`debug'") {c -(}
      = if !mi("") {c -(}
        di "Table column: `column'"
        di "Table row: `row'"
        di "Table by: `by'"
        di "Table command: `tablecommand'"
        {c )-}
      - `tablecommand'
      = tabdisp _perfmeascodeorder method , by(dgm estimand) c(est se) stubwidth(20)

{hline 21}{c TT}{hline 21}
dgm, estimand and    {c |}        method       
performance measure  {c |}         1          2
{hline 21}{c +}{hline 21}
1                    {c |}
beta                 {c |}
               bsims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.0043991  -.0025973
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                mean {c |} {res}-.0043991  -.0025973
                     {txt}{c |}          {res}           
                     {txt}{c |} 
               empse {c |}  {res}.0790336   .1127159
                     {txt}{c |}          {res}           
                     {txt}{c |} 
             relprec {c |}          {res}   -50.8353
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                 mse {c |}  {res}.0062594   .0126989
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                rmse {c |}  {res}.0791165   .1126895
                     {txt}{c |}          {res}           
                     {txt}{c |} 
             modelse {c |}  {res}.0787452   .1136343
                     {txt}{c |}          {res}           
                     {txt}{c |} 
             ciwidth {c |}  {res}.3080681   .4434751
                     {txt}{c |}          {res}           
                     {txt}{c |} 
            relerror {c |} {res}-.3649609   .8147949
                     {txt}{c |}          {res}           
                     {txt}{c |} 
               cover {c |}      {res}94.7       95.7
                     {txt}{c |}          {res}           
                     {txt}{c |} 
               power {c |}       {res}5.3        4.3
                     {txt}{c |}          {res}           
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
gamma                {c |}
               bsims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}  {res}.0005151   .0056354
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                mean {c |}  {res}.0005151   .0056354
                     {txt}{c |}          {res}           
                     {txt}{c |} 
               empse {c |}  {res}.0805615   .1131762
                     {txt}{c |}          {res}           
                     {txt}{c |} 
             relprec {c |}          {res}  -49.33068
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                 mse {c |}  {res}.0064839   .0128278
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                rmse {c |}  {res}.0805229   .1132599
                     {txt}{c |}          {res}           
                     {txt}{c |} 
             modelse {c |}  {res}.0788425   .1140264
                     {txt}{c |}          {res}           
                     {txt}{c |} 
             ciwidth {c |}  {res}.3085282   .4450112
                     {txt}{c |}          {res}           
                     {txt}{c |} 
            relerror {c |} {res}-2.133844   .7512448
                     {txt}{c |}          {res}           
                     {txt}{c |} 
               cover {c |}      {res}94.5       96.4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
               power {c |}       {res}5.5        3.6
                     {txt}{c |}          {res}           
{txt}{hline 21}{c +}{hline 21}
2                    {c |}
beta                 {c |}
               bsims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.0046965  -.0058509
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                mean {c |} {res}-.0046965  -.0058509
                     {txt}{c |}          {res}           
                     {txt}{c |} 
               empse {c |}  {res}.0914144   .1262755
                     {txt}{c |}          {res}           
                     {txt}{c |} 
             relprec {c |}          {res}  -47.59274
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                 mse {c |}  {res}.0083703   .0159638
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                rmse {c |}  {res}.0914893   .1263479
                     {txt}{c |}          {res}           
                     {txt}{c |} 
             modelse {c |}  {res}.0910296   .1313619
                     {txt}{c |}          {res}           
                     {txt}{c |} 
             ciwidth {c |}   {res}.356176   .5127883
                     {txt}{c |}          {res}           
                     {txt}{c |} 
            relerror {c |}  {res}-.420924   4.028049
                     {txt}{c |}          {res}           
                     {txt}{c |} 
               cover {c |}        {res}95       95.6
                     {txt}{c |}          {res}           
                     {txt}{c |} 
               power {c |}         {res}5        4.4
                     {txt}{c |}          {res}           
{txt}{hline 21}{c +}{hline 21}
2                    {c |}
gamma                {c |}
               bsims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}  {res}.0005948   .0065072
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                mean {c |}  {res}.0005948   .0065072
                     {txt}{c |}          {res}           
                     {txt}{c |} 
               empse {c |}  {res}.0930244   .1306846
                     {txt}{c |}          {res}           
                     {txt}{c |} 
             relprec {c |}          {res}  -49.33068
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                 mse {c |}  {res}.0086452   .0171037
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                rmse {c |}  {res}.0929798   .1307813
                     {txt}{c |}          {res}           
                     {txt}{c |} 
             modelse {c |}  {res}.0910394   .1316664
                     {txt}{c |}          {res}           
                     {txt}{c |} 
             ciwidth {c |}  {res}.3562577   .5138547
                     {txt}{c |}          {res}           
                     {txt}{c |} 
            relerror {c |} {res}-2.133846    .751246
                     {txt}{c |}          {res}           
                     {txt}{c |} 
               cover {c |}      {res}94.5       96.4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
               power {c |}       {res}5.5        3.6
                     {txt}{c |}          {res}           
{txt}{hline 21}{c BT}{hline 21}
      - cap assert missing(`sevars')
      = cap assert missing(se)
      - if _rc {c -(}
        di "{c -(}it: NOTE: Where there are 2 entries in the table, {c )-}"
        di "{c -(}it: the first entry is the performance measure and {c )-}"
        di "{c -(}it: the second entry is its Monte Carlo error.{c )-}"
        {c )-}
      - restore
      {hline 74} end siman_table {hline}
    - if _rc {c -(}
      di as text "siman analyse has run successfully, but presenting the results using siman table has failed"
      exit _rc
      {c )-}
    - {c )-}

{com}. 
. siman lollyplot, xtitle("test x-title") ytitle("test y-title") name("lollyplot_test1", replace)
{txt}Performance measures not specified: defaulting to bias empse cover
{res}{txt}Drawing 2 graphs (one per target)...
{res}{txt}
{com}. 
. 
. * DGM numeric with string labels, 1 var
. *****************************************
. 
. * target wide and numeric with string labels, method wide and string, true value
. use data/simlongESTPM_longE_longM.dta, clear
{txt}
{com}. encode estimand, gen(estimand_num)
{txt}
{com}. drop estimand
{txt}
{com}. rename estimand_num estimand
{res}{txt}
{com}. label define dgml 1 "D1" 2 "D2"
{txt}
{com}. label values dgm dgml
{txt}
{com}. gen method_str = ""
{txt}(8,000 missing values generated)

{com}. replace method_str = "A" if method == 1
{txt}(4,000 real changes made)

{com}. replace method_str = "B" if method == 2
{txt}(4,000 real changes made)

{com}. drop method
{txt}
{com}. rename method_str method
{res}{txt}
{com}. drop true
{txt}
{com}. reshape wide est se, i(rep dgm estimand) j(method, string)
{txt}(note: j = A B)

Data{col 36}long{col 43}->{col 48}wide
{hline 77}
Number of obs.                 {res}    8000   {txt}->{res}    4000
{txt}Number of variables            {res}       6   {txt}->{res}       7
{txt}j variable (2 values)            {res}method   {txt}->   (dropped)
xij variables:
                                    {res}est   {txt}->   {res}estA estB
                                     se   {txt}->   {res}seA seB
{txt}{hline 77}

{com}. reshape wide estA estB seA seB, i(rep dgm) j(estimand)
{txt}(note: j = 1 2)

Data{col 36}long{col 43}->{col 48}wide
{hline 77}
Number of obs.                 {res}    4000   {txt}->{res}    2000
{txt}Number of variables            {res}       7   {txt}->{res}      10
{txt}j variable (2 values)          {res}estimand   {txt}->   (dropped)
xij variables:
                                   {res}estA   {txt}->   {res}estA1 estA2
                                   estB   {txt}->   {res}estB1 estB2
                                    seA   {txt}->   {res}seA1 seA2
                                    seB   {txt}->   {res}seB1 seB2
{txt}{hline 77}

{com}. siman setup, rep(rep) dgm(dgm) target(1 2) method(A B) estimate(est) se(se) true(0) order(method)
{txt}note: converting to long-wide format, creating variable target
      - set tracedepth 1
      - if mi("`estimate'") & mi("`se'") {c -(}
      = if mi("est") & mi("se") {c -(}
        di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
        exit 498
        {c )-}
      - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
      = if "single"=="single" | "0" != "1" local optionlist est se   
      - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
      = else if "single"=="multiple" local optionlist est se    _true
      - local truenumber = 0
      - cap confirm number `true'
      = cap confirm number _true
      - if !_rc local truenumber = 1
      - if `dgmcreated' == 1 {c -(}
      = if 0 == 1 {c -(}
        cap confirm variable dgm
        if _rc {c -(}
        qui gen dgm = 1
        local dgm dgm
        local ndgm = 1
        {c )-}
        {c )-}
      - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
      = if "0" == "1" & 2==1 {c -(}
        qui cap labelsof `method'
        if !_rc local methodvalues `r(values)'
        else qui cap levelsof `method'
        if !_rc local methodvalues `r(levels)'
        {c )-}
      - if "`longwide'"!="" {c -(}
      = if "longwide"!="" {c -(}
      - if `nformat'==2 {c -(}
      = if 2==2 {c -(}
      - if "`order'" == "method" {c -(}
      = if "method" == "method" {c -(}
      - forvalues j = 1/`nmethod' {c -(}
      = forvalues j = 1/2 {c -(}
      - foreach option in `optionlist' {c -(}
      = foreach option in est se {c -(}
      - local `option'stubreshape`m`j'' = "`option'`m`j''"
      = local eststubreshapeA = "estA"
      - if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
      = if 1==1 local eststubreshapelist estA
      - else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
      = else if 1>=2 local eststubreshapelist estA estA
      - {c )-}
      - local `option'stubreshape`m`j'' = "`option'`m`j''"
      = local sestubreshapeA = "seA"
      - if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
      = if 1==1 local sestubreshapelist seA
      - else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
      = else if 1>=2 local sestubreshapelist seA seA
      - {c )-}
      - {c )-}
      - foreach option in `optionlist' {c -(}
      = foreach option in est se {c -(}
      - local `option'stubreshape`m`j'' = "`option'`m`j''"
      = local eststubreshapeB = "estB"
      - if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
      = if 2==1 local eststubreshapelist estB
      - else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
      = else if 2>=2 local eststubreshapelist estA estB
      - {c )-}
      - local `option'stubreshape`m`j'' = "`option'`m`j''"
      = local sestubreshapeB = "seB"
      - if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
      = if 2==1 local sestubreshapelist seB
      - else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
      = else if 2>=2 local sestubreshapelist seA seB
      - {c )-}
      - {c )-}
      - {c )-}
      - else if "`order'" == "target" {c -(}
      = else if "method" == "target" {c -(}
        forvalues j = 1/`ntarget' {c -(}
        foreach option in `optionlist' {c -(}
        local `option'stubreshape`t`j'' = "`option'`t`j''"
        if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
        else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
        {c )-}
        {c )-}
        {c )-}
      - if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
      = if ("single"=="single" & 0 == 0) {c -(}
      - qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
      = qui reshape long "estA estB seA seB    ", i(rep dgm _true) j() string
        {hline 74} begin reshape {hline}
        - u_mi_not_mi_set reshape other
        - if _caller() <= 10 {c -(}
          reshape_10 `0'
          exit
          {c )-}
        - if _caller() >= 12 {c -(}
        - global ReS_Call : di "version " string(_caller()) ":"
        - {c )-}
        - version 5.0, missing
        - if "`1'"=="clear" {c -(}
        = if "long"=="clear" {c -(}
          char _dta[ReS_ver]
          char _dta[ReS_i]
          char _dta[ReS_j]
          char _dta[ReS_jv]
          char _dta[ReS_Xij]
          char _dta[Res_Xi]
          char _dta[ReS_atwl]
          char _dta[ReS_str]
          local xijn : char _dta[ReS_Xij_n]
          if "`xijn'" != "" {c -(}
          forvalues i = 1/`xijn' {c -(}
          char _dta[ReS_Xij_wide`i']
          char _dta[ReS_Xij_long`i']
          {c )-}
          char _dta[ReS_Xij_n]
          {c )-}
          exit
          {c )-}
        - if "`1'"=="wide" | "`1'"=="long" {c -(}
        = if "long"=="wide" | "long"=="long" {c -(}
        - DoNew `*'
        = DoNew long estA estB seA seB     , i(rep dgm _true) j() string
        - exit
        {hline 76} end reshape {hline}
      - {c )-}
      - else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
      = else if ("single"=="multiple" | 0 == 1) {c -(}
        qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
        {c )-}
      - if "`order'" == "method" {c -(}
      = if "method" == "method" {c -(}
      - if !mi("``true'stubreshapelist'") {c -(}
      = if !mi("") {c -(}
        forvalues j = 1/`nmethod' {c -(}
        qui tokenize ``true'stubreshapelist'
        if `j'==1 qui rename ``j'' `true'
        else qui drop ``j''
        {c )-}
        {c )-}
      - char _dta[siman_truedescriptiontype] "variable"
      - local ntruestub 0
      - char _dta[siman_ntruestub] 0
      - {c )-}
      - foreach u of var * {c -(}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("rep",strlen("rep"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("dgm",strlen("dgm"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("_true",strlen("_true"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("_j",strlen("_j"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("estA",strlen("estA"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("seA",strlen("seA"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("estB",strlen("estB"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("seB",strlen("seB"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("__000000",strlen("__000000"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if `nformat'==2 & "`order'" == "method" {c -(}
      = if 2==2 & "method" == "method" {c -(}
      - capture confirm variable target
      - if _rc {c -(}
      - rename _j target
        {hline 75} begin rename {hline}
        - version 12
        - mata: rename_cmd("`3'")
        = mata: rename_cmd("")
        {hline 77} end rename {hline}
      - local target = "target"
      - {c )-}
      - else {c -(}
        di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
        exit 498
        {c )-}
      - char _dta[siman_format] "format 3: long-wide"
      - char _dta[siman_targetformat] "long"
      - char _dta[siman_methodformat] "wide"
      - char _dta[siman_nformat] 3
      - char _dta[siman_target] "`target'"
      = char _dta[siman_target] "target"
      - if `ntarget'!=0 char _dta[siman_ntarget] 1
      = if 2!=0 char _dta[siman_ntarget] 1
      - char _dta[siman_descriptiontype] "stub"
      - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
      = if "single"=="single" char _dta[siman_truedescriptiontype] "variable"
      - if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
      = if "single"=="multiple" & 0==1 char _dta[siman_truedescriptiontype] "stub"
      - char _dta[siman_cidescriptiontype] "stubs"
      - if mi("`describe") siman_describe
      - {c )-}
      - if `nformat'==2 & "`order'" == "target" {c -(}
      = if 2==2 & "method" == "target" {c -(}
        capture confirm variable method
        if _rc {c -(}
        rename _j method
        local method = "method"
        {c )-}
        else {c -(}
        di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
        exit 498
        {c )-}
        qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
        qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
        local c 1
        foreach j in `valmethod' {c -(}
        if `c'==1 {c -(}
        cap confirm variable `true'`j'
        if !_rc {c -(}
        qui rename `true'`j' `true'
        {c )-}
        local c = `c' + 1
        {c )-}
        else cap qui drop `true'`j'
        {c )-}
        local truedescriptiontype "variable"
        char _dta[siman_truedescriptiontype] "variable"
        local ntruestub 0
        char _dta[siman_format] "format 3: long-wide"
        char _dta[siman_targetformat] "long"
        char _dta[siman_methodformat] "wide"
        char _dta[siman_nformat] 3
        char _dta[siman_target] "target"
        if `ntarget'!=0 char _dta[siman_ntarget] 1
        char _dta[siman_descriptiontype] "stub"
        char _dta[siman_order]: method
        if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
        if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
        char _dta[siman_cidescriptiontype] "stubs"
        if "`truevaluecreated'" == "1" {c -(}
        local truevars `trueuser'
        char _dta[siman_[siman_truevars] "`trueuser'"
        {c )-}
        if mi("`describe") siman_describe
        {c )-}
      - {c )-}
      - else if `nformat'==1 & `nmethod'!=0 {c -(}
      = else if 2==1 & 2!=0 {c -(}
        if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        local numberdgms: word count `dgm'
        if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        qui tab `method'
        local nmethodlabels = `r(r)'
        qui levels `method', local(mlevels)
        qui tokenize `"`mlevels'"'
        cap quietly label drop `method'
        local labelchange = 0
        forvalues m = 1/`nmethodlabels' {c -(}
        if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        local label`m' = substr("``m''", 1, index("``m''","_") - 1)
        local metlabel`m' = "``m''"
        local labelchange = 1
        if `m'==1 {c -(}
        local labelvalues `m' "`label`m''"
        local metlist `metlabel`m''
        {c )-}
        else if `m'>1 {c -(}
        local labelvalues `labelvalues' `m' "`label`m''"
        local metlist `metlist' `metlabel`m''
        {c )-}
        {c )-}
        else {c -(}
        local metlabel`m' = "``m''"
        if `m'==1 local metlist `metlabel`m''
        else if `m'>=2 local metlist `metlist' `metlabel`m''
        {c )-}
        {c )-}
        if `labelchange'==1 {c -(}
        label define methodlab `labelvalues'
        label values `method' methodlab
        {c )-}
        local valmethod = "`metlist'"
        forvalues i=1/`nmethod' {c -(}
        local m`i' = "``i''"
        {c )-}
        local string = 0
        capture confirm numeric variable `method'
        if _rc local string = 1
        if `string' == 0 {c -(}
        qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        {c )-}
        else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
        {c )-}
        else if "`methodlabels'" == "1" {c -(}
        qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
        {c )-}
        char _dta[siman_format] "format 3: long-wide"
        char _dta[siman_targetformat] "long"
        char _dta[siman_methodformat] "wide"
        char _dta[siman_nformat] 3
        forvalues i=1/`nummethod' {c -(}
        char _dta[siman_m`i'] `i'
        if `i'==1 local siman_method `i'
        else if `i'>=2 local siman_method `siman_method' `i'
        {c )-}
        char _dta[siman_estimate] `estimate'
        char _dta[siman_se] `se'
        char _dta[siman_df] `df'
        char _dta[siman_ci] `ci'
        char _dta[siman_p] `p'
        char _dta[siman_true] `true'
        if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        if "`se'"!="" char _dta[siman_sevars] `se'
        if "`df'"!="" char _dta[siman_dfvars] `df'
        if "`ci'"!="" char _dta[siman_civars] `ci'
        if "`p'"!="" char _dta[siman_pvars] `p'
        if "`true'"!="" char _dta[siman_truevars] `true'
        char _dta[siman_method] "`siman_valmethod'"
        char _dta[siman_descriptiontype] "stub"
        if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        char _dta[siman_cidescriptiontype] "stubs"
        if mi("`describe") siman_describe
        {c )-}
      - else if `nformat'==1 & `nmethod'==0 {c -(}
      = else if 2==1 & 2==0 {c -(}
        di as error "Can not reshape targets to wide format"
        exit 498
        {c )-}
      - {c )-}
      - else
      - if "`longlong'"!="" {c -(}
      = if ""!="" {c -(}
        if `nformat'==3 {c -(}
        if `methodlabels' == 1 local valmethod "`metlist'"
        qui tokenize "`valmethod'"
        if `nmethod'!=0 {c -(}
        forvalues v=1/`nummethod' {c -(}
        if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
        if `v'==1 local valmethod `valmethod`v''
        else if `v'>=2 local valmethod `valmethod' `valmethod`v''
        {c )-}
        {c )-}
        {c )-}
        local string = 0
        forvalues i=1/`nmethod' {c -(}
        qui capture confirm number `m`i''
        if _rc {c -(}
        local string = 1
        {c )-}
        {c )-}
        if "`estchange'" == "1" local estimateunderscore = "`estvars'"
        if "`sechange'" == "1" local seunderscore = "`sevars'"
        if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
        if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
        if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
        if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
        local optionlistreshape `optionlist'
        local exclude "`true'"
        local optionlistreshape: list optionlistreshape - exclude
        local methodname: char _dta[ReS_j]
        if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
        if "`methodlables'" == "1" local methodreshape "`methodvalues'"
        else local methodreshape "`valmethod'"
        if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
        local trueindgm = strpos("`dgm'","`true'")
        if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
        else local optionlistreshape `optionlist'
        if `truenumber' == 1 local optionlistreshape `optionlist'
        if "`ntruestub'" == "0" local optionlistreshape `optionlist'
        if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
        {c )-}
        else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
        {c )-}
        else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
        {c )-}
        else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
        {c )-}
        else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
        {c )-}
        {c )-}
        else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
        if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
        {c )-}
        else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
        {c )-}
        else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
        {c )-}
        else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
        {c )-}
        else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
        {c )-}
        {c )-}
        foreach u of var * {c -(}
        if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
        {c )-}
        char _dta[siman_format] "format 1: long-long"
        char _dta[siman_targetformat] "long"
        char _dta[siman_methodformat] "long"
        char _dta[siman_nformat] 1
        if `nmethod'!=0 char _dta[siman_method] "`methodname'"
        if `nmethod'!=0 char _dta[siman_nmethod] 1
        char _dta[siman_descriptiontype] "variable"
        char _dta[siman_truedescriptiontype] "variable"
        char _dta[siman_cidescriptiontype] "variables"
        char _dta[siman_estimate] `estimate'
        char _dta[siman_se] `se'
        if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        if "`se'"!="" char _dta[siman_sevars] `se'
        if "`simananalyserun'"=="1" {c -(}
        preserve
        qui tempfile sortperf
        qui drop if `rep'<0
        qui save `sortperf'
        restore
        qui drop if `rep'>0
        if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
        else qui gsort -`rep' `dgm' `target'
        qui append using `sortperf'
        {c )-}
        if mi("`describe") siman_describe
        {c )-}
        {c )-}
      - local allthings `allthings' metlist
      = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist
      - char _dta[siman_metlist] "`metlist'"
      = char _dta[siman_metlist] ""
      - char _dta[siman_allthings] `allthings'
      = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist
      - if `dgmcreated' == 1 qui drop dgm
      = if 0 == 1 qui drop dgm

{col 20}SUMMARY OF DATA
_____________________________________________________

The siman format is:{res}{col 35}format 3: long-wide
{txt}The format for targets is:{res}{col 35}long
{txt}The format for methods is:{res}{col 35}wide
{txt}The number of targets is:{res}{col 35}2
{txt}The target values are:{res}{col 35}1 2

{txt}The number of methods is:{res}{col 35}2
{txt}The method values are:{res}{col 35}A B

Data generating mechanism (dgm)
{txt}The total number of dgms is: {res}{col 35}2
{txt}The dgm variables (# levels): {res}{col 35}dgm (2) 

Estimates are contained in the dataset

{txt}The estimates stub is:{res}{col 35}est
{txt}The se stub is:{res}{col 35}se
{txt}The df stub is:{res}{col 35}N/A
{txt}The ci stubs are:{res}{col 35}N/A
{txt}The p stub is:{res}{col 35}N/A
{txt}The true variable is:{res}{col 35}_true
{txt}_____________________________________________________

{com}. * has made target string
.  
. * graphs
. siman scatter, ytitle("test y-title") xtitle("test x-title") name("scatter_test2", replace) 
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    _true
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number _true
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 3==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
          else if `nformat'==1 & `nmethod'!=0 {c -(}
          if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
          if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
          if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
          if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
          if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
          if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
          if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
          else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
          local numberdgms: word count `dgm'
          if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
          qui tab `method'
          local nmethodlabels = `r(r)'
          qui levels `method', local(mlevels)
          qui tokenize `"`mlevels'"'
          cap quietly label drop `method'
          local labelchange = 0
          forvalues m = 1/`nmethodlabels' {c -(}
          if substr("``m''",strlen("``m''"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          else {c -(}
          local metlabel`m' = "``m''"
          if `m'==1 local metlist `metlabel`m''
          else if `m'>=2 local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          if `labelchange'==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
          local valmethod = "`metlist'"
          forvalues i=1/`nmethod' {c -(}
          local m`i' = "``i''"
          {c )-}
          local string = 0
          capture confirm numeric variable `method'
          if _rc local string = 1
          if `string' == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
          else if `string' == 1 & "`methodlabels'" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
          else if "`methodlabels'" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          forvalues i=1/`nummethod' {c -(}
          char _dta[siman_m`i'] `i'
          if `i'==1 local siman_method `i'
          else if `i'>=2 local siman_method `siman_method' `i'
          {c )-}
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          char _dta[siman_df] `df'
          char _dta[siman_ci] `ci'
          char _dta[siman_p] `p'
          char _dta[siman_true] `true'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`df'"!="" char _dta[siman_dfvars] `df'
          if "`ci'"!="" char _dta[siman_civars] `ci'
          if "`p'"!="" char _dta[siman_pvars] `p'
          if "`true'"!="" char _dta[siman_truevars] `true'
          char _dta[siman_method] "`siman_valmethod'"
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          else if `nformat'==1 & `nmethod'==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
          {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if "longlong"!="" {c -(}
        - if `nformat'==3 {c -(}
        = if 3==3 {c -(}
        - if `methodlabels' == 1 local valmethod "`metlist'"
        = if 0 == 1 local valmethod ""
        - qui tokenize "`valmethod'"
        = qui tokenize "A B"
        - if `nmethod'!=0 {c -(}
        = if 2!=0 {c -(}
        - forvalues v=1/`nummethod' {c -(}
        = forvalues v=1/2 {c -(}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("A",strlen("A"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("B",strlen("B"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - {c )-}
        - local string = 0
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/2 {c -(}
        - qui capture confirm number `m`i''
        = qui capture confirm number A
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - qui capture confirm number `m`i''
        = qui capture confirm number B
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - if "`estchange'" == "1" local estimateunderscore = "`estvars'"
        = if "" == "1" local estimateunderscore = "est"
        - if "`sechange'" == "1" local seunderscore = "`sevars'"
        = if "" == "1" local seunderscore = "se"
        - if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
        = if ("" != "1" & "" != "1") local optionlist est se   
        - if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
        = if ("" == "1" & "" != "1") local optionlist  se   
        - if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
        = if ("" != "1" & "" == "1") local optionlist est    
        - if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
        = if ("" == "1" & "" == "1") local optionlist     
        - local optionlistreshape `optionlist'
        = local optionlistreshape est se
        - local exclude "`true'"
        = local exclude "_true"
        - local optionlistreshape: list optionlistreshape - exclude
        - local methodname: char _dta[ReS_j]
        - if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
        = if mi("_j") | "_j" == "_j" | "_j" == "mcse" local methodname "method"
        - if "`methodlables'" == "1" local methodreshape "`methodvalues'"
        = if "" == "1" local methodreshape ""
        - else local methodreshape "`valmethod'"
        = else local methodreshape "A B"
        - if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
        = if "variable" == "stub" | 0 == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
        - else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
        = else if "variable" == "variable" & 0 == 0 {c -(}
        - if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = if 1 == 0 & 1<=1 & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 1<=1 & 2!=0 {c -(}
        - qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
        = qui reshape long "est se", i(rep dgm target _true) j(method "A B") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "long"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "long"=="wide" | "long"=="long" {c -(}
          - DoNew `*'
          = DoNew long est se , i(rep dgm target _true) j(method A B ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        = else if 1>1 & 1!=. & 2==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
        - else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 0 & 1>1 & 1!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 1>1 & 1!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
        - {c )-}
        - foreach u of var * {c -(}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("rep",strlen("rep"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("dgm",strlen("dgm"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("target",strlen("target"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("_true",strlen("_true"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("method",strlen("method"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("est",strlen("est"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("se",strlen("se"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - char _dta[siman_format] "format 1: long-long"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "long"
        - char _dta[siman_nformat] 1
        - if `nmethod'!=0 char _dta[siman_method] "`methodname'"
        = if 2!=0 char _dta[siman_method] "method"
        - if `nmethod'!=0 char _dta[siman_nmethod] 1
        = if 2!=0 char _dta[siman_nmethod] 1
        - char _dta[siman_descriptiontype] "variable"
        - char _dta[siman_truedescriptiontype] "variable"
        - char _dta[siman_cidescriptiontype] "variables"
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`simananalyserun'"=="1" {c -(}
        = if ""=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
        - if mi("`describe") siman_describe
        - {c )-}
        - {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] ""
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
working.....
{res}{txt}
{com}. 
. siman swarm, graphoptions(ytitle("test y-title") xtitle("test x-title") name("swarm_test2", replace)) 
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    _true
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number _true
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 3==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
          else if `nformat'==1 & `nmethod'!=0 {c -(}
          if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
          if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
          if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
          if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
          if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
          if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
          if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
          else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
          local numberdgms: word count `dgm'
          if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
          qui tab `method'
          local nmethodlabels = `r(r)'
          qui levels `method', local(mlevels)
          qui tokenize `"`mlevels'"'
          cap quietly label drop `method'
          local labelchange = 0
          forvalues m = 1/`nmethodlabels' {c -(}
          if substr("``m''",strlen("``m''"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          else {c -(}
          local metlabel`m' = "``m''"
          if `m'==1 local metlist `metlabel`m''
          else if `m'>=2 local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          if `labelchange'==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
          local valmethod = "`metlist'"
          forvalues i=1/`nmethod' {c -(}
          local m`i' = "``i''"
          {c )-}
          local string = 0
          capture confirm numeric variable `method'
          if _rc local string = 1
          if `string' == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
          else if `string' == 1 & "`methodlabels'" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
          else if "`methodlabels'" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          forvalues i=1/`nummethod' {c -(}
          char _dta[siman_m`i'] `i'
          if `i'==1 local siman_method `i'
          else if `i'>=2 local siman_method `siman_method' `i'
          {c )-}
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          char _dta[siman_df] `df'
          char _dta[siman_ci] `ci'
          char _dta[siman_p] `p'
          char _dta[siman_true] `true'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`df'"!="" char _dta[siman_dfvars] `df'
          if "`ci'"!="" char _dta[siman_civars] `ci'
          if "`p'"!="" char _dta[siman_pvars] `p'
          if "`true'"!="" char _dta[siman_truevars] `true'
          char _dta[siman_method] "`siman_valmethod'"
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          else if `nformat'==1 & `nmethod'==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
          {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if "longlong"!="" {c -(}
        - if `nformat'==3 {c -(}
        = if 3==3 {c -(}
        - if `methodlabels' == 1 local valmethod "`metlist'"
        = if 0 == 1 local valmethod ""
        - qui tokenize "`valmethod'"
        = qui tokenize "A B"
        - if `nmethod'!=0 {c -(}
        = if 2!=0 {c -(}
        - forvalues v=1/`nummethod' {c -(}
        = forvalues v=1/2 {c -(}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("A",strlen("A"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("B",strlen("B"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - {c )-}
        - local string = 0
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/2 {c -(}
        - qui capture confirm number `m`i''
        = qui capture confirm number A
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - qui capture confirm number `m`i''
        = qui capture confirm number B
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - if "`estchange'" == "1" local estimateunderscore = "`estvars'"
        = if "" == "1" local estimateunderscore = "est"
        - if "`sechange'" == "1" local seunderscore = "`sevars'"
        = if "" == "1" local seunderscore = "se"
        - if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
        = if ("" != "1" & "" != "1") local optionlist est se   
        - if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
        = if ("" == "1" & "" != "1") local optionlist  se   
        - if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
        = if ("" != "1" & "" == "1") local optionlist est    
        - if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
        = if ("" == "1" & "" == "1") local optionlist     
        - local optionlistreshape `optionlist'
        = local optionlistreshape est se
        - local exclude "`true'"
        = local exclude "_true"
        - local optionlistreshape: list optionlistreshape - exclude
        - local methodname: char _dta[ReS_j]
        - if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
        = if mi("_j") | "_j" == "_j" | "_j" == "mcse" local methodname "method"
        - if "`methodlables'" == "1" local methodreshape "`methodvalues'"
        = if "" == "1" local methodreshape ""
        - else local methodreshape "`valmethod'"
        = else local methodreshape "A B"
        - if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
        = if "variable" == "stub" | 0 == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
        - else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
        = else if "variable" == "variable" & 0 == 0 {c -(}
        - if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = if 1 == 0 & 1<=1 & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 1<=1 & 2!=0 {c -(}
        - qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
        = qui reshape long "est se", i(rep dgm target _true) j(method "A B") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "long"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "long"=="wide" | "long"=="long" {c -(}
          - DoNew `*'
          = DoNew long est se , i(rep dgm target _true) j(method A B ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        = else if 1>1 & 1!=. & 2==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
        - else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 0 & 1>1 & 1!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 1>1 & 1!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
        - {c )-}
        - foreach u of var * {c -(}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("rep",strlen("rep"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("dgm",strlen("dgm"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("target",strlen("target"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("_true",strlen("_true"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("method",strlen("method"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("est",strlen("est"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("se",strlen("se"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - char _dta[siman_format] "format 1: long-long"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "long"
        - char _dta[siman_nformat] 1
        - if `nmethod'!=0 char _dta[siman_method] "`methodname'"
        = if 2!=0 char _dta[siman_method] "method"
        - if `nmethod'!=0 char _dta[siman_nmethod] 1
        = if 2!=0 char _dta[siman_nmethod] 1
        - char _dta[siman_descriptiontype] "variable"
        - char _dta[siman_truedescriptiontype] "variable"
        - char _dta[siman_cidescriptiontype] "variables"
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`simananalyserun'"=="1" {c -(}
        = if ""=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
        - if mi("`describe") siman_describe
        - {c )-}
        - {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] ""
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
{res}{txt}working.....

{com}. 
. siman zipplot, scheme(scheme(s2color)) legend(order(3 "Carrot" 4 "Stalk")) xtit("x-title") ytit("y-title") ylab(0 40 100) noncoveroptions(pstyle(p3)) ///
> coveroptions(pstyle(p4)) scatteroptions(mcol(gray%50)) truegraphoptions(pstyle(p6)) name("zipplot_test2", replace)
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    _true
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number _true
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 3==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
          else if `nformat'==1 & `nmethod'!=0 {c -(}
          if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
          if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
          if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
          if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
          if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
          if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
          if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
          else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
          local numberdgms: word count `dgm'
          if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
          qui tab `method'
          local nmethodlabels = `r(r)'
          qui levels `method', local(mlevels)
          qui tokenize `"`mlevels'"'
          cap quietly label drop `method'
          local labelchange = 0
          forvalues m = 1/`nmethodlabels' {c -(}
          if substr("``m''",strlen("``m''"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          else {c -(}
          local metlabel`m' = "``m''"
          if `m'==1 local metlist `metlabel`m''
          else if `m'>=2 local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          if `labelchange'==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
          local valmethod = "`metlist'"
          forvalues i=1/`nmethod' {c -(}
          local m`i' = "``i''"
          {c )-}
          local string = 0
          capture confirm numeric variable `method'
          if _rc local string = 1
          if `string' == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
          else if `string' == 1 & "`methodlabels'" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
          else if "`methodlabels'" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          forvalues i=1/`nummethod' {c -(}
          char _dta[siman_m`i'] `i'
          if `i'==1 local siman_method `i'
          else if `i'>=2 local siman_method `siman_method' `i'
          {c )-}
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          char _dta[siman_df] `df'
          char _dta[siman_ci] `ci'
          char _dta[siman_p] `p'
          char _dta[siman_true] `true'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`df'"!="" char _dta[siman_dfvars] `df'
          if "`ci'"!="" char _dta[siman_civars] `ci'
          if "`p'"!="" char _dta[siman_pvars] `p'
          if "`true'"!="" char _dta[siman_truevars] `true'
          char _dta[siman_method] "`siman_valmethod'"
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          else if `nformat'==1 & `nmethod'==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
          {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if "longlong"!="" {c -(}
        - if `nformat'==3 {c -(}
        = if 3==3 {c -(}
        - if `methodlabels' == 1 local valmethod "`metlist'"
        = if 0 == 1 local valmethod ""
        - qui tokenize "`valmethod'"
        = qui tokenize "A B"
        - if `nmethod'!=0 {c -(}
        = if 2!=0 {c -(}
        - forvalues v=1/`nummethod' {c -(}
        = forvalues v=1/2 {c -(}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("A",strlen("A"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("B",strlen("B"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - {c )-}
        - local string = 0
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/2 {c -(}
        - qui capture confirm number `m`i''
        = qui capture confirm number A
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - qui capture confirm number `m`i''
        = qui capture confirm number B
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - if "`estchange'" == "1" local estimateunderscore = "`estvars'"
        = if "" == "1" local estimateunderscore = "est"
        - if "`sechange'" == "1" local seunderscore = "`sevars'"
        = if "" == "1" local seunderscore = "se"
        - if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
        = if ("" != "1" & "" != "1") local optionlist est se   
        - if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
        = if ("" == "1" & "" != "1") local optionlist  se   
        - if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
        = if ("" != "1" & "" == "1") local optionlist est    
        - if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
        = if ("" == "1" & "" == "1") local optionlist     
        - local optionlistreshape `optionlist'
        = local optionlistreshape est se
        - local exclude "`true'"
        = local exclude "_true"
        - local optionlistreshape: list optionlistreshape - exclude
        - local methodname: char _dta[ReS_j]
        - if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
        = if mi("_j") | "_j" == "_j" | "_j" == "mcse" local methodname "method"
        - if "`methodlables'" == "1" local methodreshape "`methodvalues'"
        = if "" == "1" local methodreshape ""
        - else local methodreshape "`valmethod'"
        = else local methodreshape "A B"
        - if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
        = if "variable" == "stub" | 0 == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
        - else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
        = else if "variable" == "variable" & 0 == 0 {c -(}
        - if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = if 1 == 0 & 1<=1 & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 1<=1 & 2!=0 {c -(}
        - qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
        = qui reshape long "est se", i(rep dgm target _true) j(method "A B") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "long"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "long"=="wide" | "long"=="long" {c -(}
          - DoNew `*'
          = DoNew long est se , i(rep dgm target _true) j(method A B ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        = else if 1>1 & 1!=. & 2==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
        - else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 0 & 1>1 & 1!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 1>1 & 1!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
        - {c )-}
        - foreach u of var * {c -(}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("rep",strlen("rep"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("dgm",strlen("dgm"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("target",strlen("target"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("_true",strlen("_true"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("method",strlen("method"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("est",strlen("est"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("se",strlen("se"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - char _dta[siman_format] "format 1: long-long"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "long"
        - char _dta[siman_nformat] 1
        - if `nmethod'!=0 char _dta[siman_method] "`methodname'"
        = if 2!=0 char _dta[siman_method] "method"
        - if `nmethod'!=0 char _dta[siman_nmethod] 1
        = if 2!=0 char _dta[siman_nmethod] 1
        - char _dta[siman_descriptiontype] "variable"
        - char _dta[siman_truedescriptiontype] "variable"
        - char _dta[siman_cidescriptiontype] "variables"
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`simananalyserun'"=="1" {c -(}
        = if ""=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
        - if mi("`describe") siman_describe
        - {c )-}
        - {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] ""
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
Drawing 1 graphs (1 per true value)...
{res}{txt}
{com}. 
. siman comparemethodsscatter, title("testtitle") subgr(xtit("testaxis")) name("cms_test2", replace) 
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    _true
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number _true
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 3==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
          else if `nformat'==1 & `nmethod'!=0 {c -(}
          if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
          if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
          if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
          if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
          if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
          if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
          if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
          else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
          local numberdgms: word count `dgm'
          if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
          qui tab `method'
          local nmethodlabels = `r(r)'
          qui levels `method', local(mlevels)
          qui tokenize `"`mlevels'"'
          cap quietly label drop `method'
          local labelchange = 0
          forvalues m = 1/`nmethodlabels' {c -(}
          if substr("``m''",strlen("``m''"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          else {c -(}
          local metlabel`m' = "``m''"
          if `m'==1 local metlist `metlabel`m''
          else if `m'>=2 local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          if `labelchange'==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
          local valmethod = "`metlist'"
          forvalues i=1/`nmethod' {c -(}
          local m`i' = "``i''"
          {c )-}
          local string = 0
          capture confirm numeric variable `method'
          if _rc local string = 1
          if `string' == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
          else if `string' == 1 & "`methodlabels'" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
          else if "`methodlabels'" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          forvalues i=1/`nummethod' {c -(}
          char _dta[siman_m`i'] `i'
          if `i'==1 local siman_method `i'
          else if `i'>=2 local siman_method `siman_method' `i'
          {c )-}
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          char _dta[siman_df] `df'
          char _dta[siman_ci] `ci'
          char _dta[siman_p] `p'
          char _dta[siman_true] `true'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`df'"!="" char _dta[siman_dfvars] `df'
          if "`ci'"!="" char _dta[siman_civars] `ci'
          if "`p'"!="" char _dta[siman_pvars] `p'
          if "`true'"!="" char _dta[siman_truevars] `true'
          char _dta[siman_method] "`siman_valmethod'"
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          else if `nformat'==1 & `nmethod'==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
          {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if "longlong"!="" {c -(}
        - if `nformat'==3 {c -(}
        = if 3==3 {c -(}
        - if `methodlabels' == 1 local valmethod "`metlist'"
        = if 0 == 1 local valmethod ""
        - qui tokenize "`valmethod'"
        = qui tokenize "A B"
        - if `nmethod'!=0 {c -(}
        = if 2!=0 {c -(}
        - forvalues v=1/`nummethod' {c -(}
        = forvalues v=1/2 {c -(}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("A",strlen("A"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("B",strlen("B"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - {c )-}
        - local string = 0
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/2 {c -(}
        - qui capture confirm number `m`i''
        = qui capture confirm number A
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - qui capture confirm number `m`i''
        = qui capture confirm number B
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - if "`estchange'" == "1" local estimateunderscore = "`estvars'"
        = if "" == "1" local estimateunderscore = "est"
        - if "`sechange'" == "1" local seunderscore = "`sevars'"
        = if "" == "1" local seunderscore = "se"
        - if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
        = if ("" != "1" & "" != "1") local optionlist est se   
        - if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
        = if ("" == "1" & "" != "1") local optionlist  se   
        - if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
        = if ("" != "1" & "" == "1") local optionlist est    
        - if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
        = if ("" == "1" & "" == "1") local optionlist     
        - local optionlistreshape `optionlist'
        = local optionlistreshape est se
        - local exclude "`true'"
        = local exclude "_true"
        - local optionlistreshape: list optionlistreshape - exclude
        - local methodname: char _dta[ReS_j]
        - if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
        = if mi("_j") | "_j" == "_j" | "_j" == "mcse" local methodname "method"
        - if "`methodlables'" == "1" local methodreshape "`methodvalues'"
        = if "" == "1" local methodreshape ""
        - else local methodreshape "`valmethod'"
        = else local methodreshape "A B"
        - if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
        = if "variable" == "stub" | 0 == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
        - else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
        = else if "variable" == "variable" & 0 == 0 {c -(}
        - if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = if 1 == 0 & 1<=1 & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 1<=1 & 2!=0 {c -(}
        - qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
        = qui reshape long "est se", i(rep dgm target _true) j(method "A B") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "long"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "long"=="wide" | "long"=="long" {c -(}
          - DoNew `*'
          = DoNew long est se , i(rep dgm target _true) j(method A B ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        = else if 1>1 & 1!=. & 2==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
        - else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 0 & 1>1 & 1!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 1>1 & 1!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
        - {c )-}
        - foreach u of var * {c -(}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("rep",strlen("rep"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("dgm",strlen("dgm"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("target",strlen("target"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("_true",strlen("_true"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("method",strlen("method"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("est",strlen("est"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("se",strlen("se"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - char _dta[siman_format] "format 1: long-long"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "long"
        - char _dta[siman_nformat] 1
        - if `nmethod'!=0 char _dta[siman_method] "`methodname'"
        = if 2!=0 char _dta[siman_method] "method"
        - if `nmethod'!=0 char _dta[siman_nmethod] 1
        = if 2!=0 char _dta[siman_nmethod] 1
        - char _dta[siman_descriptiontype] "variable"
        - char _dta[siman_truedescriptiontype] "variable"
        - char _dta[siman_cidescriptiontype] "variables"
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`simananalyserun'"=="1" {c -(}
        = if ""=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
        - if mi("`describe") siman_describe
        - {c )-}
        - {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] ""
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
        - set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    _true
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number _true
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("est",strlen("est"),1)=="_" local estimate = substr("est", 1, index("est","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("_true",strlen("_true"),1)=="_" local true = substr("_true", 1, index("_true","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    _true
        - local numberdgms: word count `dgm'
        = local numberdgms: word count dgm
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 1!=1 local optionlist est se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 2
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 0 {c -(}
            capture assert `varlist' == int(`varlist') if `touse'
            if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
            tempname Vals
            qui tab `varlist' if `touse', `missing' matrow(`Vals')
            local nvals = r(r)
            forval i = 1 / `nvals' {c -(}
            local val = `Vals'[`i',1]
            if `i' < `nvals' local vals "`vals'`val'`sep'"
            else local vals "`vals'`val'"
            {c )-}
            {c )-}
          - else {c -(}
          - tempvar select counter
          - bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
          = bysort __000003 method : gen byte __000004 = (_n == 1) * __000003
          - generate `counter' = sum(`select') * (`select' == 1)
          = generate __000005 = sum(__000004) * (__000004 == 1)
          - sort `counter'
          = sort __000005
          - qui count if `counter' == 0
          = qui count if __000005 == 0
          - local j = 1 + r(N)
          - local nvals = _N
          - if "`clean'" != "" {c -(}
          = if "" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
          - else {c -(}
          - forval i = `j' / `nvals' {c -(}
          = forval i = 7999 / 8000 {c -(}
          - if `i' < `nvals' {c -(}
          = if 7999 < 8000 {c -(}
          - local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
          = local vals `"`"A"' "'
          - {c )-}
          - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
          = else local vals `"`"A"' `"A"'"'
          - {c )-}
          - if `i' < `nvals' {c -(}
          = if 8000 < 8000 {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
          - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
          = else local vals `"`"A"' `"B"'"'
          - {c )-}
          - {c )-}
          - {c )-}
          - di as txt `"`vals'"'
          = di as txt `"`"A"' `"B"'"'
          - return local levels `"`vals'"'
          = return local levels `"`"A"' `"B"'"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"`"A"' `"B"'"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"`"A"' `"B"'"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/2 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("A",strlen("A"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "A"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist A
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist A A
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("B",strlen("B"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "B"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist B
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist A B
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "A B"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "A"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 1 == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 1 == 1 & "0" != "1" {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
        = qui reshape wide "est se", i(rep dgm "target") j(method "A B") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide est se , i(rep dgm target ) j(method A B ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/2 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] _true
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if "_true"!="" char _dta[siman_truevars] _true
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "single"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "single"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist metlist metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "A B"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist metlist metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
Working.....
{res}{txt}
{com}. 
. siman blandaltman, ytitle("test y-title") xtitle("test x-title") name("ba_test2", replace)        
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    _true
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number _true
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 3==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
          else if `nformat'==1 & `nmethod'!=0 {c -(}
          if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
          if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
          if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
          if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
          if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
          if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
          if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
          else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
          local numberdgms: word count `dgm'
          if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
          qui tab `method'
          local nmethodlabels = `r(r)'
          qui levels `method', local(mlevels)
          qui tokenize `"`mlevels'"'
          cap quietly label drop `method'
          local labelchange = 0
          forvalues m = 1/`nmethodlabels' {c -(}
          if substr("``m''",strlen("``m''"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          else {c -(}
          local metlabel`m' = "``m''"
          if `m'==1 local metlist `metlabel`m''
          else if `m'>=2 local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          if `labelchange'==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
          local valmethod = "`metlist'"
          forvalues i=1/`nmethod' {c -(}
          local m`i' = "``i''"
          {c )-}
          local string = 0
          capture confirm numeric variable `method'
          if _rc local string = 1
          if `string' == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
          else if `string' == 1 & "`methodlabels'" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
          else if "`methodlabels'" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          forvalues i=1/`nummethod' {c -(}
          char _dta[siman_m`i'] `i'
          if `i'==1 local siman_method `i'
          else if `i'>=2 local siman_method `siman_method' `i'
          {c )-}
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          char _dta[siman_df] `df'
          char _dta[siman_ci] `ci'
          char _dta[siman_p] `p'
          char _dta[siman_true] `true'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`df'"!="" char _dta[siman_dfvars] `df'
          if "`ci'"!="" char _dta[siman_civars] `ci'
          if "`p'"!="" char _dta[siman_pvars] `p'
          if "`true'"!="" char _dta[siman_truevars] `true'
          char _dta[siman_method] "`siman_valmethod'"
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          else if `nformat'==1 & `nmethod'==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
          {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if "longlong"!="" {c -(}
        - if `nformat'==3 {c -(}
        = if 3==3 {c -(}
        - if `methodlabels' == 1 local valmethod "`metlist'"
        = if 0 == 1 local valmethod ""
        - qui tokenize "`valmethod'"
        = qui tokenize "A B"
        - if `nmethod'!=0 {c -(}
        = if 2!=0 {c -(}
        - forvalues v=1/`nummethod' {c -(}
        = forvalues v=1/2 {c -(}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("A",strlen("A"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("B",strlen("B"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - {c )-}
        - local string = 0
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/2 {c -(}
        - qui capture confirm number `m`i''
        = qui capture confirm number A
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - qui capture confirm number `m`i''
        = qui capture confirm number B
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - if "`estchange'" == "1" local estimateunderscore = "`estvars'"
        = if "" == "1" local estimateunderscore = "est"
        - if "`sechange'" == "1" local seunderscore = "`sevars'"
        = if "" == "1" local seunderscore = "se"
        - if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
        = if ("" != "1" & "" != "1") local optionlist est se   
        - if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
        = if ("" == "1" & "" != "1") local optionlist  se   
        - if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
        = if ("" != "1" & "" == "1") local optionlist est    
        - if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
        = if ("" == "1" & "" == "1") local optionlist     
        - local optionlistreshape `optionlist'
        = local optionlistreshape est se
        - local exclude "`true'"
        = local exclude "_true"
        - local optionlistreshape: list optionlistreshape - exclude
        - local methodname: char _dta[ReS_j]
        - if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
        = if mi("_j") | "_j" == "_j" | "_j" == "mcse" local methodname "method"
        - if "`methodlables'" == "1" local methodreshape "`methodvalues'"
        = if "" == "1" local methodreshape ""
        - else local methodreshape "`valmethod'"
        = else local methodreshape "A B"
        - if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
        = if "variable" == "stub" | 0 == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
        - else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
        = else if "variable" == "variable" & 0 == 0 {c -(}
        - if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = if 1 == 0 & 1<=1 & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 1<=1 & 2!=0 {c -(}
        - qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
        = qui reshape long "est se", i(rep dgm target _true) j(method "A B") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "long"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "long"=="wide" | "long"=="long" {c -(}
          - DoNew `*'
          = DoNew long est se , i(rep dgm target _true) j(method A B ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        = else if 1>1 & 1!=. & 2==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
        - else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 0 & 1>1 & 1!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 1>1 & 1!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
        - {c )-}
        - foreach u of var * {c -(}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("rep",strlen("rep"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("dgm",strlen("dgm"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("target",strlen("target"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("_true",strlen("_true"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("method",strlen("method"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("est",strlen("est"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("se",strlen("se"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - char _dta[siman_format] "format 1: long-long"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "long"
        - char _dta[siman_nformat] 1
        - if `nmethod'!=0 char _dta[siman_method] "`methodname'"
        = if 2!=0 char _dta[siman_method] "method"
        - if `nmethod'!=0 char _dta[siman_nmethod] 1
        = if 2!=0 char _dta[siman_nmethod] 1
        - char _dta[siman_descriptiontype] "variable"
        - char _dta[siman_truedescriptiontype] "variable"
        - char _dta[siman_cidescriptiontype] "variables"
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`simananalyserun'"=="1" {c -(}
        = if ""=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
        - if mi("`describe") siman_describe
        - {c )-}
        - {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] ""
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
        - set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    _true
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number _true
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("est",strlen("est"),1)=="_" local estimate = substr("est", 1, index("est","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("_true",strlen("_true"),1)=="_" local true = substr("_true", 1, index("_true","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    _true
        - local numberdgms: word count `dgm'
        = local numberdgms: word count dgm
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 1!=1 local optionlist est se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 2
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 1 {c -(}
          - capture assert `varlist' == int(`varlist') if `touse'
          = capture assert method == int(method) if __000003
          - if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
          - tempname Vals
          - qui tab `varlist' if `touse', `missing' matrow(`Vals')
          = qui tab method if __000003,  matrow(__000004)
          - local nvals = r(r)
          - forval i = 1 / `nvals' {c -(}
          = forval i = 1 / 2 {c -(}
          - local val = `Vals'[`i',1]
          = local val = __000004[1,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 1 < 2 local vals "1 "
          - else local vals "`vals'`val'"
          = else local vals "1 1"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[2,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 2 < 2 local vals "1 2 "
          - else local vals "`vals'`val'"
          = else local vals "1 2"
          - {c )-}
          - {c )-}
          - else {c -(}
            tempvar select counter
            bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
            generate `counter' = sum(`select') * (`select' == 1)
            sort `counter'
            qui count if `counter' == 0
            local j = 1 + r(N)
            local nvals = _N
            if "`clean'" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
            else {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
            else local vals `"`vals'`"`=`varlist'[`i']'"'"'
            {c )-}
            {c )-}
            {c )-}
          - di as txt `"`vals'"'
          = di as txt `"1 2"'
          - return local levels `"`vals'"'
          = return local levels `"1 2"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"1 2"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"1 2"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/2 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("1",strlen("1"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "1"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist 1
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist 1 1
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("2",strlen("2"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "2"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist 2
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist 1 2
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "1 2"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "1"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 0 == 0 {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        = qui reshape wide "est se", i(rep dgm "target") j(method "1 2")
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide est se , i(rep dgm target ) j(method 1 2 )
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 0 == 1 & "0" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/2 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] _true
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if "_true"!="" char _dta[siman_truevars] _true
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "single"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "single"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist metlist metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "1 2"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist metlist metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
working....
{res}{txt}
{com}. 
. siman analyse                                 
    {txt}- set tracedepth 1
    - if "`method'"=="" {c -(}
    = if "A B"=="" {c -(}
      di as error "The variable 'method' is missing so siman analyse can not be run.  Please create a variable in your dataset called method containing the method value(s)."
      exit 498
      {c )-}
    - if "`simananalyserun'"=="1" & "`replace'" == "" {c -(}
    = if ""=="1" & "" == "" {c -(}
      di as error "There are already performance measures in the dataset.  If you would like to replace these, please use the 'replace' option"
      exit 498
      {c )-}
    - if mi("`estimate'") | mi("`se'") {c -(}
    = if mi("est") | mi("se") {c -(}
      di as error "siman analyse requires est() and se() to be specified in set-up"
      exit 498
      {c )-}
    - local estimatesindi = (`rep'[_N]>0)
    = local estimatesindi = (rep[_N]>0)
    - if "`simananalyserun'"=="1" & "`replace'" == "replace" & `estimatesindi'==1 {c -(}
    = if ""=="1" & "" == "replace" & 1==1 {c -(}
      qui drop if `rep'<0
      qui drop _perfmeascode
      qui drop _dataset
      {c )-}
    - else if "`simananalyserun'"=="1" & "`replace'" == "replace" & `estimatesindi'==0 {c -(}
    = else if ""=="1" & "" == "replace" & 1==0 {c -(}
      di as error "There are no estimates data in the data set.  Please re-load data and use siman setup to import data."
      exit 498
      {c )-}
    - local simananalyserun = 0
    - if "`simansetuprun'"=="0" | "`simansetuprun'"=="" {c -(}
    = if "1"=="0" | "1"=="" {c -(}
      di as error "siman setup has not been run.  Please use siman setup first before siman analyse."
      exit 498
      {c )-}
    - cap confirm variable `true'
    = cap confirm variable _true
    - if _rc==0 {c -(}
    - local extratrue : list true - dgm
    - if !mi("`extratrue'") local truevariable `true'
    = if !mi("_true") local truevariable _true
    - {c )-}
    - if ("`if'"=="" & "`ifsetup'"!="") local ifanalyse = `"`ifsetup'"'
    = if (""=="" & ""!="") local ifanalyse = `""'
    - else local ifanalyse = `"`if'"'
    = else local ifanalyse = `""'
    - qui tempvar touse
    - qui generate `touse' = 0
    = qui generate __000000 = 0
    - qui replace `touse' = 1 `ifanalyse'
    = qui replace __000000 = 1 
    - preserve
    - if `nformat'!=1 {c -(}
    = if 3!=1 {c -(}
    - qui siman_reshape, longlong
      {hline 70} begin siman_reshape {hline}
      - version 15
      - syntax, [LONGWIDE LONGLONG noDEscribe]
      - foreach thing in `_dta[siman_allthings]' {c -(}
      = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist {c -(}
      - local `thing' : char _dta[siman_`thing']
      = local allthings : char _dta[siman_allthings]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local rep : char _dta[siman_rep]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgm : char _dta[siman_dgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local target : char _dta[siman_target]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local method : char _dta[siman_method]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estimate : char _dta[siman_estimate]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local se : char _dta[siman_se]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local df : char _dta[siman_df]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ci : char _dta[siman_ci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local p : char _dta[siman_p]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local true : char _dta[siman_true]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local order : char _dta[siman_order]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local lci : char _dta[siman_lci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local uci : char _dta[siman_uci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifsetup : char _dta[siman_ifsetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local insetup : char _dta[siman_insetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local format : char _dta[siman_format]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetformat : char _dta[siman_targetformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodformat : char _dta[siman_methodformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nformat : char _dta[siman_nformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntarget : char _dta[siman_ntarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ndgm : char _dta[siman_ndgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nmethod : char _dta[siman_nmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numtarget : char _dta[siman_numtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valtarget : char _dta[siman_valtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nummethod : char _dta[siman_nummethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valmethod : char _dta[siman_valmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntrue : char _dta[siman_ntrue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruevalue : char _dta[siman_ntruevalue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmvar : char _dta[siman_dgmvar]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numdgm : char _dta[siman_numdgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmcreated : char _dta[siman_dgmcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetlabels : char _dta[siman_targetlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodcreated : char _dta[siman_methodcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodlabels : char _dta[siman_methodlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodvalues : char _dta[siman_methodvalues]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruestub : char _dta[siman_ntruestub]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local descriptiontype : char _dta[siman_descriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local cidescriptiontype : char _dta[siman_cidescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truedescriptiontype : char _dta[siman_truedescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estvars : char _dta[siman_estvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sevars : char _dta[siman_sevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dfvars : char _dta[siman_dfvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local civars : char _dta[siman_civars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local pvars : char _dta[siman_pvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truevars : char _dta[siman_truevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simansetuprun : char _dta[siman_simansetuprun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m1 : char _dta[siman_m1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m2 : char _dta[siman_m2]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local t1 : char _dta[siman_t1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local t2 : char _dta[siman_t2]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local metlist : char _dta[siman_metlist]
      - {c )-}
      - set trace on
      - set tracedepth 1
      - if mi("`estimate'") & mi("`se'") {c -(}
      = if mi("est") & mi("se") {c -(}
        di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
        exit 498
        {c )-}
      - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
      = if "single"=="single" | "0" != "1" local optionlist est se   
      - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
      = else if "single"=="multiple" local optionlist est se    _true
      - local truenumber = 0
      - cap confirm number `true'
      = cap confirm number _true
      - if !_rc local truenumber = 1
      - if `dgmcreated' == 1 {c -(}
      = if 0 == 1 {c -(}
        cap confirm variable dgm
        if _rc {c -(}
        qui gen dgm = 1
        local dgm dgm
        local ndgm = 1
        {c )-}
        {c )-}
      - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
      = if "0" == "1" & 3==1 {c -(}
        qui cap labelsof `method'
        if !_rc local methodvalues `r(values)'
        else qui cap levelsof `method'
        if !_rc local methodvalues `r(levels)'
        {c )-}
      - if "`longwide'"!="" {c -(}
      = if ""!="" {c -(}
        if `nformat'==2 {c -(}
        if "`order'" == "method" {c -(}
        forvalues j = 1/`nmethod' {c -(}
        foreach option in `optionlist' {c -(}
        local `option'stubreshape`m`j'' = "`option'`m`j''"
        if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
        else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
        {c )-}
        {c )-}
        {c )-}
        else if "`order'" == "target" {c -(}
        forvalues j = 1/`ntarget' {c -(}
        foreach option in `optionlist' {c -(}
        local `option'stubreshape`t`j'' = "`option'`t`j''"
        if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
        else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
        {c )-}
        {c )-}
        {c )-}
        if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
        qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
        {c )-}
        else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
        qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
        {c )-}
        if "`order'" == "method" {c -(}
        if !mi("``true'stubreshapelist'") {c -(}
        forvalues j = 1/`nmethod' {c -(}
        qui tokenize ``true'stubreshapelist'
        if `j'==1 qui rename ``j'' `true'
        else qui drop ``j''
        {c )-}
        {c )-}
        char _dta[siman_truedescriptiontype] "variable"
        local ntruestub 0
        char _dta[siman_ntruestub] 0
        {c )-}
        foreach u of var * {c -(}
        if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
        {c )-}
        if `nformat'==2 & "`order'" == "method" {c -(}
        capture confirm variable target
        if _rc {c -(}
        rename _j target
        local target = "target"
        {c )-}
        else {c -(}
        di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
        exit 498
        {c )-}
        char _dta[siman_format] "format 3: long-wide"
        char _dta[siman_targetformat] "long"
        char _dta[siman_methodformat] "wide"
        char _dta[siman_nformat] 3
        char _dta[siman_target] "`target'"
        if `ntarget'!=0 char _dta[siman_ntarget] 1
        char _dta[siman_descriptiontype] "stub"
        if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
        char _dta[siman_cidescriptiontype] "stubs"
        if mi("`describe") siman_describe
        {c )-}
        if `nformat'==2 & "`order'" == "target" {c -(}
        capture confirm variable method
        if _rc {c -(}
        rename _j method
        local method = "method"
        {c )-}
        else {c -(}
        di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
        exit 498
        {c )-}
        qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
        qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
        local c 1
        foreach j in `valmethod' {c -(}
        if `c'==1 {c -(}
        cap confirm variable `true'`j'
        if !_rc {c -(}
        qui rename `true'`j' `true'
        {c )-}
        local c = `c' + 1
        {c )-}
        else cap qui drop `true'`j'
        {c )-}
        local truedescriptiontype "variable"
        char _dta[siman_truedescriptiontype] "variable"
        local ntruestub 0
        char _dta[siman_format] "format 3: long-wide"
        char _dta[siman_targetformat] "long"
        char _dta[siman_methodformat] "wide"
        char _dta[siman_nformat] 3
        char _dta[siman_target] "target"
        if `ntarget'!=0 char _dta[siman_ntarget] 1
        char _dta[siman_descriptiontype] "stub"
        char _dta[siman_order]: method
        if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
        if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
        char _dta[siman_cidescriptiontype] "stubs"
        if "`truevaluecreated'" == "1" {c -(}
        local truevars `trueuser'
        char _dta[siman_[siman_truevars] "`trueuser'"
        {c )-}
        if mi("`describe") siman_describe
        {c )-}
        {c )-}
        else if `nformat'==1 & `nmethod'!=0 {c -(}
        if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        local numberdgms: word count `dgm'
        if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        qui tab `method'
        local nmethodlabels = `r(r)'
        qui levels `method', local(mlevels)
        qui tokenize `"`mlevels'"'
        cap quietly label drop `method'
        local labelchange = 0
        forvalues m = 1/`nmethodlabels' {c -(}
        if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        local label`m' = substr("``m''", 1, index("``m''","_") - 1)
        local metlabel`m' = "``m''"
        local labelchange = 1
        if `m'==1 {c -(}
        local labelvalues `m' "`label`m''"
        local metlist `metlabel`m''
        {c )-}
        else if `m'>1 {c -(}
        local labelvalues `labelvalues' `m' "`label`m''"
        local metlist `metlist' `metlabel`m''
        {c )-}
        {c )-}
        else {c -(}
        local metlabel`m' = "``m''"
        if `m'==1 local metlist `metlabel`m''
        else if `m'>=2 local metlist `metlist' `metlabel`m''
        {c )-}
        {c )-}
        if `labelchange'==1 {c -(}
        label define methodlab `labelvalues'
        label values `method' methodlab
        {c )-}
        local valmethod = "`metlist'"
        forvalues i=1/`nmethod' {c -(}
        local m`i' = "``i''"
        {c )-}
        local string = 0
        capture confirm numeric variable `method'
        if _rc local string = 1
        if `string' == 0 {c -(}
        qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        {c )-}
        else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
        {c )-}
        else if "`methodlabels'" == "1" {c -(}
        qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
        {c )-}
        char _dta[siman_format] "format 3: long-wide"
        char _dta[siman_targetformat] "long"
        char _dta[siman_methodformat] "wide"
        char _dta[siman_nformat] 3
        forvalues i=1/`nummethod' {c -(}
        char _dta[siman_m`i'] `i'
        if `i'==1 local siman_method `i'
        else if `i'>=2 local siman_method `siman_method' `i'
        {c )-}
        char _dta[siman_estimate] `estimate'
        char _dta[siman_se] `se'
        char _dta[siman_df] `df'
        char _dta[siman_ci] `ci'
        char _dta[siman_p] `p'
        char _dta[siman_true] `true'
        if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        if "`se'"!="" char _dta[siman_sevars] `se'
        if "`df'"!="" char _dta[siman_dfvars] `df'
        if "`ci'"!="" char _dta[siman_civars] `ci'
        if "`p'"!="" char _dta[siman_pvars] `p'
        if "`true'"!="" char _dta[siman_truevars] `true'
        char _dta[siman_method] "`siman_valmethod'"
        char _dta[siman_descriptiontype] "stub"
        if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        char _dta[siman_cidescriptiontype] "stubs"
        if mi("`describe") siman_describe
        {c )-}
        else if `nformat'==1 & `nmethod'==0 {c -(}
        di as error "Can not reshape targets to wide format"
        exit 498
        {c )-}
        {c )-}
      - else
      - if "`longlong'"!="" {c -(}
      = if "longlong"!="" {c -(}
      - if `nformat'==3 {c -(}
      = if 3==3 {c -(}
      - if `methodlabels' == 1 local valmethod "`metlist'"
      = if 0 == 1 local valmethod ""
      - qui tokenize "`valmethod'"
      = qui tokenize "A B"
      - if `nmethod'!=0 {c -(}
      = if 2!=0 {c -(}
      - forvalues v=1/`nummethod' {c -(}
      = forvalues v=1/2 {c -(}
      - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
      = if substr("A",strlen("A"),1)=="_" {c -(}
        local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
        if `v'==1 local valmethod `valmethod`v''
        else if `v'>=2 local valmethod `valmethod' `valmethod`v''
        {c )-}
      - {c )-}
      - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
      = if substr("B",strlen("B"),1)=="_" {c -(}
        local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
        if `v'==1 local valmethod `valmethod`v''
        else if `v'>=2 local valmethod `valmethod' `valmethod`v''
        {c )-}
      - {c )-}
      - {c )-}
      - local string = 0
      - forvalues i=1/`nmethod' {c -(}
      = forvalues i=1/2 {c -(}
      - qui capture confirm number `m`i''
      = qui capture confirm number A
      - if _rc {c -(}
      - local string = 1
      - {c )-}
      - {c )-}
      - qui capture confirm number `m`i''
      = qui capture confirm number B
      - if _rc {c -(}
      - local string = 1
      - {c )-}
      - {c )-}
      - if "`estchange'" == "1" local estimateunderscore = "`estvars'"
      = if "" == "1" local estimateunderscore = "est"
      - if "`sechange'" == "1" local seunderscore = "`sevars'"
      = if "" == "1" local seunderscore = "se"
      - if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
      = if ("" != "1" & "" != "1") local optionlist est se   
      - if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
      = if ("" == "1" & "" != "1") local optionlist  se   
      - if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
      = if ("" != "1" & "" == "1") local optionlist est    
      - if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
      = if ("" == "1" & "" == "1") local optionlist     
      - local optionlistreshape `optionlist'
      = local optionlistreshape est se
      - local exclude "`true'"
      = local exclude "_true"
      - local optionlistreshape: list optionlistreshape - exclude
      - local methodname: char _dta[ReS_j]
      - if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
      = if mi("_j") | "_j" == "_j" | "_j" == "mcse" local methodname "method"
      - if "`methodlables'" == "1" local methodreshape "`methodvalues'"
      = if "" == "1" local methodreshape ""
      - else local methodreshape "`valmethod'"
      = else local methodreshape "A B"
      - if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
      = if "variable" == "stub" | 0 == 1 {c -(}
        local trueindgm = strpos("`dgm'","`true'")
        if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
        else local optionlistreshape `optionlist'
        if `truenumber' == 1 local optionlistreshape `optionlist'
        if "`ntruestub'" == "0" local optionlistreshape `optionlist'
        if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
        {c )-}
        else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
        {c )-}
        else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
        {c )-}
        else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
        {c )-}
        else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
        {c )-}
        {c )-}
      - else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
      = else if "variable" == "variable" & 0 == 0 {c -(}
      - if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
      = if 1 == 0 & 1<=1 & 2!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
        {c )-}
      - else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
      = else if 1 == 1 & 1<=1 & 2!=0 {c -(}
      - qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
      = qui reshape long "est se", i(rep dgm target _true) j(method "A B") string
        {hline 74} begin reshape {hline}
        - u_mi_not_mi_set reshape other
        - if _caller() <= 10 {c -(}
          reshape_10 `0'
          exit
          {c )-}
        - if _caller() >= 12 {c -(}
        - global ReS_Call : di "version " string(_caller()) ":"
        - {c )-}
        - version 5.0, missing
        - if "`1'"=="clear" {c -(}
        = if "long"=="clear" {c -(}
          char _dta[ReS_ver]
          char _dta[ReS_i]
          char _dta[ReS_j]
          char _dta[ReS_jv]
          char _dta[ReS_Xij]
          char _dta[Res_Xi]
          char _dta[ReS_atwl]
          char _dta[ReS_str]
          local xijn : char _dta[ReS_Xij_n]
          if "`xijn'" != "" {c -(}
          forvalues i = 1/`xijn' {c -(}
          char _dta[ReS_Xij_wide`i']
          char _dta[ReS_Xij_long`i']
          {c )-}
          char _dta[ReS_Xij_n]
          {c )-}
          exit
          {c )-}
        - if "`1'"=="wide" | "`1'"=="long" {c -(}
        = if "long"=="wide" | "long"=="long" {c -(}
        - DoNew `*'
        = DoNew long est se , i(rep dgm target _true) j(method A B ) string
        - exit
        {hline 76} end reshape {hline}
      - {c )-}
      - else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
      = else if 1>1 & 1!=. & 2==0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
        {c )-}
      - else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
      = else if 1 == 0 & 1>1 & 1!=. & 2!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
        {c )-}
      - else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
      = else if 1 == 1 & 1>1 & 1!=. & 2!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
        {c )-}
      - {c )-}
      - foreach u of var * {c -(}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("rep",strlen("rep"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("dgm",strlen("dgm"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("target",strlen("target"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("_true",strlen("_true"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("method",strlen("method"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("est",strlen("est"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("se",strlen("se"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("__000000",strlen("__000000"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - char _dta[siman_format] "format 1: long-long"
      - char _dta[siman_targetformat] "long"
      - char _dta[siman_methodformat] "long"
      - char _dta[siman_nformat] 1
      - if `nmethod'!=0 char _dta[siman_method] "`methodname'"
      = if 2!=0 char _dta[siman_method] "method"
      - if `nmethod'!=0 char _dta[siman_nmethod] 1
      = if 2!=0 char _dta[siman_nmethod] 1
      - char _dta[siman_descriptiontype] "variable"
      - char _dta[siman_truedescriptiontype] "variable"
      - char _dta[siman_cidescriptiontype] "variables"
      - char _dta[siman_estimate] `estimate'
      = char _dta[siman_estimate] est
      - char _dta[siman_se] `se'
      = char _dta[siman_se] se
      - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
      = if "est"!="" char _dta[siman_estvars] est
      - if "`se'"!="" char _dta[siman_sevars] `se'
      = if "se"!="" char _dta[siman_sevars] se
      - if "`simananalyserun'"=="1" {c -(}
      = if ""=="1" {c -(}
        preserve
        qui tempfile sortperf
        qui drop if `rep'<0
        qui save `sortperf'
        restore
        qui drop if `rep'>0
        if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
        else qui gsort -`rep' `dgm' `target'
        qui append using `sortperf'
        {c )-}
      - if mi("`describe") siman_describe
      - {c )-}
      - {c )-}
      - local allthings `allthings' metlist
      = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist metlist
      - char _dta[siman_metlist] "`metlist'"
      = char _dta[siman_metlist] ""
      - char _dta[siman_allthings] `allthings'
      = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist metlist
      - if `dgmcreated' == 1 qui drop dgm
      = if 0 == 1 qui drop dgm
      {hline 72} end siman_reshape {hline}
    - if `methodcreated' == 0 local method method
    = if 0 == 0 local method method
    - else local method `method'
    = else local method method
    - {c )-}
    - qui sort `dgm' `target' `method' `touse'
    = qui sort dgm target method __000000
    - capture by `dgm' `target' `method': assert `touse'==`touse'[_n-1] if _n>1
    = capture by dgm target method: assert __000000==__000000[_n-1] if _n>1
    - if _rc == 9 {c -(}
      di as error "The 'if' option can not be applied to 'rep' in siman analyse."
      exit 498
      {c )-}
    - restore
    - qui keep if `touse'
    = qui keep if __000000
    - qui unab allnames : *
      {hline 79} begin unab {hline}
      - version 6
      - gettoken user 0: 0, parse(" :")
      - gettoken colon 0: 0, parse(" :")
      - if `"`colon'"' != ":" {c -(} error 198 {c )-}
      = if `":"' != ":" {c -(} error 198 {c )-}
      - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000) NAME(string)]
      - c_local `user' `varlist'
      = c_local allnames rep dgm _true target estA seA estB seB __000000
      - local n : word count `varlist'
      = local n : word count rep dgm _true target estA seA estB seB __000000
      - if `n'>=`min' & `n'<=`max' {c -(} exit {c )-}
      = if 9>=1 & 9<=120000 {c -(} exit {c )-}
      {hline 81} end unab {hline}
    - tempfile estimatesdata
    - qui save `estimatesdata'
    = qui save C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp
    - qui drop if `rep'<0
    = qui drop if rep<0
    - local methodstringindi = 0
    - capture confirm string variable `method'
    = capture confirm string variable method
    - if !_rc local methodstringindi = 1
    - local optionlist `estimate' `se'
    = local optionlist est se
    - foreach u of var * {c -(}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("rep",strlen("rep"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("dgm",strlen("dgm"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("_true",strlen("_true"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("target",strlen("target"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("estA",strlen("estA"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("seA",strlen("seA"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("estB",strlen("estB"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("seB",strlen("seB"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("__000000",strlen("__000000"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - local estchange = 0
    - if substr("`estimate'",strlen("`estimate'"),1)=="_" {c -(}
    = if substr("est",strlen("est"),1)=="_" {c -(}
      local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
      local estchange = 1
      {c )-}
    - local sechange = 0
    - if substr("`se'",strlen("`se'"),1)=="_" {c -(}
    = if substr("se",strlen("se"),1)=="_" {c -(}
      local se = substr("`se'", 1, index("`se'","_") - 1)
      local sechange = 1
      {c )-}
    - local optionlist `estimate' `se'
    = local optionlist est se
    - if `nformat'==1 {c -(}
    = if 3==1 {c -(}
      local methodformat : value label `method'
      qui order `rep' `dgm' `target' `method'
      qui sort `rep' `dgm' `target' `method'
      qui tab `method'
      local nmethodlabels = `r(r)'
      qui levels `method', local(levels)
      tokenize `"`levels'"'
      forvalues f = 1/`nmethodlabels' {c -(}
      if substr("``f''",strlen("``f''"),1)=="_" local g = substr("``f''", 1, index("``f''","_") - 1)
      if `methodstringindi' == 0 & `methodlabels'!=1 local methodlabel`f' = "`g'"
      else local methodlabel`f' = "``g''"
      if `f'==1 local methodlist `methodlabel`f''
      else if `f'>=2 local methodlist `methodlist' `methodlabel`f''
      {c )-}
      local estsimsum = "`estimate'"
      local sesimsum = "`se'"
      capture confirm variable _perfmeascode
      if !_rc {c -(}
      di as error "siman would like to name a variable '_perfmeascode', but that name already exists in your dataset.  Please rename your variable _perfmeascode as something else."
      exit 498
      {c )-}
      capture confirm variable _dataset
      if !_rc {c -(}
      di as error "siman would like to name a variable '_dataset', but that name already exists in your data.  Please rename your variable _dataset as something else."
      exit 498
      {c )-}
      qui simsum `estsimsum' `if', true(`true') se(`sesimsum') method(`method') id(`rep') by(`truevariable' `dgm' `target') max(20) `anything' clear mcse gen(_perfmeas) `force'
      if `methodlabels' == 0 local methodloop `metlist'
      else local methodloop `methodvalues'
      foreach v in `methodloop' {c -(}
      if !mi("`se'") {c -(}
      if substr(" `estimate'`v'",strlen(" `estimate'`v'"),1)=="_" qui rename `estimate'`v'mcse `se'`v'
      else qui rename `estimate'`v'_mcse `se'`v'
      {c )-}
      else if substr(" `estimate'`v'",strlen(" `estimate'`v'"),1)=="_" qui rename `estimate'`v'mcse se`v'
      else qui rename `estimate'`v'_mcse se`v'
      {c )-}
      local optionlistreshape `optionlist'
      local exclude "`true'"
      local optionlistreshape: list optionlistreshape - exclude
      if !mi("`metlist'") local methodreshape `metlist'
      else local methodreshape `valmethod'
      if `methodstringindi'==1 {c -(}
      qui reshape long `optionlistreshape', i(`dgm' `target' _perfmeasnum) j(`method' "`methodreshape'") string
      {c )-}
      else if `methodstringindi'==0 & `methodlabels' == 0 {c -(}
      qui reshape long `optionlistreshape', i(`dgm' `target' _perfmeasnum) j(`method' "`methodreshape'")
      label value `method' `methodformat'
      {c )-}
      else if `methodstringindi'==0 & `methodlabels' == 1 {c -(}
      qui reshape long `optionlistreshape', i(`dgm' `target' _perfmeasnum) j(`method' "`methodvalues'")
      label value `method' `methodformat'
      {c )-}
      {c )-}
    - else if `nformat'==3 {c -(}
    = else if 3==3 {c -(}
    - qui order `rep' `dgm' `target'
    = qui order rep dgm target
      {hline 78} begin order {hline}
      - version 11
      - if (_caller()<11) {c -(}
        _order `macval(0)'
        exit
        {c )-}
      - syntax varlist[, Before(varname) After(varname) first last SEQuential ALPHAbetic]
      - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'" == "" & "`alphabetic'" == "" & "`sequential'" == "") {c -(}
      = if (`""' == "" & `""' == "" & "" == "" & "" == "" & "" == "" & "" == "") {c -(}
      - _order `macval(0)'
      = _order rep dgm target
      - exit
      {hline 80} end order {hline}
    - qui sort `rep' `dgm' `target'
    = qui sort rep dgm target
    - if `methodstringindi' == 0 & "`methodlabels'" == "1" local methodloop `methodvalues'
    = if 0 == 0 & "0" == "1" local methodloop 
    - else local methodloop `valmethod'
    = else local methodloop A B
    - foreach v in `methodloop' {c -(}
    = foreach v in A B {c -(}
    - if substr("`v'",strlen("`v'"),1)=="_" local v = substr("`v'", 1, index("`v'","_") - 1)
    = if substr("A",strlen("A"),1)=="_" local v = substr("A", 1, index("A","_") - 1)
    - local estlist`v' `estvars'`v'
    = local estlistA estA
    - local estlist `estlist' `estlist`v''
    = local estlist  estA
    - local selist`v' `sevars'`v'
    = local selistA seA
    - local selist `selist' `selist`v''
    = local selist  seA
    - {c )-}
    - if substr("`v'",strlen("`v'"),1)=="_" local v = substr("`v'", 1, index("`v'","_") - 1)
    = if substr("B",strlen("B"),1)=="_" local v = substr("B", 1, index("B","_") - 1)
    - local estlist`v' `estvars'`v'
    = local estlistB estB
    - local estlist `estlist' `estlist`v''
    = local estlist estA estB
    - local selist`v' `sevars'`v'
    = local selistB seB
    - local selist `selist' `selist`v''
    = local selist seA seB
    - {c )-}
    - qui simsum `estlist' `if', true(`true') se(`selist') id(`rep') by(`truevariable' `dgm' `target') max(20) `anything' clear mcse gen(_perfmeas) `force'
    = qui simsum estA estB , true(_true) se(seA seB) id(rep) by(_true dgm target) max(20)  clear mcse gen(_perfmeas) 
      {hline 77} begin simsum {hline}
      - version 10
      - if _caller() >= 12 {c -(}
      - local hidden hidden
      - {c )-}
      - return `hidden' local simsum_version "2.0.3"
      = return hidden local simsum_version "2.0.3"
      - syntax varlist [if] [in], [true(string) METHodvar(varname) id(varlist) se(varlist) SEPrefix(string) SESuffix(string) graph GRAPH2(string) noMEMcheck max(real 10) semax(real 100) dropbig nolistbig listmiss level(real $S_level) by(varlist) mcse robust MODELSEMethod(string) ref(string) null(real 0) df(string) DFPrefix(string) DFSuffix(string) bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power force nolist listsep format(string) sepby(varlist) ABbreviate(passthru) clear saving(string) gen(string) TRANSpose debug ]
      = syntax varlist [if] [in], [true(string) METHodvar(varname) id(varlist) se(varlist) SEPrefix(string) SESuffix(string) graph GRAPH2(string) noMEMcheck max(real 10) semax(real 100) dropbig nolistbig listmiss level(real 95) by(varlist) mcse robust MODELSEMethod(string) ref(string) null(real 0) df(string) DFPrefix(string) DFSuffix(string) bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power force nolist listsep format(string) sepby(varlist) ABbreviate(passthru) clear saving(string) gen(string) TRANSpose debug ]
      - if "`modelsemethod'"=="" local modelsemethod rmse
      = if ""=="" local modelsemethod rmse
      - if "`modelsemethod'"!="rmse" & "`modelsemethod'"!="mean" {c -(}
      = if "rmse"!="rmse" & "rmse"!="mean" {c -(}
        di as error "Syntax: modelsemethod(rmse|mean)"
        exit 498
        {c )-}
      - if !mi("`graph2'") local graph graph
      = if !mi("") local graph graph
      - if "`by'"!="" {c -(}
      = if "_true dgm target"!="" {c -(}
      - local byby by(`by')
      = local byby by(_true dgm target)
      - local byvar `by'
      = local byvar _true dgm target
      - {c )-}
      - else {c -(}
        tempvar byvar
        gen `byvar'=0
        {c )-}
      - local i 0
      - foreach beta of varlist `varlist' {c -(}
      = foreach beta of varlist estA estB {c -(}
      - local ++i
      - local beta`i' `beta'
      = local beta1 estA
      - local betalist `betalist' `beta'
      = local betalist  estA
      - {c )-}
      - local ++i
      - local beta`i' `beta'
      = local beta2 estB
      - local betalist `betalist' `beta'
      = local betalist estA estB
      - {c )-}
      - local m `i'
      = local m 2
      - if "`seprefix'"!="" | "`sesuffix'"!="" {c -(}
      = if ""!="" | ""!="" {c -(}
        if "`se'"!="" {c -(}
        di as error "Can't specify se() with seprefix() or sesuffix()"
        exit 498
        {c )-}
        forvalues i=1/`m' {c -(}
        local se`i' `seprefix'`beta`i''`sesuffix'
        confirm var `se`i''
        local selist `selist' `se`i''
        {c )-}
        {c )-}
      - else if "`se'"!="" {c -(}
      = else if "seA seB"!="" {c -(}
      - local i 0
      - foreach sevar of varlist `se' {c -(}
      = foreach sevar of varlist seA seB {c -(}
      - local ++i
      - local se`i' `sevar'
      = local se1 seA
      - local selist `selist' `se`i''
      = local selist  seA
      - {c )-}
      - local ++i
      - local se`i' `sevar'
      = local se2 seB
      - local selist `selist' `se`i''
      = local selist seA seB
      - {c )-}
      - if `i'<`m' {c -(}
      = if 2<2 {c -(}
        di as error "Fewer variables in se(`se') than in `betalist'"
        exit 498
        {c )-}
      - if `i'>`m' {c -(}
      = if 2>2 {c -(}
        di as error "More variables in se(`se') than in `betalist'"
        exit 498
        {c )-}
      - {c )-}
      - if "`dfprefix'"!="" | "`dfsuffix'"!="" {c -(}
      = if ""!="" | ""!="" {c -(}
        if "`df'"!="" {c -(}
        di as error "Can't specify df() with dfprefix() or dfsuffix()"
        exit 498
        {c )-}
        forvalues i=1/`m' {c -(}
        local df`i' `dfprefix'`beta`i''`dfsuffix'
        confirm var `df`i''
        local dflist `dflist' `df`i''
        {c )-}
        {c )-}
      - else if "`df'"!="" {c -(}
      = else if ""!="" {c -(}
        cap confirm number `df'
        if !_rc local dftype number
        else {c -(}
        cap assert `df'==`df'
        if !_rc local dftype varname
        else {c -(}
        cap confirm var `df'
        if !_rc local dftype varlist
        else local dftype error
        {c )-}
        {c )-}
        if inlist("`dftype'","number","varname") {c -(}
        forvalues i=1/`m' {c -(}
        local df`i' `df'
        {c )-}
        if "`dftype'"=="varname" local dflist `df'
        cap assert !mi(`df')
        if _rc di as error "Warning: missing values in df()"
        {c )-}
        else if "`dftype'"=="varlist" {c -(}
        local i 0
        foreach dfvar of varlist `df' {c -(}
        local ++i
        local df`i' `dfvar'
        local dflist `dflist' `dfvar'
        cap assert !mi(`df`i'')
        if _rc di as error "Warning: missing values in df()"
        {c )-}
        if `i'!=`m' local dftype error
        {c )-}
        if "`dftype'"=="error" {c -(}
        di as error "df must contain number, string or varlist of same length as estimates"
        exit 498
        {c )-}
        {c )-}
      - local allpms bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power
      - foreach pm of local allpms {c -(}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  bsims
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  sesims
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  bias
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  mean
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  empse
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  relprec
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  mse
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  rmse
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  modelse
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  ciwidth
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  relerror
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  cover
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  power
      - {c )-}
      - if mi("`origoutput'") {c -(}
      = if mi("") {c -(}
      - foreach pm of local allpms {c -(}
      - local `pm' `pm'
      = local bsims bsims
      - {c )-}
      - local `pm' `pm'
      = local sesims sesims
      - {c )-}
      - local `pm' `pm'
      = local bias bias
      - {c )-}
      - local `pm' `pm'
      = local mean mean
      - {c )-}
      - local `pm' `pm'
      = local empse empse
      - {c )-}
      - local `pm' `pm'
      = local relprec relprec
      - {c )-}
      - local `pm' `pm'
      = local mse mse
      - {c )-}
      - local `pm' `pm'
      = local rmse rmse
      - {c )-}
      - local `pm' `pm'
      = local modelse modelse
      - {c )-}
      - local `pm' `pm'
      = local ciwidth ciwidth
      - {c )-}
      - local `pm' `pm'
      = local relerror relerror
      - {c )-}
      - local `pm' `pm'
      = local cover cover
      - {c )-}
      - local `pm' `pm'
      = local power power
      - {c )-}
      - {c )-}
      - if "`se1'"=="" {c -(}
      = if "seA"=="" {c -(}
        foreach perfmeas in sesims modelse ciwidth relerror cover power {c -(}
        if !mi("``perfmeas''") local droppm1 `droppm1' `perfmeas'
        local `perfmeas'
        {c )-}
        if !mi("`droppm1'") {c -(}
        if !mi("`origoutput'") di as error "" _c
        else di as text "" _c
        di "SE not reported, so ignoring performance measures: `droppm1'"
        {c )-}
        {c )-}
      - if "`true'"=="" {c -(}
      = if "_true"=="" {c -(}
        foreach perfmeas in bias mse rmse cover {c -(}
        if !mi("``perfmeas''") local droppm2 `droppm2' `perfmeas'
        local `perfmeas'
        {c )-}
        if !mi("`droppm2'") {c -(}
        if !mi("`origoutput'") di as error "" _c
        else di as text "" _c
        di "true() not specified, so ignoring performance measures: `droppm2'"
        {c )-}
        {c )-}
      - foreach pm of local allpms {c -(}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("bsims") local output  bsims
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("sesims") local output bsims sesims
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("bias") local output bsims sesims bias
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("mean") local output bsims sesims bias mean
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("empse") local output bsims sesims bias mean empse
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("relprec") local output bsims sesims bias mean empse relprec
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("mse") local output bsims sesims bias mean empse relprec mse
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("rmse") local output bsims sesims bias mean empse relprec mse rmse
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("modelse") local output bsims sesims bias mean empse relprec mse rmse modelse
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("ciwidth") local output bsims sesims bias mean empse relprec mse rmse modelse ciwidth
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("relerror") local output bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("cover") local output bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("power") local output bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power
      - {c )-}
      - if "`output'"=="" {c -(}
      = if "bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power"=="" {c -(}
        di as error "No performance measures specified"
        exit 498
        {c )-}
      - if inlist("`output'","bsims","sesims","bims sesims") & "`mcse'"=="mcse" {c -(}
      = if inlist("bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power","bsims","sesims","bims sesims") & "mcse"=="mcse" {c -(}
        di as error "Only bsims and/or sesims specified - mcse ignored"
        local mcse
        {c )-}
      - if "`methodvar'"!="" {c -(}
      = if ""!="" {c -(}
        if `m'>1 {c -(}
        di as error "Only one estimate variable allowed with long format"
        exit 498
        {c )-}
        if "`id'"=="" {c -(}
        di as error "id() is required with long format"
        exit 498
        {c )-}
        {c )-}
      - if "`list'"=="nolist" & "`clear'"=="" & "`saving'"=="" {c -(}
      = if ""=="nolist" & "clear"=="" & ""=="" {c -(}
        di as error "No output requested! Please specify clear or saving(), or don't specify nolist"
        exit 498
        {c )-}
      - if "`gen'"=="" local gen perfmeas
      = if "_perfmeas"=="" local gen perfmeas
      - cap confirm new variable `gen'num
      = cap confirm new variable _perfmeasnum
      - local rc1=_rc
      - cap confirm new variable `gen'code
      = cap confirm new variable _perfmeascode
      - if _rc | `rc1' {c -(}
      = if _rc | 0 {c -(}
        di as error as smcl "{c -(}p{c )-}Variable `gen'num and/or `gen'code already exists. This is probably because the current data are -simsum- output. If this is what you want, use the gen() option.{c -(}p_end{c )-}"
        exit 498
        {c )-}
      - if "`memcheck'"!="nomemcheck" {c -(}
      = if ""!="nomemcheck" {c -(}
      - qui desc, short
      - if r(width)/r(widthmax)>0.45 {c -(}
        di as error "simsum is memory-hungry and can fail slowly if memory is more than 50% occupied."
        di as error as smcl "Please increase the memory using {c -(}help memory:set memory{c )-}, or use the nomemcheck option."
        exit 498
        {c )-}
      - {c )-}
      - marksample touse, novarlist
      - qui count if `touse'
      = qui count if __000001
      - if r(N)==0 {c -(}
        di in red "no observations"
        exit 2000
        {c )-}
      - if "`bias'"=="bias" | "`mse'"=="mse" | "`rmse'"=="rmse" | "`cover'"=="cover" {c -(}
      = if "bias"=="bias" | "mse"=="mse" | "rmse"=="rmse" | "cover"=="cover" {c -(}
      - tempvar truevar
      - qui gen `truevar' = `true'
      = qui gen __000002 = _true
      - qui count if missing(`truevar') & `touse'
      = qui count if missing(__000002) & __000001
      - if r(N)>0 {c -(}
        di as error "Missing values found for true value `true'"
        exit 498
        {c )-}
      - {c )-}
      - preserve
      - qui keep if `touse'
      = qui keep if __000001
      - if "`methodvar'"!="" {c -(}
      = if ""!="" {c -(}
        local origformat long
        local betastub `betalist'
        qui levelsof `methodvar', local(methods)
        local label : val label `methodvar'
        local i 0
        foreach method in `methods' {c -(}
        if strpos("`method'"," ") {c -(}
        di as error `"Sorry, I can't handle method = "`method'". Please recode it without spaces."'
        exit 498
        {c )-}
        if strtoname("b`method'")!="b`method'" {c -(}
        di as error `"Sorry, I can't handle method = "`method'". Please recode it using standard characters."'
        exit 498
        {c )-}
        local ++i
        local beta`i' `betalist'`method'
        local newbetalist `newbetalist' `betalist'`method'
        if "`selist'"!="" local se`i' `selist'`method'
        if "`selist'"!="" local newselist `newselist' `selist'`method'
        if "`dftype'"=="number" local df`i' `df'
        if "`dftype'"=="varname" local df`i' `dflist'`method'
        if "`label'"!="" local label`i' : label `label' `method'
        else local label`i' "`method'"
        if "`label`i''"=="`ref'" local refmethod `i'
        {c )-}
        local m `i'
        if "`refmethod'"=="" {c -(}
        if "`ref'"!="" {c -(}
        if "`label'"=="" local offenders values
        else local offenders value labels
        di as error "Error in ref(): `ref' is not one of the `offenders' of `methodvar'"
        exit 498
        {c )-}
        else local refmethod 1
        {c )-}
        di as text "Reshaping data to wide format ..."
        keep `betalist' `selist' `dflist' `by' `byvar' `id' `methodvar' `touse' `truevar'
        cap confirm string var `methodvar'
        if _rc==0 local string string
        local bfmt0: format `betalist'
        qui reshape wide `betalist' `selist' `dflist', i(`by' `id') j(`methodvar') `string'
        local betalist `newbetalist'
        local selist `newselist'
        {c )-}
      - else {c -(}
      - local origformat wide
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - local label`i' : var label `beta`i''
      = local label1 : var label estA
      - if "`label`i''"=="" local label`i' "`beta`i''"
      = if "A est"=="" local label1 "estA"
      - if "`beta`i''"=="`ref'" local refmethod `i'
      = if "estA"=="" local refmethod 1
      - {c )-}
      - local label`i' : var label `beta`i''
      = local label2 : var label estB
      - if "`label`i''"=="" local label`i' "`beta`i''"
      = if "B est"=="" local label2 "estB"
      - if "`beta`i''"=="`ref'" local refmethod `i'
      = if "estB"=="" local refmethod 2
      - {c )-}
      - if "`refmethod'"=="" {c -(}
      = if ""=="" {c -(}
      - if "`ref'"!="" {c -(}
      = if ""!="" {c -(}
        di as error "ref(`ref') is not one of the listed point estimates"
        exit 498
        {c )-}
      - else local refmethod 1
      - {c )-}
      - keep `betalist' `selist' `dflist' `by' `byvar' `id' `touse' `truevar'
      = keep estA estB seA seB  _true dgm target _true dgm target rep __000001 __000002
      - {c )-}
      - if mi("`force'") {c -(}
      = if mi("") {c -(}
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - tempvar betafreq`i'
      = tempvar betafreq1
      - egen `betafreq`i'' = count(`beta`i''), `byby'
      = egen __000003 = count(estA), by(_true dgm target)
      - cap assert `betafreq`i''!=1
      = cap assert __000003!=1
      - if _rc {c -(}
        di as error "Only one observation for `beta`i''. If this is what you intended, use the force option."
        exit 498
        {c )-}
      - {c )-}
      - tempvar betafreq`i'
      = tempvar betafreq2
      - egen `betafreq`i'' = count(`beta`i''), `byby'
      = egen __000004 = count(estB), by(_true dgm target)
      - cap assert `betafreq`i''!=1
      = cap assert __000004!=1
      - if _rc {c -(}
        di as error "Only one observation for `beta`i''. If this is what you intended, use the force option."
        exit 498
        {c )-}
      - {c )-}
      - {c )-}
      - tempvar missing
      - gen `missing' = 0
      = gen __000005 = 0
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - qui replace `missing' = missing(`beta`i'') & `touse'
      = qui replace __000005 = missing(estA) & __000001
      - if "`se`i''"!="" qui replace `missing' = 1 if missing(`se`i'') & `touse'
      = if "seA"!="" qui replace __000005 = 1 if missing(seA) & __000001
      - if "`se`i''"!="" qui replace `missing' = 1 if `se`i''==0 & `touse'
      = if "seA"!="" qui replace __000005 = 1 if seA==0 & __000001
      - qui count if `missing'
      = qui count if __000005
      - if r(N)>0 {c -(}
        if "`se`i''"!="" {c -(}
        qui replace `missing' = missing(`beta`i'') & missing(`se`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have both estimate and SE missing"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        di as text "--> no action taken"
        {c )-}
        qui replace `missing' = !missing(`se`i'') & missing(`beta`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have estimate missing and SE observed"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `se`i'' = . if `missing'
        di as text "--> SE changed to missing"
        {c )-}
        qui replace `missing' = missing(`se`i'') & !missing(`beta`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have estimate observed and SE missing"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `beta`i'' = . if `missing'
        di as text "--> estimate changed to missing"
        {c )-}
        qui replace `missing' = (`se`i''==0) & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have zero values of SE"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `beta`i'' = . if `missing'
        qui replace `se`i'' = . if `missing'
        di as text "--> estimate and SE changed to missing"
        {c )-}
        {c )-}
        {c )-}
      - {c )-}
      - qui replace `missing' = missing(`beta`i'') & `touse'
      = qui replace __000005 = missing(estB) & __000001
      - if "`se`i''"!="" qui replace `missing' = 1 if missing(`se`i'') & `touse'
      = if "seB"!="" qui replace __000005 = 1 if missing(seB) & __000001
      - if "`se`i''"!="" qui replace `missing' = 1 if `se`i''==0 & `touse'
      = if "seB"!="" qui replace __000005 = 1 if seB==0 & __000001
      - qui count if `missing'
      = qui count if __000005
      - if r(N)>0 {c -(}
        if "`se`i''"!="" {c -(}
        qui replace `missing' = missing(`beta`i'') & missing(`se`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have both estimate and SE missing"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        di as text "--> no action taken"
        {c )-}
        qui replace `missing' = !missing(`se`i'') & missing(`beta`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have estimate missing and SE observed"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `se`i'' = . if `missing'
        di as text "--> SE changed to missing"
        {c )-}
        qui replace `missing' = missing(`se`i'') & !missing(`beta`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have estimate observed and SE missing"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `beta`i'' = . if `missing'
        di as text "--> estimate changed to missing"
        {c )-}
        qui replace `missing' = (`se`i''==0) & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have zero values of SE"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `beta`i'' = . if `missing'
        qui replace `se`i'' = . if `missing'
        di as text "--> estimate and SE changed to missing"
        {c )-}
        {c )-}
        {c )-}
      - {c )-}
      - drop `missing'
      = drop __000005
      - if "`graph'"=="graph" {c -(}
      = if ""=="graph" {c -(}
        tempfile graph
        set graphics off
        forvalues i=1/`m' {c -(}
        cap gr7 `se`i'' `beta`i'', xla yla b2title("`beta`i''") l1title("`se`i''") t1title("`label`i''") saving(`graph'`i', replace) `graph2'
        if !_rc local gphlist `gphlist' `graph'`i'
        {c )-}
        if "`selist'"=="" local title Point estimates by method
        else local title Std error vs. point estimate by method
        set graphics on
        gr7 using `gphlist', title(`title')
        {c )-}
      - tempvar infb infse
      - gen `infb' = 0
      = gen __000006 = 0
      - gen `infse' = 0
      = gen __000007 = 0
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - qui summ `beta`i''
      = qui summ estA
      - if r(sd)<=0 {c -(}
        di as text "Warning for method `label`i'': estimate doesn't vary"
        continue
        {c )-}
      - qui replace `infb' = (abs(`beta`i''-r(mean))/r(sd) > `max') & !missing(`beta`i'')
      = qui replace __000006 = (abs(estA-r(mean))/r(sd) > 20) & !missing(estA)
      - if "`se`i''"!="" {c -(}
      = if "seA"!="" {c -(}
      - qui summ `se`i''
      = qui summ seA
      - if r(mean)<=0 {c -(}
        di as text "Warning for method `label`i'': `se`i'' is always 0"
        {c )-}
      - else qui replace `infse' = (`se`i''/r(mean) > `semax') & !missing(`se`i'')
      = else qui replace __000007 = (seA/r(mean) > 100) & !missing(seA)
      - {c )-}
      - qui count if `infb'
      = qui count if __000006
      - local ninfb = r(N)
      - qui count if `infse'
      = qui count if __000007
      - local ninfse = r(N)
      - if `ninfb'+`ninfse' > 0 {c -(}
      = if 0+0 > 0 {c -(}
        local text = cond("`dropbig'"=="dropbig","text","error")
        local warning = cond("`dropbig'"=="dropbig","Warning","Error")
        di as `text' `"`warning' for method `label`i'': "' as result `ninfb' as `text' `" observation(s) have standardised estimate > `max'"' _c
        if "`se`i''"!="" di as `text' `" and "' as result `ninfse' as `text' `" observation(s) have scaled SE > `semax'"'
        else di
        if "`listbig'"!="nolistbig" l `by' `id' `beta`i'' `se`i'' if `infb'|`infse', sepby(`sepby')
        else di as `text' "--> remove nolistbig option to list these observation(s)"
        if "`dropbig'"=="dropbig" {c -(}
        qui replace `beta`i'' = . if `infb'|`infse'
        if "`se`i''"!="" qui replace `se`i'' = . if `infb'|`infse'
        di as text `"--> estimate "' _c
        if "`se`i''"!="" di as text `"and SE "' _c
        di as text `"have been changed to missing values for these observation(s)"'
        {c )-}
        else {c -(}
        di as error "--> use dropbig option to drop these observation(s)"
        di as error "--> use max() option to change acceptable limit of point estimates"
        if "`se'"!="" di as error "--> use semax() option to change acceptable limit of standard errors"
        exit 498
        {c )-}
        {c )-}
      - {c )-}
      - qui summ `beta`i''
      = qui summ estB
      - if r(sd)<=0 {c -(}
        di as text "Warning for method `label`i'': estimate doesn't vary"
        continue
        {c )-}
      - qui replace `infb' = (abs(`beta`i''-r(mean))/r(sd) > `max') & !missing(`beta`i'')
      = qui replace __000006 = (abs(estB-r(mean))/r(sd) > 20) & !missing(estB)
      - if "`se`i''"!="" {c -(}
      = if "seB"!="" {c -(}
      - qui summ `se`i''
      = qui summ seB
      - if r(mean)<=0 {c -(}
        di as text "Warning for method `label`i'': `se`i'' is always 0"
        {c )-}
      - else qui replace `infse' = (`se`i''/r(mean) > `semax') & !missing(`se`i'')
      = else qui replace __000007 = (seB/r(mean) > 100) & !missing(seB)
      - {c )-}
      - qui count if `infb'
      = qui count if __000006
      - local ninfb = r(N)
      - qui count if `infse'
      = qui count if __000007
      - local ninfse = r(N)
      - if `ninfb'+`ninfse' > 0 {c -(}
      = if 0+0 > 0 {c -(}
        local text = cond("`dropbig'"=="dropbig","text","error")
        local warning = cond("`dropbig'"=="dropbig","Warning","Error")
        di as `text' `"`warning' for method `label`i'': "' as result `ninfb' as `text' `" observation(s) have standardised estimate > `max'"' _c
        if "`se`i''"!="" di as `text' `" and "' as result `ninfse' as `text' `" observation(s) have scaled SE > `semax'"'
        else di
        if "`listbig'"!="nolistbig" l `by' `id' `beta`i'' `se`i'' if `infb'|`infse', sepby(`sepby')
        else di as `text' "--> remove nolistbig option to list these observation(s)"
        if "`dropbig'"=="dropbig" {c -(}
        qui replace `beta`i'' = . if `infb'|`infse'
        if "`se`i''"!="" qui replace `se`i'' = . if `infb'|`infse'
        di as text `"--> estimate "' _c
        if "`se`i''"!="" di as text `"and SE "' _c
        di as text `"have been changed to missing values for these observation(s)"'
        {c )-}
        else {c -(}
        di as error "--> use dropbig option to drop these observation(s)"
        di as error "--> use max() option to change acceptable limit of point estimates"
        if "`se'"!="" di as error "--> use semax() option to change acceptable limit of standard errors"
        exit 498
        {c )-}
        {c )-}
      - {c )-}
      - di as text _newline "Starting to process results ..."
      - if `level'<1 local level=`level'*100
      = if 95<1 local level=95*100
      - if "`robust'"=="robust" & ("`relprec'"=="relprec" | "`relerror'"=="relerror") {c -(}
      = if ""=="robust" & ("relprec"=="relprec" | "relerror"=="relerror") {c -(}
        forvalues i=1/`m' {c -(}
        tempvar betamean`i'
        egen `betamean`i'' = mean(`beta`i''), `byby'
        {c )-}
        {c )-}
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - tempvar crit`i'
      = tempvar crit1
      - gen `crit`i'' = -invnorm((1-`level'/100)/2)
      = gen __000008 = -invnorm((1-95/100)/2)
      - if "`df`i''"!="" qui replace `crit`i'' = invttail(`df`i'',(1-`level'/100)/2) if !mi(`df`i'')
      = if ""!="" qui replace __000008 = invttail(,(1-95/100)/2) if !mi()
      - assert !mi(`crit`i'')
      = assert !mi(__000008)
      - local collcount `collcount' bsims_`i'=`beta`i''
      = local collcount  bsims_1=estA
      - if "`bias'"=="bias" {c -(}
      = if "bias"=="bias" {c -(}
      - qui gen bias_`i' = `beta`i'' - `truevar'
      = qui gen bias_1 = estA - __000002
      - local collmean `collmean' bias_`i'
      = local collmean  bias_1
      - local collsd `collsd' biassd_`i' = bias_`i'
      = local collsd  biassd_1 = bias_1
      - {c )-}
      - if "`mean'"=="mean" {c -(}
      = if "mean"=="mean" {c -(}
      - local collmean `collmean' mean_`i' = `beta`i''
      = local collmean bias_1 mean_1 = estA
      - local collsd `collsd' meansd_`i' = `beta`i''
      = local collsd biassd_1 = bias_1 meansd_1 = estA
      - {c )-}
      - if "`relerror'"=="relerror" | "`modelse'"=="modelse" {c -(}
      = if "relerror"=="relerror" | "modelse"=="modelse" {c -(}
      - qui gen var_`i'=`se`i''^2
      = qui gen var_1=seA^2
      - {c )-}
      - if "`empse'"=="empse" | "`relerror'"=="relerror" | "`relprec'"=="relprec" | "`bias'"=="bias" {c -(}
      = if "empse"=="empse" | "relerror"=="relerror" | "relprec"=="relprec" | "bias"=="bias" {c -(}
      - local collsd `collsd' empse_`i'=`beta`i''
      = local collsd biassd_1 = bias_1 meansd_1 = estA empse_1=estA
      - {c )-}
      - if "`mse'"=="mse" | "`rmse'"=="rmse" {c -(}
      = if "mse"=="mse" | "rmse"=="rmse" {c -(}
      - qui gen mse_`i' = (`beta`i'' - `truevar')^2
      = qui gen mse_1 = (estA - __000002)^2
      - local collmean `collmean' mse_`i'
      = local collmean bias_1 mean_1 = estA mse_1
      - local collsd `collsd' msesd_`i'=mse_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = estA empse_1=estA msesd_1=mse_1
      - {c )-}
      - if "`relprec'"=="relprec" & `i'!=`refmethod' {c -(}
      = if "relprec"=="relprec" & 1!=1 {c -(}
        qui byvar `byvar', r(rho N) gen unique: corr `beta`refmethod'' `beta`i''
        rename Rrho_ corr_`i'
        rename RN_ ncorr_`i'
        local collsum `collsum' corr_`i' ncorr_`i'
        {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" | "`sesims'"=="sesims" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" | "sesims"=="sesims" {c -(}
      - local collcount `collcount' sesims_`i'=`se`i''
      = local collcount bsims_1=estA sesims_1=seA
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" {c -(}
      - local collmean `collmean' modelse_`i'=`se`i''
      = local collmean bias_1 mean_1 = estA mse_1 modelse_1=seA
      - local collmean `collmean' varmean_`i'=var_`i'
      = local collmean bias_1 mean_1 = estA mse_1 modelse_1=seA varmean_1=var_1
      - local collsd `collsd' varsd_`i'=var_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = estA empse_1=estA msesd_1=mse_1 varsd_1=var_1
      - local collsd `collsd' modelsesd_`i'=`se`i''
      = local collsd biassd_1 = bias_1 meansd_1 = estA empse_1=estA msesd_1=mse_1 varsd_1=var_1 modelsesd_1=seA
      - {c )-}
      - if "`ciwidth'"=="ciwidth" {c -(}
      = if "ciwidth"=="ciwidth" {c -(}
      - qui gen ciwidth_`i' = 2*(`crit`i'')*`se`i''
      = qui gen ciwidth_1 = 2*(__000008)*seA
      - local collmean `collmean' ciwidth_`i'
      = local collmean bias_1 mean_1 = estA mse_1 modelse_1=seA varmean_1=var_1 ciwidth_1
      - local collsd `collsd' ciwidthsd_`i' = ciwidth_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = estA empse_1=estA msesd_1=mse_1 varsd_1=var_1 modelsesd_1=seA ciwidthsd_1 = ciwidth_1
      - {c )-}
      - if "`cover'"=="cover" | "`power'"=="power" {c -(}
      = if "cover"=="cover" | "power"=="power" {c -(}
      - if "`cover'"=="cover" local collcount `collcount' bothsims_`i'=cover_`i'
      = if "cover"=="cover" local collcount bsims_1=estA sesims_1=seA bothsims_1=cover_1
      - else local collcount `collcount' bothsims_`i'=power_`i'
      = else local collcount bsims_1=estA sesims_1=seA bothsims_1=cover_1 bothsims_1=power_1
      - {c )-}
      - if "`cover'"=="cover" {c -(}
      = if "cover"=="cover" {c -(}
      - qui gen cover_`i' = 100*(abs(`beta`i''-`truevar')<(`crit`i'')*`se`i'') if !missing(`beta`i'') & !missing(`se`i'')
      = qui gen cover_1 = 100*(abs(estA-__000002)<(__000008)*seA) if !missing(estA) & !missing(seA)
      - local collmean `collmean' cover_`i'
      = local collmean bias_1 mean_1 = estA mse_1 modelse_1=seA varmean_1=var_1 ciwidth_1 cover_1
      - {c )-}
      - if "`power'"=="power" {c -(}
      = if "power"=="power" {c -(}
      - qui gen power_`i' = 100*(abs(`beta`i''-`null')>=(`crit`i'')*`se`i'') if !missing(`beta`i'') & !missing(`se`i'')
      = qui gen power_1 = 100*(abs(estA-0)>=(__000008)*seA) if !missing(estA) & !missing(seA)
      - local collmean `collmean' power_`i'
      = local collmean bias_1 mean_1 = estA mse_1 modelse_1=seA varmean_1=var_1 ciwidth_1 cover_1 power_1
      - {c )-}
      - if "`robust'"=="robust" {c -(}
      = if ""=="robust" {c -(}
        if "`empse'"=="empse" {c -(}
        tempvar empseT`i' empseB`i' empseTT`i' empseBB`i' empseTB`i'
        qui gen `empseT`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `empseB`i'' = 1
        qui gen `empseTT`i'' = `empseT`i''^2
        qui gen `empseBB`i'' = `empseB`i''^2
        qui gen `empseTB`i'' = `empseT`i''*`empseB`i''
        local collsum `collsum' `empseT`i'' `empseB`i'' `empseTT`i'' `empseTB`i'' `empseBB`i''
        {c )-}
        if "`relprec'"=="relprec" {c -(}
        tempvar relprecT`i' relprecB`i' relprecTT`i' relprecBB`i' relprecTB`i'
        qui gen `relprecT`i'' = (`beta`refmethod''-`betamean`refmethod'')^2
        qui gen `relprecB`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `relprecTT`i'' = `relprecT`i''^2
        qui gen `relprecBB`i'' = `relprecB`i''^2
        qui gen `relprecTB`i'' = `relprecT`i''*`relprecB`i''
        local collsum `collsum' `relprecT`i'' `relprecB`i'' `relprecTT`i'' `relprecTB`i'' `relprecBB`i''
        {c )-}
        if "`relerror'"=="relerror" {c -(}
        tempvar relerrorT`i' relerrorB`i' relerrorTT`i' relerrorBB`i' relerrorTB`i'
        qui gen `relerrorT`i'' = `se`i''^2
        qui gen `relerrorB`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `relerrorTT`i'' = `relerrorT`i''^2
        qui gen `relerrorBB`i'' = `relerrorB`i''^2
        qui gen `relerrorTB`i'' = `relerrorT`i''*`relerrorB`i''
        local collsum `collsum' `relerrorT`i'' `relerrorB`i'' `relerrorTT`i'' `relerrorTB`i'' `relerrorBB`i''
        {c )-}
        {c )-}
      - {c )-}
      - tempvar crit`i'
      = tempvar crit2
      - gen `crit`i'' = -invnorm((1-`level'/100)/2)
      = gen __000009 = -invnorm((1-95/100)/2)
      - if "`df`i''"!="" qui replace `crit`i'' = invttail(`df`i'',(1-`level'/100)/2) if !mi(`df`i'')
      = if ""!="" qui replace __000009 = invttail(,(1-95/100)/2) if !mi()
      - assert !mi(`crit`i'')
      = assert !mi(__000009)
      - local collcount `collcount' bsims_`i'=`beta`i''
      = local collcount bsims_1=estA sesims_1=seA bothsims_1=cover_1 bsims_2=estB
      - if "`bias'"=="bias" {c -(}
      = if "bias"=="bias" {c -(}
      - qui gen bias_`i' = `beta`i'' - `truevar'
      = qui gen bias_2 = estB - __000002
      - local collmean `collmean' bias_`i'
      = local collmean bias_1 mean_1 = estA mse_1 modelse_1=seA varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2
      - local collsd `collsd' biassd_`i' = bias_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = estA empse_1=estA msesd_1=mse_1 varsd_1=var_1 modelsesd_1=seA ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2
      - {c )-}
      - if "`mean'"=="mean" {c -(}
      = if "mean"=="mean" {c -(}
      - local collmean `collmean' mean_`i' = `beta`i''
      = local collmean bias_1 mean_1 = estA mse_1 modelse_1=seA varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = estB
      - local collsd `collsd' meansd_`i' = `beta`i''
      = local collsd biassd_1 = bias_1 meansd_1 = estA empse_1=estA msesd_1=mse_1 varsd_1=var_1 modelsesd_1=seA ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = estB
      - {c )-}
      - if "`relerror'"=="relerror" | "`modelse'"=="modelse" {c -(}
      = if "relerror"=="relerror" | "modelse"=="modelse" {c -(}
      - qui gen var_`i'=`se`i''^2
      = qui gen var_2=seB^2
      - {c )-}
      - if "`empse'"=="empse" | "`relerror'"=="relerror" | "`relprec'"=="relprec" | "`bias'"=="bias" {c -(}
      = if "empse"=="empse" | "relerror"=="relerror" | "relprec"=="relprec" | "bias"=="bias" {c -(}
      - local collsd `collsd' empse_`i'=`beta`i''
      = local collsd biassd_1 = bias_1 meansd_1 = estA empse_1=estA msesd_1=mse_1 varsd_1=var_1 modelsesd_1=seA ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = estB empse_2=estB
      - {c )-}
      - if "`mse'"=="mse" | "`rmse'"=="rmse" {c -(}
      = if "mse"=="mse" | "rmse"=="rmse" {c -(}
      - qui gen mse_`i' = (`beta`i'' - `truevar')^2
      = qui gen mse_2 = (estB - __000002)^2
      - local collmean `collmean' mse_`i'
      = local collmean bias_1 mean_1 = estA mse_1 modelse_1=seA varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = estB mse_2
      - local collsd `collsd' msesd_`i'=mse_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = estA empse_1=estA msesd_1=mse_1 varsd_1=var_1 modelsesd_1=seA ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = estB empse_2=estB msesd_2=mse_2
      - {c )-}
      - if "`relprec'"=="relprec" & `i'!=`refmethod' {c -(}
      = if "relprec"=="relprec" & 2!=1 {c -(}
      - qui byvar `byvar', r(rho N) gen unique: corr `beta`refmethod'' `beta`i''
      = qui byvar _true dgm target, r(rho N) gen unique: corr estA estB
      - rename Rrho_ corr_`i'
      = rename Rrho_ corr_2
      - rename RN_ ncorr_`i'
      = rename RN_ ncorr_2
      - local collsum `collsum' corr_`i' ncorr_`i'
      = local collsum  corr_2 ncorr_2
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" | "`sesims'"=="sesims" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" | "sesims"=="sesims" {c -(}
      - local collcount `collcount' sesims_`i'=`se`i''
      = local collcount bsims_1=estA sesims_1=seA bothsims_1=cover_1 bsims_2=estB sesims_2=seB
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" {c -(}
      - local collmean `collmean' modelse_`i'=`se`i''
      = local collmean bias_1 mean_1 = estA mse_1 modelse_1=seA varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = estB mse_2 modelse_2=seB
      - local collmean `collmean' varmean_`i'=var_`i'
      = local collmean bias_1 mean_1 = estA mse_1 modelse_1=seA varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = estB mse_2 modelse_2=seB varmean_2=var_2
      - local collsd `collsd' varsd_`i'=var_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = estA empse_1=estA msesd_1=mse_1 varsd_1=var_1 modelsesd_1=seA ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = estB empse_2=estB msesd_2=mse_2 varsd_2=var_2
      - local collsd `collsd' modelsesd_`i'=`se`i''
      = local collsd biassd_1 = bias_1 meansd_1 = estA empse_1=estA msesd_1=mse_1 varsd_1=var_1 modelsesd_1=seA ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = estB empse_2=estB msesd_2=mse_2 varsd_2=var_2 modelsesd_2=seB
      - {c )-}
      - if "`ciwidth'"=="ciwidth" {c -(}
      = if "ciwidth"=="ciwidth" {c -(}
      - qui gen ciwidth_`i' = 2*(`crit`i'')*`se`i''
      = qui gen ciwidth_2 = 2*(__000009)*seB
      - local collmean `collmean' ciwidth_`i'
      = local collmean bias_1 mean_1 = estA mse_1 modelse_1=seA varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = estB mse_2 modelse_2=seB varmean_2=var_2 ciwidth_2
      - local collsd `collsd' ciwidthsd_`i' = ciwidth_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = estA empse_1=estA msesd_1=mse_1 varsd_1=var_1 modelsesd_1=seA ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = estB empse_2=estB msesd_2=mse_2 varsd_2=var_2 modelsesd_2=seB ciwidthsd_2 = ciwidth_2
      - {c )-}
      - if "`cover'"=="cover" | "`power'"=="power" {c -(}
      = if "cover"=="cover" | "power"=="power" {c -(}
      - if "`cover'"=="cover" local collcount `collcount' bothsims_`i'=cover_`i'
      = if "cover"=="cover" local collcount bsims_1=estA sesims_1=seA bothsims_1=cover_1 bsims_2=estB sesims_2=seB bothsims_2=cover_2
      - else local collcount `collcount' bothsims_`i'=power_`i'
      = else local collcount bsims_1=estA sesims_1=seA bothsims_1=cover_1 bsims_2=estB sesims_2=seB bothsims_2=cover_2 bothsims_2=power_2
      - {c )-}
      - if "`cover'"=="cover" {c -(}
      = if "cover"=="cover" {c -(}
      - qui gen cover_`i' = 100*(abs(`beta`i''-`truevar')<(`crit`i'')*`se`i'') if !missing(`beta`i'') & !missing(`se`i'')
      = qui gen cover_2 = 100*(abs(estB-__000002)<(__000009)*seB) if !missing(estB) & !missing(seB)
      - local collmean `collmean' cover_`i'
      = local collmean bias_1 mean_1 = estA mse_1 modelse_1=seA varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = estB mse_2 modelse_2=seB varmean_2=var_2 ciwidth_2 cover_2
      - {c )-}
      - if "`power'"=="power" {c -(}
      = if "power"=="power" {c -(}
      - qui gen power_`i' = 100*(abs(`beta`i''-`null')>=(`crit`i'')*`se`i'') if !missing(`beta`i'') & !missing(`se`i'')
      = qui gen power_2 = 100*(abs(estB-0)>=(__000009)*seB) if !missing(estB) & !missing(seB)
      - local collmean `collmean' power_`i'
      = local collmean bias_1 mean_1 = estA mse_1 modelse_1=seA varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = estB mse_2 modelse_2=seB varmean_2=var_2 ciwidth_2 cover_2 power_2
      - {c )-}
      - if "`robust'"=="robust" {c -(}
      = if ""=="robust" {c -(}
        if "`empse'"=="empse" {c -(}
        tempvar empseT`i' empseB`i' empseTT`i' empseBB`i' empseTB`i'
        qui gen `empseT`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `empseB`i'' = 1
        qui gen `empseTT`i'' = `empseT`i''^2
        qui gen `empseBB`i'' = `empseB`i''^2
        qui gen `empseTB`i'' = `empseT`i''*`empseB`i''
        local collsum `collsum' `empseT`i'' `empseB`i'' `empseTT`i'' `empseTB`i'' `empseBB`i''
        {c )-}
        if "`relprec'"=="relprec" {c -(}
        tempvar relprecT`i' relprecB`i' relprecTT`i' relprecBB`i' relprecTB`i'
        qui gen `relprecT`i'' = (`beta`refmethod''-`betamean`refmethod'')^2
        qui gen `relprecB`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `relprecTT`i'' = `relprecT`i''^2
        qui gen `relprecBB`i'' = `relprecB`i''^2
        qui gen `relprecTB`i'' = `relprecT`i''*`relprecB`i''
        local collsum `collsum' `relprecT`i'' `relprecB`i'' `relprecTT`i'' `relprecTB`i'' `relprecBB`i''
        {c )-}
        if "`relerror'"=="relerror" {c -(}
        tempvar relerrorT`i' relerrorB`i' relerrorTT`i' relerrorBB`i' relerrorTB`i'
        qui gen `relerrorT`i'' = `se`i''^2
        qui gen `relerrorB`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `relerrorTT`i'' = `relerrorT`i''^2
        qui gen `relerrorBB`i'' = `relerrorB`i''^2
        qui gen `relerrorTB`i'' = `relerrorT`i''*`relerrorB`i''
        local collsum `collsum' `relerrorT`i'' `relerrorB`i'' `relerrorTT`i'' `relerrorTB`i'' `relerrorBB`i''
        {c )-}
        {c )-}
      - {c )-}
      - if "`collmean'"!="" local collmean (mean) `collmean'
      = if "bias_1 mean_1 = estA mse_1 modelse_1=seA varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = estB mse_2 modelse_2=seB varmean_2=var_2 ciwidth_2 cover_2 power_2"!="" local collmean (mean) bias_1 mean_1 = estA mse_1 modelse_1=seA varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = estB mse_2 modelse_2=seB varmean_2=var_2 ciwidth_2 cover_2 power_2
      - if "`collsd'"!="" local collsd (sd) `collsd'
      = if "biassd_1 = bias_1 meansd_1 = estA empse_1=estA msesd_1=mse_1 varsd_1=var_1 modelsesd_1=seA ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = estB empse_2=estB msesd_2=mse_2 varsd_2=var_2 modelsesd_2=seB ciwidthsd_2 = ciwidth_2"!="" local collsd (sd) biassd_1 = bias_1 meansd_1 = estA empse_1=estA msesd_1=mse_1 varsd_1=var_1 modelsesd_1=seA ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = estB empse_2=estB msesd_2=mse_2 varsd_2=var_2 modelsesd_2=seB ciwidthsd_2 = ciwidth_2
      - if "`collcount'"!="" local collcount (count) `collcount'
      = if "bsims_1=estA sesims_1=seA bothsims_1=cover_1 bsims_2=estB sesims_2=seB bothsims_2=cover_2"!="" local collcount (count) bsims_1=estA sesims_1=seA bothsims_1=cover_1 bsims_2=estB sesims_2=seB bothsims_2=cover_2
      - if "`collsum'"!="" local collsum (sum) `collsum'
      = if "corr_2 ncorr_2"!="" local collsum (sum) corr_2 ncorr_2
      - collapse `collmean' `collsd' `collcount' `collsum', by(`byvar')
      = collapse (mean) bias_1 mean_1 = estA mse_1 modelse_1=seA varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = estB mse_2 modelse_2=seB varmean_2=var_2 ciwidth_2 cover_2 power_2 (sd) biassd_1 = bias_1 meansd_1 = estA empse_1=estA msesd_1=mse_1 varsd_1=var_1 modelsesd_1=seA ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = estB empse_2=estB msesd_2=mse_2 varsd_2=var_2 modelsesd_2=seB ciwidthsd_2 = ciwidth_2 (count) bsims_1=estA sesims_1=seA bothsims_1=cover_1 bsims_2=estB sesims_2=seB bothsims_2=cover_2 (sum) corr_2 ncorr_2, by(_true dgm target)
      - if !mi("`debug'") {c -(}
      = if !mi("") {c -(}
        di as input "Data after collapse:"
        l
        {c )-}
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - qui gen k_`i' = bsims_`i'/(bsims_`i'-1)
      = qui gen k_1 = bsims_1/(bsims_1-1)
      - if "`bias'"=="bias" {c -(}
      = if "bias"=="bias" {c -(}
      - qui gen bias_mcse_`i' = biassd_`i' / sqrt(bsims_`i')
      = qui gen bias_mcse_1 = biassd_1 / sqrt(bsims_1)
      - {c )-}
      - if "`mean'"=="mean" {c -(}
      = if "mean"=="mean" {c -(}
      - qui gen mean_mcse_`i' = meansd_`i' / sqrt(bsims_`i')
      = qui gen mean_mcse_1 = meansd_1 / sqrt(bsims_1)
      - {c )-}
      - if ("`empse'"=="empse" | "`relerror'"=="relerror") & "`robust'"=="" {c -(}
      = if ("empse"=="empse" | "relerror"=="relerror") & ""=="" {c -(}
      - qui gen empse_mcse_`i' = empse_`i'/sqrt(2*(bsims_`i'-1))
      = qui gen empse_mcse_1 = empse_1/sqrt(2*(bsims_1-1))
      - {c )-}
      - else if ("`empse'"=="empse") & "`robust'"=="robust" {c -(}
      = else if ("empse"=="empse") & ""=="robust" {c -(}
        qui replace `empseTT`i''=`empseTT`i''*(k_`i'^2)
        qui replace `empseTB`i''=`empseTB`i''*k_`i'
        qui replace `empseT`i'' =`empseT`i'' *k_`i'
        qui gen empse_mcse_`i' = sqrt(k_`i') * sqrt(`empseTT`i'' -2*(`empseT`i''/`empseB`i'')*`empseTB`i'' +(`empseT`i''/`empseB`i'')^2*`empseBB`i'') / `empseB`i''
        qui replace empse_mcse_`i' = empse_mcse_`i' / (2*empse_`i')
        {c )-}
      - if "`relprec'"=="relprec" {c -(}
      = if "relprec"=="relprec" {c -(}
      - if `i'!=`refmethod' {c -(}
      = if 1!=1 {c -(}
        qui gen relprec_`i' = 100 * ((empse_`refmethod'/empse_`i')^2-1)
        if "`robust'"=="" {c -(}
        qui gen relprec_mcse_`i' = 200 * (empse_`refmethod'/empse_`i')^2 * sqrt((1-(corr_`i')^2)/(ncorr_`i'-1))
        {c )-}
        else {c -(}
        qui gen relprec_mcse_`i' = 100 * sqrt(`relprecTT`i'' -2*(`relprecT`i''/`relprecB`i'')*`relprecTB`i'' +(`relprecT`i''/`relprecB`i'')^2*`relprecBB`i'') / `relprecB`i''
        {c )-}
        {c )-}
      - else {c -(}
      - qui gen relprec_`i' = .
      = qui gen relprec_1 = .
      - qui gen relprec_mcse_`i' = .
      = qui gen relprec_mcse_1 = .
      - {c )-}
      - {c )-}
      - if "`mse'"=="mse" {c -(}
      = if "mse"=="mse" {c -(}
      - qui gen mse_mcse_`i' = msesd_`i' / sqrt(bsims_`i')
      = qui gen mse_mcse_1 = msesd_1 / sqrt(bsims_1)
      - {c )-}
      - if "`rmse'"=="rmse" {c -(}
      = if "rmse"=="rmse" {c -(}
      - qui gen rmse_`i' = sqrt(mse_`i')
      = qui gen rmse_1 = sqrt(mse_1)
      - qui gen rmse_mcse_`i' = msesd_`i' / (2 * sqrt(bsims_`i') * rmse_`i')
      = qui gen rmse_mcse_1 = msesd_1 / (2 * sqrt(bsims_1) * rmse_1)
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" {c -(}
      - if "`modelsemethod'"=="rmse" {c -(}
      = if "rmse"=="rmse" {c -(}
      - qui replace modelse_`i' = sqrt(varmean_`i')
      = qui replace modelse_1 = sqrt(varmean_1)
      - qui gen modelse_mcse_`i' = varsd_`i' / sqrt(4 * sesims_`i' * varmean_`i')
      = qui gen modelse_mcse_1 = varsd_1 / sqrt(4 * sesims_1 * varmean_1)
      - {c )-}
      - else if "`modelsemethod'"=="mean" {c -(}
      = else if "rmse"=="mean" {c -(}
        qui gen modelse_mcse_`i' = modelsesd_`i' / sqrt(sesims_`i')
        {c )-}
      - {c )-}
      - if "`ciwidth'"=="ciwidth" {c -(}
      = if "ciwidth"=="ciwidth" {c -(}
      - qui gen ciwidth_mcse_`i' = ciwidthsd_`i' / sqrt(bsims_`i')
      = qui gen ciwidth_mcse_1 = ciwidthsd_1 / sqrt(bsims_1)
      - {c )-}
      - if "`relerror'"=="relerror" {c -(}
      = if "relerror"=="relerror" {c -(}
      - qui gen relerror_`i' = 100*(modelse_`i'/empse_`i'-1)
      = qui gen relerror_1 = 100*(modelse_1/empse_1-1)
      - if "`robust'"=="" qui gen relerror_mcse_`i' = 100*(modelse_`i'/empse_`i') * sqrt((modelse_mcse_`i'/modelse_`i')^2 + (empse_mcse_`i'/empse_`i')^2 )
      = if ""=="" qui gen relerror_mcse_1 = 100*(modelse_1/empse_1) * sqrt((modelse_mcse_1/modelse_1)^2 + (empse_mcse_1/empse_1)^2 )
      - else {c -(}
        qui gen relerror_mcse_`i' = sqrt(`relerrorTT`i'' -2*(`relerrorT`i''/`relerrorB`i'')*`relerrorTB`i'' +(`relerrorT`i''/`relerrorB`i'')^2*`relerrorBB`i'') / `relerrorB`i''
        qui replace relerror_mcse_`i' = relerror_mcse_`i' * 100 / (2*(1+relerror_`i'/100))
        {c )-}
      - {c )-}
      - if "`cover'"=="cover" {c -(}
      = if "cover"=="cover" {c -(}
      - qui gen cover_mcse_`i' = sqrt(cover_`i'*(100-cover_`i')/bothsims_`i') if bothsims_`i'>1
      = qui gen cover_mcse_1 = sqrt(cover_1*(100-cover_1)/bothsims_1) if bothsims_1>1
      - {c )-}
      - if "`power'"=="power" {c -(}
      = if "power"=="power" {c -(}
      - qui gen power_mcse_`i' = sqrt(power_`i'*(100-power_`i')/bothsims_`i') if bothsims_`i'>1
      = qui gen power_mcse_1 = sqrt(power_1*(100-power_1)/bothsims_1) if bothsims_1>1
      - {c )-}
      - cap drop varmean_`i'
      = cap drop varmean_1
      - cap drop varsd_`i'
      = cap drop varsd_1
      - {c )-}
      - qui gen k_`i' = bsims_`i'/(bsims_`i'-1)
      = qui gen k_2 = bsims_2/(bsims_2-1)
      - if "`bias'"=="bias" {c -(}
      = if "bias"=="bias" {c -(}
      - qui gen bias_mcse_`i' = biassd_`i' / sqrt(bsims_`i')
      = qui gen bias_mcse_2 = biassd_2 / sqrt(bsims_2)
      - {c )-}
      - if "`mean'"=="mean" {c -(}
      = if "mean"=="mean" {c -(}
      - qui gen mean_mcse_`i' = meansd_`i' / sqrt(bsims_`i')
      = qui gen mean_mcse_2 = meansd_2 / sqrt(bsims_2)
      - {c )-}
      - if ("`empse'"=="empse" | "`relerror'"=="relerror") & "`robust'"=="" {c -(}
      = if ("empse"=="empse" | "relerror"=="relerror") & ""=="" {c -(}
      - qui gen empse_mcse_`i' = empse_`i'/sqrt(2*(bsims_`i'-1))
      = qui gen empse_mcse_2 = empse_2/sqrt(2*(bsims_2-1))
      - {c )-}
      - else if ("`empse'"=="empse") & "`robust'"=="robust" {c -(}
      = else if ("empse"=="empse") & ""=="robust" {c -(}
        qui replace `empseTT`i''=`empseTT`i''*(k_`i'^2)
        qui replace `empseTB`i''=`empseTB`i''*k_`i'
        qui replace `empseT`i'' =`empseT`i'' *k_`i'
        qui gen empse_mcse_`i' = sqrt(k_`i') * sqrt(`empseTT`i'' -2*(`empseT`i''/`empseB`i'')*`empseTB`i'' +(`empseT`i''/`empseB`i'')^2*`empseBB`i'') / `empseB`i''
        qui replace empse_mcse_`i' = empse_mcse_`i' / (2*empse_`i')
        {c )-}
      - if "`relprec'"=="relprec" {c -(}
      = if "relprec"=="relprec" {c -(}
      - if `i'!=`refmethod' {c -(}
      = if 2!=1 {c -(}
      - qui gen relprec_`i' = 100 * ((empse_`refmethod'/empse_`i')^2-1)
      = qui gen relprec_2 = 100 * ((empse_1/empse_2)^2-1)
      - if "`robust'"=="" {c -(}
      = if ""=="" {c -(}
      - qui gen relprec_mcse_`i' = 200 * (empse_`refmethod'/empse_`i')^2 * sqrt((1-(corr_`i')^2)/(ncorr_`i'-1))
      = qui gen relprec_mcse_2 = 200 * (empse_1/empse_2)^2 * sqrt((1-(corr_2)^2)/(ncorr_2-1))
      - {c )-}
      - else {c -(}
        qui gen relprec_mcse_`i' = 100 * sqrt(`relprecTT`i'' -2*(`relprecT`i''/`relprecB`i'')*`relprecTB`i'' +(`relprecT`i''/`relprecB`i'')^2*`relprecBB`i'') / `relprecB`i''
        {c )-}
      - {c )-}
      - else {c -(}
        qui gen relprec_`i' = .
        qui gen relprec_mcse_`i' = .
        {c )-}
      - {c )-}
      - if "`mse'"=="mse" {c -(}
      = if "mse"=="mse" {c -(}
      - qui gen mse_mcse_`i' = msesd_`i' / sqrt(bsims_`i')
      = qui gen mse_mcse_2 = msesd_2 / sqrt(bsims_2)
      - {c )-}
      - if "`rmse'"=="rmse" {c -(}
      = if "rmse"=="rmse" {c -(}
      - qui gen rmse_`i' = sqrt(mse_`i')
      = qui gen rmse_2 = sqrt(mse_2)
      - qui gen rmse_mcse_`i' = msesd_`i' / (2 * sqrt(bsims_`i') * rmse_`i')
      = qui gen rmse_mcse_2 = msesd_2 / (2 * sqrt(bsims_2) * rmse_2)
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" {c -(}
      - if "`modelsemethod'"=="rmse" {c -(}
      = if "rmse"=="rmse" {c -(}
      - qui replace modelse_`i' = sqrt(varmean_`i')
      = qui replace modelse_2 = sqrt(varmean_2)
      - qui gen modelse_mcse_`i' = varsd_`i' / sqrt(4 * sesims_`i' * varmean_`i')
      = qui gen modelse_mcse_2 = varsd_2 / sqrt(4 * sesims_2 * varmean_2)
      - {c )-}
      - else if "`modelsemethod'"=="mean" {c -(}
      = else if "rmse"=="mean" {c -(}
        qui gen modelse_mcse_`i' = modelsesd_`i' / sqrt(sesims_`i')
        {c )-}
      - {c )-}
      - if "`ciwidth'"=="ciwidth" {c -(}
      = if "ciwidth"=="ciwidth" {c -(}
      - qui gen ciwidth_mcse_`i' = ciwidthsd_`i' / sqrt(bsims_`i')
      = qui gen ciwidth_mcse_2 = ciwidthsd_2 / sqrt(bsims_2)
      - {c )-}
      - if "`relerror'"=="relerror" {c -(}
      = if "relerror"=="relerror" {c -(}
      - qui gen relerror_`i' = 100*(modelse_`i'/empse_`i'-1)
      = qui gen relerror_2 = 100*(modelse_2/empse_2-1)
      - if "`robust'"=="" qui gen relerror_mcse_`i' = 100*(modelse_`i'/empse_`i') * sqrt((modelse_mcse_`i'/modelse_`i')^2 + (empse_mcse_`i'/empse_`i')^2 )
      = if ""=="" qui gen relerror_mcse_2 = 100*(modelse_2/empse_2) * sqrt((modelse_mcse_2/modelse_2)^2 + (empse_mcse_2/empse_2)^2 )
      - else {c -(}
        qui gen relerror_mcse_`i' = sqrt(`relerrorTT`i'' -2*(`relerrorT`i''/`relerrorB`i'')*`relerrorTB`i'' +(`relerrorT`i''/`relerrorB`i'')^2*`relerrorBB`i'') / `relerrorB`i''
        qui replace relerror_mcse_`i' = relerror_mcse_`i' * 100 / (2*(1+relerror_`i'/100))
        {c )-}
      - {c )-}
      - if "`cover'"=="cover" {c -(}
      = if "cover"=="cover" {c -(}
      - qui gen cover_mcse_`i' = sqrt(cover_`i'*(100-cover_`i')/bothsims_`i') if bothsims_`i'>1
      = qui gen cover_mcse_2 = sqrt(cover_2*(100-cover_2)/bothsims_2) if bothsims_2>1
      - {c )-}
      - if "`power'"=="power" {c -(}
      = if "power"=="power" {c -(}
      - qui gen power_mcse_`i' = sqrt(power_`i'*(100-power_`i')/bothsims_`i') if bothsims_`i'>1
      = qui gen power_mcse_2 = sqrt(power_2*(100-power_2)/bothsims_2) if bothsims_2>1
      - {c )-}
      - cap drop varmean_`i'
      = cap drop varmean_2
      - cap drop varsd_`i'
      = cap drop varsd_2
      - {c )-}
      - if !mi("`debug'") {c -(}
      = if !mi("") {c -(}
        di as input "Data after post-processing:"
        l
        {c )-}
      - local alpha=100-`level'
      = local alpha=100-95
      - local bsimsname Non-missing point estimates
      - local sesimsname Non-missing standard errors
      - local biasname Bias in point estimate
      - local meanname Mean of point estimate
      - local empsename Empirical standard error
      - local relprecname % gain in precision relative to method `label`refmethod''
      = local relprecname % gain in precision relative to method A est
      - local msename Mean squared error
      - local rmsename Root mean squared error
      - if "`modelsemethod'" =="mean" local modelsename Mean model-based standard error `sebeta'
      = if "rmse" =="mean" local modelsename Mean model-based standard error 
      - if "`modelsemethod'" =="rmse" local modelsename RMS model-based standard error `sebeta'
      = if "rmse" =="rmse" local modelsename RMS model-based standard error 
      - local ciwidthname Mean conf. interval width
      - local relerrorname Relative % error in standard error
      - local covername % coverage of nominal `level'% conf. interval
      = local covername % coverage of nominal 95% conf. interval
      - local powername % power of `alpha'% level test
      = local powername % power of 5% level test
      - local keeplist `byvar'
      = local keeplist _true dgm target
      - foreach name in `output' {c -(}
      = foreach name in bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power {c -(}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "bsims"!="bsims" & "bsims"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename bsims_1 method1bsims
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims
      - if `domcse' {c -(}
      = if 0 {c -(}
        rename `name'_mcse_`i' method`i'`name'_mcse
        local keeplist `keeplist' method`i'`name'_mcse
        {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename bsims_2 method2bsims
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims
      - if `domcse' {c -(}
      = if 0 {c -(}
        rename `name'_mcse_`i' method`i'`name'_mcse
        local keeplist `keeplist' method`i'`name'_mcse
        {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "sesims"!="bsims" & "sesims"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename sesims_1 method1sesims
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims
      - if `domcse' {c -(}
      = if 0 {c -(}
        rename `name'_mcse_`i' method`i'`name'_mcse
        local keeplist `keeplist' method`i'`name'_mcse
        {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename sesims_2 method2sesims
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims
      - if `domcse' {c -(}
      = if 0 {c -(}
        rename `name'_mcse_`i' method`i'`name'_mcse
        local keeplist `keeplist' method`i'`name'_mcse
        {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "bias"!="bsims" & "bias"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename bias_1 method1bias
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename bias_mcse_1 method1bias_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename bias_2 method2bias
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename bias_mcse_2 method2bias_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "mean"!="bsims" & "mean"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename mean_1 method1mean
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename mean_mcse_1 method1mean_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename mean_2 method2mean
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename mean_mcse_2 method2mean_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "empse"!="bsims" & "empse"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename empse_1 method1empse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename empse_mcse_1 method1empse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename empse_2 method2empse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename empse_mcse_2 method2empse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "relprec"!="bsims" & "relprec"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename relprec_1 method1relprec
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename relprec_mcse_1 method1relprec_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename relprec_2 method2relprec
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename relprec_mcse_2 method2relprec_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "mse"!="bsims" & "mse"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename mse_1 method1mse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename mse_mcse_1 method1mse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename mse_2 method2mse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename mse_mcse_2 method2mse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "rmse"!="bsims" & "rmse"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename rmse_1 method1rmse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename rmse_mcse_1 method1rmse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename rmse_2 method2rmse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename rmse_mcse_2 method2rmse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "modelse"!="bsims" & "modelse"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename modelse_1 method1modelse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename modelse_mcse_1 method1modelse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename modelse_2 method2modelse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename modelse_mcse_2 method2modelse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "ciwidth"!="bsims" & "ciwidth"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename ciwidth_1 method1ciwidth
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename ciwidth_mcse_1 method1ciwidth_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename ciwidth_2 method2ciwidth
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename ciwidth_mcse_2 method2ciwidth_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "relerror"!="bsims" & "relerror"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename relerror_1 method1relerror
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename relerror_mcse_1 method1relerror_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename relerror_2 method2relerror
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename relerror_mcse_2 method2relerror_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "cover"!="bsims" & "cover"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename cover_1 method1cover
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename cover_mcse_1 method1cover_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename cover_2 method2cover
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename cover_mcse_2 method2cover_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "power"!="bsims" & "power"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename power_1 method1power
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse method1power
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename power_mcse_1 method1power_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse method1power method1power_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename power_2 method2power
      - local keeplist `keeplist' method`i'`name'
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse method1power method1power_mcse method2power
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename power_mcse_2 method2power_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse method1power method1power_mcse method2power method2power_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - local methodlist `methodlist' method`i'
      = local methodlist  method1
      - {c )-}
      - local methodlist `methodlist' method`i'
      = local methodlist method1 method2
      - {c )-}
      - keep `keeplist'
      = keep _true dgm target method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse method1power method1power_mcse method2power method2power_mcse
      - qui reshape long `methodlist', i(`byvar') j(`gen'code) string
      = qui reshape long method1 method2, i(_true dgm target) j(_perfmeascode) string
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - char method`i'[varname] "`label`i''"
      = char method1[varname] "A est"
      - label var method`i' "`label`i''"
      = label var method1 "A est"
      - {c )-}
      - char method`i'[varname] "`label`i''"
      = char method2[varname] "B est"
      - label var method`i' "`label`i''"
      = label var method2 "B est"
      - {c )-}
      - local i 0
      - qui gen mcse = .
      - qui gen `gen'num = .
      = qui gen _perfmeasnum = .
      - foreach perfmeas in bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power {c -(}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="bsims"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="bsims_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="bsims" if _perfmeascode=="bsims_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 1 if _perfmeascode=="bsims" | _perfmeascode=="bsims_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "bsims"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "bsims"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "bsims"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "bsims"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "bsims"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "bsims"=="relprec" local label "% precision gain relative to method A est"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "bsims"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "bsims"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "bsims"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "bsims"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "bsims"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "bsims"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "bsims"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 1 "Non-missing point estimates", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="sesims"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="sesims_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="sesims" if _perfmeascode=="sesims_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 2 if _perfmeascode=="sesims" | _perfmeascode=="sesims_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "sesims"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "sesims"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "sesims"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "sesims"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "sesims"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "sesims"=="relprec" local label "% precision gain relative to method A est"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "sesims"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "sesims"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "sesims"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "sesims"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "sesims"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "sesims"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "sesims"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 2 "Non-missing standard errors", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="bias"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="bias_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="bias" if _perfmeascode=="bias_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 3 if _perfmeascode=="bias" | _perfmeascode=="bias_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "bias"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "bias"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "bias"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "bias"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "bias"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "bias"=="relprec" local label "% precision gain relative to method A est"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "bias"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "bias"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "bias"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "bias"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "bias"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "bias"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "bias"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 3 "Bias in point estimate", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="mean"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="mean_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="mean" if _perfmeascode=="mean_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 4 if _perfmeascode=="mean" | _perfmeascode=="mean_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "mean"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "mean"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "mean"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "mean"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "mean"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "mean"=="relprec" local label "% precision gain relative to method A est"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "mean"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "mean"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "mean"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "mean"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "mean"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "mean"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "mean"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 4 "Mean of point estimate", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="empse"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="empse_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="empse" if _perfmeascode=="empse_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 5 if _perfmeascode=="empse" | _perfmeascode=="empse_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "empse"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "empse"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "empse"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "empse"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "empse"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "empse"=="relprec" local label "% precision gain relative to method A est"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "empse"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "empse"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "empse"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "empse"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "empse"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "empse"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "empse"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 5 "Empirical standard error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="relprec"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="relprec_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="relprec" if _perfmeascode=="relprec_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 6 if _perfmeascode=="relprec" | _perfmeascode=="relprec_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "relprec"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "relprec"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "relprec"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "relprec"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "relprec"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "relprec"=="relprec" local label "% precision gain relative to method A est"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "relprec"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "relprec"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "relprec"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "relprec"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "relprec"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "relprec"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "relprec"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 6 "% precision gain relative to method A est", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="mse"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="mse_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="mse" if _perfmeascode=="mse_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 7 if _perfmeascode=="mse" | _perfmeascode=="mse_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "mse"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "mse"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "mse"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "mse"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "mse"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "mse"=="relprec" local label "% precision gain relative to method A est"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "mse"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "mse"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "mse"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "mse"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "mse"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "mse"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "mse"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 7 "Mean squared error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="rmse"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="rmse_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="rmse" if _perfmeascode=="rmse_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 8 if _perfmeascode=="rmse" | _perfmeascode=="rmse_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "rmse"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "rmse"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "rmse"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "rmse"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "rmse"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "rmse"=="relprec" local label "% precision gain relative to method A est"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "rmse"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "rmse"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "rmse"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "rmse"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "rmse"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "rmse"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "rmse"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 8 "Root mean squared error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="modelse"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="modelse_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="modelse" if _perfmeascode=="modelse_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 9 if _perfmeascode=="modelse" | _perfmeascode=="modelse_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "modelse"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "modelse"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "modelse"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "modelse"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "modelse"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "modelse"=="relprec" local label "% precision gain relative to method A est"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "modelse"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "modelse"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "modelse"=="modelse" {c -(}
      - if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
      = if "rmse" =="mean" local label "Mean model-based standard error"
      - if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
      = if "rmse" =="rmse" local label "RMS model-based standard error"
      - {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "modelse"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "modelse"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "modelse"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "modelse"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 9 "RMS model-based standard error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="ciwidth"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="ciwidth_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="ciwidth" if _perfmeascode=="ciwidth_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 10 if _perfmeascode=="ciwidth" | _perfmeascode=="ciwidth_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "ciwidth"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "ciwidth"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "ciwidth"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "ciwidth"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "ciwidth"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "ciwidth"=="relprec" local label "% precision gain relative to method A est"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "ciwidth"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "ciwidth"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "ciwidth"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "ciwidth"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "ciwidth"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "ciwidth"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "ciwidth"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 10 "Mean conf. interval width", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="relerror"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="relerror_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="relerror" if _perfmeascode=="relerror_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 11 if _perfmeascode=="relerror" | _perfmeascode=="relerror_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "relerror"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "relerror"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "relerror"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "relerror"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "relerror"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "relerror"=="relprec" local label "% precision gain relative to method A est"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "relerror"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "relerror"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "relerror"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "relerror"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "relerror"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "relerror"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "relerror"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 11 "Relative % error in standard error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="cover"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="cover_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="cover" if _perfmeascode=="cover_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 12 if _perfmeascode=="cover" | _perfmeascode=="cover_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "cover"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "cover"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "cover"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "cover"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "cover"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "cover"=="relprec" local label "% precision gain relative to method A est"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "cover"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "cover"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "cover"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "cover"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "cover"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "cover"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "cover"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 12 "% coverage of nominal 95% conf. interval", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="power"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="power_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="power" if _perfmeascode=="power_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 13 if _perfmeascode=="power" | _perfmeascode=="power_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "power"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "power"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "power"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "power"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "power"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "power"=="relprec" local label "% precision gain relative to method A est"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "power"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "power"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "power"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "power"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "power"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "power"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "power"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 13 "% power of 5% level test", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - assert !mi(mcse)
      - foreach var in `methodlist' {c -(}
      = foreach var in method1 method2 {c -(}
      - rename `var' `var'_
      = rename method1 method1_
      - local methodlist2 `methodlist2' `var'_
      = local methodlist2  method1_
      - {c )-}
      - rename `var' `var'_
      = rename method2 method2_
      - local methodlist2 `methodlist2' `var'_
      = local methodlist2 method1_ method2_
      - {c )-}
      - qui reshape wide `methodlist2', i(`byvar' `gen'num) j(mcse)
      = qui reshape wide method1_ method2_, i(_true dgm target _perfmeasnum) j(mcse)
      - local ids `gen'num `by'
      = local ids _perfmeasnum _true dgm target
      - local betas
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename method`i'_0 `beta`i''
      = rename method1_0 estA
      - label var `beta`i'' "`label`i''"
      = label var estA "A est"
      - char `beta`i''[varname] "`label`i''"
      = char estA[varname] "A est"
      - local betasnomcse `betasnomcse' `beta`i''
      = local betasnomcse  estA
      - local betas `betas' `beta`i''
      = local betas  estA
      - if "`mcse'"=="mcse" {c -(}
      = if "mcse"=="mcse" {c -(}
      - rename method`i'_1 `beta`i''_mcse
      = rename method1_1 estA_mcse
      - local betas `betas' `beta`i''_mcse
      = local betas estA estA_mcse
      - label var `beta`i''_mcse "`label`i'' (MCse)"
      = label var estA_mcse "A est (MCse)"
      - char `beta`i''_mcse[varname] "(MCse)"
      = char estA_mcse[varname] "(MCse)"
      - {c )-}
      - {c )-}
      - rename method`i'_0 `beta`i''
      = rename method2_0 estB
      - label var `beta`i'' "`label`i''"
      = label var estB "B est"
      - char `beta`i''[varname] "`label`i''"
      = char estB[varname] "B est"
      - local betasnomcse `betasnomcse' `beta`i''
      = local betasnomcse estA estB
      - local betas `betas' `beta`i''
      = local betas estA estA_mcse estB
      - if "`mcse'"=="mcse" {c -(}
      = if "mcse"=="mcse" {c -(}
      - rename method`i'_1 `beta`i''_mcse
      = rename method2_1 estB_mcse
      - local betas `betas' `beta`i''_mcse
      = local betas estA estA_mcse estB estB_mcse
      - label var `beta`i''_mcse "`label`i'' (MCse)"
      = label var estB_mcse "B est (MCse)"
      - char `beta`i''_mcse[varname] "(MCse)"
      = char estB_mcse[varname] "(MCse)"
      - {c )-}
      - {c )-}
      - char `gen'num[varname] "Performance measure"
      = char _perfmeasnum[varname] "Performance measure"
      - label var `gen'num "Performance measure"
      = label var _perfmeasnum "Performance measure"
      - label var `gen'code "Performance measure"
      = label var _perfmeascode "Performance measure"
      - order `ids' `betas'
      = order _perfmeasnum _true dgm target estA estA_mcse estB estB_mcse
      - sort `gen'num `by'
      = sort _perfmeasnum _true dgm target
      - tokenize `format'
      = tokenize 
      - local bfmt "`1'"
      = local bfmt ""
      - local pctfmt "`2'"
      = local pctfmt ""
      - local nfmt "`3'"
      = local nfmt ""
      - if "`bfmt'"=="" {c -(}
      = if ""=="" {c -(}
      - if mi("`methodvar'") local bfmt: format `beta1'
      = if mi("") local bfmt: format estA
      - else local bfmt `bfmt0'
      = else local bfmt 
      - {c )-}
      - if "`pctfmt'"=="" | "`pctfmt'"=="=" | "`pctfmt'"=="." local pctfmt `bfmt'
      = if ""=="" | ""=="=" | ""=="." local pctfmt %9.0g
      - if "`nfmt'"=="" local nfmt %7.0f
      = if ""=="" local nfmt %7.0f
      - if mi("`transpose'") {c -(}
      = if mi("") {c -(}
      - if "`list'"!="nolist" {c -(}
      = if ""!="nolist" {c -(}
      - if "`listsep'"=="" {c -(}
      = if ""=="" {c -(}
      - qui format `betas' `bfmt'
      = qui format estA estA_mcse estB estB_mcse %9.0g
      - list `ids' `betas', noo subvarname sepby(`gen'num `sepby') `abbreviate'
      = list _perfmeasnum _true dgm target estA estA_mcse estB estB_mcse, noo subvarname sepby(_perfmeasnum ) 
      - {c )-}
      - else {c -(}
        foreach perfmeas in `output' {c -(}
        di as text _new "``perfmeas'name'"
        local thisbetas = cond(inlist("`perfmeas'","bsims","sesims"), "betasnomcse", "betas")
        if inlist("`perfmeas'","bsims","sesims") local format `nfmt'
        else if inlist("`perfmeas'","bias","empse","modelse","mse") local format `bfmt'
        else local format `pctfmt'
        qui format `betas' `format'
        list `by' ``thisbetas'' if `gen'code=="`perfmeas'", noo subvarname sepby(`gen'num `sepby') `abbreviate'
        {c )-}
        {c )-}
      - {c )-}
      - qui format `betas' `bfmt'
      = qui format estA estA_mcse estB estB_mcse %9.0g
      - char `gen'num[varname]
      = char _perfmeasnum[varname]
      - {c )-}
      - else {c -(}
        di "Transposing results ..."
        drop `gen'num
        if "`origformat'"=="long" {c -(}
        {c )-}
        else if "`origformat'"=="wide" {c -(}
        foreach var of varlist `betas' {c -(}
        rename `var' b_`var'
        {c )-}
        local betastub b_
        {c )-}
        else exit 499
        qui reshape long `betastub', i(`gen'code `by') j(method) string
        qui reshape wide `betastub', i(`by' method) j(`gen'code) string
        if "`mcse'"=="mcse" {c -(}
        gen type = cond(substr(method,length(method)-4,5)=="_mcse","mcse","est")
        qui replace method = substr(method,1,length(method)-5) if type=="mcse"
        local type type
        local sep2 method
        {c )-}
        sort `by' method `type'
        foreach varname of varlist `betastub'* {c -(}
        local varname2 = substr("`varname'", 1+length("`betastub'"), .)
        rename `varname' `varname2'
        label var `varname2'
        {c )-}
        cap format `bias' `empse' `mse' `modelse' `bfmt'
        cap format `relprec' `relerror' `cover' `power' `pctfmt'
        cap format `bsims' `sesims' `sesims' `nfmt'
        if "`list'"!="nolist" {c -(}
        l `by' method `type' `bsims' `sesims' `bias' `empse' `relprec' `mse' `modelse' `relerror' `cover' `power', sepby(`by' `sep2') noo
        {c )-}
        {c )-}
      - if "`saving'"!="" {c -(}
      = if ""!="" {c -(}
        if "`by'"=="" drop `byvar'
        save `saving'
        {c )-}
      - if "`clear'"=="clear" {c -(}
      = if "clear"=="clear" {c -(}
      - restore, not
      - di as text "Results are now in memory."
      - {c )-}
      {hline 79} end simsum {hline}
    - foreach v in `valmethod' {c -(}
    = foreach v in A B {c -(}
    - if substr("`v'",strlen("`v'"),1)=="_" local v = substr("`v'", 1, index("`v'","_") - 1)
    = if substr("A",strlen("A"),1)=="_" local v = substr("A", 1, index("A","_") - 1)
    - if `estchange' == 1 {c -(}
    = if 0 == 1 {c -(}
      qui rename `estimate'_`v'_mcse `se'`v'
      {c )-}
    - else {c -(}
    - if substr(" `estimate'`v'",strlen(" `estimate'`v'"),1)=="_" qui rename `estimate'`v'mcse `se'`v'
    = if substr(" estA",strlen(" estA"),1)=="_" qui rename estAmcse seA
    - else qui rename `estimate'`v'_mcse `se'`v'
    = else qui rename estA_mcse seA
      {hline 77} begin rename {hline}
      - version 12
      - mata: rename_cmd("`3'")
      = mata: rename_cmd("")
      {hline 79} end rename {hline}
    - {c )-}
    - if `sechange' == 1 qui rename `se'`v' `se'_`v'
    = if 0 == 1 qui rename seA se_A
    - {c )-}
    - if substr("`v'",strlen("`v'"),1)=="_" local v = substr("`v'", 1, index("`v'","_") - 1)
    = if substr("B",strlen("B"),1)=="_" local v = substr("B", 1, index("B","_") - 1)
    - if `estchange' == 1 {c -(}
    = if 0 == 1 {c -(}
      qui rename `estimate'_`v'_mcse `se'`v'
      {c )-}
    - else {c -(}
    - if substr(" `estimate'`v'",strlen(" `estimate'`v'"),1)=="_" qui rename `estimate'`v'mcse `se'`v'
    = if substr(" estB",strlen(" estB"),1)=="_" qui rename estBmcse seB
    - else qui rename `estimate'`v'_mcse `se'`v'
    = else qui rename estB_mcse seB
      {hline 77} begin rename {hline}
      - version 12
      - mata: rename_cmd("`3'")
      = mata: rename_cmd("")
      {hline 79} end rename {hline}
    - {c )-}
    - if `sechange' == 1 qui rename `se'`v' `se'_`v'
    = if 0 == 1 qui rename seB se_B
    - {c )-}
    - {c )-}
    - qui gen indi = -_perfmeasnum
    - qui levelsof _perfmeasnum, local(lablevels)
      =        if (N <= 2000) {c -(}
      =        y = srswor(x, 200)
      =        if (rows(t) >= 50) {c -(}
      =        return(multiplicity(sum(t[., 2] :== 1), rows(t)) < 50)
      {hline 75} begin levelsof {hline}
      - version 15.0
      - syntax varname [if] [in] [, Separate(str) MISSing Local(name local) Clean MATROW(name) MATCELL(name) HEXadecimal ]
      - if ("`missing'" == "") {c -(}
      = if ("" == "") {c -(}
      - marksample touse, strok
      - {c )-}
      - else {c -(}
        marksample touse, strok novarlist
        {c )-}
      - if (`"`separate'"' == "") {c -(}
      = if (`""' == "") {c -(}
      - local separate " "
      - {c )-}
      - local typ : type `varlist'
      = local typ : type _perfmeasnum
      - if ("`typ'" == "strL" | substr("`typ'", 1, 3) == "str") {c -(}
      = if ("float" == "strL" | substr("float", 1, 3) == "str") {c -(}
        NoHexadecimal `hexadecimal'
        NoMatrow `matrow'
        {c )-}
      - mata: st_rclear()
      - if ("`typ'" == "strL") {c -(}
      = if ("float" == "strL") {c -(}
        LevelsOfStrL `varlist' if `touse', separate(`"`separate'"') `clean' matcell(`matcell')
        {c )-}
      - else if (substr("`typ'", 1, 3) == "str") {c -(}
      = else if (substr("float", 1, 3) == "str") {c -(}
        local isclean = ("`clean'" != "")
        mata: LevelsOfString("`varlist'", "`touse'", `"`separate'"', `isclean', "`matcell'")
        {c )-}
      - else {c -(}
      - local isint = inlist("`typ'", "byte", "int", "long")
      = local isint = inlist("float", "byte", "int", "long")
      - mata: LevelsOfReal("`varlist'", "`touse'", `"`separate'"', `isint', 1, "`matrow'", "`matcell'", "`hexadecimal'" != "")
      = mata: LevelsOfReal("_perfmeasnum", "__000001", `" "', 0, 1, "", "", "" != "")
      - if ("`usetab'" == "usetab") {c -(}
      = if ("" == "usetab") {c -(}
        cap LevelsOfTab `varlist' if `touse', `missing' separate(`"`separate'"') matrow(`matrow') matcell(`matcell') `hexadecimal'
        if (_rc) {c -(}
        mata: LevelsOfReal("`varlist'", "`touse'", `"`separate'"', `isint', 0, "`matrow'", "`matcell'", "`hexadecimal'" != "")
        {c )-}
        {c )-}
      - {c )-}
      - if ("`local'" != "") {c -(}
      = if ("lablevels" != "") {c -(}
      - c_local `local' `"`r(levels)'"'
      = c_local lablevels `"1 2 3 4 5 6 7 8 9 10 11 12 13"'
      - {c )-}
      - di as text `"`r(levels)'"'
      = di as text `"1 2 3 4 5 6 7 8 9 10 11 12 13"'
      {hline 77} end levelsof {hline}
    - foreach lablevel of local lablevels {c -(}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 1
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -1 "Non-missing point estimates", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -1 "Non-missing point estimates", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 2
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -2 "Non-missing standard errors", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -2 "Non-missing standard errors", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 3
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -3 "Bias in point estimate", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -3 "Bias in point estimate", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 4
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -4 "Mean of point estimate", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -4 "Mean of point estimate", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 5
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -5 "Empirical standard error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -5 "Empirical standard error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 6
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -6 "% precision gain relative to method A est", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -6 "% precision gain relative to method A est", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 7
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -7 "Mean squared error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -7 "Mean squared error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 8
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -8 "Root mean squared error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -8 "Root mean squared error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 9
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -9 "RMS model-based standard error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -9 "RMS model-based standard error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 10
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -10 "Mean conf. interval width", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -10 "Mean conf. interval width", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 11
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -11 "Relative % error in standard error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -11 "Relative % error in standard error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 12
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -12 "% coverage of nominal 95% conf. interval", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -12 "% coverage of nominal 95% conf. interval", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 13
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -13 "% power of 5% level test", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -13 "% power of 5% level test", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - label values indi indilab
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("values", "val") > 0 ) {c -(}
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {c -(}
      = if "" != "" {c -(}
        local fix ", nofix"
        {c )-}
      - gettoken var rest : anything
      - while `"`rest'"' != "" {c -(}
      = while `" indilab"' != "" {c -(}
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "indilab"
      - {c )-}
      - while `"`rest'"' != "" {c -(}
      = while `""' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
      - local vlist : list anything - lab
      - if "`lab'" == "." {c -(}
      = if "indilab" == "." {c -(}
        local lab ""
        {c )-}
      - foreach var of varlist `vlist' {c -(}
      = foreach var of varlist indi {c -(}
      - `vv' _label `val' `var' `lab' `fix'
      = version 15, missing: _label values indi indilab 
      - {c )-}
      - {c )-}
      - else {c -(}
        `vv' _label `macval(0)'
        {c )-}
      {hline 80} end label {hline}
    - qui drop _perfmeasnum
    - if `methodstringindi'==1 {c -(}
    = if 0==1 {c -(}
      capture quietly tostring `method', replace
      {c )-}
    - qui append using `estimatesdata'
    = qui append using C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp
      {hline 77} begin append {hline}
      - version 11
      - if (_caller() < 11) {c -(}
        local version : di "version " string(_caller()) ":"
        `version' _append `0'
        exit
        {c )-}
      - syntax [anything(everything)] [, GENerate(name) * ]
      - gettoken using filenames : anything
      - if (`"`using'"' != "using") {c -(}
      = if (`"using"' != "using") {c -(}
        di as err "using required"
        exit 100
        {c )-}
      - if (`"`filenames'"' == "") {c -(}
      = if (`" C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp"' == "") {c -(}
        di as err "invalid file specification"
        exit 198
        {c )-}
      - foreach filename of local filenames {c -(}
      - capture quietly describe using `"`filename'"'
      = capture quietly describe using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp"'
      - if (_rc) {c -(}
        di as err `"file `filename' not found"'
        exit 601
        {c )-}
      - {c )-}
      - if ("`generate'" != "") {c -(}
      = if ("" != "") {c -(}
        confirm new var `generate'
        local filenum 0
        gen byte `generate' = `filenum'
        local ++filenum
        local filenumpos = _N + 1
        {c )-}
      - foreach filename of local filenames {c -(}
      - capture noisily _append using `"`filename'"', `options'
      = capture noisily _append using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp"', 
      - if _rc {c -(}
        if ("`generate'" != "") {c -(}
        capture quietly drop if `generate' > 0
        capture quietly drop `generate'
        {c )-}
        exit _rc
        {c )-}
      - if ("`generate'" != "") {c -(}
      = if ("" != "") {c -(}
        quietly replace `generate' = `filenum' in `filenumpos'/L
        local ++filenum
        local filenumpos = _N + 1
        {c )-}
      - {c )-}
      {hline 79} end append {hline}
    - qui replace indi = `rep' if `rep'>0 & `rep'!=.
    = qui replace indi = rep if rep>0 & rep!=.
    - qui drop `rep'
    = qui drop rep
    - qui rename indi `rep'
    = qui rename indi rep
      {hline 77} begin rename {hline}
      - version 12
      - mata: rename_cmd("`3'")
      = mata: rename_cmd("")
      {hline 79} end rename {hline}
    - qui gen byte _dataset = `rep'>0 if `rep'!=.
    = qui gen byte _dataset = rep>0 if rep!=.
    - label define estimatesperformancelab 0 "Performance" 1 "Estimates"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define estimatesperformancelab 0 "Performance" 1 "Estimates"
      - {c )-}
      {hline 80} end label {hline}
    - label values _dataset estimatesperformancelab
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("values", "val") > 0 ) {c -(}
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {c -(}
      = if "" != "" {c -(}
        local fix ", nofix"
        {c )-}
      - gettoken var rest : anything
      - while `"`rest'"' != "" {c -(}
      = while `" estimatesperformancelab"' != "" {c -(}
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "estimatesperformancelab"
      - {c )-}
      - while `"`rest'"' != "" {c -(}
      = while `""' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
      - local vlist : list anything - lab
      - if "`lab'" == "." {c -(}
      = if "estimatesperformancelab" == "." {c -(}
        local lab ""
        {c )-}
      - foreach var of varlist `vlist' {c -(}
      = foreach var of varlist _dataset {c -(}
      - `vv' _label `val' `var' `lab' `fix'
      = version 15, missing: _label values _dataset estimatesperformancelab 
      - {c )-}
      - {c )-}
      - else {c -(}
        `vv' _label `macval(0)'
        {c )-}
      {hline 80} end label {hline}
    - if "`perfonly'"!="" qui drop if `rep'>0 & `rep'!=.
    = if ""!="" qui drop if rep>0 & rep!=.
    - qui order `allnames'
    = qui order rep dgm _true target estA seA estB seB __000000
      {hline 78} begin order {hline}
      - version 11
      - if (_caller()<11) {c -(}
        _order `macval(0)'
        exit
        {c )-}
      - syntax varlist[, Before(varname) After(varname) first last SEQuential ALPHAbetic]
      - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'" == "" & "`alphabetic'" == "" & "`sequential'" == "") {c -(}
      = if (`""' == "" & `""' == "" & "" == "" & "" == "" & "" == "" & "" == "") {c -(}
      - _order `macval(0)'
      = _order rep dgm _true target estA seA estB seB __000000
      - exit
      {hline 80} end order {hline}
    - if `methodcreated'!=1 {c -(}
    = if 0!=1 {c -(}
    - cap confirm numeric variable `method'
    = cap confirm numeric variable method
    - if _rc local methodstringindi = 1
    - else local methodstringindi = 0
    - local methodlabels = 0
    - if `nformat'==1 | (`nformat'==3 & `nmethod'==1) {c -(}
    = if 3==1 | (3==3 & 2==1) {c -(}
      if `nmethod'!=0 {c -(}
      qui tab `method',m
      local nmethodlabels = `r(r)'
      cap qui labelsof `method'
      cap qui ret list
      if `"`r(labels)'"'!="" {c -(}
      local 0 = `"`r(labels)'"'
      forvalues i = 1/`nmethodlabels' {c -(}
      gettoken `method'label`i' 0 : 0, parse(": ")
      local methlist `methlist' ``method'label`i''
      local methodlabels = 1
      {c )-}
      {c )-}
      else {c -(}
      qui levels `method', local(levels)
      tokenize `"`levels'"'
      if `methodstringindi' == 0 {c -(}
      forvalues i = 1/`nmethodlabels' {c -(}
      local `method'label`i' `i'
      local methlist `methlist' ``method'label`i''
      {c )-}
      {c )-}
      else forvalues i = 1/`nmethodlabels' {c -(}
      local `method'label`i' ``i''
      local methlist `methlist' ``method'label`i''
      {c )-}
      {c )-}
      {c )-}
      {c )-}
    - if `nformat'==1 {c -(}
    = if 3==1 {c -(}
      local valmethod = "`methlist'"
      {c )-}
    - else if `nformat'==2 {c -(}
    = else if 3==2 {c -(}
      local valmethod = "`method'"
      {c )-}
    - else if `nformat'==3 {c -(}
    = else if 3==3 {c -(}
    - if `nmethod'==1 {c -(}
    = if 2==1 {c -(}
      local valmethod = "`methlist'"
      {c )-}
    - else if `nmethod'>=1 & `nmethod'!=. {c -(}
    = else if 2>=1 & 2!=. {c -(}
    - local valmethod = "`methlist'"
    = local valmethod = ""
    - {c )-}
    - {c )-}
    - {c )-}
    - local simananalyserun = 1
    - local allthings `allthings' simananalyserun ifanalyse estchange sechange
    = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist simananalyserun ifanalyse estchange sechange
    - foreach thing in `allthings' {c -(}
    = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist simananalyserun ifanalyse estchange sechange {c -(}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist simananalyserun ifanalyse estchange sechange
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_rep] rep
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_dgm] dgm
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_target] target
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_method] method
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_estimate] est
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_se] se
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_df] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ci] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_p] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_true] _true
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_order] method
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_lci] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_uci] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ifsetup] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_insetup] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_format] format 3: long-wide
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_targetformat] long
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_methodformat] wide
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_nformat] 3
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ntarget] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ndgm] 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_nmethod] 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_numtarget] 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_valtarget] 1 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_nummethod] 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_valmethod] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ntrue] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ntruevalue] single
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_dgmvar] dgm
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_numdgm] 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_dgmcreated] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_targetlabels] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_methodcreated] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_methodlabels] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_methodvalues] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ntruestub] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_descriptiontype] stub
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_cidescriptiontype] stubs
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_truedescriptiontype] variable
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_estvars] est
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_sevars] se
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_dfvars] N/A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_civars] N/A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_pvars] N/A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_truevars] _true
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_simansetuprun] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_m1] A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_m2] B
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_t1] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_t2] 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_metlist] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_simananalyserun] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ifanalyse] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_estchange] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_sechange] 0
    - {c )-}
    - di as text "siman analyse has run successfully"
siman analyse has run successfully
    - if "`table'"!="notable" {c -(}
    = if ""!="notable" {c -(}
    - cap noi siman_table
      {hline 72} begin siman_table {hline}
      - version 15
      - syntax [anything] [if], [Column(varlist) debug]
      - foreach thing in `_dta[siman_allthings]' {c -(}
      = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist simananalyserun ifanalyse estchange sechange {c -(}
      - local `thing' : char _dta[siman_`thing']
      = local allthings : char _dta[siman_allthings]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local rep : char _dta[siman_rep]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgm : char _dta[siman_dgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local target : char _dta[siman_target]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local method : char _dta[siman_method]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estimate : char _dta[siman_estimate]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local se : char _dta[siman_se]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local df : char _dta[siman_df]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ci : char _dta[siman_ci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local p : char _dta[siman_p]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local true : char _dta[siman_true]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local order : char _dta[siman_order]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local lci : char _dta[siman_lci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local uci : char _dta[siman_uci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifsetup : char _dta[siman_ifsetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local insetup : char _dta[siman_insetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local format : char _dta[siman_format]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetformat : char _dta[siman_targetformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodformat : char _dta[siman_methodformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nformat : char _dta[siman_nformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntarget : char _dta[siman_ntarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ndgm : char _dta[siman_ndgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nmethod : char _dta[siman_nmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numtarget : char _dta[siman_numtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valtarget : char _dta[siman_valtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nummethod : char _dta[siman_nummethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valmethod : char _dta[siman_valmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntrue : char _dta[siman_ntrue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruevalue : char _dta[siman_ntruevalue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmvar : char _dta[siman_dgmvar]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numdgm : char _dta[siman_numdgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmcreated : char _dta[siman_dgmcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetlabels : char _dta[siman_targetlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodcreated : char _dta[siman_methodcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodlabels : char _dta[siman_methodlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodvalues : char _dta[siman_methodvalues]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruestub : char _dta[siman_ntruestub]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local descriptiontype : char _dta[siman_descriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local cidescriptiontype : char _dta[siman_cidescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truedescriptiontype : char _dta[siman_truedescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estvars : char _dta[siman_estvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sevars : char _dta[siman_sevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dfvars : char _dta[siman_dfvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local civars : char _dta[siman_civars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local pvars : char _dta[siman_pvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truevars : char _dta[siman_truevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simansetuprun : char _dta[siman_simansetuprun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m1 : char _dta[siman_m1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m2 : char _dta[siman_m2]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local t1 : char _dta[siman_t1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local t2 : char _dta[siman_t2]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local metlist : char _dta[siman_metlist]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simananalyserun : char _dta[siman_simananalyserun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifanalyse : char _dta[siman_ifanalyse]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estchange : char _dta[siman_estchange]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sechange : char _dta[siman_sechange]
      - {c )-}
      - if "`simananalyserun'"=="0" | "`simananalyserun'"=="" {c -(}
      = if "1"=="0" | "1"=="" {c -(}
        di as error "siman analyse has not been run.  Please use siman_analyse first before siman_table."
        exit 498
        {c )-}
      - preserve
      - if `nformat'!=1 {c -(}
      = if 3!=1 {c -(}
      - qui siman_reshape, longlong
        - set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    _true
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number _true
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 3==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
          else if `nformat'==1 & `nmethod'!=0 {c -(}
          if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
          if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
          if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
          if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
          if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
          if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
          if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
          else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
          local numberdgms: word count `dgm'
          if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
          qui tab `method'
          local nmethodlabels = `r(r)'
          qui levels `method', local(mlevels)
          qui tokenize `"`mlevels'"'
          cap quietly label drop `method'
          local labelchange = 0
          forvalues m = 1/`nmethodlabels' {c -(}
          if substr("``m''",strlen("``m''"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          else {c -(}
          local metlabel`m' = "``m''"
          if `m'==1 local metlist `metlabel`m''
          else if `m'>=2 local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          if `labelchange'==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
          local valmethod = "`metlist'"
          forvalues i=1/`nmethod' {c -(}
          local m`i' = "``i''"
          {c )-}
          local string = 0
          capture confirm numeric variable `method'
          if _rc local string = 1
          if `string' == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
          else if `string' == 1 & "`methodlabels'" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
          else if "`methodlabels'" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          forvalues i=1/`nummethod' {c -(}
          char _dta[siman_m`i'] `i'
          if `i'==1 local siman_method `i'
          else if `i'>=2 local siman_method `siman_method' `i'
          {c )-}
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          char _dta[siman_df] `df'
          char _dta[siman_ci] `ci'
          char _dta[siman_p] `p'
          char _dta[siman_true] `true'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`df'"!="" char _dta[siman_dfvars] `df'
          if "`ci'"!="" char _dta[siman_civars] `ci'
          if "`p'"!="" char _dta[siman_pvars] `p'
          if "`true'"!="" char _dta[siman_truevars] `true'
          char _dta[siman_method] "`siman_valmethod'"
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          else if `nformat'==1 & `nmethod'==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
          {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if "longlong"!="" {c -(}
        - if `nformat'==3 {c -(}
        = if 3==3 {c -(}
        - if `methodlabels' == 1 local valmethod "`metlist'"
        = if 0 == 1 local valmethod ""
        - qui tokenize "`valmethod'"
        = qui tokenize ""
        - if `nmethod'!=0 {c -(}
        = if 2!=0 {c -(}
        - forvalues v=1/`nummethod' {c -(}
        = forvalues v=1/2 {c -(}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("",strlen(""),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("",strlen(""),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - {c )-}
        - local string = 0
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/2 {c -(}
        - qui capture confirm number `m`i''
        = qui capture confirm number A
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - qui capture confirm number `m`i''
        = qui capture confirm number B
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - if "`estchange'" == "1" local estimateunderscore = "`estvars'"
        = if "0" == "1" local estimateunderscore = "est"
        - if "`sechange'" == "1" local seunderscore = "`sevars'"
        = if "0" == "1" local seunderscore = "se"
        - if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
        = if ("0" != "1" & "0" != "1") local optionlist est se   
        - if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
        = if ("0" == "1" & "0" != "1") local optionlist  se   
        - if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
        = if ("0" != "1" & "0" == "1") local optionlist est    
        - if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
        = if ("0" == "1" & "0" == "1") local optionlist     
        - local optionlistreshape `optionlist'
        = local optionlistreshape est se
        - local exclude "`true'"
        = local exclude "_true"
        - local optionlistreshape: list optionlistreshape - exclude
        - local methodname: char _dta[ReS_j]
        - if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
        = if mi("mcse") | "mcse" == "_j" | "mcse" == "mcse" local methodname "method"
        - if "`methodlables'" == "1" local methodreshape "`methodvalues'"
        = if "" == "1" local methodreshape ""
        - else local methodreshape "`valmethod'"
        = else local methodreshape ""
        - if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
        = if "variable" == "stub" | 0 == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
        - else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
        = else if "variable" == "variable" & 0 == 0 {c -(}
        - if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = if 1 == 0 & 1<=1 & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 1<=1 & 2!=0 {c -(}
        - qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
        = qui reshape long "est se", i(rep dgm target _true) j(method "") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "long"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "long"=="wide" | "long"=="long" {c -(}
          - DoNew `*'
          = DoNew long est se , i(rep dgm target _true) j(method  ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        = else if 1>1 & 1!=. & 2==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
        - else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 0 & 1>1 & 1!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 1>1 & 1!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
        - {c )-}
        - foreach u of var * {c -(}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("rep",strlen("rep"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("dgm",strlen("dgm"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("target",strlen("target"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("_true",strlen("_true"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("method",strlen("method"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("est",strlen("est"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("se",strlen("se"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("__000000",strlen("__000000"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("_perfmeascode",strlen("_perfmeascode"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("_dataset",strlen("_dataset"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - char _dta[siman_format] "format 1: long-long"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "long"
        - char _dta[siman_nformat] 1
        - if `nmethod'!=0 char _dta[siman_method] "`methodname'"
        = if 2!=0 char _dta[siman_method] "method"
        - if `nmethod'!=0 char _dta[siman_nmethod] 1
        = if 2!=0 char _dta[siman_nmethod] 1
        - char _dta[siman_descriptiontype] "variable"
        - char _dta[siman_truedescriptiontype] "variable"
        - char _dta[siman_cidescriptiontype] "variables"
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`simananalyserun'"=="1" {c -(}
        = if "1"=="1" {c -(}
        - preserve
        - qui tempfile sortperf
        - qui drop if `rep'<0
        = qui drop if rep<0
        - qui save `sortperf'
        = qui save C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000005.tmp
        - restore
        - qui drop if `rep'>0
        = qui drop if rep>0
        - if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
        = if 0!= 1 qui gsort -rep dgm target method
          {hline 74} begin gsort {hline}
          - if _caller() >= 12 {c -(}
          - local vv : di "version " string(_caller()) ":"
          - {c )-}
          - tempname myr
          - _return hold `myr'
          = _return hold __000001
          - version 6.0, missing
          - parse `"`*'"', parse(" +-,")
          = parse `"-rep dgm target method"', parse(" +-,")
          - local noryet 1
          - local i 1
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"-"'!="" & `"-"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"-"'=="-" | `"-"'=="+" {c -(}
          - local sign `"`1'"'
          = local sign `"-"'
          - mac shift
          - if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
          = if `"rep"'=="," | `"rep"'=="" {c -(} error 198 {c )-}
          - {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev rep
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 1 & `"-"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign1 `"-"'
          - local names `"`names' `1'"'
          = local names `" rep"'
          - local i=`i'+1
          = local i=1+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"dgm"'!="" & `"dgm"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"dgm"'=="-" | `"dgm"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev dgm
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign2 `"+"'
          - local names `"`names' `1'"'
          = local names `" rep dgm"'
          - local i=`i'+1
          = local i=2+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"target"'!="" & `"target"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"target"'=="-" | `"target"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev target
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign3 `"+"'
          - local names `"`names' `1'"'
          = local names `" rep dgm target"'
          - local i=`i'+1
          = local i=3+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"method"'!="" & `"method"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"method"'=="-" | `"method"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev method
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign4 `"+"'
          - local names `"`names' `1'"'
          = local names `" rep dgm target method"'
          - local i=`i'+1
          = local i=4+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `""'!="" & `""'!="," {c -(}
            if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
            else local sign "+"
            unabbrev `1'
            if `noryet' & `"`sign'"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
            else {c -(}
            local noryet 0
            local sign`i' `"`sign'"'
            local names `"`names' `1'"'
            local i=`i'+1
            {c )-}
            mac shift
            {c )-}
          - if `"`part1'"'=="" & `"`names'"'=="" {c -(}
          = if `""'=="" & `" rep dgm target method"'=="" {c -(}
            di in red "varlist required"
            exit 100
            {c )-}
          - local options "Generate(string) Mfirst"
          - parse `"`*'"'
          = parse `""'
          - if `"`generat'"'!="" {c -(}
          = if `""'!="" {c -(}
            confirm new var `generat'
            {c )-}
          - parse `"`names'"', parse(" ")
          = parse `" rep dgm target method"', parse(" ")
          - local i 1
          - while `"``i''"'!="" {c -(}
          = while `"rep"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort rep
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000002 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by rep: replace __000002=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000002= 0 - sum(__000002)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type rep
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("float",1,3) != "str" {c -(}
          - if "`sign`i''" == "-" {c -(}
          = if "-" == "-" {c -(}
          - tempvar nn
          - qui gen long `nn' = .
          = qui gen long __000003 = .
          - qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
          = qui by rep: replace __000003 = 1 if _n==1 & rep>=.
          - qui sum `nn' if ``i''>=., meanonly
          = qui sum __000003 if rep>=., meanonly
          - local nsum = `r(sum)'
          = local nsum = 0
          - qui replace `nn' = sum(`nn') if ``i''>=.
          = qui replace __000003 = sum(__000003) if rep>=.
          - qui replace `n' = `nsum' - `nn' if ``i''>=.
          = qui replace __000002 = 0 - __000003 if rep>=.
          - {c )-}
          - else {c -(}
            qui replace `n'=``i'' if ``i''>=.
            {c )-}
          - {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000002"'
          - quietly compress `n'
          = quietly compress __000002
          - local i=`i'+1
          = local i=1+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"dgm"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort dgm
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000004 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by dgm: replace __000004=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000004= 0 + sum(__000004)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type dgm
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("float",1,3) != "str" {c -(}
          - if "`sign`i''" == "-" {c -(}
          = if "+" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
          - else {c -(}
          - qui replace `n'=``i'' if ``i''>=.
          = qui replace __000004=dgm if dgm>=.
          - {c )-}
          - {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000002 __000004"'
          - quietly compress `n'
          = quietly compress __000004
          - local i=`i'+1
          = local i=2+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"target"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort target
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000005 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by target: replace __000005=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000005= 0 + sum(__000005)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type target
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("str1",1,3) != "str" {c -(}
            if "`sign`i''" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
            else {c -(}
            qui replace `n'=``i'' if ``i''>=.
            {c )-}
            {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000002 __000004 __000005"'
          - quietly compress `n'
          = quietly compress __000005
          - local i=`i'+1
          = local i=3+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"method"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort method
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000006 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by method: replace __000006=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000006= 0 + sum(__000006)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type method
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("str1",1,3) != "str" {c -(}
            if "`sign`i''" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
            else {c -(}
            qui replace `n'=``i'' if ``i''>=.
            {c )-}
            {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000002 __000004 __000005 __000006"'
          - quietly compress `n'
          = quietly compress __000006
          - local i=`i'+1
          = local i=4+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `""'!="" {c -(}
            `vv' sort ``i''
            tempvar n
            quietly gen long `n' = .
            quietly by ``i'': replace `n'=1 if _n==1
            quietly replace `n'= 0 `sign`i'' sum(`n')
            if `"`mfirst'"' == "" {c -(}
            local typ : type ``i''
            if bsubstr("`typ'",1,3) != "str" {c -(}
            if "`sign`i''" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
            else {c -(}
            qui replace `n'=``i'' if ``i''>=.
            {c )-}
            {c )-}
            {c )-}
            local tvars `"`tvars' `n'"'
            quietly compress `n'
            local i=`i'+1
            {c )-}
          - `vv' sort `part1' `tvars'
          = version 15: sort   __000002 __000004 __000005 __000006
          - if `"`generat'"'!="" {c -(}
          = if `""'!="" {c -(}
            tempvar mark
            qui by `part1' `tvars': gen `c(obs_t)' `mark' = 1 if _n==1
            qui replace `mark' = sum(`mark')
            qui compress `mark'
            `vv' sort `mark'
            rename `mark' `generat'
            {c )-}
          - _return restore `myr'
          = _return restore __000001
          {hline 76} end gsort {hline}
        - else qui gsort -`rep' `dgm' `target'
        = else qui gsort -rep dgm target
        - qui append using `sortperf'
        = qui append using C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000005.tmp
          {hline 73} begin append {hline}
          - version 11
          - if (_caller() < 11) {c -(}
            local version : di "version " string(_caller()) ":"
            `version' _append `0'
            exit
            {c )-}
          - syntax [anything(everything)] [, GENerate(name) * ]
          - gettoken using filenames : anything
          - if (`"`using'"' != "using") {c -(}
          = if (`"using"' != "using") {c -(}
            di as err "using required"
            exit 100
            {c )-}
          - if (`"`filenames'"' == "") {c -(}
          = if (`" C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000005.tmp"' == "") {c -(}
            di as err "invalid file specification"
            exit 198
            {c )-}
          - foreach filename of local filenames {c -(}
          - capture quietly describe using `"`filename'"'
          = capture quietly describe using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000005.tmp"'
          - if (_rc) {c -(}
            di as err `"file `filename' not found"'
            exit 601
            {c )-}
          - {c )-}
          - if ("`generate'" != "") {c -(}
          = if ("" != "") {c -(}
            confirm new var `generate'
            local filenum 0
            gen byte `generate' = `filenum'
            local ++filenum
            local filenumpos = _N + 1
            {c )-}
          - foreach filename of local filenames {c -(}
          - capture noisily _append using `"`filename'"', `options'
          = capture noisily _append using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000005.tmp"', 
          - if _rc {c -(}
            if ("`generate'" != "") {c -(}
            capture quietly drop if `generate' > 0
            capture quietly drop `generate'
            {c )-}
            exit _rc
            {c )-}
          - if ("`generate'" != "") {c -(}
          = if ("" != "") {c -(}
            quietly replace `generate' = `filenum' in `filenumpos'/L
            local ++filenum
            local filenumpos = _N + 1
            {c )-}
          - {c )-}
          {hline 75} end append {hline}
        - {c )-}
        - if mi("`describe") siman_describe
        - {c )-}
        - {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist simananalyserun ifanalyse estchange sechange metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] ""
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist simananalyserun ifanalyse estchange sechange metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
      - foreach thing in `_dta[siman_allthings]' {c -(}
      = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist simananalyserun ifanalyse estchange sechange metlist {c -(}
      - local `thing' : char _dta[siman_`thing']
      = local allthings : char _dta[siman_allthings]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local rep : char _dta[siman_rep]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgm : char _dta[siman_dgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local target : char _dta[siman_target]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local method : char _dta[siman_method]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estimate : char _dta[siman_estimate]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local se : char _dta[siman_se]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local df : char _dta[siman_df]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ci : char _dta[siman_ci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local p : char _dta[siman_p]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local true : char _dta[siman_true]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local order : char _dta[siman_order]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local lci : char _dta[siman_lci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local uci : char _dta[siman_uci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifsetup : char _dta[siman_ifsetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local insetup : char _dta[siman_insetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local format : char _dta[siman_format]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetformat : char _dta[siman_targetformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodformat : char _dta[siman_methodformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nformat : char _dta[siman_nformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntarget : char _dta[siman_ntarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ndgm : char _dta[siman_ndgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nmethod : char _dta[siman_nmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numtarget : char _dta[siman_numtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valtarget : char _dta[siman_valtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nummethod : char _dta[siman_nummethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valmethod : char _dta[siman_valmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntrue : char _dta[siman_ntrue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruevalue : char _dta[siman_ntruevalue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmvar : char _dta[siman_dgmvar]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numdgm : char _dta[siman_numdgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmcreated : char _dta[siman_dgmcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetlabels : char _dta[siman_targetlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodcreated : char _dta[siman_methodcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodlabels : char _dta[siman_methodlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodvalues : char _dta[siman_methodvalues]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruestub : char _dta[siman_ntruestub]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local descriptiontype : char _dta[siman_descriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local cidescriptiontype : char _dta[siman_cidescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truedescriptiontype : char _dta[siman_truedescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estvars : char _dta[siman_estvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sevars : char _dta[siman_sevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dfvars : char _dta[siman_dfvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local civars : char _dta[siman_civars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local pvars : char _dta[siman_pvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truevars : char _dta[siman_truevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simansetuprun : char _dta[siman_simansetuprun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m1 : char _dta[siman_m1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m2 : char _dta[siman_m2]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local t1 : char _dta[siman_t1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local t2 : char _dta[siman_t2]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local metlist : char _dta[siman_metlist]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simananalyserun : char _dta[siman_simananalyserun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifanalyse : char _dta[siman_ifanalyse]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estchange : char _dta[siman_estchange]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sechange : char _dta[siman_sechange]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local metlist : char _dta[siman_metlist]
      - {c )-}
      - {c )-}
      - foreach val in `estvars' `sevars' {c -(}
      = foreach val in est se {c -(}
      - if strpos("`val'","_")!=0 {c -(}
      = if strpos("est","_")!=0 {c -(}
        if substr("`val'",strlen("`val'"),1)=="_" {c -(}
        local l = substr("`val'", 1,strlen("`val'","_") - 1)
        local `l'vars = "`l'"
        {c )-}
        {c )-}
      - {c )-}
      - if strpos("`val'","_")!=0 {c -(}
      = if strpos("se","_")!=0 {c -(}
        if substr("`val'",strlen("`val'"),1)=="_" {c -(}
        local l = substr("`val'", 1,strlen("`val'","_") - 1)
        local `l'vars = "`l'"
        {c )-}
        {c )-}
      - {c )-}
      - qui drop if `rep'>0
      = qui drop if rep>0
      - tempvar touse
      - marksample touse
      - if `dgmcreated' local dgm
      = if 0 local dgm
      - cap bysort `dgm' `method' `target' : assert `touse'==`touse'[1]
      = cap bysort dgm method target : assert __000002==__000002[1]
      - if _rc {c -(}
        di as error "'if' can only be used for dgm, method and target."
        exit 498
        {c )-}
      - if "`anything'"!="" {c -(}
      = if ""!="" {c -(}
        tempvar keep
        gen `keep' = 0
        foreach thing of local anything {c -(}
        qui count if _perfmeascode == "`thing'"
        if r(N)==0 di as error "Warning: performance measure not found: `thing'"
        qui replace `keep' = 1 if _perfmeascode == "`thing'"
        {c )-}
        qui keep if `keep'
        drop `keep'
        {c )-}
      - local perfvar = "bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power"
      - qui gen _perfmeascodeorder=.
      - local p = 0
      - foreach perf of local perfvar {c -(}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 0 if _perfmeascode == "bsims"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels  0 "bsims"
      - local p = `p' + 1
      = local p = 0 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 1 if _perfmeascode == "sesims"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims"
      - local p = `p' + 1
      = local p = 1 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 2 if _perfmeascode == "bias"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias"
      - local p = `p' + 1
      = local p = 2 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 3 if _perfmeascode == "mean"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean"
      - local p = `p' + 1
      = local p = 3 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 4 if _perfmeascode == "empse"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse"
      - local p = `p' + 1
      = local p = 4 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 5 if _perfmeascode == "relprec"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec"
      - local p = `p' + 1
      = local p = 5 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 6 if _perfmeascode == "mse"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse"
      - local p = `p' + 1
      = local p = 6 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 7 if _perfmeascode == "rmse"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse"
      - local p = `p' + 1
      = local p = 7 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 8 if _perfmeascode == "modelse"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse"
      - local p = `p' + 1
      = local p = 8 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 9 if _perfmeascode == "ciwidth"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth"
      - local p = `p' + 1
      = local p = 9 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 10 if _perfmeascode == "relerror"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth" 10 "relerror"
      - local p = `p' + 1
      = local p = 10 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 11 if _perfmeascode == "cover"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth" 10 "relerror" 11 "cover"
      - local p = `p' + 1
      = local p = 11 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 12 if _perfmeascode == "power"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth" 10 "relerror" 11 "cover" 12 "power"
      - local p = `p' + 1
      = local p = 12 + 1
      - {c )-}
      - label define perfl `perflabels'
      = label define perfl 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth" 10 "relerror" 11 "cover" 12 "power"
      - label values _perfmeascodeorder perfl
      - label variable _perfmeascodeorder "performance measure"
      - if "`sevars'" == "N/A" local sevars
      = if "se" == "N/A" local sevars
      - if `dgmcreated' local dgmvar
      = if 0 local dgmvar
      - foreach onedgmvar in `dgmvar' {c -(}
      = foreach onedgmvar in dgm {c -(}
      - summ `onedgmvar' `if', meanonly
      = summ dgm , meanonly
      - if r(min)<r(max) local newdgmvar `newdgmvar' `onedgmvar'
      = if r(min)<r(max) local newdgmvar  dgm
      - else if !mi("`debug'") di as error "Ignoring non-varying dgmvar: `onedgmvar'"
      = else if !mi("") di as error "Ignoring non-varying dgmvar: dgm"
      - {c )-}
      - local dgmvar `newdgmvar'
      = local dgmvar dgm
      - local myfactors _perfmeascodeorder `dgmvar' `target' `method'
      = local myfactors _perfmeascodeorder dgm target method
      - if !mi("`debug'") di as input "Factors to display: `myfactors'"
      = if !mi("") di as input "Factors to display: _perfmeascodeorder dgm target method"
      - tempvar group
      - foreach thing in dgmvar target method {c -(}
      - local n`thing'vars = wordcount("``thing''")
      = local ndgmvarvars = wordcount("dgm")
      - if !mi("`thing'") {c -(}
      = if !mi("dgmvar") {c -(}
      - egen `group' = group(``thing'')
      = egen __000003 = group(dgm)
      - qui levelsof `group'
      = qui levelsof __000003
      - local n`thing'levels = r(r)
      = local ndgmvarlevels = r(r)
      - {c )-}
      - else n`thing'levels = 1
      = else ndgmvarlevels = 1
      - if !mi("`debug'") di "`n`thing'levels' levels, `thing': `n`thing'vars' variables (``thing'')"
      = if !mi("") di "2 levels, dgmvar: 1 variables (dgm)"
      - drop `group'
      = drop __000003
      - {c )-}
      - local n`thing'vars = wordcount("``thing''")
      = local ntargetvars = wordcount("target")
      - if !mi("`thing'") {c -(}
      = if !mi("target") {c -(}
      - egen `group' = group(``thing'')
      = egen __000003 = group(target)
      - qui levelsof `group'
      = qui levelsof __000003
      - local n`thing'levels = r(r)
      = local ntargetlevels = r(r)
      - {c )-}
      - else n`thing'levels = 1
      = else ntargetlevels = 1
      - if !mi("`debug'") di "`n`thing'levels' levels, `thing': `n`thing'vars' variables (``thing'')"
      = if !mi("") di "2 levels, target: 1 variables (target)"
      - drop `group'
      = drop __000003
      - {c )-}
      - local n`thing'vars = wordcount("``thing''")
      = local nmethodvars = wordcount("method")
      - if !mi("`thing'") {c -(}
      = if !mi("method") {c -(}
      - egen `group' = group(``thing'')
      = egen __000003 = group(method)
      - qui levelsof `group'
      = qui levelsof __000003
      - local n`thing'levels = r(r)
      = local nmethodlevels = r(r)
      - {c )-}
      - else n`thing'levels = 1
      = else nmethodlevels = 1
      - if !mi("`debug'") di "`n`thing'levels' levels, `thing': `n`thing'vars' variables (``thing'')"
      = if !mi("") di "2 levels, method: 1 variables (method)"
      - drop `group'
      = drop __000003
      - {c )-}
      - if "`column'"=="" {c -(}
      = if ""=="" {c -(}
      - if `nmethodlevels'>1 local column `method'
      = if 2>1 local column method
      - else if `ntargetlevels'>1 local column `target'
      = else if 2>1 local column target
      - else local column : word 1 of `dgmvar'
      = else local column : word 1 of dgm
      - {c )-}
      - if !strpos("`column'","perfmeas") local row _perfmeascodeorder
      = if !strpos("method","perfmeas") local row _perfmeascodeorder
      - else di as error "siman table doesn't yet know how to format the table when perfmeas is in the columns"
      - local by : list myfactors - column
      - local by : list by - row
      - if wordcount("`by'")>4 {c -(}
      = if wordcount("dgm target")>4 {c -(}
        di as error "There are too many factors to display. Consider using an if condition for your dgmvars."
        {c )-}
      - local tablecommand tabdisp `row' `column' `if', by(`by') c(`estvars' `sevars') stubwidth(20)
      = local tablecommand tabdisp _perfmeascodeorder method , by(dgm target) c(est se) stubwidth(20)
      - if !mi("`debug'") {c -(}
      = if !mi("") {c -(}
        di "Table column: `column'"
        di "Table row: `row'"
        di "Table by: `by'"
        di "Table command: `tablecommand'"
        {c )-}
      - `tablecommand'
      = tabdisp _perfmeascodeorder method , by(dgm target) c(est se) stubwidth(20)

{hline 21}{c TT}{hline 21}
dgm, target and      {c |}        method       
performance measure  {c |}         A          B
{hline 21}{c +}{hline 21}
D1                   {c |}
1                    {c |}
               bsims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.0043991  -.0025973
                     {txt}{c |}  {res}.0024993   .0035644
                     {txt}{c |} 
                mean {c |} {res}-.0043991  -.0025973
                     {txt}{c |}  {res}.0024993   .0035644
                     {txt}{c |} 
               empse {c |}  {res}.0790336   .1127159
                     {txt}{c |}  {res}.0017681   .0025217
                     {txt}{c |} 
             relprec {c |}          {res}   -50.8353
                     {txt}{c |}          {res}    2.28676
                     {txt}{c |} 
                 mse {c |}  {res}.0062594   .0126989
                     {txt}{c |}  {res}.0002881   .0006187
                     {txt}{c |} 
                rmse {c |}  {res}.0791165   .1126895
                     {txt}{c |}  {res}.0018209   .0027454
                     {txt}{c |} 
             modelse {c |}  {res}.0787452   .1136343
                     {txt}{c |}  {res}.0001572   .0003405
                     {txt}{c |} 
             ciwidth {c |}  {res}.3080681   .4434751
                     {txt}{c |}  {res}.0006123   .0013217
                     {txt}{c |} 
            relerror {c |} {res}-.3649609   .8147949
                     {txt}{c |}  {res}2.237882   2.275551
                     {txt}{c |} 
               cover {c |}      {res}94.7       95.7
                     {txt}{c |}  {res}.7084563   .6414907
                     {txt}{c |} 
               power {c |}       {res}5.3        4.3
                     {txt}{c |}  {res}.7084561   .6414905
{txt}{hline 21}{c +}{hline 21}
D1                   {c |}
2                    {c |}
               bsims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}  {res}.0005151   .0056354
                     {txt}{c |}  {res}.0025476   .0035789
                     {txt}{c |} 
                mean {c |}  {res}.0005151   .0056354
                     {txt}{c |}  {res}.0025476   .0035789
                     {txt}{c |} 
               empse {c |}  {res}.0805615   .1131762
                     {txt}{c |}  {res}.0018023    .002532
                     {txt}{c |} 
             relprec {c |}          {res}  -49.33068
                     {txt}{c |}          {res}   2.314097
                     {txt}{c |} 
                 mse {c |}  {res}.0064839   .0128278
                     {txt}{c |}  {res}.0002847   .0005329
                     {txt}{c |} 
                rmse {c |}  {res}.0805229   .1132599
                     {txt}{c |}  {res}.0017676   .0023524
                     {txt}{c |} 
             modelse {c |}  {res}.0788425   .1140264
                     {txt}{c |}  {res}.0001466   .0003426
                     {txt}{c |} 
             ciwidth {c |}  {res}.3085282   .4450112
                     {txt}{c |}  {res}.0005716   .0013243
                     {txt}{c |} 
            relerror {c |} {res}-2.133844   .7512448
                     {txt}{c |}  {res}2.196998   2.274225
                     {txt}{c |} 
               cover {c |}      {res}94.5       96.4
                     {txt}{c |}  {res}.7209369   .5891009
                     {txt}{c |} 
               power {c |}       {res}5.5        3.6
                     {txt}{c |}  {res}.7209369    .589101
{txt}{hline 21}{c +}{hline 21}
D2                   {c |}
1                    {c |}
               bsims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.0046965  -.0058509
                     {txt}{c |}  {res}.0028908   .0039932
                     {txt}{c |} 
                mean {c |} {res}-.0046965  -.0058509
                     {txt}{c |}  {res}.0028908   .0039932
                     {txt}{c |} 
               empse {c |}  {res}.0914144   .1262755
                     {txt}{c |}  {res}.0020451    .002825
                     {txt}{c |} 
             relprec {c |}          {res}  -47.59274
                     {txt}{c |}          {res}   2.430245
                     {txt}{c |} 
                 mse {c |}  {res}.0083703   .0159638
                     {txt}{c |}  {res}.0003797   .0007445
                     {txt}{c |} 
                rmse {c |}  {res}.0914893   .1263479
                     {txt}{c |}  {res}.0020748   .0029462
                     {txt}{c |} 
             modelse {c |}  {res}.0910296   .1313619
                     {txt}{c |}  {res}.0001752   .0003826
                     {txt}{c |} 
             ciwidth {c |}   {res}.356176   .5127883
                     {txt}{c |}   {res}.000683   .0014841
                     {txt}{c |} 
            relerror {c |}  {res}-.420924   4.028049
                     {txt}{c |}  {res}2.236001   2.346937
                     {txt}{c |} 
               cover {c |}        {res}95       95.6
                     {txt}{c |}  {res}.6892024   .6485677
                     {txt}{c |} 
               power {c |}         {res}5        4.4
                     {txt}{c |}  {res}.6892024   .6485677
{txt}{hline 21}{c +}{hline 21}
D2                   {c |}
2                    {c |}
               bsims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}  {res}.0005948   .0065072
                     {txt}{c |}  {res}.0029417   .0041326
                     {txt}{c |} 
                mean {c |}  {res}.0005948   .0065072
                     {txt}{c |}  {res}.0029417   .0041326
                     {txt}{c |} 
               empse {c |}  {res}.0930244   .1306846
                     {txt}{c |}  {res}.0020811   .0029237
                     {txt}{c |} 
             relprec {c |}          {res}  -49.33068
                     {txt}{c |}          {res}   2.314097
                     {txt}{c |} 
                 mse {c |}  {res}.0086452   .0171037
                     {txt}{c |}  {res}.0003795   .0007105
                     {txt}{c |} 
                rmse {c |}  {res}.0929798   .1307813
                     {txt}{c |}   {res}.002041   .0027163
                     {txt}{c |} 
             modelse {c |}  {res}.0910394   .1316664
                     {txt}{c |}  {res}.0001693   .0003955
                     {txt}{c |} 
             ciwidth {c |}  {res}.3562577   .5138547
                     {txt}{c |}  {res}.0006601   .0015292
                     {txt}{c |} 
            relerror {c |} {res}-2.133846    .751246
                     {txt}{c |}  {res}2.196998   2.274225
                     {txt}{c |} 
               cover {c |}      {res}94.5       96.4
                     {txt}{c |}  {res}.7209369   .5891009
                     {txt}{c |} 
               power {c |}       {res}5.5        3.6
                     {txt}{c |}  {res}.7209369    .589101
{txt}{hline 21}{c BT}{hline 21}
      - cap assert missing(`sevars')
      = cap assert missing(se)
      - if _rc {c -(}
      - di "{c -(}it: NOTE: Where there are 2 entries in the table, {c )-}"
{it: NOTE: Where there are 2 entries in the table, }
      - di "{c -(}it: the first entry is the performance measure and {c )-}"
{it: the first entry is the performance measure and }
      - di "{c -(}it: the second entry is its Monte Carlo error.{c )-}"
{it: the second entry is its Monte Carlo error.}
      - {c )-}
      - restore
      {hline 74} end siman_table {hline}
    - if _rc {c -(}
      di as text "siman analyse has run successfully, but presenting the results using siman table has failed"
      exit _rc
      {c )-}
    - {c )-}

{com}. 
. siman lollyplot, xtitle("test x-title") ytitle("test y-title") name("lollyplot_test2", replace)
{txt}Performance measures not specified: defaulting to bias empse cover
        - set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    _true
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number _true
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 3==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
          else if `nformat'==1 & `nmethod'!=0 {c -(}
          if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
          if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
          if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
          if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
          if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
          if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
          if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
          else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
          local numberdgms: word count `dgm'
          if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
          qui tab `method'
          local nmethodlabels = `r(r)'
          qui levels `method', local(mlevels)
          qui tokenize `"`mlevels'"'
          cap quietly label drop `method'
          local labelchange = 0
          forvalues m = 1/`nmethodlabels' {c -(}
          if substr("``m''",strlen("``m''"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          else {c -(}
          local metlabel`m' = "``m''"
          if `m'==1 local metlist `metlabel`m''
          else if `m'>=2 local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          if `labelchange'==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
          local valmethod = "`metlist'"
          forvalues i=1/`nmethod' {c -(}
          local m`i' = "``i''"
          {c )-}
          local string = 0
          capture confirm numeric variable `method'
          if _rc local string = 1
          if `string' == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
          else if `string' == 1 & "`methodlabels'" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
          else if "`methodlabels'" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          forvalues i=1/`nummethod' {c -(}
          char _dta[siman_m`i'] `i'
          if `i'==1 local siman_method `i'
          else if `i'>=2 local siman_method `siman_method' `i'
          {c )-}
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          char _dta[siman_df] `df'
          char _dta[siman_ci] `ci'
          char _dta[siman_p] `p'
          char _dta[siman_true] `true'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`df'"!="" char _dta[siman_dfvars] `df'
          if "`ci'"!="" char _dta[siman_civars] `ci'
          if "`p'"!="" char _dta[siman_pvars] `p'
          if "`true'"!="" char _dta[siman_truevars] `true'
          char _dta[siman_method] "`siman_valmethod'"
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          else if `nformat'==1 & `nmethod'==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
          {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if "longlong"!="" {c -(}
        - if `nformat'==3 {c -(}
        = if 3==3 {c -(}
        - if `methodlabels' == 1 local valmethod "`metlist'"
        = if 0 == 1 local valmethod ""
        - qui tokenize "`valmethod'"
        = qui tokenize ""
        - if `nmethod'!=0 {c -(}
        = if 2!=0 {c -(}
        - forvalues v=1/`nummethod' {c -(}
        = forvalues v=1/2 {c -(}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("",strlen(""),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("",strlen(""),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - {c )-}
        - local string = 0
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/2 {c -(}
        - qui capture confirm number `m`i''
        = qui capture confirm number A
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - qui capture confirm number `m`i''
        = qui capture confirm number B
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - if "`estchange'" == "1" local estimateunderscore = "`estvars'"
        = if "0" == "1" local estimateunderscore = "est"
        - if "`sechange'" == "1" local seunderscore = "`sevars'"
        = if "0" == "1" local seunderscore = "se"
        - if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
        = if ("0" != "1" & "0" != "1") local optionlist est se   
        - if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
        = if ("0" == "1" & "0" != "1") local optionlist  se   
        - if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
        = if ("0" != "1" & "0" == "1") local optionlist est    
        - if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
        = if ("0" == "1" & "0" == "1") local optionlist     
        - local optionlistreshape `optionlist'
        = local optionlistreshape est se
        - local exclude "`true'"
        = local exclude "_true"
        - local optionlistreshape: list optionlistreshape - exclude
        - local methodname: char _dta[ReS_j]
        - if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
        = if mi("mcse") | "mcse" == "_j" | "mcse" == "mcse" local methodname "method"
        - if "`methodlables'" == "1" local methodreshape "`methodvalues'"
        = if "" == "1" local methodreshape ""
        - else local methodreshape "`valmethod'"
        = else local methodreshape ""
        - if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
        = if "variable" == "stub" | 0 == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
        - else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
        = else if "variable" == "variable" & 0 == 0 {c -(}
        - if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = if 1 == 0 & 1<=1 & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 1<=1 & 2!=0 {c -(}
        - qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
        = qui reshape long "est se", i(rep dgm target _true) j(method "") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "long"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "long"=="wide" | "long"=="long" {c -(}
          - DoNew `*'
          = DoNew long est se , i(rep dgm target _true) j(method  ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        = else if 1>1 & 1!=. & 2==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
        - else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 0 & 1>1 & 1!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 1>1 & 1!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
        - {c )-}
        - foreach u of var * {c -(}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("rep",strlen("rep"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("dgm",strlen("dgm"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("target",strlen("target"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("_true",strlen("_true"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("method",strlen("method"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("est",strlen("est"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("se",strlen("se"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("_perfmeascode",strlen("_perfmeascode"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("_dataset",strlen("_dataset"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - char _dta[siman_format] "format 1: long-long"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "long"
        - char _dta[siman_nformat] 1
        - if `nmethod'!=0 char _dta[siman_method] "`methodname'"
        = if 2!=0 char _dta[siman_method] "method"
        - if `nmethod'!=0 char _dta[siman_nmethod] 1
        = if 2!=0 char _dta[siman_nmethod] 1
        - char _dta[siman_descriptiontype] "variable"
        - char _dta[siman_truedescriptiontype] "variable"
        - char _dta[siman_cidescriptiontype] "variables"
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`simananalyserun'"=="1" {c -(}
        = if "1"=="1" {c -(}
        - preserve
        - qui tempfile sortperf
        - qui drop if `rep'<0
        = qui drop if rep<0
        - qui save `sortperf'
        = qui save C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000003.tmp
        - restore
        - qui drop if `rep'>0
        = qui drop if rep>0
        - if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
        = if 0!= 1 qui gsort -rep dgm target method
          {hline 74} begin gsort {hline}
          - if _caller() >= 12 {c -(}
          - local vv : di "version " string(_caller()) ":"
          - {c )-}
          - tempname myr
          - _return hold `myr'
          = _return hold __000000
          - version 6.0, missing
          - parse `"`*'"', parse(" +-,")
          = parse `"-rep dgm target method"', parse(" +-,")
          - local noryet 1
          - local i 1
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"-"'!="" & `"-"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"-"'=="-" | `"-"'=="+" {c -(}
          - local sign `"`1'"'
          = local sign `"-"'
          - mac shift
          - if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
          = if `"rep"'=="," | `"rep"'=="" {c -(} error 198 {c )-}
          - {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev rep
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 1 & `"-"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign1 `"-"'
          - local names `"`names' `1'"'
          = local names `" rep"'
          - local i=`i'+1
          = local i=1+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"dgm"'!="" & `"dgm"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"dgm"'=="-" | `"dgm"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev dgm
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign2 `"+"'
          - local names `"`names' `1'"'
          = local names `" rep dgm"'
          - local i=`i'+1
          = local i=2+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"target"'!="" & `"target"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"target"'=="-" | `"target"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev target
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign3 `"+"'
          - local names `"`names' `1'"'
          = local names `" rep dgm target"'
          - local i=`i'+1
          = local i=3+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"method"'!="" & `"method"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"method"'=="-" | `"method"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev method
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign4 `"+"'
          - local names `"`names' `1'"'
          = local names `" rep dgm target method"'
          - local i=`i'+1
          = local i=4+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `""'!="" & `""'!="," {c -(}
            if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
            else local sign "+"
            unabbrev `1'
            if `noryet' & `"`sign'"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
            else {c -(}
            local noryet 0
            local sign`i' `"`sign'"'
            local names `"`names' `1'"'
            local i=`i'+1
            {c )-}
            mac shift
            {c )-}
          - if `"`part1'"'=="" & `"`names'"'=="" {c -(}
          = if `""'=="" & `" rep dgm target method"'=="" {c -(}
            di in red "varlist required"
            exit 100
            {c )-}
          - local options "Generate(string) Mfirst"
          - parse `"`*'"'
          = parse `""'
          - if `"`generat'"'!="" {c -(}
          = if `""'!="" {c -(}
            confirm new var `generat'
            {c )-}
          - parse `"`names'"', parse(" ")
          = parse `" rep dgm target method"', parse(" ")
          - local i 1
          - while `"``i''"'!="" {c -(}
          = while `"rep"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort rep
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000001 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by rep: replace __000001=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000001= 0 - sum(__000001)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type rep
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("float",1,3) != "str" {c -(}
          - if "`sign`i''" == "-" {c -(}
          = if "-" == "-" {c -(}
          - tempvar nn
          - qui gen long `nn' = .
          = qui gen long __000002 = .
          - qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
          = qui by rep: replace __000002 = 1 if _n==1 & rep>=.
          - qui sum `nn' if ``i''>=., meanonly
          = qui sum __000002 if rep>=., meanonly
          - local nsum = `r(sum)'
          = local nsum = 0
          - qui replace `nn' = sum(`nn') if ``i''>=.
          = qui replace __000002 = sum(__000002) if rep>=.
          - qui replace `n' = `nsum' - `nn' if ``i''>=.
          = qui replace __000001 = 0 - __000002 if rep>=.
          - {c )-}
          - else {c -(}
            qui replace `n'=``i'' if ``i''>=.
            {c )-}
          - {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000001"'
          - quietly compress `n'
          = quietly compress __000001
          - local i=`i'+1
          = local i=1+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"dgm"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort dgm
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000003 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by dgm: replace __000003=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000003= 0 + sum(__000003)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type dgm
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("float",1,3) != "str" {c -(}
          - if "`sign`i''" == "-" {c -(}
          = if "+" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
          - else {c -(}
          - qui replace `n'=``i'' if ``i''>=.
          = qui replace __000003=dgm if dgm>=.
          - {c )-}
          - {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000001 __000003"'
          - quietly compress `n'
          = quietly compress __000003
          - local i=`i'+1
          = local i=2+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"target"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort target
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000004 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by target: replace __000004=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000004= 0 + sum(__000004)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type target
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("str1",1,3) != "str" {c -(}
            if "`sign`i''" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
            else {c -(}
            qui replace `n'=``i'' if ``i''>=.
            {c )-}
            {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000001 __000003 __000004"'
          - quietly compress `n'
          = quietly compress __000004
          - local i=`i'+1
          = local i=3+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"method"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort method
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000005 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by method: replace __000005=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000005= 0 + sum(__000005)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type method
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("str1",1,3) != "str" {c -(}
            if "`sign`i''" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
            else {c -(}
            qui replace `n'=``i'' if ``i''>=.
            {c )-}
            {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000001 __000003 __000004 __000005"'
          - quietly compress `n'
          = quietly compress __000005
          - local i=`i'+1
          = local i=4+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `""'!="" {c -(}
            `vv' sort ``i''
            tempvar n
            quietly gen long `n' = .
            quietly by ``i'': replace `n'=1 if _n==1
            quietly replace `n'= 0 `sign`i'' sum(`n')
            if `"`mfirst'"' == "" {c -(}
            local typ : type ``i''
            if bsubstr("`typ'",1,3) != "str" {c -(}
            if "`sign`i''" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
            else {c -(}
            qui replace `n'=``i'' if ``i''>=.
            {c )-}
            {c )-}
            {c )-}
            local tvars `"`tvars' `n'"'
            quietly compress `n'
            local i=`i'+1
            {c )-}
          - `vv' sort `part1' `tvars'
          = version 15: sort   __000001 __000003 __000004 __000005
          - if `"`generat'"'!="" {c -(}
          = if `""'!="" {c -(}
            tempvar mark
            qui by `part1' `tvars': gen `c(obs_t)' `mark' = 1 if _n==1
            qui replace `mark' = sum(`mark')
            qui compress `mark'
            `vv' sort `mark'
            rename `mark' `generat'
            {c )-}
          - _return restore `myr'
          = _return restore __000000
          {hline 76} end gsort {hline}
        - else qui gsort -`rep' `dgm' `target'
        = else qui gsort -rep dgm target
        - qui append using `sortperf'
        = qui append using C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000003.tmp
          {hline 73} begin append {hline}
          - version 11
          - if (_caller() < 11) {c -(}
            local version : di "version " string(_caller()) ":"
            `version' _append `0'
            exit
            {c )-}
          - syntax [anything(everything)] [, GENerate(name) * ]
          - gettoken using filenames : anything
          - if (`"`using'"' != "using") {c -(}
          = if (`"using"' != "using") {c -(}
            di as err "using required"
            exit 100
            {c )-}
          - if (`"`filenames'"' == "") {c -(}
          = if (`" C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000003.tmp"' == "") {c -(}
            di as err "invalid file specification"
            exit 198
            {c )-}
          - foreach filename of local filenames {c -(}
          - capture quietly describe using `"`filename'"'
          = capture quietly describe using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000003.tmp"'
          - if (_rc) {c -(}
            di as err `"file `filename' not found"'
            exit 601
            {c )-}
          - {c )-}
          - if ("`generate'" != "") {c -(}
          = if ("" != "") {c -(}
            confirm new var `generate'
            local filenum 0
            gen byte `generate' = `filenum'
            local ++filenum
            local filenumpos = _N + 1
            {c )-}
          - foreach filename of local filenames {c -(}
          - capture noisily _append using `"`filename'"', `options'
          = capture noisily _append using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000003.tmp"', 
          - if _rc {c -(}
            if ("`generate'" != "") {c -(}
            capture quietly drop if `generate' > 0
            capture quietly drop `generate'
            {c )-}
            exit _rc
            {c )-}
          - if ("`generate'" != "") {c -(}
          = if ("" != "") {c -(}
            quietly replace `generate' = `filenum' in `filenumpos'/L
            local ++filenum
            local filenumpos = _N + 1
            {c )-}
          - {c )-}
          {hline 75} end append {hline}
        - {c )-}
        - if mi("`describe") siman_describe
        - {c )-}
        - {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist simananalyserun ifanalyse estchange sechange metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] ""
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 t1 t2 metlist simananalyserun ifanalyse estchange sechange metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
{res}{txt}Drawing 2 graphs (one per target)...
{res}{txt}
{com}. 
.  
. * DGM string, 1 var
. ********************
. * target and method long numeric string labels, true missing
. use data/simlongESTPM_longE_longM.dta, clear
{txt}
{com}. encode estimand, gen(estimand_num)
{txt}
{com}. drop estimand
{txt}
{com}. rename estimand_num estimand
{res}{txt}
{com}. label define methodl 1 "A" 2 "B"
{txt}
{com}. label values method methodl
{txt}
{com}. gen dgm_str = ""
{txt}(8,000 missing values generated)

{com}. replace dgm_str = "1" if dgm == 1
{txt}(4,000 real changes made)

{com}. replace dgm_str = "2" if dgm == 2
{txt}(4,000 real changes made)

{com}. drop dgm true
{txt}
{com}. rename dgm_str dgm
{res}{txt}
{com}. 
. siman setup, rep(rep) dgm(dgm) target(estimand) method(method) estimate(est) se(se) 
{res}  {txt}variable {bf}dgm{sf} was {bf}{res}long{sf}{txt} now {bf}{res}byte{sf}
{txt}  (24,000 bytes saved)
{err}Warning: variable dgm, which appears in dgm(), was stored as a string. It has been
encoded as numeric so that subsequent siman commands will work. If you require a
different order, encode dgm as numeric before running -siman setup-.

{txt}{col 20}SUMMARY OF DATA
_____________________________________________________

The siman format is:{res}{col 35}format 1: long-long
{txt}The format for targets is:{res}{col 35}long
{txt}The format for methods is:{res}{col 35}long
{txt}The number of targets is:{res}{col 35}2
{txt}The target values are:{res}{col 35}beta gamma

{txt}The number of methods is:{res}{col 35}2
{txt}The method values are:{res}{col 35}A B

Data generating mechanism (dgm)
{txt}The total number of dgms is: {res}{col 35}2
{txt}The dgm variables (# levels): {res}{col 35}dgm (2) 

Estimates are contained in the dataset

{txt}The estimates variable is:{res}{col 35}est
{txt}The se variable is:{res}{col 35}se
{txt}The df variable is:{res}{col 35}N/A
{txt}The ci variables are:{res}{col 35}N/A
{txt}The p variable is:{res}{col 35}N/A
{txt}The true variable is:{res}{col 35}N/A
{txt}_____________________________________________________

{com}. * graphs
. siman scatter, ytitle("test y-title") xtitle("test x-title") name("scatter_test3", replace) 
{txt}working.....
{res}{txt}
{com}. 
. siman swarm, graphoptions(ytitle("test y-title") xtitle("test x-title") name("swarm_test3", replace)) 
{txt}working.....

{com}. 
. cap siman zipplot, scheme(scheme(s2color)) legend(order(3 "Carrot" 4 "Stalk")) xtit("x-title") ytit("y-title") ylab(0 40 100) noncoveroptions(pstyle(p3)) ///
> coveroptions(pstyle(p4)) scatteroptions(mcol(gray%50)) truegraphoptions(pstyle(p6)) name("zipplot_test3", replace)
{txt}
{com}. assert _rc == 498
{txt}
{com}. * siman zipplot can not be run w/o true value as required
. 
. siman comparemethodsscatter, title("testtitle") subgr(xtit("testaxis")) name("cms_test3", replace) 
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number 
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "1" == "1" & 1==1 {c -(}
        - qui cap labelsof `method'
        = qui cap labelsof method
          {hline 71} begin labelsof {hline}
          - version 8
          - syntax name [, Label ]
          - if "`label'"=="" {c -(}
          = if ""=="" {c -(}
          - local labdef: value label `namelist'
          = local labdef: value label method
          - if `"`labdef'"'=="" {c -(}
          = if `"methodl"'=="" {c -(}
            exit
            {c )-}
          - {c )-}
          - else local labdef "`namelist'"
          = else local labdef "method"
          - tempfile fn
          - qui label save `labdef' using `"`fn'"'
          = qui label save methodl using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000004.tmp"'
          - tempname fh
          - file open `fh' using `"`fn'"', read
          = file open __000002 using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000004.tmp"', read
          - file read `fh' line
          = file read __000002 line
          - local values
          - local labels
          - local space
          - if "`label'"=="" di as txt _n "`namelist' ({c -(}res{c )-}`labdef'{c -(}txt{c )-}):" _n
          = if ""=="" di as txt _n "method ({c -(}res{c )-}methodl{c -(}txt{c )-}):" _n
          - else di as txt _n "`labdef':"
          = else di as txt _n "methodl:"
          - while r(eof)==0 {c -(}
          - gettoken value line : line
          - gettoken value line : line
          - gettoken value line : line
          - gettoken value line : line
          - gettoken label line : line, parse(", ") match(paren)
          - local values "`values'`space'`value'"
          = local values "1"
          - local labels `"`labels'`space'`"`label'"'"'
          = local labels `"`"A"'"'
          - di as res %12s "`value'" " " `"`label'"'
          = di as res %12s "1" " " `"A"'
          - file read `fh' line
          = file read __000002 line
          - local space " "
          - {c )-}
          - while r(eof)==0 {c -(}
          - gettoken value line : line
          - gettoken value line : line
          - gettoken value line : line
          - gettoken value line : line
          - gettoken label line : line, parse(", ") match(paren)
          - local values "`values'`space'`value'"
          = local values "1 2"
          - local labels `"`labels'`space'`"`label'"'"'
          = local labels `"`"A"' `"B"'"'
          - di as res %12s "`value'" " " `"`label'"'
          = di as res %12s "2" " " `"B"'
          - file read `fh' line
          = file read __000002 line
          - local space " "
          - {c )-}
          - while r(eof)==0 {c -(}
            gettoken value line : line
            gettoken value line : line
            gettoken value line : line
            gettoken value line : line
            gettoken label line : line, parse(", ") match(paren)
            local values "`values'`space'`value'"
            local labels `"`labels'`space'`"`label'"'"'
            di as res %12s "`value'" " " `"`label'"'
            file read `fh' line
            local space " "
            {c )-}
          - file close `fh'
          = file close __000002
          - ret local labels `"`labels'"'
          = ret local labels `"`"A"' `"B"'"'
          - ret local values "`values'"
          = ret local values "1 2"
          - ret local name "`labdef'"
          = ret local name "methodl"
          {hline 73} end labelsof {hline}
        - if !_rc local methodvalues `r(values)'
        = if !_rc local methodvalues 1 2
        - else qui cap levelsof `method'
        = else qui cap levelsof method
        - if !_rc local methodvalues `r(levels)'
        = if !_rc local methodvalues 
        - {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("est",strlen("est"),1)=="_" local estimate = substr("est", 1, index("est","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("",strlen(""),1)=="_" local true = substr("", 1, index("","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    
        - local numberdgms: word count `dgm'
        = local numberdgms: word count dgm
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 1!=1 local optionlist est se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 2
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 1 {c -(}
          - capture assert `varlist' == int(`varlist') if `touse'
          = capture assert method == int(method) if __000003
          - if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
          - tempname Vals
          - qui tab `varlist' if `touse', `missing' matrow(`Vals')
          = qui tab method if __000003,  matrow(__000004)
          - local nvals = r(r)
          - forval i = 1 / `nvals' {c -(}
          = forval i = 1 / 2 {c -(}
          - local val = `Vals'[`i',1]
          = local val = __000004[1,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 1 < 2 local vals "1 "
          - else local vals "`vals'`val'"
          = else local vals "1 1"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[2,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 2 < 2 local vals "1 2 "
          - else local vals "`vals'`val'"
          = else local vals "1 2"
          - {c )-}
          - {c )-}
          - else {c -(}
            tempvar select counter
            bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
            generate `counter' = sum(`select') * (`select' == 1)
            sort `counter'
            qui count if `counter' == 0
            local j = 1 + r(N)
            local nvals = _N
            if "`clean'" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
            else {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
            else local vals `"`vals'`"`=`varlist'[`i']'"'"'
            {c )-}
            {c )-}
            {c )-}
          - di as txt `"`vals'"'
          = di as txt `"1 2"'
          - return local levels `"`vals'"'
          = return local levels `"1 2"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"1 2"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"1 2"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/2 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("1",strlen("1"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "1"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist 1
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist 1 1
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("2",strlen("2"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "2"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist 2
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist 1 2
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "1 2"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "1"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 0 == 0 {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        = qui reshape wide "est se", i(rep dgm "estimand") j(method "1 2")
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide est se , i(rep dgm estimand ) j(method 1 2 )
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 0 == 1 & "1" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "1" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/2 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] 
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if ""!="" char _dta[siman_truevars] 
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "single"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "single"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "1 2"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
Working.....
{res}{txt}
{com}. 
. siman blandaltman, ytitle("test y-title") xtitle("test x-title") name("ba_test3", replace) 
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number 
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "1" == "1" & 1==1 {c -(}
        - qui cap labelsof `method'
        = qui cap labelsof method
          {hline 71} begin labelsof {hline}
          - version 8
          - syntax name [, Label ]
          - if "`label'"=="" {c -(}
          = if ""=="" {c -(}
          - local labdef: value label `namelist'
          = local labdef: value label method
          - if `"`labdef'"'=="" {c -(}
          = if `"methodl"'=="" {c -(}
            exit
            {c )-}
          - {c )-}
          - else local labdef "`namelist'"
          = else local labdef "method"
          - tempfile fn
          - qui label save `labdef' using `"`fn'"'
          = qui label save methodl using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000004.tmp"'
          - tempname fh
          - file open `fh' using `"`fn'"', read
          = file open __000002 using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000004.tmp"', read
          - file read `fh' line
          = file read __000002 line
          - local values
          - local labels
          - local space
          - if "`label'"=="" di as txt _n "`namelist' ({c -(}res{c )-}`labdef'{c -(}txt{c )-}):" _n
          = if ""=="" di as txt _n "method ({c -(}res{c )-}methodl{c -(}txt{c )-}):" _n
          - else di as txt _n "`labdef':"
          = else di as txt _n "methodl:"
          - while r(eof)==0 {c -(}
          - gettoken value line : line
          - gettoken value line : line
          - gettoken value line : line
          - gettoken value line : line
          - gettoken label line : line, parse(", ") match(paren)
          - local values "`values'`space'`value'"
          = local values "1"
          - local labels `"`labels'`space'`"`label'"'"'
          = local labels `"`"A"'"'
          - di as res %12s "`value'" " " `"`label'"'
          = di as res %12s "1" " " `"A"'
          - file read `fh' line
          = file read __000002 line
          - local space " "
          - {c )-}
          - while r(eof)==0 {c -(}
          - gettoken value line : line
          - gettoken value line : line
          - gettoken value line : line
          - gettoken value line : line
          - gettoken label line : line, parse(", ") match(paren)
          - local values "`values'`space'`value'"
          = local values "1 2"
          - local labels `"`labels'`space'`"`label'"'"'
          = local labels `"`"A"' `"B"'"'
          - di as res %12s "`value'" " " `"`label'"'
          = di as res %12s "2" " " `"B"'
          - file read `fh' line
          = file read __000002 line
          - local space " "
          - {c )-}
          - while r(eof)==0 {c -(}
            gettoken value line : line
            gettoken value line : line
            gettoken value line : line
            gettoken value line : line
            gettoken label line : line, parse(", ") match(paren)
            local values "`values'`space'`value'"
            local labels `"`labels'`space'`"`label'"'"'
            di as res %12s "`value'" " " `"`label'"'
            file read `fh' line
            local space " "
            {c )-}
          - file close `fh'
          = file close __000002
          - ret local labels `"`labels'"'
          = ret local labels `"`"A"' `"B"'"'
          - ret local values "`values'"
          = ret local values "1 2"
          - ret local name "`labdef'"
          = ret local name "methodl"
          {hline 73} end labelsof {hline}
        - if !_rc local methodvalues `r(values)'
        = if !_rc local methodvalues 1 2
        - else qui cap levelsof `method'
        = else qui cap levelsof method
        - if !_rc local methodvalues `r(levels)'
        = if !_rc local methodvalues 
        - {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("est",strlen("est"),1)=="_" local estimate = substr("est", 1, index("est","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("",strlen(""),1)=="_" local true = substr("", 1, index("","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    
        - local numberdgms: word count `dgm'
        = local numberdgms: word count dgm
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 1!=1 local optionlist est se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 2
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 1 {c -(}
          - capture assert `varlist' == int(`varlist') if `touse'
          = capture assert method == int(method) if __000003
          - if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
          - tempname Vals
          - qui tab `varlist' if `touse', `missing' matrow(`Vals')
          = qui tab method if __000003,  matrow(__000004)
          - local nvals = r(r)
          - forval i = 1 / `nvals' {c -(}
          = forval i = 1 / 2 {c -(}
          - local val = `Vals'[`i',1]
          = local val = __000004[1,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 1 < 2 local vals "1 "
          - else local vals "`vals'`val'"
          = else local vals "1 1"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[2,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 2 < 2 local vals "1 2 "
          - else local vals "`vals'`val'"
          = else local vals "1 2"
          - {c )-}
          - {c )-}
          - else {c -(}
            tempvar select counter
            bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
            generate `counter' = sum(`select') * (`select' == 1)
            sort `counter'
            qui count if `counter' == 0
            local j = 1 + r(N)
            local nvals = _N
            if "`clean'" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
            else {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
            else local vals `"`vals'`"`=`varlist'[`i']'"'"'
            {c )-}
            {c )-}
            {c )-}
          - di as txt `"`vals'"'
          = di as txt `"1 2"'
          - return local levels `"`vals'"'
          = return local levels `"1 2"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"1 2"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"1 2"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/2 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("1",strlen("1"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "1"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist 1
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist 1 1
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("2",strlen("2"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "2"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist 2
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist 1 2
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "1 2"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "1"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 0 == 0 {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        = qui reshape wide "est se", i(rep dgm "estimand") j(method "1 2")
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide est se , i(rep dgm estimand ) j(method 1 2 )
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 0 == 1 & "1" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "1" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/2 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] 
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if ""!="" char _dta[siman_truevars] 
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "single"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "single"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "1 2"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
working....
{res}{txt}
{com}. 
. siman analyse
    {txt}- set tracedepth 1
    - if "`method'"=="" {c -(}
    = if "method"=="" {c -(}
      di as error "The variable 'method' is missing so siman analyse can not be run.  Please create a variable in your dataset called method containing the method value(s)."
      exit 498
      {c )-}
    - if "`simananalyserun'"=="1" & "`replace'" == "" {c -(}
    = if ""=="1" & "" == "" {c -(}
      di as error "There are already performance measures in the dataset.  If you would like to replace these, please use the 'replace' option"
      exit 498
      {c )-}
    - if mi("`estimate'") | mi("`se'") {c -(}
    = if mi("est") | mi("se") {c -(}
      di as error "siman analyse requires est() and se() to be specified in set-up"
      exit 498
      {c )-}
    - local estimatesindi = (`rep'[_N]>0)
    = local estimatesindi = (rep[_N]>0)
    - if "`simananalyserun'"=="1" & "`replace'" == "replace" & `estimatesindi'==1 {c -(}
    = if ""=="1" & "" == "replace" & 1==1 {c -(}
      qui drop if `rep'<0
      qui drop _perfmeascode
      qui drop _dataset
      {c )-}
    - else if "`simananalyserun'"=="1" & "`replace'" == "replace" & `estimatesindi'==0 {c -(}
    = else if ""=="1" & "" == "replace" & 1==0 {c -(}
      di as error "There are no estimates data in the data set.  Please re-load data and use siman setup to import data."
      exit 498
      {c )-}
    - local simananalyserun = 0
    - if "`simansetuprun'"=="0" | "`simansetuprun'"=="" {c -(}
    = if "1"=="0" | "1"=="" {c -(}
      di as error "siman setup has not been run.  Please use siman setup first before siman analyse."
      exit 498
      {c )-}
    - cap confirm variable `true'
    = cap confirm variable 
    - if _rc==0 {c -(}
      local extratrue : list true - dgm
      if !mi("`extratrue'") local truevariable `true'
      {c )-}
    - if ("`if'"=="" & "`ifsetup'"!="") local ifanalyse = `"`ifsetup'"'
    = if (""=="" & ""!="") local ifanalyse = `""'
    - else local ifanalyse = `"`if'"'
    = else local ifanalyse = `""'
    - qui tempvar touse
    - qui generate `touse' = 0
    = qui generate __000000 = 0
    - qui replace `touse' = 1 `ifanalyse'
    = qui replace __000000 = 1 
    - preserve
    - if `nformat'!=1 {c -(}
    = if 1!=1 {c -(}
      qui siman_reshape, longlong
      if `methodcreated' == 0 local method method
      else local method `method'
      {c )-}
    - qui sort `dgm' `target' `method' `touse'
    = qui sort dgm estimand method __000000
    - capture by `dgm' `target' `method': assert `touse'==`touse'[_n-1] if _n>1
    = capture by dgm estimand method: assert __000000==__000000[_n-1] if _n>1
    - if _rc == 9 {c -(}
      di as error "The 'if' option can not be applied to 'rep' in siman analyse."
      exit 498
      {c )-}
    - restore
    - qui keep if `touse'
    = qui keep if __000000
    - qui unab allnames : *
      {hline 79} begin unab {hline}
      - version 6
      - gettoken user 0: 0, parse(" :")
      - gettoken colon 0: 0, parse(" :")
      - if `"`colon'"' != ":" {c -(} error 198 {c )-}
      = if `":"' != ":" {c -(} error 198 {c )-}
      - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000) NAME(string)]
      - c_local `user' `varlist'
      = c_local allnames rep method est se estimand dgm __000000
      - local n : word count `varlist'
      = local n : word count rep method est se estimand dgm __000000
      - if `n'>=`min' & `n'<=`max' {c -(} exit {c )-}
      = if 7>=1 & 7<=120000 {c -(} exit {c )-}
      {hline 81} end unab {hline}
    - tempfile estimatesdata
    - qui save `estimatesdata'
    = qui save C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp
    - qui drop if `rep'<0
    = qui drop if rep<0
    - local methodstringindi = 0
    - capture confirm string variable `method'
    = capture confirm string variable method
    - if !_rc local methodstringindi = 1
    - local optionlist `estimate' `se'
    = local optionlist est se
    - foreach u of var * {c -(}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("rep",strlen("rep"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("method",strlen("method"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("est",strlen("est"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("se",strlen("se"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("estimand",strlen("estimand"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("dgm",strlen("dgm"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("__000000",strlen("__000000"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - local estchange = 0
    - if substr("`estimate'",strlen("`estimate'"),1)=="_" {c -(}
    = if substr("est",strlen("est"),1)=="_" {c -(}
      local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
      local estchange = 1
      {c )-}
    - local sechange = 0
    - if substr("`se'",strlen("`se'"),1)=="_" {c -(}
    = if substr("se",strlen("se"),1)=="_" {c -(}
      local se = substr("`se'", 1, index("`se'","_") - 1)
      local sechange = 1
      {c )-}
    - local optionlist `estimate' `se'
    = local optionlist est se
    - if `nformat'==1 {c -(}
    = if 1==1 {c -(}
    - local methodformat : value label `method'
    = local methodformat : value label method
    - qui order `rep' `dgm' `target' `method'
    = qui order rep dgm estimand method
      {hline 78} begin order {hline}
      - version 11
      - if (_caller()<11) {c -(}
        _order `macval(0)'
        exit
        {c )-}
      - syntax varlist[, Before(varname) After(varname) first last SEQuential ALPHAbetic]
      - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'" == "" & "`alphabetic'" == "" & "`sequential'" == "") {c -(}
      = if (`""' == "" & `""' == "" & "" == "" & "" == "" & "" == "" & "" == "") {c -(}
      - _order `macval(0)'
      = _order rep dgm estimand method
      - exit
      {hline 80} end order {hline}
    - qui sort `rep' `dgm' `target' `method'
    = qui sort rep dgm estimand method
    - qui tab `method'
    = qui tab method
    - local nmethodlabels = `r(r)'
    = local nmethodlabels = 2
    - qui levels `method', local(levels)
    = qui levels method, local(levels)
      {hline 77} begin levels {hline}
      - version 8
      - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
      - if "`separate'" == "" local sep " "
      = if "" == "" local sep " "
      - else local sep "`separate'"
      = else local sep ""
      - if "`missing'" != "" local novarlist "novarlist"
      = if "" != "" local novarlist "novarlist"
      - marksample touse, strok `novarlist'
      = marksample touse, strok 
      - capture confirm numeric variable `varlist'
      = capture confirm numeric variable method
      - local isnum = _rc != 7
      - if `isnum' {c -(}
      = if 1 {c -(}
      - capture assert `varlist' == int(`varlist') if `touse'
      = capture assert method == int(method) if __000002
      - if _rc {c -(}
        di as err "`varlist' contains non-integer values"
        exit 459
        {c )-}
      - tempname Vals
      - qui tab `varlist' if `touse', `missing' matrow(`Vals')
      = qui tab method if __000002,  matrow(__000003)
      - local nvals = r(r)
      - forval i = 1 / `nvals' {c -(}
      = forval i = 1 / 2 {c -(}
      - local val = `Vals'[`i',1]
      = local val = __000003[1,1]
      - if `i' < `nvals' local vals "`vals'`val'`sep'"
      = if 1 < 2 local vals "1 "
      - else local vals "`vals'`val'"
      = else local vals "1 1"
      - {c )-}
      - local val = `Vals'[`i',1]
      = local val = __000003[2,1]
      - if `i' < `nvals' local vals "`vals'`val'`sep'"
      = if 2 < 2 local vals "1 2 "
      - else local vals "`vals'`val'"
      = else local vals "1 2"
      - {c )-}
      - {c )-}
      - else {c -(}
        tempvar select counter
        bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
        generate `counter' = sum(`select') * (`select' == 1)
        sort `counter'
        qui count if `counter' == 0
        local j = 1 + r(N)
        local nvals = _N
        if "`clean'" != "" {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals "`vals'`=`varlist'[`i']'`sep'"
        {c )-}
        else local vals "`vals'`=`varlist'[`i']'"
        {c )-}
        {c )-}
        else {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
        {c )-}
        else local vals `"`vals'`"`=`varlist'[`i']'"'"'
        {c )-}
        {c )-}
        {c )-}
      - di as txt `"`vals'"'
      = di as txt `"1 2"'
      - return local levels `"`vals'"'
      = return local levels `"1 2"'
      - if "`local'" != "" {c -(}
      = if "levels" != "" {c -(}
      - c_local `local' `"`vals'"'
      = c_local levels `"1 2"'
      - {c )-}
      {hline 79} end levels {hline}
    - tokenize `"`levels'"'
    = tokenize `"1 2"'
    - forvalues f = 1/`nmethodlabels' {c -(}
    = forvalues f = 1/2 {c -(}
    - if substr("``f''",strlen("``f''"),1)=="_" local g = substr("``f''", 1, index("``f''","_") - 1)
    = if substr("1",strlen("1"),1)=="_" local g = substr("1", 1, index("1","_") - 1)
    - if `methodstringindi' == 0 & `methodlabels'!=1 local methodlabel`f' = "`g'"
    = if 0 == 0 & 1!=1 local methodlabel1 = ""
    - else local methodlabel`f' = "``g''"
    = else local methodlabel1 = ""
    - if `f'==1 local methodlist `methodlabel`f''
    = if 1==1 local methodlist 
    - else if `f'>=2 local methodlist `methodlist' `methodlabel`f''
    = else if 1>=2 local methodlist  
    - {c )-}
    - if substr("``f''",strlen("``f''"),1)=="_" local g = substr("``f''", 1, index("``f''","_") - 1)
    = if substr("2",strlen("2"),1)=="_" local g = substr("2", 1, index("2","_") - 1)
    - if `methodstringindi' == 0 & `methodlabels'!=1 local methodlabel`f' = "`g'"
    = if 0 == 0 & 1!=1 local methodlabel2 = ""
    - else local methodlabel`f' = "``g''"
    = else local methodlabel2 = ""
    - if `f'==1 local methodlist `methodlabel`f''
    = if 2==1 local methodlist 
    - else if `f'>=2 local methodlist `methodlist' `methodlabel`f''
    = else if 2>=2 local methodlist  
    - {c )-}
    - local estsimsum = "`estimate'"
    = local estsimsum = "est"
    - local sesimsum = "`se'"
    = local sesimsum = "se"
    - capture confirm variable _perfmeascode
    - if !_rc {c -(}
      di as error "siman would like to name a variable '_perfmeascode', but that name already exists in your dataset.  Please rename your variable _perfmeascode as something else."
      exit 498
      {c )-}
    - capture confirm variable _dataset
    - if !_rc {c -(}
      di as error "siman would like to name a variable '_dataset', but that name already exists in your data.  Please rename your variable _dataset as something else."
      exit 498
      {c )-}
    - qui simsum `estsimsum' `if', true(`true') se(`sesimsum') method(`method') id(`rep') by(`truevariable' `dgm' `target') max(20) `anything' clear mcse gen(_perfmeas) `force'
    = qui simsum est , true() se(se) method(method) id(rep) by( dgm estimand) max(20)  clear mcse gen(_perfmeas) 
      {hline 77} begin simsum {hline}
      - version 10
      - if _caller() >= 12 {c -(}
      - local hidden hidden
      - {c )-}
      - return `hidden' local simsum_version "2.0.3"
      = return hidden local simsum_version "2.0.3"
      - syntax varlist [if] [in], [true(string) METHodvar(varname) id(varlist) se(varlist) SEPrefix(string) SESuffix(string) graph GRAPH2(string) noMEMcheck max(real 10) semax(real 100) dropbig nolistbig listmiss level(real $S_level) by(varlist) mcse robust MODELSEMethod(string) ref(string) null(real 0) df(string) DFPrefix(string) DFSuffix(string) bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power force nolist listsep format(string) sepby(varlist) ABbreviate(passthru) clear saving(string) gen(string) TRANSpose debug ]
      = syntax varlist [if] [in], [true(string) METHodvar(varname) id(varlist) se(varlist) SEPrefix(string) SESuffix(string) graph GRAPH2(string) noMEMcheck max(real 10) semax(real 100) dropbig nolistbig listmiss level(real 95) by(varlist) mcse robust MODELSEMethod(string) ref(string) null(real 0) df(string) DFPrefix(string) DFSuffix(string) bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power force nolist listsep format(string) sepby(varlist) ABbreviate(passthru) clear saving(string) gen(string) TRANSpose debug ]
      - if "`modelsemethod'"=="" local modelsemethod rmse
      = if ""=="" local modelsemethod rmse
      - if "`modelsemethod'"!="rmse" & "`modelsemethod'"!="mean" {c -(}
      = if "rmse"!="rmse" & "rmse"!="mean" {c -(}
        di as error "Syntax: modelsemethod(rmse|mean)"
        exit 498
        {c )-}
      - if !mi("`graph2'") local graph graph
      = if !mi("") local graph graph
      - if "`by'"!="" {c -(}
      = if "dgm estimand"!="" {c -(}
      - local byby by(`by')
      = local byby by(dgm estimand)
      - local byvar `by'
      = local byvar dgm estimand
      - {c )-}
      - else {c -(}
        tempvar byvar
        gen `byvar'=0
        {c )-}
      - local i 0
      - foreach beta of varlist `varlist' {c -(}
      = foreach beta of varlist est {c -(}
      - local ++i
      - local beta`i' `beta'
      = local beta1 est
      - local betalist `betalist' `beta'
      = local betalist  est
      - {c )-}
      - local m `i'
      = local m 1
      - if "`seprefix'"!="" | "`sesuffix'"!="" {c -(}
      = if ""!="" | ""!="" {c -(}
        if "`se'"!="" {c -(}
        di as error "Can't specify se() with seprefix() or sesuffix()"
        exit 498
        {c )-}
        forvalues i=1/`m' {c -(}
        local se`i' `seprefix'`beta`i''`sesuffix'
        confirm var `se`i''
        local selist `selist' `se`i''
        {c )-}
        {c )-}
      - else if "`se'"!="" {c -(}
      = else if "se"!="" {c -(}
      - local i 0
      - foreach sevar of varlist `se' {c -(}
      = foreach sevar of varlist se {c -(}
      - local ++i
      - local se`i' `sevar'
      = local se1 se
      - local selist `selist' `se`i''
      = local selist  se
      - {c )-}
      - if `i'<`m' {c -(}
      = if 1<1 {c -(}
        di as error "Fewer variables in se(`se') than in `betalist'"
        exit 498
        {c )-}
      - if `i'>`m' {c -(}
      = if 1>1 {c -(}
        di as error "More variables in se(`se') than in `betalist'"
        exit 498
        {c )-}
      - {c )-}
      - if "`dfprefix'"!="" | "`dfsuffix'"!="" {c -(}
      = if ""!="" | ""!="" {c -(}
        if "`df'"!="" {c -(}
        di as error "Can't specify df() with dfprefix() or dfsuffix()"
        exit 498
        {c )-}
        forvalues i=1/`m' {c -(}
        local df`i' `dfprefix'`beta`i''`dfsuffix'
        confirm var `df`i''
        local dflist `dflist' `df`i''
        {c )-}
        {c )-}
      - else if "`df'"!="" {c -(}
      = else if ""!="" {c -(}
        cap confirm number `df'
        if !_rc local dftype number
        else {c -(}
        cap assert `df'==`df'
        if !_rc local dftype varname
        else {c -(}
        cap confirm var `df'
        if !_rc local dftype varlist
        else local dftype error
        {c )-}
        {c )-}
        if inlist("`dftype'","number","varname") {c -(}
        forvalues i=1/`m' {c -(}
        local df`i' `df'
        {c )-}
        if "`dftype'"=="varname" local dflist `df'
        cap assert !mi(`df')
        if _rc di as error "Warning: missing values in df()"
        {c )-}
        else if "`dftype'"=="varlist" {c -(}
        local i 0
        foreach dfvar of varlist `df' {c -(}
        local ++i
        local df`i' `dfvar'
        local dflist `dflist' `dfvar'
        cap assert !mi(`df`i'')
        if _rc di as error "Warning: missing values in df()"
        {c )-}
        if `i'!=`m' local dftype error
        {c )-}
        if "`dftype'"=="error" {c -(}
        di as error "df must contain number, string or varlist of same length as estimates"
        exit 498
        {c )-}
        {c )-}
      - local allpms bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power
      - foreach pm of local allpms {c -(}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  bsims
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  sesims
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  bias
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  mean
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  empse
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  relprec
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  mse
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  rmse
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  modelse
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  ciwidth
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  relerror
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  cover
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  power
      - {c )-}
      - if mi("`origoutput'") {c -(}
      = if mi("") {c -(}
      - foreach pm of local allpms {c -(}
      - local `pm' `pm'
      = local bsims bsims
      - {c )-}
      - local `pm' `pm'
      = local sesims sesims
      - {c )-}
      - local `pm' `pm'
      = local bias bias
      - {c )-}
      - local `pm' `pm'
      = local mean mean
      - {c )-}
      - local `pm' `pm'
      = local empse empse
      - {c )-}
      - local `pm' `pm'
      = local relprec relprec
      - {c )-}
      - local `pm' `pm'
      = local mse mse
      - {c )-}
      - local `pm' `pm'
      = local rmse rmse
      - {c )-}
      - local `pm' `pm'
      = local modelse modelse
      - {c )-}
      - local `pm' `pm'
      = local ciwidth ciwidth
      - {c )-}
      - local `pm' `pm'
      = local relerror relerror
      - {c )-}
      - local `pm' `pm'
      = local cover cover
      - {c )-}
      - local `pm' `pm'
      = local power power
      - {c )-}
      - {c )-}
      - if "`se1'"=="" {c -(}
      = if "se"=="" {c -(}
        foreach perfmeas in sesims modelse ciwidth relerror cover power {c -(}
        if !mi("``perfmeas''") local droppm1 `droppm1' `perfmeas'
        local `perfmeas'
        {c )-}
        if !mi("`droppm1'") {c -(}
        if !mi("`origoutput'") di as error "" _c
        else di as text "" _c
        di "SE not reported, so ignoring performance measures: `droppm1'"
        {c )-}
        {c )-}
      - if "`true'"=="" {c -(}
      = if ""=="" {c -(}
      - foreach perfmeas in bias mse rmse cover {c -(}
      - if !mi("``perfmeas''") local droppm2 `droppm2' `perfmeas'
      = if !mi("bias") local droppm2  bias
      - local `perfmeas'
      = local bias
      - {c )-}
      - if !mi("``perfmeas''") local droppm2 `droppm2' `perfmeas'
      = if !mi("mse") local droppm2 bias mse
      - local `perfmeas'
      = local mse
      - {c )-}
      - if !mi("``perfmeas''") local droppm2 `droppm2' `perfmeas'
      = if !mi("rmse") local droppm2 bias mse rmse
      - local `perfmeas'
      = local rmse
      - {c )-}
      - if !mi("``perfmeas''") local droppm2 `droppm2' `perfmeas'
      = if !mi("cover") local droppm2 bias mse rmse cover
      - local `perfmeas'
      = local cover
      - {c )-}
      - if !mi("`droppm2'") {c -(}
      = if !mi("bias mse rmse cover") {c -(}
      - if !mi("`origoutput'") di as error "" _c
      = if !mi("") di as error "" _c
      - else di as text "" _c
      - di "true() not specified, so ignoring performance measures: `droppm2'"
      = di "true() not specified, so ignoring performance measures: bias mse rmse cover"
      - {c )-}
      - {c )-}
      - foreach pm of local allpms {c -(}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("bsims") local output  bsims
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("sesims") local output bsims sesims
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("") local output bsims sesims bias
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("mean") local output bsims sesims mean
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("empse") local output bsims sesims mean empse
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("relprec") local output bsims sesims mean empse relprec
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("") local output bsims sesims mean empse relprec mse
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("") local output bsims sesims mean empse relprec rmse
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("modelse") local output bsims sesims mean empse relprec modelse
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("ciwidth") local output bsims sesims mean empse relprec modelse ciwidth
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("relerror") local output bsims sesims mean empse relprec modelse ciwidth relerror
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("") local output bsims sesims mean empse relprec modelse ciwidth relerror cover
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("power") local output bsims sesims mean empse relprec modelse ciwidth relerror power
      - {c )-}
      - if "`output'"=="" {c -(}
      = if "bsims sesims mean empse relprec modelse ciwidth relerror power"=="" {c -(}
        di as error "No performance measures specified"
        exit 498
        {c )-}
      - if inlist("`output'","bsims","sesims","bims sesims") & "`mcse'"=="mcse" {c -(}
      = if inlist("bsims sesims mean empse relprec modelse ciwidth relerror power","bsims","sesims","bims sesims") & "mcse"=="mcse" {c -(}
        di as error "Only bsims and/or sesims specified - mcse ignored"
        local mcse
        {c )-}
      - if "`methodvar'"!="" {c -(}
      = if "method"!="" {c -(}
      - if `m'>1 {c -(}
      = if 1>1 {c -(}
        di as error "Only one estimate variable allowed with long format"
        exit 498
        {c )-}
      - if "`id'"=="" {c -(}
      = if "rep"=="" {c -(}
        di as error "id() is required with long format"
        exit 498
        {c )-}
      - {c )-}
      - if "`list'"=="nolist" & "`clear'"=="" & "`saving'"=="" {c -(}
      = if ""=="nolist" & "clear"=="" & ""=="" {c -(}
        di as error "No output requested! Please specify clear or saving(), or don't specify nolist"
        exit 498
        {c )-}
      - if "`gen'"=="" local gen perfmeas
      = if "_perfmeas"=="" local gen perfmeas
      - cap confirm new variable `gen'num
      = cap confirm new variable _perfmeasnum
      - local rc1=_rc
      - cap confirm new variable `gen'code
      = cap confirm new variable _perfmeascode
      - if _rc | `rc1' {c -(}
      = if _rc | 0 {c -(}
        di as error as smcl "{c -(}p{c )-}Variable `gen'num and/or `gen'code already exists. This is probably because the current data are -simsum- output. If this is what you want, use the gen() option.{c -(}p_end{c )-}"
        exit 498
        {c )-}
      - if "`memcheck'"!="nomemcheck" {c -(}
      = if ""!="nomemcheck" {c -(}
      - qui desc, short
      - if r(width)/r(widthmax)>0.45 {c -(}
        di as error "simsum is memory-hungry and can fail slowly if memory is more than 50% occupied."
        di as error as smcl "Please increase the memory using {c -(}help memory:set memory{c )-}, or use the nomemcheck option."
        exit 498
        {c )-}
      - {c )-}
      - marksample touse, novarlist
      - qui count if `touse'
      = qui count if __000001
      - if r(N)==0 {c -(}
        di in red "no observations"
        exit 2000
        {c )-}
      - if "`bias'"=="bias" | "`mse'"=="mse" | "`rmse'"=="rmse" | "`cover'"=="cover" {c -(}
      = if ""=="bias" | ""=="mse" | ""=="rmse" | ""=="cover" {c -(}
        tempvar truevar
        qui gen `truevar' = `true'
        qui count if missing(`truevar') & `touse'
        if r(N)>0 {c -(}
        di as error "Missing values found for true value `true'"
        exit 498
        {c )-}
        {c )-}
      - preserve
      - qui keep if `touse'
      = qui keep if __000001
      - if "`methodvar'"!="" {c -(}
      = if "method"!="" {c -(}
      - local origformat long
      - local betastub `betalist'
      = local betastub est
      - qui levelsof `methodvar', local(methods)
      = qui levelsof method, local(methods)
      - local label : val label `methodvar'
      = local label : val label method
      - local i 0
      - foreach method in `methods' {c -(}
      = foreach method in 1 2 {c -(}
      - if strpos("`method'"," ") {c -(}
      = if strpos("1"," ") {c -(}
        di as error `"Sorry, I can't handle method = "`method'". Please recode it without spaces."'
        exit 498
        {c )-}
      - if strtoname("b`method'")!="b`method'" {c -(}
      = if strtoname("b1")!="b1" {c -(}
        di as error `"Sorry, I can't handle method = "`method'". Please recode it using standard characters."'
        exit 498
        {c )-}
      - local ++i
      - local beta`i' `betalist'`method'
      = local beta1 est1
      - local newbetalist `newbetalist' `betalist'`method'
      = local newbetalist  est1
      - if "`selist'"!="" local se`i' `selist'`method'
      = if "se"!="" local se1 se1
      - if "`selist'"!="" local newselist `newselist' `selist'`method'
      = if "se"!="" local newselist  se1
      - if "`dftype'"=="number" local df`i' `df'
      = if ""=="number" local df1 
      - if "`dftype'"=="varname" local df`i' `dflist'`method'
      = if ""=="varname" local df1 1
      - if "`label'"!="" local label`i' : label `label' `method'
      = if "methodl"!="" local label1 : label methodl 1
      - else local label`i' "`method'"
      = else local label1 "1"
      - if "`label`i''"=="`ref'" local refmethod `i'
      = if "A"=="" local refmethod 1
      - {c )-}
      - if strpos("`method'"," ") {c -(}
      = if strpos("2"," ") {c -(}
        di as error `"Sorry, I can't handle method = "`method'". Please recode it without spaces."'
        exit 498
        {c )-}
      - if strtoname("b`method'")!="b`method'" {c -(}
      = if strtoname("b2")!="b2" {c -(}
        di as error `"Sorry, I can't handle method = "`method'". Please recode it using standard characters."'
        exit 498
        {c )-}
      - local ++i
      - local beta`i' `betalist'`method'
      = local beta2 est2
      - local newbetalist `newbetalist' `betalist'`method'
      = local newbetalist est1 est2
      - if "`selist'"!="" local se`i' `selist'`method'
      = if "se"!="" local se2 se2
      - if "`selist'"!="" local newselist `newselist' `selist'`method'
      = if "se"!="" local newselist se1 se2
      - if "`dftype'"=="number" local df`i' `df'
      = if ""=="number" local df2 
      - if "`dftype'"=="varname" local df`i' `dflist'`method'
      = if ""=="varname" local df2 2
      - if "`label'"!="" local label`i' : label `label' `method'
      = if "methodl"!="" local label2 : label methodl 2
      - else local label`i' "`method'"
      = else local label2 "2"
      - if "`label`i''"=="`ref'" local refmethod `i'
      = if "B"=="" local refmethod 2
      - {c )-}
      - local m `i'
      = local m 2
      - if "`refmethod'"=="" {c -(}
      = if ""=="" {c -(}
      - if "`ref'"!="" {c -(}
      = if ""!="" {c -(}
        if "`label'"=="" local offenders values
        else local offenders value labels
        di as error "Error in ref(): `ref' is not one of the `offenders' of `methodvar'"
        exit 498
        {c )-}
      - else local refmethod 1
      - {c )-}
      - di as text "Reshaping data to wide format ..."
      - keep `betalist' `selist' `dflist' `by' `byvar' `id' `methodvar' `touse' `truevar'
      = keep est se  dgm estimand dgm estimand rep method __000001 
      - cap confirm string var `methodvar'
      = cap confirm string var method
      - if _rc==0 local string string
      - local bfmt0: format `betalist'
      = local bfmt0: format est
      - qui reshape wide `betalist' `selist' `dflist', i(`by' `id') j(`methodvar') `string'
      = qui reshape wide est se , i(dgm estimand rep) j(method) 
      - local betalist `newbetalist'
      = local betalist est1 est2
      - local selist `newselist'
      = local selist se1 se2
      - {c )-}
      - else {c -(}
        local origformat wide
        forvalues i=1/`m' {c -(}
        local label`i' : var label `beta`i''
        if "`label`i''"=="" local label`i' "`beta`i''"
        if "`beta`i''"=="`ref'" local refmethod `i'
        {c )-}
        if "`refmethod'"=="" {c -(}
        if "`ref'"!="" {c -(}
        di as error "ref(`ref') is not one of the listed point estimates"
        exit 498
        {c )-}
        else local refmethod 1
        {c )-}
        keep `betalist' `selist' `dflist' `by' `byvar' `id' `touse' `truevar'
        {c )-}
      - if mi("`force'") {c -(}
      = if mi("") {c -(}
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - tempvar betafreq`i'
      = tempvar betafreq1
      - egen `betafreq`i'' = count(`beta`i''), `byby'
      = egen __000002 = count(est1), by(dgm estimand)
      - cap assert `betafreq`i''!=1
      = cap assert __000002!=1
      - if _rc {c -(}
        di as error "Only one observation for `beta`i''. If this is what you intended, use the force option."
        exit 498
        {c )-}
      - {c )-}
      - tempvar betafreq`i'
      = tempvar betafreq2
      - egen `betafreq`i'' = count(`beta`i''), `byby'
      = egen __000003 = count(est2), by(dgm estimand)
      - cap assert `betafreq`i''!=1
      = cap assert __000003!=1
      - if _rc {c -(}
        di as error "Only one observation for `beta`i''. If this is what you intended, use the force option."
        exit 498
        {c )-}
      - {c )-}
      - {c )-}
      - tempvar missing
      - gen `missing' = 0
      = gen __000004 = 0
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - qui replace `missing' = missing(`beta`i'') & `touse'
      = qui replace __000004 = missing(est1) & __000001
      - if "`se`i''"!="" qui replace `missing' = 1 if missing(`se`i'') & `touse'
      = if "se1"!="" qui replace __000004 = 1 if missing(se1) & __000001
      - if "`se`i''"!="" qui replace `missing' = 1 if `se`i''==0 & `touse'
      = if "se1"!="" qui replace __000004 = 1 if se1==0 & __000001
      - qui count if `missing'
      = qui count if __000004
      - if r(N)>0 {c -(}
        if "`se`i''"!="" {c -(}
        qui replace `missing' = missing(`beta`i'') & missing(`se`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have both estimate and SE missing"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        di as text "--> no action taken"
        {c )-}
        qui replace `missing' = !missing(`se`i'') & missing(`beta`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have estimate missing and SE observed"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `se`i'' = . if `missing'
        di as text "--> SE changed to missing"
        {c )-}
        qui replace `missing' = missing(`se`i'') & !missing(`beta`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have estimate observed and SE missing"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `beta`i'' = . if `missing'
        di as text "--> estimate changed to missing"
        {c )-}
        qui replace `missing' = (`se`i''==0) & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have zero values of SE"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `beta`i'' = . if `missing'
        qui replace `se`i'' = . if `missing'
        di as text "--> estimate and SE changed to missing"
        {c )-}
        {c )-}
        {c )-}
      - {c )-}
      - qui replace `missing' = missing(`beta`i'') & `touse'
      = qui replace __000004 = missing(est2) & __000001
      - if "`se`i''"!="" qui replace `missing' = 1 if missing(`se`i'') & `touse'
      = if "se2"!="" qui replace __000004 = 1 if missing(se2) & __000001
      - if "`se`i''"!="" qui replace `missing' = 1 if `se`i''==0 & `touse'
      = if "se2"!="" qui replace __000004 = 1 if se2==0 & __000001
      - qui count if `missing'
      = qui count if __000004
      - if r(N)>0 {c -(}
        if "`se`i''"!="" {c -(}
        qui replace `missing' = missing(`beta`i'') & missing(`se`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have both estimate and SE missing"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        di as text "--> no action taken"
        {c )-}
        qui replace `missing' = !missing(`se`i'') & missing(`beta`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have estimate missing and SE observed"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `se`i'' = . if `missing'
        di as text "--> SE changed to missing"
        {c )-}
        qui replace `missing' = missing(`se`i'') & !missing(`beta`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have estimate observed and SE missing"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `beta`i'' = . if `missing'
        di as text "--> estimate changed to missing"
        {c )-}
        qui replace `missing' = (`se`i''==0) & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have zero values of SE"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `beta`i'' = . if `missing'
        qui replace `se`i'' = . if `missing'
        di as text "--> estimate and SE changed to missing"
        {c )-}
        {c )-}
        {c )-}
      - {c )-}
      - drop `missing'
      = drop __000004
      - if "`graph'"=="graph" {c -(}
      = if ""=="graph" {c -(}
        tempfile graph
        set graphics off
        forvalues i=1/`m' {c -(}
        cap gr7 `se`i'' `beta`i'', xla yla b2title("`beta`i''") l1title("`se`i''") t1title("`label`i''") saving(`graph'`i', replace) `graph2'
        if !_rc local gphlist `gphlist' `graph'`i'
        {c )-}
        if "`selist'"=="" local title Point estimates by method
        else local title Std error vs. point estimate by method
        set graphics on
        gr7 using `gphlist', title(`title')
        {c )-}
      - tempvar infb infse
      - gen `infb' = 0
      = gen __000005 = 0
      - gen `infse' = 0
      = gen __000006 = 0
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - qui summ `beta`i''
      = qui summ est1
      - if r(sd)<=0 {c -(}
        di as text "Warning for method `label`i'': estimate doesn't vary"
        continue
        {c )-}
      - qui replace `infb' = (abs(`beta`i''-r(mean))/r(sd) > `max') & !missing(`beta`i'')
      = qui replace __000005 = (abs(est1-r(mean))/r(sd) > 20) & !missing(est1)
      - if "`se`i''"!="" {c -(}
      = if "se1"!="" {c -(}
      - qui summ `se`i''
      = qui summ se1
      - if r(mean)<=0 {c -(}
        di as text "Warning for method `label`i'': `se`i'' is always 0"
        {c )-}
      - else qui replace `infse' = (`se`i''/r(mean) > `semax') & !missing(`se`i'')
      = else qui replace __000006 = (se1/r(mean) > 100) & !missing(se1)
      - {c )-}
      - qui count if `infb'
      = qui count if __000005
      - local ninfb = r(N)
      - qui count if `infse'
      = qui count if __000006
      - local ninfse = r(N)
      - if `ninfb'+`ninfse' > 0 {c -(}
      = if 0+0 > 0 {c -(}
        local text = cond("`dropbig'"=="dropbig","text","error")
        local warning = cond("`dropbig'"=="dropbig","Warning","Error")
        di as `text' `"`warning' for method `label`i'': "' as result `ninfb' as `text' `" observation(s) have standardised estimate > `max'"' _c
        if "`se`i''"!="" di as `text' `" and "' as result `ninfse' as `text' `" observation(s) have scaled SE > `semax'"'
        else di
        if "`listbig'"!="nolistbig" l `by' `id' `beta`i'' `se`i'' if `infb'|`infse', sepby(`sepby')
        else di as `text' "--> remove nolistbig option to list these observation(s)"
        if "`dropbig'"=="dropbig" {c -(}
        qui replace `beta`i'' = . if `infb'|`infse'
        if "`se`i''"!="" qui replace `se`i'' = . if `infb'|`infse'
        di as text `"--> estimate "' _c
        if "`se`i''"!="" di as text `"and SE "' _c
        di as text `"have been changed to missing values for these observation(s)"'
        {c )-}
        else {c -(}
        di as error "--> use dropbig option to drop these observation(s)"
        di as error "--> use max() option to change acceptable limit of point estimates"
        if "`se'"!="" di as error "--> use semax() option to change acceptable limit of standard errors"
        exit 498
        {c )-}
        {c )-}
      - {c )-}
      - qui summ `beta`i''
      = qui summ est2
      - if r(sd)<=0 {c -(}
        di as text "Warning for method `label`i'': estimate doesn't vary"
        continue
        {c )-}
      - qui replace `infb' = (abs(`beta`i''-r(mean))/r(sd) > `max') & !missing(`beta`i'')
      = qui replace __000005 = (abs(est2-r(mean))/r(sd) > 20) & !missing(est2)
      - if "`se`i''"!="" {c -(}
      = if "se2"!="" {c -(}
      - qui summ `se`i''
      = qui summ se2
      - if r(mean)<=0 {c -(}
        di as text "Warning for method `label`i'': `se`i'' is always 0"
        {c )-}
      - else qui replace `infse' = (`se`i''/r(mean) > `semax') & !missing(`se`i'')
      = else qui replace __000006 = (se2/r(mean) > 100) & !missing(se2)
      - {c )-}
      - qui count if `infb'
      = qui count if __000005
      - local ninfb = r(N)
      - qui count if `infse'
      = qui count if __000006
      - local ninfse = r(N)
      - if `ninfb'+`ninfse' > 0 {c -(}
      = if 0+0 > 0 {c -(}
        local text = cond("`dropbig'"=="dropbig","text","error")
        local warning = cond("`dropbig'"=="dropbig","Warning","Error")
        di as `text' `"`warning' for method `label`i'': "' as result `ninfb' as `text' `" observation(s) have standardised estimate > `max'"' _c
        if "`se`i''"!="" di as `text' `" and "' as result `ninfse' as `text' `" observation(s) have scaled SE > `semax'"'
        else di
        if "`listbig'"!="nolistbig" l `by' `id' `beta`i'' `se`i'' if `infb'|`infse', sepby(`sepby')
        else di as `text' "--> remove nolistbig option to list these observation(s)"
        if "`dropbig'"=="dropbig" {c -(}
        qui replace `beta`i'' = . if `infb'|`infse'
        if "`se`i''"!="" qui replace `se`i'' = . if `infb'|`infse'
        di as text `"--> estimate "' _c
        if "`se`i''"!="" di as text `"and SE "' _c
        di as text `"have been changed to missing values for these observation(s)"'
        {c )-}
        else {c -(}
        di as error "--> use dropbig option to drop these observation(s)"
        di as error "--> use max() option to change acceptable limit of point estimates"
        if "`se'"!="" di as error "--> use semax() option to change acceptable limit of standard errors"
        exit 498
        {c )-}
        {c )-}
      - {c )-}
      - di as text _newline "Starting to process results ..."
      - if `level'<1 local level=`level'*100
      = if 95<1 local level=95*100
      - if "`robust'"=="robust" & ("`relprec'"=="relprec" | "`relerror'"=="relerror") {c -(}
      = if ""=="robust" & ("relprec"=="relprec" | "relerror"=="relerror") {c -(}
        forvalues i=1/`m' {c -(}
        tempvar betamean`i'
        egen `betamean`i'' = mean(`beta`i''), `byby'
        {c )-}
        {c )-}
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - tempvar crit`i'
      = tempvar crit1
      - gen `crit`i'' = -invnorm((1-`level'/100)/2)
      = gen __000007 = -invnorm((1-95/100)/2)
      - if "`df`i''"!="" qui replace `crit`i'' = invttail(`df`i'',(1-`level'/100)/2) if !mi(`df`i'')
      = if ""!="" qui replace __000007 = invttail(,(1-95/100)/2) if !mi()
      - assert !mi(`crit`i'')
      = assert !mi(__000007)
      - local collcount `collcount' bsims_`i'=`beta`i''
      = local collcount  bsims_1=est1
      - if "`bias'"=="bias" {c -(}
      = if ""=="bias" {c -(}
        qui gen bias_`i' = `beta`i'' - `truevar'
        local collmean `collmean' bias_`i'
        local collsd `collsd' biassd_`i' = bias_`i'
        {c )-}
      - if "`mean'"=="mean" {c -(}
      = if "mean"=="mean" {c -(}
      - local collmean `collmean' mean_`i' = `beta`i''
      = local collmean  mean_1 = est1
      - local collsd `collsd' meansd_`i' = `beta`i''
      = local collsd  meansd_1 = est1
      - {c )-}
      - if "`relerror'"=="relerror" | "`modelse'"=="modelse" {c -(}
      = if "relerror"=="relerror" | "modelse"=="modelse" {c -(}
      - qui gen var_`i'=`se`i''^2
      = qui gen var_1=se1^2
      - {c )-}
      - if "`empse'"=="empse" | "`relerror'"=="relerror" | "`relprec'"=="relprec" | "`bias'"=="bias" {c -(}
      = if "empse"=="empse" | "relerror"=="relerror" | "relprec"=="relprec" | ""=="bias" {c -(}
      - local collsd `collsd' empse_`i'=`beta`i''
      = local collsd meansd_1 = est1 empse_1=est1
      - {c )-}
      - if "`mse'"=="mse" | "`rmse'"=="rmse" {c -(}
      = if ""=="mse" | ""=="rmse" {c -(}
        qui gen mse_`i' = (`beta`i'' - `truevar')^2
        local collmean `collmean' mse_`i'
        local collsd `collsd' msesd_`i'=mse_`i'
        {c )-}
      - if "`relprec'"=="relprec" & `i'!=`refmethod' {c -(}
      = if "relprec"=="relprec" & 1!=1 {c -(}
        qui byvar `byvar', r(rho N) gen unique: corr `beta`refmethod'' `beta`i''
        rename Rrho_ corr_`i'
        rename RN_ ncorr_`i'
        local collsum `collsum' corr_`i' ncorr_`i'
        {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" | "`sesims'"=="sesims" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" | "sesims"=="sesims" {c -(}
      - local collcount `collcount' sesims_`i'=`se`i''
      = local collcount bsims_1=est1 sesims_1=se1
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" {c -(}
      - local collmean `collmean' modelse_`i'=`se`i''
      = local collmean mean_1 = est1 modelse_1=se1
      - local collmean `collmean' varmean_`i'=var_`i'
      = local collmean mean_1 = est1 modelse_1=se1 varmean_1=var_1
      - local collsd `collsd' varsd_`i'=var_`i'
      = local collsd meansd_1 = est1 empse_1=est1 varsd_1=var_1
      - local collsd `collsd' modelsesd_`i'=`se`i''
      = local collsd meansd_1 = est1 empse_1=est1 varsd_1=var_1 modelsesd_1=se1
      - {c )-}
      - if "`ciwidth'"=="ciwidth" {c -(}
      = if "ciwidth"=="ciwidth" {c -(}
      - qui gen ciwidth_`i' = 2*(`crit`i'')*`se`i''
      = qui gen ciwidth_1 = 2*(__000007)*se1
      - local collmean `collmean' ciwidth_`i'
      = local collmean mean_1 = est1 modelse_1=se1 varmean_1=var_1 ciwidth_1
      - local collsd `collsd' ciwidthsd_`i' = ciwidth_`i'
      = local collsd meansd_1 = est1 empse_1=est1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1
      - {c )-}
      - if "`cover'"=="cover" | "`power'"=="power" {c -(}
      = if ""=="cover" | "power"=="power" {c -(}
      - if "`cover'"=="cover" local collcount `collcount' bothsims_`i'=cover_`i'
      = if ""=="cover" local collcount bsims_1=est1 sesims_1=se1 bothsims_1=cover_1
      - else local collcount `collcount' bothsims_`i'=power_`i'
      = else local collcount bsims_1=est1 sesims_1=se1 bothsims_1=power_1
      - {c )-}
      - if "`cover'"=="cover" {c -(}
      = if ""=="cover" {c -(}
        qui gen cover_`i' = 100*(abs(`beta`i''-`truevar')<(`crit`i'')*`se`i'') if !missing(`beta`i'') & !missing(`se`i'')
        local collmean `collmean' cover_`i'
        {c )-}
      - if "`power'"=="power" {c -(}
      = if "power"=="power" {c -(}
      - qui gen power_`i' = 100*(abs(`beta`i''-`null')>=(`crit`i'')*`se`i'') if !missing(`beta`i'') & !missing(`se`i'')
      = qui gen power_1 = 100*(abs(est1-0)>=(__000007)*se1) if !missing(est1) & !missing(se1)
      - local collmean `collmean' power_`i'
      = local collmean mean_1 = est1 modelse_1=se1 varmean_1=var_1 ciwidth_1 power_1
      - {c )-}
      - if "`robust'"=="robust" {c -(}
      = if ""=="robust" {c -(}
        if "`empse'"=="empse" {c -(}
        tempvar empseT`i' empseB`i' empseTT`i' empseBB`i' empseTB`i'
        qui gen `empseT`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `empseB`i'' = 1
        qui gen `empseTT`i'' = `empseT`i''^2
        qui gen `empseBB`i'' = `empseB`i''^2
        qui gen `empseTB`i'' = `empseT`i''*`empseB`i''
        local collsum `collsum' `empseT`i'' `empseB`i'' `empseTT`i'' `empseTB`i'' `empseBB`i''
        {c )-}
        if "`relprec'"=="relprec" {c -(}
        tempvar relprecT`i' relprecB`i' relprecTT`i' relprecBB`i' relprecTB`i'
        qui gen `relprecT`i'' = (`beta`refmethod''-`betamean`refmethod'')^2
        qui gen `relprecB`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `relprecTT`i'' = `relprecT`i''^2
        qui gen `relprecBB`i'' = `relprecB`i''^2
        qui gen `relprecTB`i'' = `relprecT`i''*`relprecB`i''
        local collsum `collsum' `relprecT`i'' `relprecB`i'' `relprecTT`i'' `relprecTB`i'' `relprecBB`i''
        {c )-}
        if "`relerror'"=="relerror" {c -(}
        tempvar relerrorT`i' relerrorB`i' relerrorTT`i' relerrorBB`i' relerrorTB`i'
        qui gen `relerrorT`i'' = `se`i''^2
        qui gen `relerrorB`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `relerrorTT`i'' = `relerrorT`i''^2
        qui gen `relerrorBB`i'' = `relerrorB`i''^2
        qui gen `relerrorTB`i'' = `relerrorT`i''*`relerrorB`i''
        local collsum `collsum' `relerrorT`i'' `relerrorB`i'' `relerrorTT`i'' `relerrorTB`i'' `relerrorBB`i''
        {c )-}
        {c )-}
      - {c )-}
      - tempvar crit`i'
      = tempvar crit2
      - gen `crit`i'' = -invnorm((1-`level'/100)/2)
      = gen __000008 = -invnorm((1-95/100)/2)
      - if "`df`i''"!="" qui replace `crit`i'' = invttail(`df`i'',(1-`level'/100)/2) if !mi(`df`i'')
      = if ""!="" qui replace __000008 = invttail(,(1-95/100)/2) if !mi()
      - assert !mi(`crit`i'')
      = assert !mi(__000008)
      - local collcount `collcount' bsims_`i'=`beta`i''
      = local collcount bsims_1=est1 sesims_1=se1 bothsims_1=power_1 bsims_2=est2
      - if "`bias'"=="bias" {c -(}
      = if ""=="bias" {c -(}
        qui gen bias_`i' = `beta`i'' - `truevar'
        local collmean `collmean' bias_`i'
        local collsd `collsd' biassd_`i' = bias_`i'
        {c )-}
      - if "`mean'"=="mean" {c -(}
      = if "mean"=="mean" {c -(}
      - local collmean `collmean' mean_`i' = `beta`i''
      = local collmean mean_1 = est1 modelse_1=se1 varmean_1=var_1 ciwidth_1 power_1 mean_2 = est2
      - local collsd `collsd' meansd_`i' = `beta`i''
      = local collsd meansd_1 = est1 empse_1=est1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 meansd_2 = est2
      - {c )-}
      - if "`relerror'"=="relerror" | "`modelse'"=="modelse" {c -(}
      = if "relerror"=="relerror" | "modelse"=="modelse" {c -(}
      - qui gen var_`i'=`se`i''^2
      = qui gen var_2=se2^2
      - {c )-}
      - if "`empse'"=="empse" | "`relerror'"=="relerror" | "`relprec'"=="relprec" | "`bias'"=="bias" {c -(}
      = if "empse"=="empse" | "relerror"=="relerror" | "relprec"=="relprec" | ""=="bias" {c -(}
      - local collsd `collsd' empse_`i'=`beta`i''
      = local collsd meansd_1 = est1 empse_1=est1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 meansd_2 = est2 empse_2=est2
      - {c )-}
      - if "`mse'"=="mse" | "`rmse'"=="rmse" {c -(}
      = if ""=="mse" | ""=="rmse" {c -(}
        qui gen mse_`i' = (`beta`i'' - `truevar')^2
        local collmean `collmean' mse_`i'
        local collsd `collsd' msesd_`i'=mse_`i'
        {c )-}
      - if "`relprec'"=="relprec" & `i'!=`refmethod' {c -(}
      = if "relprec"=="relprec" & 2!=1 {c -(}
      - qui byvar `byvar', r(rho N) gen unique: corr `beta`refmethod'' `beta`i''
      = qui byvar dgm estimand, r(rho N) gen unique: corr est1 est2
      - rename Rrho_ corr_`i'
      = rename Rrho_ corr_2
      - rename RN_ ncorr_`i'
      = rename RN_ ncorr_2
      - local collsum `collsum' corr_`i' ncorr_`i'
      = local collsum  corr_2 ncorr_2
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" | "`sesims'"=="sesims" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" | "sesims"=="sesims" {c -(}
      - local collcount `collcount' sesims_`i'=`se`i''
      = local collcount bsims_1=est1 sesims_1=se1 bothsims_1=power_1 bsims_2=est2 sesims_2=se2
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" {c -(}
      - local collmean `collmean' modelse_`i'=`se`i''
      = local collmean mean_1 = est1 modelse_1=se1 varmean_1=var_1 ciwidth_1 power_1 mean_2 = est2 modelse_2=se2
      - local collmean `collmean' varmean_`i'=var_`i'
      = local collmean mean_1 = est1 modelse_1=se1 varmean_1=var_1 ciwidth_1 power_1 mean_2 = est2 modelse_2=se2 varmean_2=var_2
      - local collsd `collsd' varsd_`i'=var_`i'
      = local collsd meansd_1 = est1 empse_1=est1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 meansd_2 = est2 empse_2=est2 varsd_2=var_2
      - local collsd `collsd' modelsesd_`i'=`se`i''
      = local collsd meansd_1 = est1 empse_1=est1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 meansd_2 = est2 empse_2=est2 varsd_2=var_2 modelsesd_2=se2
      - {c )-}
      - if "`ciwidth'"=="ciwidth" {c -(}
      = if "ciwidth"=="ciwidth" {c -(}
      - qui gen ciwidth_`i' = 2*(`crit`i'')*`se`i''
      = qui gen ciwidth_2 = 2*(__000008)*se2
      - local collmean `collmean' ciwidth_`i'
      = local collmean mean_1 = est1 modelse_1=se1 varmean_1=var_1 ciwidth_1 power_1 mean_2 = est2 modelse_2=se2 varmean_2=var_2 ciwidth_2
      - local collsd `collsd' ciwidthsd_`i' = ciwidth_`i'
      = local collsd meansd_1 = est1 empse_1=est1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 meansd_2 = est2 empse_2=est2 varsd_2=var_2 modelsesd_2=se2 ciwidthsd_2 = ciwidth_2
      - {c )-}
      - if "`cover'"=="cover" | "`power'"=="power" {c -(}
      = if ""=="cover" | "power"=="power" {c -(}
      - if "`cover'"=="cover" local collcount `collcount' bothsims_`i'=cover_`i'
      = if ""=="cover" local collcount bsims_1=est1 sesims_1=se1 bothsims_1=power_1 bsims_2=est2 sesims_2=se2 bothsims_2=cover_2
      - else local collcount `collcount' bothsims_`i'=power_`i'
      = else local collcount bsims_1=est1 sesims_1=se1 bothsims_1=power_1 bsims_2=est2 sesims_2=se2 bothsims_2=power_2
      - {c )-}
      - if "`cover'"=="cover" {c -(}
      = if ""=="cover" {c -(}
        qui gen cover_`i' = 100*(abs(`beta`i''-`truevar')<(`crit`i'')*`se`i'') if !missing(`beta`i'') & !missing(`se`i'')
        local collmean `collmean' cover_`i'
        {c )-}
      - if "`power'"=="power" {c -(}
      = if "power"=="power" {c -(}
      - qui gen power_`i' = 100*(abs(`beta`i''-`null')>=(`crit`i'')*`se`i'') if !missing(`beta`i'') & !missing(`se`i'')
      = qui gen power_2 = 100*(abs(est2-0)>=(__000008)*se2) if !missing(est2) & !missing(se2)
      - local collmean `collmean' power_`i'
      = local collmean mean_1 = est1 modelse_1=se1 varmean_1=var_1 ciwidth_1 power_1 mean_2 = est2 modelse_2=se2 varmean_2=var_2 ciwidth_2 power_2
      - {c )-}
      - if "`robust'"=="robust" {c -(}
      = if ""=="robust" {c -(}
        if "`empse'"=="empse" {c -(}
        tempvar empseT`i' empseB`i' empseTT`i' empseBB`i' empseTB`i'
        qui gen `empseT`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `empseB`i'' = 1
        qui gen `empseTT`i'' = `empseT`i''^2
        qui gen `empseBB`i'' = `empseB`i''^2
        qui gen `empseTB`i'' = `empseT`i''*`empseB`i''
        local collsum `collsum' `empseT`i'' `empseB`i'' `empseTT`i'' `empseTB`i'' `empseBB`i''
        {c )-}
        if "`relprec'"=="relprec" {c -(}
        tempvar relprecT`i' relprecB`i' relprecTT`i' relprecBB`i' relprecTB`i'
        qui gen `relprecT`i'' = (`beta`refmethod''-`betamean`refmethod'')^2
        qui gen `relprecB`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `relprecTT`i'' = `relprecT`i''^2
        qui gen `relprecBB`i'' = `relprecB`i''^2
        qui gen `relprecTB`i'' = `relprecT`i''*`relprecB`i''
        local collsum `collsum' `relprecT`i'' `relprecB`i'' `relprecTT`i'' `relprecTB`i'' `relprecBB`i''
        {c )-}
        if "`relerror'"=="relerror" {c -(}
        tempvar relerrorT`i' relerrorB`i' relerrorTT`i' relerrorBB`i' relerrorTB`i'
        qui gen `relerrorT`i'' = `se`i''^2
        qui gen `relerrorB`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `relerrorTT`i'' = `relerrorT`i''^2
        qui gen `relerrorBB`i'' = `relerrorB`i''^2
        qui gen `relerrorTB`i'' = `relerrorT`i''*`relerrorB`i''
        local collsum `collsum' `relerrorT`i'' `relerrorB`i'' `relerrorTT`i'' `relerrorTB`i'' `relerrorBB`i''
        {c )-}
        {c )-}
      - {c )-}
      - if "`collmean'"!="" local collmean (mean) `collmean'
      = if "mean_1 = est1 modelse_1=se1 varmean_1=var_1 ciwidth_1 power_1 mean_2 = est2 modelse_2=se2 varmean_2=var_2 ciwidth_2 power_2"!="" local collmean (mean) mean_1 = est1 modelse_1=se1 varmean_1=var_1 ciwidth_1 power_1 mean_2 = est2 modelse_2=se2 varmean_2=var_2 ciwidth_2 power_2
      - if "`collsd'"!="" local collsd (sd) `collsd'
      = if "meansd_1 = est1 empse_1=est1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 meansd_2 = est2 empse_2=est2 varsd_2=var_2 modelsesd_2=se2 ciwidthsd_2 = ciwidth_2"!="" local collsd (sd) meansd_1 = est1 empse_1=est1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 meansd_2 = est2 empse_2=est2 varsd_2=var_2 modelsesd_2=se2 ciwidthsd_2 = ciwidth_2
      - if "`collcount'"!="" local collcount (count) `collcount'
      = if "bsims_1=est1 sesims_1=se1 bothsims_1=power_1 bsims_2=est2 sesims_2=se2 bothsims_2=power_2"!="" local collcount (count) bsims_1=est1 sesims_1=se1 bothsims_1=power_1 bsims_2=est2 sesims_2=se2 bothsims_2=power_2
      - if "`collsum'"!="" local collsum (sum) `collsum'
      = if "corr_2 ncorr_2"!="" local collsum (sum) corr_2 ncorr_2
      - collapse `collmean' `collsd' `collcount' `collsum', by(`byvar')
      = collapse (mean) mean_1 = est1 modelse_1=se1 varmean_1=var_1 ciwidth_1 power_1 mean_2 = est2 modelse_2=se2 varmean_2=var_2 ciwidth_2 power_2 (sd) meansd_1 = est1 empse_1=est1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 meansd_2 = est2 empse_2=est2 varsd_2=var_2 modelsesd_2=se2 ciwidthsd_2 = ciwidth_2 (count) bsims_1=est1 sesims_1=se1 bothsims_1=power_1 bsims_2=est2 sesims_2=se2 bothsims_2=power_2 (sum) corr_2 ncorr_2, by(dgm estimand)
      - if !mi("`debug'") {c -(}
      = if !mi("") {c -(}
        di as input "Data after collapse:"
        l
        {c )-}
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - qui gen k_`i' = bsims_`i'/(bsims_`i'-1)
      = qui gen k_1 = bsims_1/(bsims_1-1)
      - if "`bias'"=="bias" {c -(}
      = if ""=="bias" {c -(}
        qui gen bias_mcse_`i' = biassd_`i' / sqrt(bsims_`i')
        {c )-}
      - if "`mean'"=="mean" {c -(}
      = if "mean"=="mean" {c -(}
      - qui gen mean_mcse_`i' = meansd_`i' / sqrt(bsims_`i')
      = qui gen mean_mcse_1 = meansd_1 / sqrt(bsims_1)
      - {c )-}
      - if ("`empse'"=="empse" | "`relerror'"=="relerror") & "`robust'"=="" {c -(}
      = if ("empse"=="empse" | "relerror"=="relerror") & ""=="" {c -(}
      - qui gen empse_mcse_`i' = empse_`i'/sqrt(2*(bsims_`i'-1))
      = qui gen empse_mcse_1 = empse_1/sqrt(2*(bsims_1-1))
      - {c )-}
      - else if ("`empse'"=="empse") & "`robust'"=="robust" {c -(}
      = else if ("empse"=="empse") & ""=="robust" {c -(}
        qui replace `empseTT`i''=`empseTT`i''*(k_`i'^2)
        qui replace `empseTB`i''=`empseTB`i''*k_`i'
        qui replace `empseT`i'' =`empseT`i'' *k_`i'
        qui gen empse_mcse_`i' = sqrt(k_`i') * sqrt(`empseTT`i'' -2*(`empseT`i''/`empseB`i'')*`empseTB`i'' +(`empseT`i''/`empseB`i'')^2*`empseBB`i'') / `empseB`i''
        qui replace empse_mcse_`i' = empse_mcse_`i' / (2*empse_`i')
        {c )-}
      - if "`relprec'"=="relprec" {c -(}
      = if "relprec"=="relprec" {c -(}
      - if `i'!=`refmethod' {c -(}
      = if 1!=1 {c -(}
        qui gen relprec_`i' = 100 * ((empse_`refmethod'/empse_`i')^2-1)
        if "`robust'"=="" {c -(}
        qui gen relprec_mcse_`i' = 200 * (empse_`refmethod'/empse_`i')^2 * sqrt((1-(corr_`i')^2)/(ncorr_`i'-1))
        {c )-}
        else {c -(}
        qui gen relprec_mcse_`i' = 100 * sqrt(`relprecTT`i'' -2*(`relprecT`i''/`relprecB`i'')*`relprecTB`i'' +(`relprecT`i''/`relprecB`i'')^2*`relprecBB`i'') / `relprecB`i''
        {c )-}
        {c )-}
      - else {c -(}
      - qui gen relprec_`i' = .
      = qui gen relprec_1 = .
      - qui gen relprec_mcse_`i' = .
      = qui gen relprec_mcse_1 = .
      - {c )-}
      - {c )-}
      - if "`mse'"=="mse" {c -(}
      = if ""=="mse" {c -(}
        qui gen mse_mcse_`i' = msesd_`i' / sqrt(bsims_`i')
        {c )-}
      - if "`rmse'"=="rmse" {c -(}
      = if ""=="rmse" {c -(}
        qui gen rmse_`i' = sqrt(mse_`i')
        qui gen rmse_mcse_`i' = msesd_`i' / (2 * sqrt(bsims_`i') * rmse_`i')
        {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" {c -(}
      - if "`modelsemethod'"=="rmse" {c -(}
      = if "rmse"=="rmse" {c -(}
      - qui replace modelse_`i' = sqrt(varmean_`i')
      = qui replace modelse_1 = sqrt(varmean_1)
      - qui gen modelse_mcse_`i' = varsd_`i' / sqrt(4 * sesims_`i' * varmean_`i')
      = qui gen modelse_mcse_1 = varsd_1 / sqrt(4 * sesims_1 * varmean_1)
      - {c )-}
      - else if "`modelsemethod'"=="mean" {c -(}
      = else if "rmse"=="mean" {c -(}
        qui gen modelse_mcse_`i' = modelsesd_`i' / sqrt(sesims_`i')
        {c )-}
      - {c )-}
      - if "`ciwidth'"=="ciwidth" {c -(}
      = if "ciwidth"=="ciwidth" {c -(}
      - qui gen ciwidth_mcse_`i' = ciwidthsd_`i' / sqrt(bsims_`i')
      = qui gen ciwidth_mcse_1 = ciwidthsd_1 / sqrt(bsims_1)
      - {c )-}
      - if "`relerror'"=="relerror" {c -(}
      = if "relerror"=="relerror" {c -(}
      - qui gen relerror_`i' = 100*(modelse_`i'/empse_`i'-1)
      = qui gen relerror_1 = 100*(modelse_1/empse_1-1)
      - if "`robust'"=="" qui gen relerror_mcse_`i' = 100*(modelse_`i'/empse_`i') * sqrt((modelse_mcse_`i'/modelse_`i')^2 + (empse_mcse_`i'/empse_`i')^2 )
      = if ""=="" qui gen relerror_mcse_1 = 100*(modelse_1/empse_1) * sqrt((modelse_mcse_1/modelse_1)^2 + (empse_mcse_1/empse_1)^2 )
      - else {c -(}
        qui gen relerror_mcse_`i' = sqrt(`relerrorTT`i'' -2*(`relerrorT`i''/`relerrorB`i'')*`relerrorTB`i'' +(`relerrorT`i''/`relerrorB`i'')^2*`relerrorBB`i'') / `relerrorB`i''
        qui replace relerror_mcse_`i' = relerror_mcse_`i' * 100 / (2*(1+relerror_`i'/100))
        {c )-}
      - {c )-}
      - if "`cover'"=="cover" {c -(}
      = if ""=="cover" {c -(}
        qui gen cover_mcse_`i' = sqrt(cover_`i'*(100-cover_`i')/bothsims_`i') if bothsims_`i'>1
        {c )-}
      - if "`power'"=="power" {c -(}
      = if "power"=="power" {c -(}
      - qui gen power_mcse_`i' = sqrt(power_`i'*(100-power_`i')/bothsims_`i') if bothsims_`i'>1
      = qui gen power_mcse_1 = sqrt(power_1*(100-power_1)/bothsims_1) if bothsims_1>1
      - {c )-}
      - cap drop varmean_`i'
      = cap drop varmean_1
      - cap drop varsd_`i'
      = cap drop varsd_1
      - {c )-}
      - qui gen k_`i' = bsims_`i'/(bsims_`i'-1)
      = qui gen k_2 = bsims_2/(bsims_2-1)
      - if "`bias'"=="bias" {c -(}
      = if ""=="bias" {c -(}
        qui gen bias_mcse_`i' = biassd_`i' / sqrt(bsims_`i')
        {c )-}
      - if "`mean'"=="mean" {c -(}
      = if "mean"=="mean" {c -(}
      - qui gen mean_mcse_`i' = meansd_`i' / sqrt(bsims_`i')
      = qui gen mean_mcse_2 = meansd_2 / sqrt(bsims_2)
      - {c )-}
      - if ("`empse'"=="empse" | "`relerror'"=="relerror") & "`robust'"=="" {c -(}
      = if ("empse"=="empse" | "relerror"=="relerror") & ""=="" {c -(}
      - qui gen empse_mcse_`i' = empse_`i'/sqrt(2*(bsims_`i'-1))
      = qui gen empse_mcse_2 = empse_2/sqrt(2*(bsims_2-1))
      - {c )-}
      - else if ("`empse'"=="empse") & "`robust'"=="robust" {c -(}
      = else if ("empse"=="empse") & ""=="robust" {c -(}
        qui replace `empseTT`i''=`empseTT`i''*(k_`i'^2)
        qui replace `empseTB`i''=`empseTB`i''*k_`i'
        qui replace `empseT`i'' =`empseT`i'' *k_`i'
        qui gen empse_mcse_`i' = sqrt(k_`i') * sqrt(`empseTT`i'' -2*(`empseT`i''/`empseB`i'')*`empseTB`i'' +(`empseT`i''/`empseB`i'')^2*`empseBB`i'') / `empseB`i''
        qui replace empse_mcse_`i' = empse_mcse_`i' / (2*empse_`i')
        {c )-}
      - if "`relprec'"=="relprec" {c -(}
      = if "relprec"=="relprec" {c -(}
      - if `i'!=`refmethod' {c -(}
      = if 2!=1 {c -(}
      - qui gen relprec_`i' = 100 * ((empse_`refmethod'/empse_`i')^2-1)
      = qui gen relprec_2 = 100 * ((empse_1/empse_2)^2-1)
      - if "`robust'"=="" {c -(}
      = if ""=="" {c -(}
      - qui gen relprec_mcse_`i' = 200 * (empse_`refmethod'/empse_`i')^2 * sqrt((1-(corr_`i')^2)/(ncorr_`i'-1))
      = qui gen relprec_mcse_2 = 200 * (empse_1/empse_2)^2 * sqrt((1-(corr_2)^2)/(ncorr_2-1))
      - {c )-}
      - else {c -(}
        qui gen relprec_mcse_`i' = 100 * sqrt(`relprecTT`i'' -2*(`relprecT`i''/`relprecB`i'')*`relprecTB`i'' +(`relprecT`i''/`relprecB`i'')^2*`relprecBB`i'') / `relprecB`i''
        {c )-}
      - {c )-}
      - else {c -(}
        qui gen relprec_`i' = .
        qui gen relprec_mcse_`i' = .
        {c )-}
      - {c )-}
      - if "`mse'"=="mse" {c -(}
      = if ""=="mse" {c -(}
        qui gen mse_mcse_`i' = msesd_`i' / sqrt(bsims_`i')
        {c )-}
      - if "`rmse'"=="rmse" {c -(}
      = if ""=="rmse" {c -(}
        qui gen rmse_`i' = sqrt(mse_`i')
        qui gen rmse_mcse_`i' = msesd_`i' / (2 * sqrt(bsims_`i') * rmse_`i')
        {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" {c -(}
      - if "`modelsemethod'"=="rmse" {c -(}
      = if "rmse"=="rmse" {c -(}
      - qui replace modelse_`i' = sqrt(varmean_`i')
      = qui replace modelse_2 = sqrt(varmean_2)
      - qui gen modelse_mcse_`i' = varsd_`i' / sqrt(4 * sesims_`i' * varmean_`i')
      = qui gen modelse_mcse_2 = varsd_2 / sqrt(4 * sesims_2 * varmean_2)
      - {c )-}
      - else if "`modelsemethod'"=="mean" {c -(}
      = else if "rmse"=="mean" {c -(}
        qui gen modelse_mcse_`i' = modelsesd_`i' / sqrt(sesims_`i')
        {c )-}
      - {c )-}
      - if "`ciwidth'"=="ciwidth" {c -(}
      = if "ciwidth"=="ciwidth" {c -(}
      - qui gen ciwidth_mcse_`i' = ciwidthsd_`i' / sqrt(bsims_`i')
      = qui gen ciwidth_mcse_2 = ciwidthsd_2 / sqrt(bsims_2)
      - {c )-}
      - if "`relerror'"=="relerror" {c -(}
      = if "relerror"=="relerror" {c -(}
      - qui gen relerror_`i' = 100*(modelse_`i'/empse_`i'-1)
      = qui gen relerror_2 = 100*(modelse_2/empse_2-1)
      - if "`robust'"=="" qui gen relerror_mcse_`i' = 100*(modelse_`i'/empse_`i') * sqrt((modelse_mcse_`i'/modelse_`i')^2 + (empse_mcse_`i'/empse_`i')^2 )
      = if ""=="" qui gen relerror_mcse_2 = 100*(modelse_2/empse_2) * sqrt((modelse_mcse_2/modelse_2)^2 + (empse_mcse_2/empse_2)^2 )
      - else {c -(}
        qui gen relerror_mcse_`i' = sqrt(`relerrorTT`i'' -2*(`relerrorT`i''/`relerrorB`i'')*`relerrorTB`i'' +(`relerrorT`i''/`relerrorB`i'')^2*`relerrorBB`i'') / `relerrorB`i''
        qui replace relerror_mcse_`i' = relerror_mcse_`i' * 100 / (2*(1+relerror_`i'/100))
        {c )-}
      - {c )-}
      - if "`cover'"=="cover" {c -(}
      = if ""=="cover" {c -(}
        qui gen cover_mcse_`i' = sqrt(cover_`i'*(100-cover_`i')/bothsims_`i') if bothsims_`i'>1
        {c )-}
      - if "`power'"=="power" {c -(}
      = if "power"=="power" {c -(}
      - qui gen power_mcse_`i' = sqrt(power_`i'*(100-power_`i')/bothsims_`i') if bothsims_`i'>1
      = qui gen power_mcse_2 = sqrt(power_2*(100-power_2)/bothsims_2) if bothsims_2>1
      - {c )-}
      - cap drop varmean_`i'
      = cap drop varmean_2
      - cap drop varsd_`i'
      = cap drop varsd_2
      - {c )-}
      - if !mi("`debug'") {c -(}
      = if !mi("") {c -(}
        di as input "Data after post-processing:"
        l
        {c )-}
      - local alpha=100-`level'
      = local alpha=100-95
      - local bsimsname Non-missing point estimates
      - local sesimsname Non-missing standard errors
      - local biasname Bias in point estimate
      - local meanname Mean of point estimate
      - local empsename Empirical standard error
      - local relprecname % gain in precision relative to method `label`refmethod''
      = local relprecname % gain in precision relative to method A
      - local msename Mean squared error
      - local rmsename Root mean squared error
      - if "`modelsemethod'" =="mean" local modelsename Mean model-based standard error `sebeta'
      = if "rmse" =="mean" local modelsename Mean model-based standard error 
      - if "`modelsemethod'" =="rmse" local modelsename RMS model-based standard error `sebeta'
      = if "rmse" =="rmse" local modelsename RMS model-based standard error 
      - local ciwidthname Mean conf. interval width
      - local relerrorname Relative % error in standard error
      - local covername % coverage of nominal `level'% conf. interval
      = local covername % coverage of nominal 95% conf. interval
      - local powername % power of `alpha'% level test
      = local powername % power of 5% level test
      - local keeplist `byvar'
      = local keeplist dgm estimand
      - foreach name in `output' {c -(}
      = foreach name in bsims sesims mean empse relprec modelse ciwidth relerror power {c -(}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "bsims"!="bsims" & "bsims"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename bsims_1 method1bsims
      - local keeplist `keeplist' method`i'`name'
      = local keeplist dgm estimand method1bsims
      - if `domcse' {c -(}
      = if 0 {c -(}
        rename `name'_mcse_`i' method`i'`name'_mcse
        local keeplist `keeplist' method`i'`name'_mcse
        {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename bsims_2 method2bsims
      - local keeplist `keeplist' method`i'`name'
      = local keeplist dgm estimand method1bsims method2bsims
      - if `domcse' {c -(}
      = if 0 {c -(}
        rename `name'_mcse_`i' method`i'`name'_mcse
        local keeplist `keeplist' method`i'`name'_mcse
        {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "sesims"!="bsims" & "sesims"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename sesims_1 method1sesims
      - local keeplist `keeplist' method`i'`name'
      = local keeplist dgm estimand method1bsims method2bsims method1sesims
      - if `domcse' {c -(}
      = if 0 {c -(}
        rename `name'_mcse_`i' method`i'`name'_mcse
        local keeplist `keeplist' method`i'`name'_mcse
        {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename sesims_2 method2sesims
      - local keeplist `keeplist' method`i'`name'
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims
      - if `domcse' {c -(}
      = if 0 {c -(}
        rename `name'_mcse_`i' method`i'`name'_mcse
        local keeplist `keeplist' method`i'`name'_mcse
        {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "mean"!="bsims" & "mean"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename mean_1 method1mean
      - local keeplist `keeplist' method`i'`name'
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename mean_mcse_1 method1mean_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename mean_2 method2mean
      - local keeplist `keeplist' method`i'`name'
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename mean_mcse_2 method2mean_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "empse"!="bsims" & "empse"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename empse_1 method1empse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename empse_mcse_1 method1empse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename empse_2 method2empse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename empse_mcse_2 method2empse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "relprec"!="bsims" & "relprec"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename relprec_1 method1relprec
      - local keeplist `keeplist' method`i'`name'
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename relprec_mcse_1 method1relprec_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename relprec_2 method2relprec
      - local keeplist `keeplist' method`i'`name'
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename relprec_mcse_2 method2relprec_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "modelse"!="bsims" & "modelse"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename modelse_1 method1modelse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1modelse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename modelse_mcse_1 method1modelse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1modelse method1modelse_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename modelse_2 method2modelse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1modelse method1modelse_mcse method2modelse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename modelse_mcse_2 method2modelse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "ciwidth"!="bsims" & "ciwidth"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename ciwidth_1 method1ciwidth
      - local keeplist `keeplist' method`i'`name'
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename ciwidth_mcse_1 method1ciwidth_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename ciwidth_2 method2ciwidth
      - local keeplist `keeplist' method`i'`name'
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename ciwidth_mcse_2 method2ciwidth_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "relerror"!="bsims" & "relerror"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename relerror_1 method1relerror
      - local keeplist `keeplist' method`i'`name'
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename relerror_mcse_1 method1relerror_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename relerror_2 method2relerror
      - local keeplist `keeplist' method`i'`name'
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename relerror_mcse_2 method2relerror_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "power"!="bsims" & "power"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename power_1 method1power
      - local keeplist `keeplist' method`i'`name'
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1power
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename power_mcse_1 method1power_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1power method1power_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename power_2 method2power
      - local keeplist `keeplist' method`i'`name'
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1power method1power_mcse method2power
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename power_mcse_2 method2power_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1power method1power_mcse method2power method2power_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - local methodlist `methodlist' method`i'
      = local methodlist  method1
      - {c )-}
      - local methodlist `methodlist' method`i'
      = local methodlist method1 method2
      - {c )-}
      - keep `keeplist'
      = keep dgm estimand method1bsims method2bsims method1sesims method2sesims method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1power method1power_mcse method2power method2power_mcse
      - qui reshape long `methodlist', i(`byvar') j(`gen'code) string
      = qui reshape long method1 method2, i(dgm estimand) j(_perfmeascode) string
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - char method`i'[varname] "`label`i''"
      = char method1[varname] "A"
      - label var method`i' "`label`i''"
      = label var method1 "A"
      - {c )-}
      - char method`i'[varname] "`label`i''"
      = char method2[varname] "B"
      - label var method`i' "`label`i''"
      = label var method2 "B"
      - {c )-}
      - local i 0
      - qui gen mcse = .
      - qui gen `gen'num = .
      = qui gen _perfmeasnum = .
      - foreach perfmeas in bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power {c -(}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="bsims"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="bsims_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="bsims" if _perfmeascode=="bsims_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 1 if _perfmeascode=="bsims" | _perfmeascode=="bsims_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "bsims"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "bsims"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "bsims"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "bsims"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "bsims"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "bsims"=="relprec" local label "% precision gain relative to method A"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "bsims"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "bsims"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "bsims"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "bsims"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "bsims"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "bsims"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "bsims"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 1 "Non-missing point estimates", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="sesims"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="sesims_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="sesims" if _perfmeascode=="sesims_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 2 if _perfmeascode=="sesims" | _perfmeascode=="sesims_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "sesims"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "sesims"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "sesims"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "sesims"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "sesims"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "sesims"=="relprec" local label "% precision gain relative to method A"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "sesims"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "sesims"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "sesims"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "sesims"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "sesims"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "sesims"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "sesims"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 2 "Non-missing standard errors", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="bias"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="bias_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="bias" if _perfmeascode=="bias_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 3 if _perfmeascode=="bias" | _perfmeascode=="bias_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "bias"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "bias"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "bias"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "bias"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "bias"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "bias"=="relprec" local label "% precision gain relative to method A"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "bias"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "bias"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "bias"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "bias"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "bias"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "bias"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "bias"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 3 "Bias in point estimate", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="mean"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="mean_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="mean" if _perfmeascode=="mean_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 4 if _perfmeascode=="mean" | _perfmeascode=="mean_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "mean"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "mean"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "mean"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "mean"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "mean"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "mean"=="relprec" local label "% precision gain relative to method A"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "mean"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "mean"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "mean"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "mean"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "mean"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "mean"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "mean"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 4 "Mean of point estimate", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="empse"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="empse_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="empse" if _perfmeascode=="empse_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 5 if _perfmeascode=="empse" | _perfmeascode=="empse_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "empse"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "empse"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "empse"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "empse"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "empse"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "empse"=="relprec" local label "% precision gain relative to method A"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "empse"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "empse"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "empse"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "empse"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "empse"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "empse"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "empse"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 5 "Empirical standard error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="relprec"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="relprec_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="relprec" if _perfmeascode=="relprec_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 6 if _perfmeascode=="relprec" | _perfmeascode=="relprec_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "relprec"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "relprec"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "relprec"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "relprec"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "relprec"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "relprec"=="relprec" local label "% precision gain relative to method A"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "relprec"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "relprec"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "relprec"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "relprec"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "relprec"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "relprec"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "relprec"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 6 "% precision gain relative to method A", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="mse"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="mse_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="mse" if _perfmeascode=="mse_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 7 if _perfmeascode=="mse" | _perfmeascode=="mse_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "mse"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "mse"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "mse"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "mse"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "mse"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "mse"=="relprec" local label "% precision gain relative to method A"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "mse"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "mse"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "mse"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "mse"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "mse"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "mse"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "mse"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 7 "Mean squared error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="rmse"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="rmse_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="rmse" if _perfmeascode=="rmse_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 8 if _perfmeascode=="rmse" | _perfmeascode=="rmse_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "rmse"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "rmse"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "rmse"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "rmse"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "rmse"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "rmse"=="relprec" local label "% precision gain relative to method A"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "rmse"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "rmse"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "rmse"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "rmse"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "rmse"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "rmse"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "rmse"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 8 "Root mean squared error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="modelse"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="modelse_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="modelse" if _perfmeascode=="modelse_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 9 if _perfmeascode=="modelse" | _perfmeascode=="modelse_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "modelse"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "modelse"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "modelse"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "modelse"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "modelse"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "modelse"=="relprec" local label "% precision gain relative to method A"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "modelse"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "modelse"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "modelse"=="modelse" {c -(}
      - if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
      = if "rmse" =="mean" local label "Mean model-based standard error"
      - if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
      = if "rmse" =="rmse" local label "RMS model-based standard error"
      - {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "modelse"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "modelse"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "modelse"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "modelse"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 9 "RMS model-based standard error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="ciwidth"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="ciwidth_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="ciwidth" if _perfmeascode=="ciwidth_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 10 if _perfmeascode=="ciwidth" | _perfmeascode=="ciwidth_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "ciwidth"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "ciwidth"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "ciwidth"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "ciwidth"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "ciwidth"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "ciwidth"=="relprec" local label "% precision gain relative to method A"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "ciwidth"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "ciwidth"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "ciwidth"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "ciwidth"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "ciwidth"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "ciwidth"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "ciwidth"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 10 "Mean conf. interval width", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="relerror"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="relerror_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="relerror" if _perfmeascode=="relerror_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 11 if _perfmeascode=="relerror" | _perfmeascode=="relerror_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "relerror"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "relerror"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "relerror"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "relerror"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "relerror"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "relerror"=="relprec" local label "% precision gain relative to method A"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "relerror"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "relerror"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "relerror"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "relerror"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "relerror"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "relerror"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "relerror"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 11 "Relative % error in standard error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="cover"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="cover_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="cover" if _perfmeascode=="cover_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 12 if _perfmeascode=="cover" | _perfmeascode=="cover_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "cover"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "cover"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "cover"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "cover"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "cover"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "cover"=="relprec" local label "% precision gain relative to method A"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "cover"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "cover"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "cover"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "cover"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "cover"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "cover"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "cover"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 12 "% coverage of nominal 95% conf. interval", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="power"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="power_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="power" if _perfmeascode=="power_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 13 if _perfmeascode=="power" | _perfmeascode=="power_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "power"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "power"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "power"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "power"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "power"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "power"=="relprec" local label "% precision gain relative to method A"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "power"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "power"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "power"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "power"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "power"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "power"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "power"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 13 "% power of 5% level test", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - assert !mi(mcse)
      - foreach var in `methodlist' {c -(}
      = foreach var in method1 method2 {c -(}
      - rename `var' `var'_
      = rename method1 method1_
      - local methodlist2 `methodlist2' `var'_
      = local methodlist2  method1_
      - {c )-}
      - rename `var' `var'_
      = rename method2 method2_
      - local methodlist2 `methodlist2' `var'_
      = local methodlist2 method1_ method2_
      - {c )-}
      - qui reshape wide `methodlist2', i(`byvar' `gen'num) j(mcse)
      = qui reshape wide method1_ method2_, i(dgm estimand _perfmeasnum) j(mcse)
      - local ids `gen'num `by'
      = local ids _perfmeasnum dgm estimand
      - local betas
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename method`i'_0 `beta`i''
      = rename method1_0 est1
      - label var `beta`i'' "`label`i''"
      = label var est1 "A"
      - char `beta`i''[varname] "`label`i''"
      = char est1[varname] "A"
      - local betasnomcse `betasnomcse' `beta`i''
      = local betasnomcse  est1
      - local betas `betas' `beta`i''
      = local betas  est1
      - if "`mcse'"=="mcse" {c -(}
      = if "mcse"=="mcse" {c -(}
      - rename method`i'_1 `beta`i''_mcse
      = rename method1_1 est1_mcse
      - local betas `betas' `beta`i''_mcse
      = local betas est1 est1_mcse
      - label var `beta`i''_mcse "`label`i'' (MCse)"
      = label var est1_mcse "A (MCse)"
      - char `beta`i''_mcse[varname] "(MCse)"
      = char est1_mcse[varname] "(MCse)"
      - {c )-}
      - {c )-}
      - rename method`i'_0 `beta`i''
      = rename method2_0 est2
      - label var `beta`i'' "`label`i''"
      = label var est2 "B"
      - char `beta`i''[varname] "`label`i''"
      = char est2[varname] "B"
      - local betasnomcse `betasnomcse' `beta`i''
      = local betasnomcse est1 est2
      - local betas `betas' `beta`i''
      = local betas est1 est1_mcse est2
      - if "`mcse'"=="mcse" {c -(}
      = if "mcse"=="mcse" {c -(}
      - rename method`i'_1 `beta`i''_mcse
      = rename method2_1 est2_mcse
      - local betas `betas' `beta`i''_mcse
      = local betas est1 est1_mcse est2 est2_mcse
      - label var `beta`i''_mcse "`label`i'' (MCse)"
      = label var est2_mcse "B (MCse)"
      - char `beta`i''_mcse[varname] "(MCse)"
      = char est2_mcse[varname] "(MCse)"
      - {c )-}
      - {c )-}
      - char `gen'num[varname] "Performance measure"
      = char _perfmeasnum[varname] "Performance measure"
      - label var `gen'num "Performance measure"
      = label var _perfmeasnum "Performance measure"
      - label var `gen'code "Performance measure"
      = label var _perfmeascode "Performance measure"
      - order `ids' `betas'
      = order _perfmeasnum dgm estimand est1 est1_mcse est2 est2_mcse
      - sort `gen'num `by'
      = sort _perfmeasnum dgm estimand
      - tokenize `format'
      = tokenize 
      - local bfmt "`1'"
      = local bfmt ""
      - local pctfmt "`2'"
      = local pctfmt ""
      - local nfmt "`3'"
      = local nfmt ""
      - if "`bfmt'"=="" {c -(}
      = if ""=="" {c -(}
      - if mi("`methodvar'") local bfmt: format `beta1'
      = if mi("method") local bfmt: format est1
      - else local bfmt `bfmt0'
      = else local bfmt %9.0g
      - {c )-}
      - if "`pctfmt'"=="" | "`pctfmt'"=="=" | "`pctfmt'"=="." local pctfmt `bfmt'
      = if ""=="" | ""=="=" | ""=="." local pctfmt %9.0g
      - if "`nfmt'"=="" local nfmt %7.0f
      = if ""=="" local nfmt %7.0f
      - if mi("`transpose'") {c -(}
      = if mi("") {c -(}
      - if "`list'"!="nolist" {c -(}
      = if ""!="nolist" {c -(}
      - if "`listsep'"=="" {c -(}
      = if ""=="" {c -(}
      - qui format `betas' `bfmt'
      = qui format est1 est1_mcse est2 est2_mcse %9.0g
      - list `ids' `betas', noo subvarname sepby(`gen'num `sepby') `abbreviate'
      = list _perfmeasnum dgm estimand est1 est1_mcse est2 est2_mcse, noo subvarname sepby(_perfmeasnum ) 
      - {c )-}
      - else {c -(}
        foreach perfmeas in `output' {c -(}
        di as text _new "``perfmeas'name'"
        local thisbetas = cond(inlist("`perfmeas'","bsims","sesims"), "betasnomcse", "betas")
        if inlist("`perfmeas'","bsims","sesims") local format `nfmt'
        else if inlist("`perfmeas'","bias","empse","modelse","mse") local format `bfmt'
        else local format `pctfmt'
        qui format `betas' `format'
        list `by' ``thisbetas'' if `gen'code=="`perfmeas'", noo subvarname sepby(`gen'num `sepby') `abbreviate'
        {c )-}
        {c )-}
      - {c )-}
      - qui format `betas' `bfmt'
      = qui format est1 est1_mcse est2 est2_mcse %9.0g
      - char `gen'num[varname]
      = char _perfmeasnum[varname]
      - {c )-}
      - else {c -(}
        di "Transposing results ..."
        drop `gen'num
        if "`origformat'"=="long" {c -(}
        {c )-}
        else if "`origformat'"=="wide" {c -(}
        foreach var of varlist `betas' {c -(}
        rename `var' b_`var'
        {c )-}
        local betastub b_
        {c )-}
        else exit 499
        qui reshape long `betastub', i(`gen'code `by') j(method) string
        qui reshape wide `betastub', i(`by' method) j(`gen'code) string
        if "`mcse'"=="mcse" {c -(}
        gen type = cond(substr(method,length(method)-4,5)=="_mcse","mcse","est")
        qui replace method = substr(method,1,length(method)-5) if type=="mcse"
        local type type
        local sep2 method
        {c )-}
        sort `by' method `type'
        foreach varname of varlist `betastub'* {c -(}
        local varname2 = substr("`varname'", 1+length("`betastub'"), .)
        rename `varname' `varname2'
        label var `varname2'
        {c )-}
        cap format `bias' `empse' `mse' `modelse' `bfmt'
        cap format `relprec' `relerror' `cover' `power' `pctfmt'
        cap format `bsims' `sesims' `sesims' `nfmt'
        if "`list'"!="nolist" {c -(}
        l `by' method `type' `bsims' `sesims' `bias' `empse' `relprec' `mse' `modelse' `relerror' `cover' `power', sepby(`by' `sep2') noo
        {c )-}
        {c )-}
      - if "`saving'"!="" {c -(}
      = if ""!="" {c -(}
        if "`by'"=="" drop `byvar'
        save `saving'
        {c )-}
      - if "`clear'"=="clear" {c -(}
      = if "clear"=="clear" {c -(}
      - restore, not
      - di as text "Results are now in memory."
      - {c )-}
      {hline 79} end simsum {hline}
    - if `methodlabels' == 0 local methodloop `metlist'
    = if 1 == 0 local methodloop 
    - else local methodloop `methodvalues'
    = else local methodloop 1 2
    - foreach v in `methodloop' {c -(}
    = foreach v in 1 2 {c -(}
    - if !mi("`se'") {c -(}
    = if !mi("se") {c -(}
    - if substr(" `estimate'`v'",strlen(" `estimate'`v'"),1)=="_" qui rename `estimate'`v'mcse `se'`v'
    = if substr(" est1",strlen(" est1"),1)=="_" qui rename est1mcse se1
    - else qui rename `estimate'`v'_mcse `se'`v'
    = else qui rename est1_mcse se1
      =struct rename_peldf {c -(}
      =        string scalar        element
      =        real scalar  elementtype
      =        real scalar            arg
      =        real scalar            match
      =struct rename_patterndf {c -(}
      =        real scalar  patterntype
      =        string scalar            original
      =        struct rename_peldf rowvector          ellist
      =        real rowvector            n_of
      =        string rowvector            varnames
      =        string matrix            pieces
      =struct rename_optiondf {c -(}
      =        real scalar       isrecase
      =        real scalar       isrecase_upper, isrecase_lower, isrecase_proper
      =        real scalar       isdryrun
      =        real scalar       isrenumber, isaddnumber
      =        real scalar            from
      =        real scalar       issort
      =        real scalar       isdebug
      =        real scalar       istest
      =        real scalar       isr
      =void rename_optiondf_init(struct rename_optiondf scalar option)
      =        option.isrecase = option.isdryrun = 0
      =                                option.isrecase_proper = 0
      =        option.isrenumber = option.isaddnumber = 0
      =        option.issort     = 0
      =        option.isdebug    = 0
      =        option.istest     = 0
      =        option.isr        = 0
      =struct rename_renamedf {c -(}
      =        struct rename_patterndf rowvector      oldplist
      =        struct rename_patterndf rowvector      newplist
      =        struct rename_optiondf scalar       option
      =void rename_cmd(string scalar thirdarg)
      =        string scalar    input
      =real scalar can_do_fast(string scalar input)
      =        string rowvector    token
      =        real scalar    rc
      =        if (length(token)!=2) return(0)
      =        if (!st_isname(token[1])) return(0)
      =        if (!st_isname(token[2])) return(0)
      =        if (token[1] == token[2]) return(0)
      =        return(1)
      =void rename_cmd_u(string scalar input)
      =        struct rename_renamedf scalar       ren
      =                dump_pattern(ren.oldplist, "old after parsing", 0)
      =                dump_pattern(ren.newplist, "new after parsing", 0)
      =void xeq_old_to_new(struct rename_renamedf scalar ren)
      =                dump_pattern(ren.oldplist, "old after linkage", 0)
      =                dump_pattern(ren.newplist, "new after linkage", 0)
      =                dump_pattern(ren.oldplist, "old final", 1)
      =                dump_pattern(ren.newplist, "new final", 1)
      =void xeq_recase(struct rename_renamedf scalar ren)
      =        fillin_old_varnames(ren.oldplist, ren.newplist, 0)
      =                dump_pattern(ren.oldplist, "old final", 1)
      =                dump_pattern(ren.newplist, "new final", 1)
      =void parse_cmd(struct rename_renamedf scalar ren, string scalar input)
      =        real scalar            c
      =        string scalar            lhs, ops
      =        string scalar            oldnames, newnames
      =        parse_cmd_pat_els(ren.oldplist, oldnames, 0)
      =                parse_cmd_pat_els(ren.newplist, newnames, 1)
      =real scalar parse_cmd_commaloc(string scalar s)
      =        real scalar    i, L
      =        real scalar    nestlev
      =        string scalar    c
      =void getarg(string scalar input, string scalar arg, string scalar rest)
      =        real scalar    L, npar, i
      =        string scalar    c
      =void parse_cmd_options(struct rename_optiondf scalar option, string scalar ops)
      =        string scalar            token
      =        transmorphic      t
      =        rename_optiondf_init(option)
      =void confirm_options_consistent(struct rename_optiondf scalar option)
      =        string rowvector    list
      =void parse_cmd_options_u(struct rename_optiondf scalar option, string scalar token, transmorphic t)
      =real scalar parse_cmd_options_u_std(struct rename_optiondf scalar option, string scalar source)
      =        real scalar    l
      =                option.isdebug = 1
      =                option.isdryrun = 1
      =                option.isrecase = option.isrecase_lower = 1
      =                option.isrecase = option.isrecase_proper= 1
      =                option.isr = 1
      =                option.issort = 1
      =                option.istest = 1
      =                option.isrecase = option.isrecase_upper = 1
      =        else    return(0)
      =        return(1)
      =real scalar parse_cmd_options_u_number(struct rename_optiondf scalar option, string scalar source,
      =                                                                transmorphic t)
      =        string scalar            token
      =        real scalar            from
      =        real scalar            l
      =        string scalar            op
      =        if (option.isrenumber | option.isaddnumber)  return(0)
      =                option.isrenumber = 1
      =                option.isaddnumber = 1
      =                return(1)
      =        return(1)
      =void parse_cmd_pat_els(struct rename_patterndf rowvector pat, string scalar toparse, real pattype)
      =        string scalar            token, curlist
      =        transmorphic      t
      =        real scalar       first
      =        first   = 1
      =                                first    = 1
      =                                first   = 0
      =void parse_cmd_pat_el(struct rename_patterndf rowvector pat, string scalar token, real pattype)
      =        string scalar            mytoken
      =        struct rename_patterndf scalar      mypat
      =        real scalar            i, j
      =        real matrix            found
      =        mypat.n_of        = J(1, (8), 0)
      =        confirm_not_empty(mytoken, pattype==0 ?
      =                if (i=strpos(mytoken, "*")) found = (found \ (i, (3)))
      =                if (i=strpos(mytoken, "?")) found = (found \ (i, (4) ))
      =                if (i=strpos(mytoken, "#")) found = (found \ (i, (5)))
      =                if (i=strpos(mytoken, "(")) found = (found \ (i, (6)))
      =                if (i=strpos(mytoken, "=")) found = (found \ (i, (7)))
      =                if (i=strpos(mytoken, ".")) found = (found \ (i, (8)))
      =                        if (i==(3)) {c -(}
      =                        else if (i==(4)) {c -(}
      =                        else if (i==(5)) {c -(}
      =                        else if (i==(6)) {c -(}
      =                        else if (i==(7)) {c -(}
      =                        else if (i==(8)) {c -(}
      =string scalar set_subscript(struct rename_patterndf scalar pat, string scalar token, real pt)
      =        real scalar    i
      =        string scalar    c
      =        if (pt != 1) {c -(}
      =        if (pt != 1)              return(token)
      =void set_pat_ETstrlist(struct rename_patterndf scalar pat, string scalar token)
      =        struct rename_peldf scalar          el
      =        el.elementtype = (1)
      =        pat.n_of[(1)] = pat.n_of[(1)] + 1
      =string scalar set_pat_str(struct rename_patterndf scalar pat, string scalar token)
      =        struct rename_peldf scalar          el
      =        el.elementtype = (2)
      =string scalar set_pat_ETstar(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar          el
      =        if (pat.patterntype == 0 && length(pat.ellist)) {c -(}
      =                if (pat.ellist[length(pat.ellist)].elementtype == (3)) {c -(}
      =        el.elementtype = (3)
      =string scalar set_pat_ETnum_v(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar          el
      =        if (pat.patterntype == 0 && length(pat.ellist)) {c -(}
      =                if (pat.ellist[length(pat.ellist)].elementtype == (5)) {c -(}
      =        el.elementtype = (5)
      =string scalar set_pat_ETeq(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar  el
      =        if (pat.patterntype == 0) {c -(}
      =        el.elementtype = (7)
      =string scalar set_pat_ETodot(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar  el
      =        if (pat.patterntype == 0) {c -(}
      =        el.elementtype = (8)
      =string scalar set_pat_ETqm(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar  el
      =        el.elementtype = (4)
      =string scalar set_pat_ETnum_f(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar          el
      =        real scalar            j
      =        el.elementtype = (6)
      =        if (el.arg > 10) {c -(}
      =void make_patternlist_lengths_equal(struct rename_renamedf scalar ren)
      =void build_recase_newpattern(struct rename_renamedf scalar ren)
      =        real scalar    i
      =        ren.newplist = rename_patterndf(length(ren.oldplist))
      =                ren.newplist[i].n_of        = J(1, (8), 0)
      =void link_patterns(struct rename_renamedf scalar ren)
      =        real scalar    i, jn
      =real scalar check_and_fix_ETnum(struct rename_patterndf scalar newp, struct rename_optiondf scalar option)
      =        real scalar            n, j, jn
      =        real scalar  tt
      =                if (tt==(5) | tt==(6)) {c -(}
      =                                (tt==(5) ? (9) : (10))
      =struct rename_linklocdf {c -(}
      =        real scalar    j_old, last_sequential_j_old
      =        real scalar    j_new
      =        real scalar    jn
      =        real rowvector    mapsub
      =void rename_linklocdf_init(struct rename_linklocdf scalar ll, real scalar jn)
      =void rename_linklocdf_next(struct rename_linklocdf scalar ll, struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp)
      =        real scalar subscr
      =real scalar map_subscript(real scalar subscr, real rowvector mapsub, struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp)
      =void link_patterns_u(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar jn)
      =        struct rename_linklocdf scalar      ll
      =        rename_linklocdf_init(ll, jn)
      =        rename_linklocdf_next(ll, oldp, newp)
      =                rename_linklocdf_next(ll, oldp, newp)
      =real rowvector pelidx_of_wcidx(struct rename_patterndf scalar oldp)
      =        real rowvector            toret
      =        real scalar            i
      =        real scalar  tt
      =                if (tt!=(1) & tt!=(2)) toret = (toret, i)
      =void confirm_wildcards_link(struct rename_patterndf scalar oldp, real scalar j_old,
      =                            struct rename_patterndf scalar newp, real scalar j_new)
      =        real scalar  tt_old, tt_new
      =        if (tt_new == (3)) return
      =        if (tt_new == (8))  return
      =        if (tt_new == (4)) {c -(}
      =                if (tt_old == (4)) return
      =        if (tt_new==(5) | tt_new==(6)) {c -(}
      =                if (tt_old==(5) | tt_old==(6)) return
      =string scalar printable_wildcard(struct rename_peldf scalar el)
      =        real scalar  tt
      =        if (tt == (3))  return("*")
      =        if (tt == (4))    return("?")
      =        if (tt == (8))  return(".")
      =        if (tt == (5)) return("#")
      =        if (tt == (6)) return("(" + el.arg*"*" + ")")
      =real scalar count_wildcards(struct rename_patterndf scalar pat)
      =        return(pat.n_of[(3)]  +
      =               pat.n_of[(4)]    +
      =               pat.n_of[(5)] +
      =               pat.n_of[(6)] +
      =               pat.n_of[(8)])
      =real scalar is_wildcard(real scalar tt)
      =        return( tt == (3)  |
      =                tt == (4)    |
      =                tt == (5) |
      =                tt == (6) |
      =                tt == (9) |
      =                tt == (10) |
      =                tt == (8)  )
      =real scalar find_next_wildcard(struct rename_peldf rowvector d, real scalar j0)
      =        real scalar    j
      =void fillin_old_varnames(struct rename_patterndf rowvector oldplist, struct rename_patterndf rowvector newplist,
      =                                                        real scalar issort)
      =        real scalar    i
      =        string scalar    tmpname
      =void fillin_old_varnames_u(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp,
      =                                        real scalar issort, string scalar tmpname)
      =        string rowvector            varnames, piece
      =        real scalar            i, n, nvars, nels
      =        string matrix            pieces
      =        real scalar  tt
      =        real scalar       filter_varlist, fillin_pieces
      =        filter_varlist = (oldp.n_of[(5)] + oldp.n_of[(6)] != 0)
      =        fillin_pieces  = (newp.n_of[(5)] + newp.n_of[(6)] +
      =                          newp.n_of[(3)]  + newp.n_of[(4)]    != 0)
      =        if (issort) fillin_pieces = 1
      =                        if (tt==(3) | tt==(4)) {c -(}
      =string scalar varlistpattern(struct rename_peldf rowvector ellist)
      =        real scalar    j
      =        string scalar    result
      =        if (ellist[1].elementtype == (1)) return(ellist[1].element)
      =string scalar varlist_el(struct rename_peldf scalar el)
      =        if (el.elementtype == (2))    return(el.element)
      =        if (el.elementtype == (3))   return("*")
      =        if (el.elementtype == (4))     return("?")
      =        if (el.elementtype == (5))  return("?*")
      =        if (el.elementtype == (6))  return(el.arg*"?")
      =struct rename_matchdf {c -(}
      =        real scalar    j0, j1
      =        real scalar    i0, i1
      =        string scalar    name
      =        string rowvector    pieces
      =real scalar matchvarname(string rowvector pieces, struct rename_peldf rowvector ellist, string scalar name)
      =        struct rename_matchdf scalar        m
      =                if (ellist[1].elementtype==(1)) {c -(}
      =                        return(1)
      =        if (!match_step(m, ellist)) return(0)
      =        return(1)
      =void match_setup(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, string scalar name)
      =real scalar match_step(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        real scalar            lefttomatch
      =        real scalar      mr
      =        real scalar     r
      =                if ((r=match_query_done(m))!=(-1)) return(r)
      =                if (match_simplification(m, ellist)==-1) return(0)
      =                if ((r=match_query_done(m))!=(-1)) return(r)
      =                        if (match_step_1(m, ellist)==-1) return(0)
      =                        if ((r=match_query_done(m))!=(-1)) return(r)
      =                        return(0)
      =                        if (mr==-1 | mr==0) return(0)
      =                        if (mr==-1 | mr==0) return(0)
      =real scalar match_step_1(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        if (ellist[m.j0].elementtype==(5)) {c -(}
      =                return(match_ETnum_v(m, ellist, 1))
      =        if (ellist[m.j0].elementtype==(3)) {c -(}
      =        return(-1)
      =real scalar match_step_2(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        if (ellist[m.j0].elementtype==(5)) {c -(}
      =                return(match_ETnum_v(m, ellist, 1))
      =        if (ellist[m.j0+1].elementtype==(5)) {c -(}
      =                return(match_ETnum_v(m, ellist, 0))
      =        return(-1)
      =real scalar match_step_3p(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        real scalar    j
      =        if (ellist[m.j0].elementtype==(3)) {c -(}
      =                if (ellist[j].elementtype==(3)) {c -(}
      =                if (ellist[j].elementtype==(5)) {c -(}
      =                        return(match_ETnum_v(m, ellist, 0))
      =        if (ellist[m.j0].elementtype==(5)) {c -(}
      =                return(match_ETnum_v(m, ellist, 1))
      =        return(-1)
      =real scalar match_query_done(struct rename_matchdf scalar m)
      =                if (m.i0 < m.i1) return(0)
      =                return(1)
      =        return((-1))
      =real scalar match_simplification(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        real scalar      mr
      =        while ((m.i1 >m.i0 & m.j1> m.j0)) {c -(}
      =                mr = match_fixed(m, ellist, 1)
      =                if (mr==-1) return(-1)
      =                if (mr==0)   break
      =        while ((m.i1 >m.i0 & m.j1> m.j0)) {c -(}
      =                mr = match_fixed(m, ellist, 0)
      =                if (mr==-1) return(-1)
      =                if (mr==0)   break
      =real scalar match_fixed(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, real scalar s)
      =        real scalar    j
      =        j = (s==1 ? m.j0 : m.j1-1)
      =        if (ellist[j].elementtype==(2))   return(match_ETstr(m, ellist, s))
      =        if (ellist[j].elementtype==(6)) return(match_ETnum_f(m, ellist, s))
      =        if (ellist[j].elementtype==(4))    return(match_ETqm(m, ellist, s))
      =        return(0)
      =real scalar match_ETstr(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, real scalar s)
      =        real scalar    j, len
      =        j = (s==1 ? m.j0 : m.j1-1)
      =        if (ellist[j].elementtype != (2)) return(0)
      =        if ((s==1 ?  usubstr(m.name, m.i0, len) :
      =                return(-1)
      =        return(1)
      =real scalar match_ETnum_f(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, real scalar s)
      =        real scalar    j, i, len
      =        string scalar    str, c
      =        j = (s==1 ? m.j0 : m.j1-1)
      =        if (ellist[j].elementtype != (6)) return(0)
      =        str = (s==1 ?  usubstr(m.name, m.i0, len) : usubstr(m.name, -len, .))
      =        if (ustrlen(str)!=len) return(-1)
      =                if (c<"0" | c>"9") return(-1)
      =        return(1)
      =real scalar match_ETqm(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, real scalar s)
      =        if (ellist[s==1 ? m.j0 : m.j1-1].elementtype != (4)) {c -(}
      =                return(0)
      =        if (m.i0==m.i1) return(-1)
      =        return(1)
      =real scalar match_ETnum_v(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, real scalar s)
      =        real scalar            j, i0, i1, len
      =        string scalar            c
      =        string scalar            c1
      =        struct rename_matchdf scalar        hold
      =        j = (s==1 ? m.j0 : m.j1-1)
      =        if (ellist[j].elementtype != (5)) return(0)
      =        if (s==1) {c -(}
      =                if (match_step(m, ellist)==1) return(1)
      =        return(-1)
      =real scalar match_ETstar_left(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        real scalar            len, newlen
      =        struct rename_matchdf scalar        hold
      =        real scalar       next_is_ETnum_v
      =        if (ellist[m.j0].elementtype != (3)) return(0)
      =                post_match_piece(m, 1, len)
      =                return(1)
      =        next_is_ETnum_v = (ellist[m.j0+1].elementtype==(5))
      =                post_match_piece(m, 1, len)
      =                if (match_step(m, ellist)==1) {c -(}
      =                                        post_match_piece(m, 1, newlen)
      =                        return(1)
      =        return(-1)
      =real scalar mstargiveback(string scalar s)
      =        real scalar    l
      =        string scalar    c
      =        string scalar    c1
      =void post_match_piece(struct rename_matchdf scalar m, real scalar s, real scalar len)
      =        if (s==1) {c -(}
      =void sort_old_varnames(struct rename_renamedf scalar ren)
      =        real scalar i
      =void sort_appropriate_field(struct rename_patterndf rowvector oldplist, struct rename_patterndf rowvector newplist)
      =        real scalar            i
      =        real scalar            j
      =real scalar j_of_renumber(struct rename_patterndf scalar plist)
      =        real scalar            j
      =        real scalar  tt
      =                if (tt==(9) | tt==(10)) return(j)
      =real scalar j_of_number(struct rename_patterndf scalar plist)
      =        real scalar            j, jtoret
      =        real scalar  tt
      =                if (tt==(3) | tt==(4) | tt==(5) | tt==(6)) {c -(}
      =void sort_on_field(struct rename_patterndf scalar plist, real scalar j)
      =        real scalar  tt
      =        real colvector            o
      =        string colvector            vc
      =                if (tt==(5) | tt==(6)) {c -(}
      =void fillin_new_varnames_recase(struct rename_renamedf scalar ren)
      =        real scalar    i
      =void fillin_new_varnames(struct rename_patterndf rowvector oldplist, struct rename_patterndf rowvector newplist, real scalar from)
      =        real scalar    i
      =void fillin_new_varnames_u(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar from)
      =        real scalar    i
      =        if (newp.ellist[1].elementtype==(1)) {c -(}
      =void fillin_new_varnames_u_u(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar from, real scalar i)
      =        real scalar            j
      =        string scalar            name
      =        real scalar  tt
      =                if (tt==(2)) {c -(}
      =                else if (tt==(3)) {c -(}
      =                else if (tt==(4)) {c -(}
      =                else if (tt==(5)) {c -(}
      =                else if (tt==(6)) {c -(}
      =                else if (tt==(7)) {c -(}
      =                else if (tt==(9)) {c -(}
      =                else if (tt==(10)) {c -(}
      =                else if (tt != (8)) {c -(}
      =string scalar fmt_ETnum_f(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar i, real scalar j)
      =        real scalar    n, len
      =        string scalar    res, orig
      =string scalar fmt_ETnum_f_r(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar j, real scalar from)
      =        real scalar    n, len
      =        string scalar res
      =string matrix build_toren(struct rename_patterndf rowvector oldplist, struct rename_patterndf rowvector newplist)
      =        string matrix    toren
      =        real scalar    i, N, n, k, k2
      =        real colvector    toselect
      =        string rowvector    lastrow, newrow
      =        real scalar hasomissions
      =                                hasomissions = 1
      =void perform_renames(string matrix toren, struct rename_optiondf scalar option)
      =        real scalar       use_intermediary
      =        string matrix            toren_nonulls
      =                        perform_dryrun(toren, toren_nonulls, 0)
      =void confirm_newnames_new(string matrix toren)
      =        real scalar    i
      =        real rowvector    varnum
      =        string rowvector    tocheck, badvar
      =void perform_set_r(string matrix toren)
      =void perform_test(string matrix toren, real scalar use_intermediary)
      =        real scalar    i
      =void perform_rename_straight(string matrix toren)
      =        real scalar    i
      =        real scalar    breakstatus
      =void perform_rename_intermediary(string matrix toren)
      =        real scalar    i
      =        real scalar    breakstatus
      =        string rowvector    tmpname
      =void perform_dryrun(string matrix toren, string matrix toren_nonulls, real scalar use_intermediary)
      =        real scalar    i
      =        real scalar    maxlen
      =        string scalar    sfmt, sfmtit
      =void dryrun_note1(string matrix toren, string matrix toren_nonulls)
      =        real scalar    i
      =        real scalar    nulls
      =void dryrun_note2(string matrix toren, real scalar use_intermediary)
      =        string colvector    dupnames, newname, oldname
      =real scalar names_not_jointly_unique(string matrix toren)
      =        real scalar    n0, n1
      =        string colvector    fulllist
      =void confirm_names_unique(string matrix toren)
      =void confirm_names_unique_1(string matrix toren, real scalar j)
      =        string colvector    names, corresponding
      =        string scalar    s
      =        real scalar    n
      =string colvector corresponding_names(string matrix toren, string scalar name, real scalar js, real scalar jd)
      =        real scalar    i
      =        string colvector    dups
      =void confirm_new_varnames_valid(string matrix toren)
      =        real scalar    i, n
      =        real colvector    bad
      =void confirm_not_empty(string scalar str, string scalar expected)
      =void errprint_bf_list(string vector list , |real scalar USER_MAXEL)
      =        real scalar            MAXEL
      =        real scalar            i, top
      =        real scalar       chopped
      =                        chopped = 1
      =                        chopped = 0
      =void errprint_bf_string(string scalar user_s, |real scalar USER_MAXLEN)
      =        real scalar            MAXLEN
      =        real scalar            len_last, target_last
      =        real scalar            len_remaining
      =        real scalar            i
      =        string rowvector            els
      =        string scalar            s, first, last
      =        real scalar       cont
      =        cont = 1
      =                else            cont   = 0
      =        string scalar    indent
      =void error_preceding_dash( pattype)
      =                        (pattype==0 ? "oldname" : "newname" ) )
      =void error_following_dash( pattype, string scalar what)
      =                        (pattype==0 ? "oldname" : "newname" ) )
      =void option_not_allowed(string scalar option)
      =void option_number_misspecified(string scalar op)
      =void error_ETnum_f_too_long(real scalar n_digits)
      =        errprintf("the {c -(}bf:(###...#){c )-} pattern is %g.\n", 10)
      =void error_patternlengths_unequal(struct rename_patterndf rowvector oldplist, struct rename_patterndf rowvector newplist)
      =        string scalar    s_old, s_new
      =void error_too_many_renumbers(string scalar op, struct rename_patterndf scalar newp)
      =void error_strlist_length(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp)
      =        real scalar    n_old, n_new
      =        string scalar    s_old, s_new
      =void error_missing_ETnum(string scalar opname, struct rename_patterndf scalar newp)
      =void error_too_many_wildcards(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp,
      =                                                        real scalar isaddnumber)
      =void error_wildcardmatch_qm(struct rename_patterndf scalar oldp, real scalar j_old,
      =                            struct rename_patterndf scalar newp, real scalar j_new)
      =void error_wildcardmatch_hash(struct rename_patterndf scalar oldp, real scalar j_old,
      =                              struct rename_patterndf scalar newp, real scalar j_new)
      =void error_no_right_bracket(string scalar original)
      =void error_inside_brackets(string scalar original)
      =void error_newnumber_subscripted(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp)
      =void error_subscript_invalid(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar subscr)
      =void error_subscripts_in_old(struct rename_patterndf scalar pat)
      =void dump_pattern(struct rename_patterndf rowvector pat, string scalar typ, real scalar incl_names)
      =        real scalar    i, j, n
      =        real scalar    nv, k, m
      =                        pat[i].n_of[(2)],
      =                        pat[i].n_of[(3)],
      =                        pat[i].n_of[(4)],
      =                        pat[i].n_of[(5)],
      =                        pat[i].n_of[(6)],
      =                        pat[i].n_of[(7)],
      =                        pat[i].n_of[(8)])
      =string scalar dump_xlate_tt(real scalar t)
      =        if (t==(1))     return("ETstrlist")
      =        if (t==(2))         return("ETstr")
      =        if (t==(3))        return("ETstar")
      =        if (t==(4))          return("ETqm")
      =        if (t==(5))       return("ETnum_v")
      =        if (t==(6))       return("ETnum_f")
      =        if (t==(7))          return("ETeq")
      =        if (t==(8))        return("ETodot")
      =        if (t==(9))     return("ETnum_v_r")
      =        if (t==(10))     return("ETnum_f_r")
      =void dump_options(struct rename_renamedf scalar ren)
      =void match_debug(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, string scalar msg)
      =string rowvector list_subtract(string rowvector a, string rowvector b)
      =        string rowvector result
      =string rowvector expand_varlist(string scalar pattern, string scalar tmpname)
      =        real scalar    rc
      =        string rowvector    result
      =string scalar ordinal_suffix(real scalar i)
      =        real scalar    lastdigit
      {hline 77} begin rename {hline}
      - version 12
      - mata: rename_cmd("`3'")
      = mata: rename_cmd("")
      {hline 79} end rename {hline}
    - {c )-}
    - else if substr(" `estimate'`v'",strlen(" `estimate'`v'"),1)=="_" qui rename `estimate'`v'mcse se`v'
    = else if substr(" est1",strlen(" est1"),1)=="_" qui rename est1mcse se1
    - else qui rename `estimate'`v'_mcse se`v'
    = else qui rename est1_mcse se1
    - {c )-}
    - if !mi("`se'") {c -(}
    = if !mi("se") {c -(}
    - if substr(" `estimate'`v'",strlen(" `estimate'`v'"),1)=="_" qui rename `estimate'`v'mcse `se'`v'
    = if substr(" est2",strlen(" est2"),1)=="_" qui rename est2mcse se2
    - else qui rename `estimate'`v'_mcse `se'`v'
    = else qui rename est2_mcse se2
      {hline 77} begin rename {hline}
      - version 12
      - mata: rename_cmd("`3'")
      = mata: rename_cmd("")
      {hline 79} end rename {hline}
    - {c )-}
    - else if substr(" `estimate'`v'",strlen(" `estimate'`v'"),1)=="_" qui rename `estimate'`v'mcse se`v'
    = else if substr(" est2",strlen(" est2"),1)=="_" qui rename est2mcse se2
    - else qui rename `estimate'`v'_mcse se`v'
    = else qui rename est2_mcse se2
    - {c )-}
    - local optionlistreshape `optionlist'
    = local optionlistreshape est se
    - local exclude "`true'"
    = local exclude ""
    - local optionlistreshape: list optionlistreshape - exclude
    - if !mi("`metlist'") local methodreshape `metlist'
    = if !mi("") local methodreshape 
    - else local methodreshape `valmethod'
    = else local methodreshape A B
    - if `methodstringindi'==1 {c -(}
    = if 0==1 {c -(}
      qui reshape long `optionlistreshape', i(`dgm' `target' _perfmeasnum) j(`method' "`methodreshape'") string
      {c )-}
    - else if `methodstringindi'==0 & `methodlabels' == 0 {c -(}
    = else if 0==0 & 1 == 0 {c -(}
      qui reshape long `optionlistreshape', i(`dgm' `target' _perfmeasnum) j(`method' "`methodreshape'")
      label value `method' `methodformat'
      {c )-}
    - else if `methodstringindi'==0 & `methodlabels' == 1 {c -(}
    = else if 0==0 & 1 == 1 {c -(}
    - qui reshape long `optionlistreshape', i(`dgm' `target' _perfmeasnum) j(`method' "`methodvalues'")
    = qui reshape long est se, i(dgm estimand _perfmeasnum) j(method "1 2")
      {hline 76} begin reshape {hline}
      - u_mi_not_mi_set reshape other
      - if _caller() <= 10 {c -(}
        reshape_10 `0'
        exit
        {c )-}
      - if _caller() >= 12 {c -(}
      - global ReS_Call : di "version " string(_caller()) ":"
      - {c )-}
      - version 5.0, missing
      - if "`1'"=="clear" {c -(}
      = if "long"=="clear" {c -(}
        char _dta[ReS_ver]
        char _dta[ReS_i]
        char _dta[ReS_j]
        char _dta[ReS_jv]
        char _dta[ReS_Xij]
        char _dta[Res_Xi]
        char _dta[ReS_atwl]
        char _dta[ReS_str]
        local xijn : char _dta[ReS_Xij_n]
        if "`xijn'" != "" {c -(}
        forvalues i = 1/`xijn' {c -(}
        char _dta[ReS_Xij_wide`i']
        char _dta[ReS_Xij_long`i']
        {c )-}
        char _dta[ReS_Xij_n]
        {c )-}
        exit
        {c )-}
      - if "`1'"=="wide" | "`1'"=="long" {c -(}
      = if "long"=="wide" | "long"=="long" {c -(}
      - DoNew `*'
      = DoNew long est se, i(dgm estimand _perfmeasnum) j(method 1 2 )
      - exit
      {hline 78} end reshape {hline}
    - label value `method' `methodformat'
    = label value method methodl
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("value", "val") > 0 ) {c -(}
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {c -(}
      = if "" != "" {c -(}
        local fix ", nofix"
        {c )-}
      - gettoken var rest : anything
      - while `"`rest'"' != "" {c -(}
      = while `" methodl"' != "" {c -(}
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "methodl"
      - {c )-}
      - while `"`rest'"' != "" {c -(}
      = while `""' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
      - local vlist : list anything - lab
      - if "`lab'" == "." {c -(}
      = if "methodl" == "." {c -(}
        local lab ""
        {c )-}
      - foreach var of varlist `vlist' {c -(}
      = foreach var of varlist method {c -(}
      - `vv' _label `val' `var' `lab' `fix'
      = version 15, missing: _label value method methodl 
      - {c )-}
      - {c )-}
      - else {c -(}
        `vv' _label `macval(0)'
        {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - {c )-}
    - else if `nformat'==3 {c -(}
    = else if 1==3 {c -(}
      qui order `rep' `dgm' `target'
      qui sort `rep' `dgm' `target'
      if `methodstringindi' == 0 & "`methodlabels'" == "1" local methodloop `methodvalues'
      else local methodloop `valmethod'
      foreach v in `methodloop' {c -(}
      if substr("`v'",strlen("`v'"),1)=="_" local v = substr("`v'", 1, index("`v'","_") - 1)
      local estlist`v' `estvars'`v'
      local estlist `estlist' `estlist`v''
      local selist`v' `sevars'`v'
      local selist `selist' `selist`v''
      {c )-}
      qui simsum `estlist' `if', true(`true') se(`selist') id(`rep') by(`truevariable' `dgm' `target') max(20) `anything' clear mcse gen(_perfmeas) `force'
      foreach v in `valmethod' {c -(}
      if substr("`v'",strlen("`v'"),1)=="_" local v = substr("`v'", 1, index("`v'","_") - 1)
      if `estchange' == 1 {c -(}
      qui rename `estimate'_`v'_mcse `se'`v'
      {c )-}
      else {c -(}
      if substr(" `estimate'`v'",strlen(" `estimate'`v'"),1)=="_" qui rename `estimate'`v'mcse `se'`v'
      else qui rename `estimate'`v'_mcse `se'`v'
      {c )-}
      if `sechange' == 1 qui rename `se'`v' `se'_`v'
      {c )-}
      {c )-}
    - qui gen indi = -_perfmeasnum
    - qui levelsof _perfmeasnum, local(lablevels)
      {hline 75} begin levelsof {hline}
      - version 15.0
      - syntax varname [if] [in] [, Separate(str) MISSing Local(name local) Clean MATROW(name) MATCELL(name) HEXadecimal ]
      - if ("`missing'" == "") {c -(}
      = if ("" == "") {c -(}
      - marksample touse, strok
      - {c )-}
      - else {c -(}
        marksample touse, strok novarlist
        {c )-}
      - if (`"`separate'"' == "") {c -(}
      = if (`""' == "") {c -(}
      - local separate " "
      - {c )-}
      - local typ : type `varlist'
      = local typ : type _perfmeasnum
      - if ("`typ'" == "strL" | substr("`typ'", 1, 3) == "str") {c -(}
      = if ("float" == "strL" | substr("float", 1, 3) == "str") {c -(}
        NoHexadecimal `hexadecimal'
        NoMatrow `matrow'
        {c )-}
      - mata: st_rclear()
      - if ("`typ'" == "strL") {c -(}
      = if ("float" == "strL") {c -(}
        LevelsOfStrL `varlist' if `touse', separate(`"`separate'"') `clean' matcell(`matcell')
        {c )-}
      - else if (substr("`typ'", 1, 3) == "str") {c -(}
      = else if (substr("float", 1, 3) == "str") {c -(}
        local isclean = ("`clean'" != "")
        mata: LevelsOfString("`varlist'", "`touse'", `"`separate'"', `isclean', "`matcell'")
        {c )-}
      - else {c -(}
      - local isint = inlist("`typ'", "byte", "int", "long")
      = local isint = inlist("float", "byte", "int", "long")
      - mata: LevelsOfReal("`varlist'", "`touse'", `"`separate'"', `isint', 1, "`matrow'", "`matcell'", "`hexadecimal'" != "")
      = mata: LevelsOfReal("_perfmeasnum", "__000001", `" "', 0, 1, "", "", "" != "")
      - if ("`usetab'" == "usetab") {c -(}
      = if ("" == "usetab") {c -(}
        cap LevelsOfTab `varlist' if `touse', `missing' separate(`"`separate'"') matrow(`matrow') matcell(`matcell') `hexadecimal'
        if (_rc) {c -(}
        mata: LevelsOfReal("`varlist'", "`touse'", `"`separate'"', `isint', 0, "`matrow'", "`matcell'", "`hexadecimal'" != "")
        {c )-}
        {c )-}
      - {c )-}
      - if ("`local'" != "") {c -(}
      = if ("lablevels" != "") {c -(}
      - c_local `local' `"`r(levels)'"'
      = c_local lablevels `"1 2 4 5 6 9 10 11 13"'
      - {c )-}
      - di as text `"`r(levels)'"'
      = di as text `"1 2 4 5 6 9 10 11 13"'
      {hline 77} end levelsof {hline}
    - foreach lablevel of local lablevels {c -(}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 1
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -1 "Non-missing point estimates", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -1 "Non-missing point estimates", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 2
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -2 "Non-missing standard errors", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -2 "Non-missing standard errors", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 4
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -4 "Mean of point estimate", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -4 "Mean of point estimate", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 5
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -5 "Empirical standard error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -5 "Empirical standard error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 6
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -6 "% precision gain relative to method A", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -6 "% precision gain relative to method A", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 9
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -9 "RMS model-based standard error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -9 "RMS model-based standard error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 10
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -10 "Mean conf. interval width", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -10 "Mean conf. interval width", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 11
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -11 "Relative % error in standard error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -11 "Relative % error in standard error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 13
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -13 "% power of 5% level test", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -13 "% power of 5% level test", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - label values indi indilab
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("values", "val") > 0 ) {c -(}
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {c -(}
      = if "" != "" {c -(}
        local fix ", nofix"
        {c )-}
      - gettoken var rest : anything
      - while `"`rest'"' != "" {c -(}
      = while `" indilab"' != "" {c -(}
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "indilab"
      - {c )-}
      - while `"`rest'"' != "" {c -(}
      = while `""' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
      - local vlist : list anything - lab
      - if "`lab'" == "." {c -(}
      = if "indilab" == "." {c -(}
        local lab ""
        {c )-}
      - foreach var of varlist `vlist' {c -(}
      = foreach var of varlist indi {c -(}
      - `vv' _label `val' `var' `lab' `fix'
      = version 15, missing: _label values indi indilab 
      - {c )-}
      - {c )-}
      - else {c -(}
        `vv' _label `macval(0)'
        {c )-}
      {hline 80} end label {hline}
    - qui drop _perfmeasnum
    - if `methodstringindi'==1 {c -(}
    = if 0==1 {c -(}
      capture quietly tostring `method', replace
      {c )-}
    - qui append using `estimatesdata'
    = qui append using C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp
      {hline 77} begin append {hline}
      - version 11
      - if (_caller() < 11) {c -(}
        local version : di "version " string(_caller()) ":"
        `version' _append `0'
        exit
        {c )-}
      - syntax [anything(everything)] [, GENerate(name) * ]
      - gettoken using filenames : anything
      - if (`"`using'"' != "using") {c -(}
      = if (`"using"' != "using") {c -(}
        di as err "using required"
        exit 100
        {c )-}
      - if (`"`filenames'"' == "") {c -(}
      = if (`" C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp"' == "") {c -(}
        di as err "invalid file specification"
        exit 198
        {c )-}
      - foreach filename of local filenames {c -(}
      - capture quietly describe using `"`filename'"'
      = capture quietly describe using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp"'
      - if (_rc) {c -(}
        di as err `"file `filename' not found"'
        exit 601
        {c )-}
      - {c )-}
      - if ("`generate'" != "") {c -(}
      = if ("" != "") {c -(}
        confirm new var `generate'
        local filenum 0
        gen byte `generate' = `filenum'
        local ++filenum
        local filenumpos = _N + 1
        {c )-}
      - foreach filename of local filenames {c -(}
      - capture noisily _append using `"`filename'"', `options'
      = capture noisily _append using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp"', 
      - if _rc {c -(}
        if ("`generate'" != "") {c -(}
        capture quietly drop if `generate' > 0
        capture quietly drop `generate'
        {c )-}
        exit _rc
        {c )-}
      - if ("`generate'" != "") {c -(}
      = if ("" != "") {c -(}
        quietly replace `generate' = `filenum' in `filenumpos'/L
        local ++filenum
        local filenumpos = _N + 1
        {c )-}
      - {c )-}
      {hline 79} end append {hline}
    - qui replace indi = `rep' if `rep'>0 & `rep'!=.
    = qui replace indi = rep if rep>0 & rep!=.
    - qui drop `rep'
    = qui drop rep
    - qui rename indi `rep'
    = qui rename indi rep
      {hline 77} begin rename {hline}
      - version 12
      - mata: rename_cmd("`3'")
      = mata: rename_cmd("")
      {hline 79} end rename {hline}
    - qui gen byte _dataset = `rep'>0 if `rep'!=.
    = qui gen byte _dataset = rep>0 if rep!=.
    - label define estimatesperformancelab 0 "Performance" 1 "Estimates"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define estimatesperformancelab 0 "Performance" 1 "Estimates"
      - {c )-}
      {hline 80} end label {hline}
    - label values _dataset estimatesperformancelab
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("values", "val") > 0 ) {c -(}
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {c -(}
      = if "" != "" {c -(}
        local fix ", nofix"
        {c )-}
      - gettoken var rest : anything
      - while `"`rest'"' != "" {c -(}
      = while `" estimatesperformancelab"' != "" {c -(}
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "estimatesperformancelab"
      - {c )-}
      - while `"`rest'"' != "" {c -(}
      = while `""' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
      - local vlist : list anything - lab
      - if "`lab'" == "." {c -(}
      = if "estimatesperformancelab" == "." {c -(}
        local lab ""
        {c )-}
      - foreach var of varlist `vlist' {c -(}
      = foreach var of varlist _dataset {c -(}
      - `vv' _label `val' `var' `lab' `fix'
      = version 15, missing: _label values _dataset estimatesperformancelab 
      - {c )-}
      - {c )-}
      - else {c -(}
        `vv' _label `macval(0)'
        {c )-}
      {hline 80} end label {hline}
    - if "`perfonly'"!="" qui drop if `rep'>0 & `rep'!=.
    = if ""!="" qui drop if rep>0 & rep!=.
    - qui order `allnames'
    = qui order rep method est se estimand dgm __000000
      {hline 78} begin order {hline}
      - version 11
      - if (_caller()<11) {c -(}
        _order `macval(0)'
        exit
        {c )-}
      - syntax varlist[, Before(varname) After(varname) first last SEQuential ALPHAbetic]
      - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'" == "" & "`alphabetic'" == "" & "`sequential'" == "") {c -(}
      = if (`""' == "" & `""' == "" & "" == "" & "" == "" & "" == "" & "" == "") {c -(}
      - _order `macval(0)'
      = _order rep method est se estimand dgm __000000
      - exit
      {hline 80} end order {hline}
    - if `methodcreated'!=1 {c -(}
    = if 0!=1 {c -(}
    - cap confirm numeric variable `method'
    = cap confirm numeric variable method
    - if _rc local methodstringindi = 1
    - else local methodstringindi = 0
    - local methodlabels = 0
    - if `nformat'==1 | (`nformat'==3 & `nmethod'==1) {c -(}
    = if 1==1 | (1==3 & 1==1) {c -(}
    - if `nmethod'!=0 {c -(}
    = if 1!=0 {c -(}
    - qui tab `method',m
    = qui tab method,m
    - local nmethodlabels = `r(r)'
    = local nmethodlabels = 2
    - cap qui labelsof `method'
    = cap qui labelsof method
      {hline 75} begin labelsof {hline}
      - version 8
      - syntax name [, Label ]
      - if "`label'"=="" {c -(}
      = if ""=="" {c -(}
      - local labdef: value label `namelist'
      = local labdef: value label method
      - if `"`labdef'"'=="" {c -(}
      = if `"methodl"'=="" {c -(}
        exit
        {c )-}
      - {c )-}
      - else local labdef "`namelist'"
      = else local labdef "method"
      - tempfile fn
      - qui label save `labdef' using `"`fn'"'
      = qui label save methodl using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000003.tmp"'
      - tempname fh
      - file open `fh' using `"`fn'"', read
      = file open __000001 using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000003.tmp"', read
      - file read `fh' line
      = file read __000001 line
      - local values
      - local labels
      - local space
      - if "`label'"=="" di as txt _n "`namelist' ({c -(}res{c )-}`labdef'{c -(}txt{c )-}):" _n
      = if ""=="" di as txt _n "method ({c -(}res{c )-}methodl{c -(}txt{c )-}):" _n
      - else di as txt _n "`labdef':"
      = else di as txt _n "methodl:"
      - while r(eof)==0 {c -(}
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken label line : line, parse(", ") match(paren)
      - local values "`values'`space'`value'"
      = local values "1"
      - local labels `"`labels'`space'`"`label'"'"'
      = local labels `"`"A"'"'
      - di as res %12s "`value'" " " `"`label'"'
      = di as res %12s "1" " " `"A"'
      - file read `fh' line
      = file read __000001 line
      - local space " "
      - {c )-}
      - while r(eof)==0 {c -(}
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken label line : line, parse(", ") match(paren)
      - local values "`values'`space'`value'"
      = local values "1 2"
      - local labels `"`labels'`space'`"`label'"'"'
      = local labels `"`"A"' `"B"'"'
      - di as res %12s "`value'" " " `"`label'"'
      = di as res %12s "2" " " `"B"'
      - file read `fh' line
      = file read __000001 line
      - local space " "
      - {c )-}
      - while r(eof)==0 {c -(}
        gettoken value line : line
        gettoken value line : line
        gettoken value line : line
        gettoken value line : line
        gettoken label line : line, parse(", ") match(paren)
        local values "`values'`space'`value'"
        local labels `"`labels'`space'`"`label'"'"'
        di as res %12s "`value'" " " `"`label'"'
        file read `fh' line
        local space " "
        {c )-}
      - file close `fh'
      = file close __000001
      - ret local labels `"`labels'"'
      = ret local labels `"`"A"' `"B"'"'
      - ret local values "`values'"
      = ret local values "1 2"
      - ret local name "`labdef'"
      = ret local name "methodl"
      {hline 77} end labelsof {hline}
    - cap qui ret list
    - if `"`r(labels)'"'!="" {c -(}
    = if `"`"A"' `"B"'"'!="" {c -(}
    - local 0 = `"`r(labels)'"'
    = local 0 = `"`"A"' `"B"'"'
    - forvalues i = 1/`nmethodlabels' {c -(}
    = forvalues i = 1/2 {c -(}
    - gettoken `method'label`i' 0 : 0, parse(": ")
    = gettoken methodlabel1 0 : 0, parse(": ")
    - local methlist `methlist' ``method'label`i''
    = local methlist  A
    - local methodlabels = 1
    - {c )-}
    - gettoken `method'label`i' 0 : 0, parse(": ")
    = gettoken methodlabel2 0 : 0, parse(": ")
    - local methlist `methlist' ``method'label`i''
    = local methlist A B
    - local methodlabels = 1
    - {c )-}
    - {c )-}
    - else {c -(}
      qui levels `method', local(levels)
      tokenize `"`levels'"'
      if `methodstringindi' == 0 {c -(}
      forvalues i = 1/`nmethodlabels' {c -(}
      local `method'label`i' `i'
      local methlist `methlist' ``method'label`i''
      {c )-}
      {c )-}
      else forvalues i = 1/`nmethodlabels' {c -(}
      local `method'label`i' ``i''
      local methlist `methlist' ``method'label`i''
      {c )-}
      {c )-}
    - {c )-}
    - {c )-}
    - if `nformat'==1 {c -(}
    = if 1==1 {c -(}
    - local valmethod = "`methlist'"
    = local valmethod = "A B"
    - {c )-}
    - else if `nformat'==2 {c -(}
    = else if 1==2 {c -(}
      local valmethod = "`method'"
      {c )-}
    - else if `nformat'==3 {c -(}
    = else if 1==3 {c -(}
      if `nmethod'==1 {c -(}
      local valmethod = "`methlist'"
      {c )-}
      else if `nmethod'>=1 & `nmethod'!=. {c -(}
      local valmethod = "`methlist'"
      {c )-}
      {c )-}
    - {c )-}
    - local simananalyserun = 1
    - local allthings `allthings' simananalyserun ifanalyse estchange sechange
    = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 simananalyserun ifanalyse estchange sechange
    - foreach thing in `allthings' {c -(}
    = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 simananalyserun ifanalyse estchange sechange {c -(}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 simananalyserun ifanalyse estchange sechange
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_rep] rep
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_dgm] dgm
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_target] estimand
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_method] method
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_estimate] est
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_se] se
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_df] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ci] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_p] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_true] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_order] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_lci] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_uci] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ifsetup] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_insetup] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_format] format 1: long-long
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_targetformat] long
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_methodformat] methodl
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_nformat] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ntarget] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ndgm] 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_nmethod] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_numtarget] 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_valtarget] beta gamma
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_nummethod] 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_valmethod] A B
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ntrue] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ntruevalue] single
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_dgmvar] dgm
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_numdgm] 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_dgmcreated] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_targetlabels] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_methodcreated] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_methodlabels] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_methodvalues] 1 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ntruestub] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_descriptiontype] variable
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_cidescriptiontype] variables
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_truedescriptiontype] variable
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_estvars] est
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_sevars] se
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_dfvars] N/A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_civars] N/A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_pvars] N/A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_truevars] N/A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_simansetuprun] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_m1] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_t1] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_simananalyserun] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ifanalyse] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_estchange] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_sechange] 0
    - {c )-}
    - di as text "siman analyse has run successfully"
siman analyse has run successfully
    - if "`table'"!="notable" {c -(}
    = if ""!="notable" {c -(}
    - cap noi siman_table
      {hline 72} begin siman_table {hline}
      - version 15
      - syntax [anything] [if], [Column(varlist) debug]
      - foreach thing in `_dta[siman_allthings]' {c -(}
      = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 simananalyserun ifanalyse estchange sechange {c -(}
      - local `thing' : char _dta[siman_`thing']
      = local allthings : char _dta[siman_allthings]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local rep : char _dta[siman_rep]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgm : char _dta[siman_dgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local target : char _dta[siman_target]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local method : char _dta[siman_method]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estimate : char _dta[siman_estimate]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local se : char _dta[siman_se]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local df : char _dta[siman_df]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ci : char _dta[siman_ci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local p : char _dta[siman_p]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local true : char _dta[siman_true]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local order : char _dta[siman_order]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local lci : char _dta[siman_lci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local uci : char _dta[siman_uci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifsetup : char _dta[siman_ifsetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local insetup : char _dta[siman_insetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local format : char _dta[siman_format]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetformat : char _dta[siman_targetformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodformat : char _dta[siman_methodformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nformat : char _dta[siman_nformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntarget : char _dta[siman_ntarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ndgm : char _dta[siman_ndgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nmethod : char _dta[siman_nmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numtarget : char _dta[siman_numtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valtarget : char _dta[siman_valtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nummethod : char _dta[siman_nummethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valmethod : char _dta[siman_valmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntrue : char _dta[siman_ntrue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruevalue : char _dta[siman_ntruevalue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmvar : char _dta[siman_dgmvar]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numdgm : char _dta[siman_numdgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmcreated : char _dta[siman_dgmcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetlabels : char _dta[siman_targetlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodcreated : char _dta[siman_methodcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodlabels : char _dta[siman_methodlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodvalues : char _dta[siman_methodvalues]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruestub : char _dta[siman_ntruestub]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local descriptiontype : char _dta[siman_descriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local cidescriptiontype : char _dta[siman_cidescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truedescriptiontype : char _dta[siman_truedescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estvars : char _dta[siman_estvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sevars : char _dta[siman_sevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dfvars : char _dta[siman_dfvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local civars : char _dta[siman_civars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local pvars : char _dta[siman_pvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truevars : char _dta[siman_truevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simansetuprun : char _dta[siman_simansetuprun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m1 : char _dta[siman_m1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local t1 : char _dta[siman_t1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simananalyserun : char _dta[siman_simananalyserun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifanalyse : char _dta[siman_ifanalyse]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estchange : char _dta[siman_estchange]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sechange : char _dta[siman_sechange]
      - {c )-}
      - if "`simananalyserun'"=="0" | "`simananalyserun'"=="" {c -(}
      = if "1"=="0" | "1"=="" {c -(}
        di as error "siman analyse has not been run.  Please use siman_analyse first before siman_table."
        exit 498
        {c )-}
      - preserve
      - if `nformat'!=1 {c -(}
      = if 1!=1 {c -(}
        qui siman_reshape, longlong
        foreach thing in `_dta[siman_allthings]' {c -(}
        local `thing' : char _dta[siman_`thing']
        {c )-}
        {c )-}
      - foreach val in `estvars' `sevars' {c -(}
      = foreach val in est se {c -(}
      - if strpos("`val'","_")!=0 {c -(}
      = if strpos("est","_")!=0 {c -(}
        if substr("`val'",strlen("`val'"),1)=="_" {c -(}
        local l = substr("`val'", 1,strlen("`val'","_") - 1)
        local `l'vars = "`l'"
        {c )-}
        {c )-}
      - {c )-}
      - if strpos("`val'","_")!=0 {c -(}
      = if strpos("se","_")!=0 {c -(}
        if substr("`val'",strlen("`val'"),1)=="_" {c -(}
        local l = substr("`val'", 1,strlen("`val'","_") - 1)
        local `l'vars = "`l'"
        {c )-}
        {c )-}
      - {c )-}
      - qui drop if `rep'>0
      = qui drop if rep>0
      - tempvar touse
      - marksample touse
      - if `dgmcreated' local dgm
      = if 0 local dgm
      - cap bysort `dgm' `method' `target' : assert `touse'==`touse'[1]
      = cap bysort dgm method estimand : assert __000002==__000002[1]
      - if _rc {c -(}
        di as error "'if' can only be used for dgm, method and target."
        exit 498
        {c )-}
      - if "`anything'"!="" {c -(}
      = if ""!="" {c -(}
        tempvar keep
        gen `keep' = 0
        foreach thing of local anything {c -(}
        qui count if _perfmeascode == "`thing'"
        if r(N)==0 di as error "Warning: performance measure not found: `thing'"
        qui replace `keep' = 1 if _perfmeascode == "`thing'"
        {c )-}
        qui keep if `keep'
        drop `keep'
        {c )-}
      - local perfvar = "bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power"
      - qui gen _perfmeascodeorder=.
      - local p = 0
      - foreach perf of local perfvar {c -(}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 0 if _perfmeascode == "bsims"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels  0 "bsims"
      - local p = `p' + 1
      = local p = 0 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 1 if _perfmeascode == "sesims"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims"
      - local p = `p' + 1
      = local p = 1 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 2 if _perfmeascode == "bias"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias"
      - local p = `p' + 1
      = local p = 2 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 3 if _perfmeascode == "mean"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean"
      - local p = `p' + 1
      = local p = 3 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 4 if _perfmeascode == "empse"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse"
      - local p = `p' + 1
      = local p = 4 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 5 if _perfmeascode == "relprec"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec"
      - local p = `p' + 1
      = local p = 5 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 6 if _perfmeascode == "mse"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse"
      - local p = `p' + 1
      = local p = 6 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 7 if _perfmeascode == "rmse"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse"
      - local p = `p' + 1
      = local p = 7 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 8 if _perfmeascode == "modelse"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse"
      - local p = `p' + 1
      = local p = 8 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 9 if _perfmeascode == "ciwidth"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth"
      - local p = `p' + 1
      = local p = 9 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 10 if _perfmeascode == "relerror"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth" 10 "relerror"
      - local p = `p' + 1
      = local p = 10 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 11 if _perfmeascode == "cover"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth" 10 "relerror" 11 "cover"
      - local p = `p' + 1
      = local p = 11 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 12 if _perfmeascode == "power"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth" 10 "relerror" 11 "cover" 12 "power"
      - local p = `p' + 1
      = local p = 12 + 1
      - {c )-}
      - label define perfl `perflabels'
      = label define perfl 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth" 10 "relerror" 11 "cover" 12 "power"
      - label values _perfmeascodeorder perfl
      - label variable _perfmeascodeorder "performance measure"
      - if "`sevars'" == "N/A" local sevars
      = if "se" == "N/A" local sevars
      - if `dgmcreated' local dgmvar
      = if 0 local dgmvar
      - foreach onedgmvar in `dgmvar' {c -(}
      = foreach onedgmvar in dgm {c -(}
      - summ `onedgmvar' `if', meanonly
      = summ dgm , meanonly
      - if r(min)<r(max) local newdgmvar `newdgmvar' `onedgmvar'
      = if r(min)<r(max) local newdgmvar  dgm
      - else if !mi("`debug'") di as error "Ignoring non-varying dgmvar: `onedgmvar'"
      = else if !mi("") di as error "Ignoring non-varying dgmvar: dgm"
      - {c )-}
      - local dgmvar `newdgmvar'
      = local dgmvar dgm
      - local myfactors _perfmeascodeorder `dgmvar' `target' `method'
      = local myfactors _perfmeascodeorder dgm estimand method
      - if !mi("`debug'") di as input "Factors to display: `myfactors'"
      = if !mi("") di as input "Factors to display: _perfmeascodeorder dgm estimand method"
      - tempvar group
      - foreach thing in dgmvar target method {c -(}
      - local n`thing'vars = wordcount("``thing''")
      = local ndgmvarvars = wordcount("dgm")
      - if !mi("`thing'") {c -(}
      = if !mi("dgmvar") {c -(}
      - egen `group' = group(``thing'')
      = egen __000003 = group(dgm)
      - qui levelsof `group'
      = qui levelsof __000003
      - local n`thing'levels = r(r)
      = local ndgmvarlevels = r(r)
      - {c )-}
      - else n`thing'levels = 1
      = else ndgmvarlevels = 1
      - if !mi("`debug'") di "`n`thing'levels' levels, `thing': `n`thing'vars' variables (``thing'')"
      = if !mi("") di "2 levels, dgmvar: 1 variables (dgm)"
      - drop `group'
      = drop __000003
      - {c )-}
      - local n`thing'vars = wordcount("``thing''")
      = local ntargetvars = wordcount("estimand")
      - if !mi("`thing'") {c -(}
      = if !mi("target") {c -(}
      - egen `group' = group(``thing'')
      = egen __000003 = group(estimand)
      - qui levelsof `group'
      = qui levelsof __000003
      - local n`thing'levels = r(r)
      = local ntargetlevels = r(r)
      - {c )-}
      - else n`thing'levels = 1
      = else ntargetlevels = 1
      - if !mi("`debug'") di "`n`thing'levels' levels, `thing': `n`thing'vars' variables (``thing'')"
      = if !mi("") di "2 levels, target: 1 variables (estimand)"
      - drop `group'
      = drop __000003
      - {c )-}
      - local n`thing'vars = wordcount("``thing''")
      = local nmethodvars = wordcount("method")
      - if !mi("`thing'") {c -(}
      = if !mi("method") {c -(}
      - egen `group' = group(``thing'')
      = egen __000003 = group(method)
      - qui levelsof `group'
      = qui levelsof __000003
      - local n`thing'levels = r(r)
      = local nmethodlevels = r(r)
      - {c )-}
      - else n`thing'levels = 1
      = else nmethodlevels = 1
      - if !mi("`debug'") di "`n`thing'levels' levels, `thing': `n`thing'vars' variables (``thing'')"
      = if !mi("") di "2 levels, method: 1 variables (method)"
      - drop `group'
      = drop __000003
      - {c )-}
      - if "`column'"=="" {c -(}
      = if ""=="" {c -(}
      - if `nmethodlevels'>1 local column `method'
      = if 2>1 local column method
      - else if `ntargetlevels'>1 local column `target'
      = else if 2>1 local column estimand
      - else local column : word 1 of `dgmvar'
      = else local column : word 1 of dgm
      - {c )-}
      - if !strpos("`column'","perfmeas") local row _perfmeascodeorder
      = if !strpos("method","perfmeas") local row _perfmeascodeorder
      - else di as error "siman table doesn't yet know how to format the table when perfmeas is in the columns"
      - local by : list myfactors - column
      - local by : list by - row
      - if wordcount("`by'")>4 {c -(}
      = if wordcount("dgm estimand")>4 {c -(}
        di as error "There are too many factors to display. Consider using an if condition for your dgmvars."
        {c )-}
      - local tablecommand tabdisp `row' `column' `if', by(`by') c(`estvars' `sevars') stubwidth(20)
      = local tablecommand tabdisp _perfmeascodeorder method , by(dgm estimand) c(est se) stubwidth(20)
      - if !mi("`debug'") {c -(}
      = if !mi("") {c -(}
        di "Table column: `column'"
        di "Table row: `row'"
        di "Table by: `by'"
        di "Table command: `tablecommand'"
        {c )-}
      - `tablecommand'
      = tabdisp _perfmeascodeorder method , by(dgm estimand) c(est se) stubwidth(20)

{hline 21}{c TT}{hline 21}
dgm, estimand and    {c |}        method       
performance measure  {c |}         A          B
{hline 21}{c +}{hline 21}
1                    {c |}
beta                 {c |}
               bsims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                mean {c |} {res}-.0043991  -.0025973
                     {txt}{c |}  {res}.0024993   .0035644
                     {txt}{c |} 
               empse {c |}  {res}.0790336   .1127159
                     {txt}{c |}  {res}.0017681   .0025217
                     {txt}{c |} 
             relprec {c |}          {res}   -50.8353
                     {txt}{c |}          {res}    2.28676
                     {txt}{c |} 
             modelse {c |}  {res}.0787452   .1136343
                     {txt}{c |}  {res}.0001572   .0003405
                     {txt}{c |} 
             ciwidth {c |}  {res}.3080681   .4434751
                     {txt}{c |}  {res}.0006123   .0013217
                     {txt}{c |} 
            relerror {c |} {res}-.3649609   .8147949
                     {txt}{c |}  {res}2.237882   2.275551
                     {txt}{c |} 
               power {c |}       {res}5.3        4.3
                     {txt}{c |}  {res}.7084561   .6414905
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
gamma                {c |}
               bsims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                mean {c |}  {res}.0005151   .0056354
                     {txt}{c |}  {res}.0025476   .0035789
                     {txt}{c |} 
               empse {c |}  {res}.0805615   .1131762
                     {txt}{c |}  {res}.0018023    .002532
                     {txt}{c |} 
             relprec {c |}          {res}  -49.33068
                     {txt}{c |}          {res}   2.314097
                     {txt}{c |} 
             modelse {c |}  {res}.0788425   .1140264
                     {txt}{c |}  {res}.0001466   .0003426
                     {txt}{c |} 
             ciwidth {c |}  {res}.3085282   .4450112
                     {txt}{c |}  {res}.0005716   .0013243
                     {txt}{c |} 
            relerror {c |} {res}-2.133844   .7512448
                     {txt}{c |}  {res}2.196998   2.274225
                     {txt}{c |} 
               power {c |}       {res}5.5        3.6
                     {txt}{c |}  {res}.7209369    .589101
{txt}{hline 21}{c +}{hline 21}
2                    {c |}
beta                 {c |}
               bsims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                mean {c |} {res}-.0046965  -.0058509
                     {txt}{c |}  {res}.0028908   .0039932
                     {txt}{c |} 
               empse {c |}  {res}.0914144   .1262755
                     {txt}{c |}  {res}.0020451    .002825
                     {txt}{c |} 
             relprec {c |}          {res}  -47.59274
                     {txt}{c |}          {res}   2.430245
                     {txt}{c |} 
             modelse {c |}  {res}.0910296   .1313619
                     {txt}{c |}  {res}.0001752   .0003826
                     {txt}{c |} 
             ciwidth {c |}   {res}.356176   .5127883
                     {txt}{c |}   {res}.000683   .0014841
                     {txt}{c |} 
            relerror {c |}  {res}-.420924   4.028049
                     {txt}{c |}  {res}2.236001   2.346937
                     {txt}{c |} 
               power {c |}         {res}5        4.4
                     {txt}{c |}  {res}.6892024   .6485677
{txt}{hline 21}{c +}{hline 21}
2                    {c |}
gamma                {c |}
               bsims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                mean {c |}  {res}.0005948   .0065072
                     {txt}{c |}  {res}.0029417   .0041326
                     {txt}{c |} 
               empse {c |}  {res}.0930244   .1306846
                     {txt}{c |}  {res}.0020811   .0029237
                     {txt}{c |} 
             relprec {c |}          {res}  -49.33068
                     {txt}{c |}          {res}   2.314097
                     {txt}{c |} 
             modelse {c |}  {res}.0910394   .1316664
                     {txt}{c |}  {res}.0001693   .0003955
                     {txt}{c |} 
             ciwidth {c |}  {res}.3562577   .5138547
                     {txt}{c |}  {res}.0006601   .0015292
                     {txt}{c |} 
            relerror {c |} {res}-2.133846    .751246
                     {txt}{c |}  {res}2.196998   2.274225
                     {txt}{c |} 
               power {c |}       {res}5.5        3.6
                     {txt}{c |}  {res}.7209369    .589101
{txt}{hline 21}{c BT}{hline 21}
      - cap assert missing(`sevars')
      = cap assert missing(se)
      - if _rc {c -(}
      - di "{c -(}it: NOTE: Where there are 2 entries in the table, {c )-}"
{it: NOTE: Where there are 2 entries in the table, }
      - di "{c -(}it: the first entry is the performance measure and {c )-}"
{it: the first entry is the performance measure and }
      - di "{c -(}it: the second entry is its Monte Carlo error.{c )-}"
{it: the second entry is its Monte Carlo error.}
      - {c )-}
      - restore
      {hline 74} end siman_table {hline}
    - if _rc {c -(}
      di as text "siman analyse has run successfully, but presenting the results using siman table has failed"
      exit _rc
      {c )-}
    - {c )-}

{com}. 
. siman lollyplot, xtitle("test x-title") ytitle("test y-title") name("lollyplot_test3", replace)
{txt}Performance measures not specified and no true value: defaulting to mean empse relerror
Drawing 2 graphs (one per target)...
{res}{txt}
{com}.  
.  
. * DGM missing
. ************** 
. * Target numeric, method missing, true > 1 level (different true values per target)
. use data/simlongESTPM_longE_longM.dta, clear
{txt}
{com}. replace true=0.5 if estimand=="beta"
{txt}(4,000 real changes made)

{com}. drop dgm method
{txt}
{com}. gen estimand_num = .
{txt}(8,000 missing values generated)

{com}. replace estimand_num = 1 if estimand == "beta"
{txt}(4,000 real changes made)

{com}. replace estimand_num = 2 if estimand == "gamma"
{txt}(4,000 real changes made)

{com}. drop estimand
{txt}
{com}. rename estimand_num estimand
{res}{txt}
{com}. bysort rep estimand: gen repitionindi=_n
{txt}
{com}. drop if repitionindi>1
{txt}(6,000 observations deleted)

{com}. drop repitionindi
{txt}
{com}. siman setup, rep(rep) target(estimand) estimate(est) se(se) true(true)
{err}{it:WARNING: no method specified, siman will proceed assuming there is only one method.}
{it:If this is a mistake, enter method() option in -siman setup-}

{txt}{col 20}SUMMARY OF DATA
_____________________________________________________

The siman format is:{res}{col 35}format 1: long-long
{txt}The format for targets is:{res}{col 35}long
{txt}The format for methods is:{res}{col 35}long
{txt}The number of targets is:{res}{col 35}2
{txt}The target values are:{res}{col 35}1 2

{txt}The number of methods is:{res}{col 35}1
{txt}The method values are:{res}{col 35}1

Data generating mechanism (dgm)
{txt}The total number of dgms is: {res}{col 35}0
{txt}The dgm variables (# levels): {res}{col 35}none

Estimates are contained in the dataset

{txt}The estimates variable is:{res}{col 35}est
{txt}The se variable is:{res}{col 35}se
{txt}The df variable is:{res}{col 35}N/A
{txt}The ci variables are:{res}{col 35}N/A
{txt}The p variable is:{res}{col 35}N/A
{txt}The true variable is:{res}{col 35}true
{txt}_____________________________________________________

{com}. 
. * graphs
. siman scatter, ytitle("test y-title") xtitle("test x-title") name("scatter_test4", replace) 
{txt}working.....
{res}{txt}
{com}. 
. cap siman swarm, graphoptions(ytitle("test y-title") xtitle("test x-title") name("swarm_test4", replace)) 
{txt}
{com}. assert _rc == 498
{txt}
{com}. * siman swarm can not be run without method as required
. 
. siman zipplot, scheme(scheme(s2color)) legend(order(3 "Carrot" 4 "Stalk")) xtit("x-title") ytit("y-title") ylab(0 40 100) noncoveroptions(pstyle(p3)) ///
> coveroptions(pstyle(p4)) scatteroptions(mcol(gray%50)) truegraphoptions(pstyle(p6)) name("zipplot_test4", replace)    
{txt}Drawing 2 graphs (1 per true value)...
{res}{txt}
{com}. 
. cap siman comparemethodsscatter, title("testtitle") subgr(xtit("testaxis")) name("cms_test4", replace) 
{txt}
{com}. assert _rc == 498
{txt}
{com}. * siman cms can not be run without method as required
. 
. cap siman blandaltman, ytitle("test y-title") xtitle("test x-title") name("ba_test4", replace) 
{txt}
{com}. assert _rc == 498
{txt}
{com}. * siman bland altman can not be run without method as required
. 
. * Target numeric, method numeric, true > 1 level (different true values per target)
. clear all
{res}{txt}
{com}. prog drop _all
{txt}
{com}. use data/simlongESTPM_longE_longM.dta, clear
{txt}
{com}. * need to alter data set so have 2 values of true corresponding to 2 estimands,
. * and a complete method set for each of these. 
. replace true=0.5 if estimand=="beta"
{txt}(4,000 real changes made)

{com}. gen estimand_num = .
{txt}(8,000 missing values generated)

{com}. replace estimand_num = 1 if estimand == "beta"
{txt}(4,000 real changes made)

{com}. replace estimand_num = 2 if estimand == "gamma"
{txt}(4,000 real changes made)

{com}. drop estimand
{txt}
{com}. *drop if dgm == 2
. rename estimand_num estimand
{res}{txt}
{com}. siman setup, rep(rep) dgm(dgm) target(estimand) method(method) estimate(est) se(se) true(true)

{txt}{col 20}SUMMARY OF DATA
_____________________________________________________

The siman format is:{res}{col 35}format 1: long-long
{txt}The format for targets is:{res}{col 35}long
{txt}The format for methods is:{res}{col 35}long
{txt}The number of targets is:{res}{col 35}2
{txt}The target values are:{res}{col 35}1 2

{txt}The number of methods is:{res}{col 35}2
{txt}The method values are:{res}{col 35}1 2

Data generating mechanism (dgm)
{txt}The total number of dgms is: {res}{col 35}2
{txt}The dgm variables (# levels): {res}{col 35}dgm (2) 

Estimates are contained in the dataset

{txt}The estimates variable is:{res}{col 35}est
{txt}The se variable is:{res}{col 35}se
{txt}The df variable is:{res}{col 35}N/A
{txt}The ci variables are:{res}{col 35}N/A
{txt}The p variable is:{res}{col 35}N/A
{txt}The true variable is:{res}{col 35}true
{txt}_____________________________________________________

{com}. 
. siman scatter
{txt}working.....
{res}{txt}
{com}. siman swarm
{txt}working.....

{com}. siman zipplot
{txt}Drawing 2 graphs (1 per true value)...
{res}{txt}
{com}. siman comparemethodsscatter
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist est se    true
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number true
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("est",strlen("est"),1)=="_" local estimate = substr("est", 1, index("est","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("true",strlen("true"),1)=="_" local true = substr("true", 1, index("true","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist est se    true
        - local numberdgms: word count `dgm'
        = local numberdgms: word count dgm
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 1!=1 local optionlist est se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 2
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 1 {c -(}
          - capture assert `varlist' == int(`varlist') if `touse'
          = capture assert method == int(method) if __000003
          - if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
          - tempname Vals
          - qui tab `varlist' if `touse', `missing' matrow(`Vals')
          = qui tab method if __000003,  matrow(__000004)
          - local nvals = r(r)
          - forval i = 1 / `nvals' {c -(}
          = forval i = 1 / 2 {c -(}
          - local val = `Vals'[`i',1]
          = local val = __000004[1,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 1 < 2 local vals "1 "
          - else local vals "`vals'`val'"
          = else local vals "1 1"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[2,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 2 < 2 local vals "1 2 "
          - else local vals "`vals'`val'"
          = else local vals "1 2"
          - {c )-}
          - {c )-}
          - else {c -(}
            tempvar select counter
            bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
            generate `counter' = sum(`select') * (`select' == 1)
            sort `counter'
            qui count if `counter' == 0
            local j = 1 + r(N)
            local nvals = _N
            if "`clean'" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
            else {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
            else local vals `"`vals'`"`=`varlist'[`i']'"'"'
            {c )-}
            {c )-}
            {c )-}
          - di as txt `"`vals'"'
          = di as txt `"1 2"'
          - return local levels `"`vals'"'
          = return local levels `"1 2"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"1 2"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"1 2"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/2 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("1",strlen("1"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "1"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist 1
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist 1 1
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("2",strlen("2"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "2"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist 2
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist 1 2
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "1 2"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "1"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 0 == 0 {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        = qui reshape wide "est se    true", i(rep dgm "estimand") j(method "1 2")
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide est se    true , i(rep dgm estimand ) j(method 1 2 )
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 0 == 1 & "0" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/2 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] true
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if "true"!="" char _dta[siman_truevars] true
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "multiple"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "multiple"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "1 2"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
Working.....
{res}{txt}
{com}. siman blandaltman
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist est se    true
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number true
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("est",strlen("est"),1)=="_" local estimate = substr("est", 1, index("est","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("true",strlen("true"),1)=="_" local true = substr("true", 1, index("true","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist est se    true
        - local numberdgms: word count `dgm'
        = local numberdgms: word count dgm
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 1!=1 local optionlist est se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 2
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 1 {c -(}
          - capture assert `varlist' == int(`varlist') if `touse'
          = capture assert method == int(method) if __000003
          - if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
          - tempname Vals
          - qui tab `varlist' if `touse', `missing' matrow(`Vals')
          = qui tab method if __000003,  matrow(__000004)
          - local nvals = r(r)
          - forval i = 1 / `nvals' {c -(}
          = forval i = 1 / 2 {c -(}
          - local val = `Vals'[`i',1]
          = local val = __000004[1,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 1 < 2 local vals "1 "
          - else local vals "`vals'`val'"
          = else local vals "1 1"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[2,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 2 < 2 local vals "1 2 "
          - else local vals "`vals'`val'"
          = else local vals "1 2"
          - {c )-}
          - {c )-}
          - else {c -(}
            tempvar select counter
            bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
            generate `counter' = sum(`select') * (`select' == 1)
            sort `counter'
            qui count if `counter' == 0
            local j = 1 + r(N)
            local nvals = _N
            if "`clean'" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
            else {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
            else local vals `"`vals'`"`=`varlist'[`i']'"'"'
            {c )-}
            {c )-}
            {c )-}
          - di as txt `"`vals'"'
          = di as txt `"1 2"'
          - return local levels `"`vals'"'
          = return local levels `"1 2"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"1 2"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"1 2"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/2 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("1",strlen("1"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "1"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist 1
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist 1 1
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("2",strlen("2"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "2"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist 2
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist 1 2
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "1 2"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "1"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 0 == 0 {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        = qui reshape wide "est se    true", i(rep dgm "estimand") j(method "1 2")
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide est se    true , i(rep dgm estimand ) j(method 1 2 )
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 0 == 1 & "0" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/2 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] true
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if "true"!="" char _dta[siman_truevars] true
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "multiple"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "multiple"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "1 2"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
working....
{res}{txt}
{com}. 
. 
. * now try with missing target
. use data/simlongESTPM_longE_longM.dta, clear
{txt}
{com}. drop estimand
{txt}
{com}. bysort rep dgm method: gen repitionindi=_n
{txt}
{com}. drop if repitionindi == 2
{txt}(4,000 observations deleted)

{com}. drop repitionindi
{txt}
{com}. siman setup, rep(rep) dgm(dgm) method(method) estimate(est) se(se) true(true)

{txt}{col 20}SUMMARY OF DATA
_____________________________________________________

The siman format is:{res}{col 35}format 1: long-long
{txt}The format for targets is:{res}{col 35}long
{txt}The format for methods is:{res}{col 35}long
{txt}The number of targets is:{res}{col 35}N/A
{txt}The target values are:{res}{col 35}N/A

{txt}The number of methods is:{res}{col 35}2
{txt}The method values are:{res}{col 35}1 2

Data generating mechanism (dgm)
{txt}The total number of dgms is: {res}{col 35}2
{txt}The dgm variables (# levels): {res}{col 35}dgm (2) 

Estimates are contained in the dataset

{txt}The estimates variable is:{res}{col 35}est
{txt}The se variable is:{res}{col 35}se
{txt}The df variable is:{res}{col 35}N/A
{txt}The ci variables are:{res}{col 35}N/A
{txt}The p variable is:{res}{col 35}N/A
{txt}The true variable is:{res}{col 35}true
{txt}_____________________________________________________

{com}.  
. * graphs
. siman scatter, ytitle("test y-title") xtitle("test x-title") name("scatter_test5", replace) 
{txt}working.....
{res}{txt}
{com}. 
. siman swarm, graphoptions(ytitle("test y-title") xtitle("test x-title") name("swarm_test5", replace)) 
{txt}working.....

{com}. 
. siman zipplot, scheme(scheme(s2color)) legend(order(3 "Carrot" 4 "Stalk")) xtit("x-title") ytit("y-title") ylab(0 40 100) noncoveroptions(pstyle(p3)) ///
> coveroptions(pstyle(p4)) scatteroptions(mcol(gray%50)) truegraphoptions(pstyle(p6)) name("zipplot_test5", replace)
{txt}Drawing 1 graphs (1 per true value)...
{res}{txt}
{com}. 
. siman comparemethodsscatter, title("testtitle") subgr(xtit("testaxis")) name("cms_test5", replace) 
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    true
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number true
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("est",strlen("est"),1)=="_" local estimate = substr("est", 1, index("est","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("true",strlen("true"),1)=="_" local true = substr("true", 1, index("true","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    true
        - local numberdgms: word count `dgm'
        = local numberdgms: word count dgm
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 1!=1 local optionlist est se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 2
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 1 {c -(}
          - capture assert `varlist' == int(`varlist') if `touse'
          = capture assert method == int(method) if __000003
          - if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
          - tempname Vals
          - qui tab `varlist' if `touse', `missing' matrow(`Vals')
          = qui tab method if __000003,  matrow(__000004)
          - local nvals = r(r)
          - forval i = 1 / `nvals' {c -(}
          = forval i = 1 / 2 {c -(}
          - local val = `Vals'[`i',1]
          = local val = __000004[1,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 1 < 2 local vals "1 "
          - else local vals "`vals'`val'"
          = else local vals "1 1"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[2,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 2 < 2 local vals "1 2 "
          - else local vals "`vals'`val'"
          = else local vals "1 2"
          - {c )-}
          - {c )-}
          - else {c -(}
            tempvar select counter
            bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
            generate `counter' = sum(`select') * (`select' == 1)
            sort `counter'
            qui count if `counter' == 0
            local j = 1 + r(N)
            local nvals = _N
            if "`clean'" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
            else {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
            else local vals `"`vals'`"`=`varlist'[`i']'"'"'
            {c )-}
            {c )-}
            {c )-}
          - di as txt `"`vals'"'
          = di as txt `"1 2"'
          - return local levels `"`vals'"'
          = return local levels `"1 2"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"1 2"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"1 2"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/2 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("1",strlen("1"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "1"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist 1
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist 1 1
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("2",strlen("2"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "2"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist 2
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist 1 2
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "1 2"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "1"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 0 == 0 {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        = qui reshape wide "est se", i(rep dgm "") j(method "1 2")
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide est se , i(rep dgm  ) j(method 1 2 )
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 0 == 1 & "0" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/2 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] true
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if "true"!="" char _dta[siman_truevars] true
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "single"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "single"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "1 2"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
Working.....
{res}{txt}
{com}. 
. siman blandaltman, ytitle("test y-title") xtitle("test x-title") name("ba_test5", replace) 
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    true
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number true
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("est",strlen("est"),1)=="_" local estimate = substr("est", 1, index("est","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("true",strlen("true"),1)=="_" local true = substr("true", 1, index("true","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    true
        - local numberdgms: word count `dgm'
        = local numberdgms: word count dgm
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 1!=1 local optionlist est se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 2
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 1 {c -(}
          - capture assert `varlist' == int(`varlist') if `touse'
          = capture assert method == int(method) if __000003
          - if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
          - tempname Vals
          - qui tab `varlist' if `touse', `missing' matrow(`Vals')
          = qui tab method if __000003,  matrow(__000004)
          - local nvals = r(r)
          - forval i = 1 / `nvals' {c -(}
          = forval i = 1 / 2 {c -(}
          - local val = `Vals'[`i',1]
          = local val = __000004[1,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 1 < 2 local vals "1 "
          - else local vals "`vals'`val'"
          = else local vals "1 1"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[2,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 2 < 2 local vals "1 2 "
          - else local vals "`vals'`val'"
          = else local vals "1 2"
          - {c )-}
          - {c )-}
          - else {c -(}
            tempvar select counter
            bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
            generate `counter' = sum(`select') * (`select' == 1)
            sort `counter'
            qui count if `counter' == 0
            local j = 1 + r(N)
            local nvals = _N
            if "`clean'" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
            else {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
            else local vals `"`vals'`"`=`varlist'[`i']'"'"'
            {c )-}
            {c )-}
            {c )-}
          - di as txt `"`vals'"'
          = di as txt `"1 2"'
          - return local levels `"`vals'"'
          = return local levels `"1 2"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"1 2"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"1 2"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/2 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("1",strlen("1"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "1"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist 1
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist 1 1
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("2",strlen("2"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "2"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist 2
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist 1 2
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "1 2"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "1"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 0 == 0 {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        = qui reshape wide "est se", i(rep dgm "") j(method "1 2")
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide est se , i(rep dgm  ) j(method 1 2 )
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 0 == 1 & "0" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/2 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] true
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if "true"!="" char _dta[siman_truevars] true
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "single"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "single"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "1 2"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
working....
{res}{txt}
{com}. 
. siman analyse
    {txt}- set tracedepth 1
    - if "`method'"=="" {c -(}
    = if "method"=="" {c -(}
      di as error "The variable 'method' is missing so siman analyse can not be run.  Please create a variable in your dataset called method containing the method value(s)."
      exit 498
      {c )-}
    - if "`simananalyserun'"=="1" & "`replace'" == "" {c -(}
    = if ""=="1" & "" == "" {c -(}
      di as error "There are already performance measures in the dataset.  If you would like to replace these, please use the 'replace' option"
      exit 498
      {c )-}
    - if mi("`estimate'") | mi("`se'") {c -(}
    = if mi("est") | mi("se") {c -(}
      di as error "siman analyse requires est() and se() to be specified in set-up"
      exit 498
      {c )-}
    - local estimatesindi = (`rep'[_N]>0)
    = local estimatesindi = (rep[_N]>0)
    - if "`simananalyserun'"=="1" & "`replace'" == "replace" & `estimatesindi'==1 {c -(}
    = if ""=="1" & "" == "replace" & 1==1 {c -(}
      qui drop if `rep'<0
      qui drop _perfmeascode
      qui drop _dataset
      {c )-}
    - else if "`simananalyserun'"=="1" & "`replace'" == "replace" & `estimatesindi'==0 {c -(}
    = else if ""=="1" & "" == "replace" & 1==0 {c -(}
      di as error "There are no estimates data in the data set.  Please re-load data and use siman setup to import data."
      exit 498
      {c )-}
    - local simananalyserun = 0
    - if "`simansetuprun'"=="0" | "`simansetuprun'"=="" {c -(}
    = if "1"=="0" | "1"=="" {c -(}
      di as error "siman setup has not been run.  Please use siman setup first before siman analyse."
      exit 498
      {c )-}
    - cap confirm variable `true'
    = cap confirm variable true
    - if _rc==0 {c -(}
    - local extratrue : list true - dgm
    - if !mi("`extratrue'") local truevariable `true'
    = if !mi("true") local truevariable true
    - {c )-}
    - if ("`if'"=="" & "`ifsetup'"!="") local ifanalyse = `"`ifsetup'"'
    = if (""=="" & ""!="") local ifanalyse = `""'
    - else local ifanalyse = `"`if'"'
    = else local ifanalyse = `""'
    - qui tempvar touse
    - qui generate `touse' = 0
    = qui generate __000000 = 0
    - qui replace `touse' = 1 `ifanalyse'
    = qui replace __000000 = 1 
    - preserve
    - if `nformat'!=1 {c -(}
    = if 1!=1 {c -(}
      qui siman_reshape, longlong
      if `methodcreated' == 0 local method method
      else local method `method'
      {c )-}
    - qui sort `dgm' `target' `method' `touse'
    = qui sort dgm  method __000000
    - capture by `dgm' `target' `method': assert `touse'==`touse'[_n-1] if _n>1
    = capture by dgm  method: assert __000000==__000000[_n-1] if _n>1
    - if _rc == 9 {c -(}
      di as error "The 'if' option can not be applied to 'rep' in siman analyse."
      exit 498
      {c )-}
    - restore
    - qui keep if `touse'
    = qui keep if __000000
    - qui unab allnames : *
      {hline 79} begin unab {hline}
      - version 6
      - gettoken user 0: 0, parse(" :")
      - gettoken colon 0: 0, parse(" :")
      - if `"`colon'"' != ":" {c -(} error 198 {c )-}
      = if `":"' != ":" {c -(} error 198 {c )-}
      - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000) NAME(string)]
      - c_local `user' `varlist'
      = c_local allnames rep dgm method true est se __000000
      - local n : word count `varlist'
      = local n : word count rep dgm method true est se __000000
      - if `n'>=`min' & `n'<=`max' {c -(} exit {c )-}
      = if 7>=1 & 7<=120000 {c -(} exit {c )-}
      {hline 81} end unab {hline}
    - tempfile estimatesdata
    - qui save `estimatesdata'
    = qui save C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp
    - qui drop if `rep'<0
    = qui drop if rep<0
    - local methodstringindi = 0
    - capture confirm string variable `method'
    = capture confirm string variable method
    - if !_rc local methodstringindi = 1
    - local optionlist `estimate' `se'
    = local optionlist est se
    - foreach u of var * {c -(}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("rep",strlen("rep"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("dgm",strlen("dgm"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("method",strlen("method"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("true",strlen("true"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("est",strlen("est"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("se",strlen("se"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("__000000",strlen("__000000"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - local estchange = 0
    - if substr("`estimate'",strlen("`estimate'"),1)=="_" {c -(}
    = if substr("est",strlen("est"),1)=="_" {c -(}
      local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
      local estchange = 1
      {c )-}
    - local sechange = 0
    - if substr("`se'",strlen("`se'"),1)=="_" {c -(}
    = if substr("se",strlen("se"),1)=="_" {c -(}
      local se = substr("`se'", 1, index("`se'","_") - 1)
      local sechange = 1
      {c )-}
    - local optionlist `estimate' `se'
    = local optionlist est se
    - if `nformat'==1 {c -(}
    = if 1==1 {c -(}
    - local methodformat : value label `method'
    = local methodformat : value label method
    - qui order `rep' `dgm' `target' `method'
    = qui order rep dgm  method
      {hline 78} begin order {hline}
      - version 11
      - if (_caller()<11) {c -(}
        _order `macval(0)'
        exit
        {c )-}
      - syntax varlist[, Before(varname) After(varname) first last SEQuential ALPHAbetic]
      - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'" == "" & "`alphabetic'" == "" & "`sequential'" == "") {c -(}
      = if (`""' == "" & `""' == "" & "" == "" & "" == "" & "" == "" & "" == "") {c -(}
      - _order `macval(0)'
      = _order rep dgm  method
      - exit
      {hline 80} end order {hline}
    - qui sort `rep' `dgm' `target' `method'
    = qui sort rep dgm  method
    - qui tab `method'
    = qui tab method
    - local nmethodlabels = `r(r)'
    = local nmethodlabels = 2
    - qui levels `method', local(levels)
    = qui levels method, local(levels)
      {hline 77} begin levels {hline}
      - version 8
      - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
      - if "`separate'" == "" local sep " "
      = if "" == "" local sep " "
      - else local sep "`separate'"
      = else local sep ""
      - if "`missing'" != "" local novarlist "novarlist"
      = if "" != "" local novarlist "novarlist"
      - marksample touse, strok `novarlist'
      = marksample touse, strok 
      - capture confirm numeric variable `varlist'
      = capture confirm numeric variable method
      - local isnum = _rc != 7
      - if `isnum' {c -(}
      = if 1 {c -(}
      - capture assert `varlist' == int(`varlist') if `touse'
      = capture assert method == int(method) if __000002
      - if _rc {c -(}
        di as err "`varlist' contains non-integer values"
        exit 459
        {c )-}
      - tempname Vals
      - qui tab `varlist' if `touse', `missing' matrow(`Vals')
      = qui tab method if __000002,  matrow(__000003)
      - local nvals = r(r)
      - forval i = 1 / `nvals' {c -(}
      = forval i = 1 / 2 {c -(}
      - local val = `Vals'[`i',1]
      = local val = __000003[1,1]
      - if `i' < `nvals' local vals "`vals'`val'`sep'"
      = if 1 < 2 local vals "1 "
      - else local vals "`vals'`val'"
      = else local vals "1 1"
      - {c )-}
      - local val = `Vals'[`i',1]
      = local val = __000003[2,1]
      - if `i' < `nvals' local vals "`vals'`val'`sep'"
      = if 2 < 2 local vals "1 2 "
      - else local vals "`vals'`val'"
      = else local vals "1 2"
      - {c )-}
      - {c )-}
      - else {c -(}
        tempvar select counter
        bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
        generate `counter' = sum(`select') * (`select' == 1)
        sort `counter'
        qui count if `counter' == 0
        local j = 1 + r(N)
        local nvals = _N
        if "`clean'" != "" {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals "`vals'`=`varlist'[`i']'`sep'"
        {c )-}
        else local vals "`vals'`=`varlist'[`i']'"
        {c )-}
        {c )-}
        else {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
        {c )-}
        else local vals `"`vals'`"`=`varlist'[`i']'"'"'
        {c )-}
        {c )-}
        {c )-}
      - di as txt `"`vals'"'
      = di as txt `"1 2"'
      - return local levels `"`vals'"'
      = return local levels `"1 2"'
      - if "`local'" != "" {c -(}
      = if "levels" != "" {c -(}
      - c_local `local' `"`vals'"'
      = c_local levels `"1 2"'
      - {c )-}
      {hline 79} end levels {hline}
    - tokenize `"`levels'"'
    = tokenize `"1 2"'
    - forvalues f = 1/`nmethodlabels' {c -(}
    = forvalues f = 1/2 {c -(}
    - if substr("``f''",strlen("``f''"),1)=="_" local g = substr("``f''", 1, index("``f''","_") - 1)
    = if substr("1",strlen("1"),1)=="_" local g = substr("1", 1, index("1","_") - 1)
    - if `methodstringindi' == 0 & `methodlabels'!=1 local methodlabel`f' = "`g'"
    = if 0 == 0 & 0!=1 local methodlabel1 = ""
    - else local methodlabel`f' = "``g''"
    = else local methodlabel1 = ""
    - if `f'==1 local methodlist `methodlabel`f''
    = if 1==1 local methodlist 
    - else if `f'>=2 local methodlist `methodlist' `methodlabel`f''
    = else if 1>=2 local methodlist  
    - {c )-}
    - if substr("``f''",strlen("``f''"),1)=="_" local g = substr("``f''", 1, index("``f''","_") - 1)
    = if substr("2",strlen("2"),1)=="_" local g = substr("2", 1, index("2","_") - 1)
    - if `methodstringindi' == 0 & `methodlabels'!=1 local methodlabel`f' = "`g'"
    = if 0 == 0 & 0!=1 local methodlabel2 = ""
    - else local methodlabel`f' = "``g''"
    = else local methodlabel2 = ""
    - if `f'==1 local methodlist `methodlabel`f''
    = if 2==1 local methodlist 
    - else if `f'>=2 local methodlist `methodlist' `methodlabel`f''
    = else if 2>=2 local methodlist  
    - {c )-}
    - local estsimsum = "`estimate'"
    = local estsimsum = "est"
    - local sesimsum = "`se'"
    = local sesimsum = "se"
    - capture confirm variable _perfmeascode
    - if !_rc {c -(}
      di as error "siman would like to name a variable '_perfmeascode', but that name already exists in your dataset.  Please rename your variable _perfmeascode as something else."
      exit 498
      {c )-}
    - capture confirm variable _dataset
    - if !_rc {c -(}
      di as error "siman would like to name a variable '_dataset', but that name already exists in your data.  Please rename your variable _dataset as something else."
      exit 498
      {c )-}
    - qui simsum `estsimsum' `if', true(`true') se(`sesimsum') method(`method') id(`rep') by(`truevariable' `dgm' `target') max(20) `anything' clear mcse gen(_perfmeas) `force'
    = qui simsum est , true(true) se(se) method(method) id(rep) by(true dgm ) max(20)  clear mcse gen(_perfmeas) 
      {hline 77} begin simsum {hline}
      - version 10
      - if _caller() >= 12 {c -(}
      - local hidden hidden
      - {c )-}
      - return `hidden' local simsum_version "2.0.3"
      = return hidden local simsum_version "2.0.3"
      - syntax varlist [if] [in], [true(string) METHodvar(varname) id(varlist) se(varlist) SEPrefix(string) SESuffix(string) graph GRAPH2(string) noMEMcheck max(real 10) semax(real 100) dropbig nolistbig listmiss level(real $S_level) by(varlist) mcse robust MODELSEMethod(string) ref(string) null(real 0) df(string) DFPrefix(string) DFSuffix(string) bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power force nolist listsep format(string) sepby(varlist) ABbreviate(passthru) clear saving(string) gen(string) TRANSpose debug ]
      = syntax varlist [if] [in], [true(string) METHodvar(varname) id(varlist) se(varlist) SEPrefix(string) SESuffix(string) graph GRAPH2(string) noMEMcheck max(real 10) semax(real 100) dropbig nolistbig listmiss level(real 95) by(varlist) mcse robust MODELSEMethod(string) ref(string) null(real 0) df(string) DFPrefix(string) DFSuffix(string) bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power force nolist listsep format(string) sepby(varlist) ABbreviate(passthru) clear saving(string) gen(string) TRANSpose debug ]
      - if "`modelsemethod'"=="" local modelsemethod rmse
      = if ""=="" local modelsemethod rmse
      - if "`modelsemethod'"!="rmse" & "`modelsemethod'"!="mean" {c -(}
      = if "rmse"!="rmse" & "rmse"!="mean" {c -(}
        di as error "Syntax: modelsemethod(rmse|mean)"
        exit 498
        {c )-}
      - if !mi("`graph2'") local graph graph
      = if !mi("") local graph graph
      - if "`by'"!="" {c -(}
      = if "true dgm"!="" {c -(}
      - local byby by(`by')
      = local byby by(true dgm)
      - local byvar `by'
      = local byvar true dgm
      - {c )-}
      - else {c -(}
        tempvar byvar
        gen `byvar'=0
        {c )-}
      - local i 0
      - foreach beta of varlist `varlist' {c -(}
      = foreach beta of varlist est {c -(}
      - local ++i
      - local beta`i' `beta'
      = local beta1 est
      - local betalist `betalist' `beta'
      = local betalist  est
      - {c )-}
      - local m `i'
      = local m 1
      - if "`seprefix'"!="" | "`sesuffix'"!="" {c -(}
      = if ""!="" | ""!="" {c -(}
        if "`se'"!="" {c -(}
        di as error "Can't specify se() with seprefix() or sesuffix()"
        exit 498
        {c )-}
        forvalues i=1/`m' {c -(}
        local se`i' `seprefix'`beta`i''`sesuffix'
        confirm var `se`i''
        local selist `selist' `se`i''
        {c )-}
        {c )-}
      - else if "`se'"!="" {c -(}
      = else if "se"!="" {c -(}
      - local i 0
      - foreach sevar of varlist `se' {c -(}
      = foreach sevar of varlist se {c -(}
      - local ++i
      - local se`i' `sevar'
      = local se1 se
      - local selist `selist' `se`i''
      = local selist  se
      - {c )-}
      - if `i'<`m' {c -(}
      = if 1<1 {c -(}
        di as error "Fewer variables in se(`se') than in `betalist'"
        exit 498
        {c )-}
      - if `i'>`m' {c -(}
      = if 1>1 {c -(}
        di as error "More variables in se(`se') than in `betalist'"
        exit 498
        {c )-}
      - {c )-}
      - if "`dfprefix'"!="" | "`dfsuffix'"!="" {c -(}
      = if ""!="" | ""!="" {c -(}
        if "`df'"!="" {c -(}
        di as error "Can't specify df() with dfprefix() or dfsuffix()"
        exit 498
        {c )-}
        forvalues i=1/`m' {c -(}
        local df`i' `dfprefix'`beta`i''`dfsuffix'
        confirm var `df`i''
        local dflist `dflist' `df`i''
        {c )-}
        {c )-}
      - else if "`df'"!="" {c -(}
      = else if ""!="" {c -(}
        cap confirm number `df'
        if !_rc local dftype number
        else {c -(}
        cap assert `df'==`df'
        if !_rc local dftype varname
        else {c -(}
        cap confirm var `df'
        if !_rc local dftype varlist
        else local dftype error
        {c )-}
        {c )-}
        if inlist("`dftype'","number","varname") {c -(}
        forvalues i=1/`m' {c -(}
        local df`i' `df'
        {c )-}
        if "`dftype'"=="varname" local dflist `df'
        cap assert !mi(`df')
        if _rc di as error "Warning: missing values in df()"
        {c )-}
        else if "`dftype'"=="varlist" {c -(}
        local i 0
        foreach dfvar of varlist `df' {c -(}
        local ++i
        local df`i' `dfvar'
        local dflist `dflist' `dfvar'
        cap assert !mi(`df`i'')
        if _rc di as error "Warning: missing values in df()"
        {c )-}
        if `i'!=`m' local dftype error
        {c )-}
        if "`dftype'"=="error" {c -(}
        di as error "df must contain number, string or varlist of same length as estimates"
        exit 498
        {c )-}
        {c )-}
      - local allpms bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power
      - foreach pm of local allpms {c -(}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  bsims
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  sesims
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  bias
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  mean
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  empse
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  relprec
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  mse
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  rmse
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  modelse
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  ciwidth
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  relerror
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  cover
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  power
      - {c )-}
      - if mi("`origoutput'") {c -(}
      = if mi("") {c -(}
      - foreach pm of local allpms {c -(}
      - local `pm' `pm'
      = local bsims bsims
      - {c )-}
      - local `pm' `pm'
      = local sesims sesims
      - {c )-}
      - local `pm' `pm'
      = local bias bias
      - {c )-}
      - local `pm' `pm'
      = local mean mean
      - {c )-}
      - local `pm' `pm'
      = local empse empse
      - {c )-}
      - local `pm' `pm'
      = local relprec relprec
      - {c )-}
      - local `pm' `pm'
      = local mse mse
      - {c )-}
      - local `pm' `pm'
      = local rmse rmse
      - {c )-}
      - local `pm' `pm'
      = local modelse modelse
      - {c )-}
      - local `pm' `pm'
      = local ciwidth ciwidth
      - {c )-}
      - local `pm' `pm'
      = local relerror relerror
      - {c )-}
      - local `pm' `pm'
      = local cover cover
      - {c )-}
      - local `pm' `pm'
      = local power power
      - {c )-}
      - {c )-}
      - if "`se1'"=="" {c -(}
      = if "se"=="" {c -(}
        foreach perfmeas in sesims modelse ciwidth relerror cover power {c -(}
        if !mi("``perfmeas''") local droppm1 `droppm1' `perfmeas'
        local `perfmeas'
        {c )-}
        if !mi("`droppm1'") {c -(}
        if !mi("`origoutput'") di as error "" _c
        else di as text "" _c
        di "SE not reported, so ignoring performance measures: `droppm1'"
        {c )-}
        {c )-}
      - if "`true'"=="" {c -(}
      = if "true"=="" {c -(}
        foreach perfmeas in bias mse rmse cover {c -(}
        if !mi("``perfmeas''") local droppm2 `droppm2' `perfmeas'
        local `perfmeas'
        {c )-}
        if !mi("`droppm2'") {c -(}
        if !mi("`origoutput'") di as error "" _c
        else di as text "" _c
        di "true() not specified, so ignoring performance measures: `droppm2'"
        {c )-}
        {c )-}
      - foreach pm of local allpms {c -(}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("bsims") local output  bsims
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("sesims") local output bsims sesims
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("bias") local output bsims sesims bias
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("mean") local output bsims sesims bias mean
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("empse") local output bsims sesims bias mean empse
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("relprec") local output bsims sesims bias mean empse relprec
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("mse") local output bsims sesims bias mean empse relprec mse
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("rmse") local output bsims sesims bias mean empse relprec mse rmse
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("modelse") local output bsims sesims bias mean empse relprec mse rmse modelse
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("ciwidth") local output bsims sesims bias mean empse relprec mse rmse modelse ciwidth
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("relerror") local output bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("cover") local output bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("power") local output bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power
      - {c )-}
      - if "`output'"=="" {c -(}
      = if "bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power"=="" {c -(}
        di as error "No performance measures specified"
        exit 498
        {c )-}
      - if inlist("`output'","bsims","sesims","bims sesims") & "`mcse'"=="mcse" {c -(}
      = if inlist("bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power","bsims","sesims","bims sesims") & "mcse"=="mcse" {c -(}
        di as error "Only bsims and/or sesims specified - mcse ignored"
        local mcse
        {c )-}
      - if "`methodvar'"!="" {c -(}
      = if "method"!="" {c -(}
      - if `m'>1 {c -(}
      = if 1>1 {c -(}
        di as error "Only one estimate variable allowed with long format"
        exit 498
        {c )-}
      - if "`id'"=="" {c -(}
      = if "rep"=="" {c -(}
        di as error "id() is required with long format"
        exit 498
        {c )-}
      - {c )-}
      - if "`list'"=="nolist" & "`clear'"=="" & "`saving'"=="" {c -(}
      = if ""=="nolist" & "clear"=="" & ""=="" {c -(}
        di as error "No output requested! Please specify clear or saving(), or don't specify nolist"
        exit 498
        {c )-}
      - if "`gen'"=="" local gen perfmeas
      = if "_perfmeas"=="" local gen perfmeas
      - cap confirm new variable `gen'num
      = cap confirm new variable _perfmeasnum
      - local rc1=_rc
      - cap confirm new variable `gen'code
      = cap confirm new variable _perfmeascode
      - if _rc | `rc1' {c -(}
      = if _rc | 0 {c -(}
        di as error as smcl "{c -(}p{c )-}Variable `gen'num and/or `gen'code already exists. This is probably because the current data are -simsum- output. If this is what you want, use the gen() option.{c -(}p_end{c )-}"
        exit 498
        {c )-}
      - if "`memcheck'"!="nomemcheck" {c -(}
      = if ""!="nomemcheck" {c -(}
      - qui desc, short
      - if r(width)/r(widthmax)>0.45 {c -(}
        di as error "simsum is memory-hungry and can fail slowly if memory is more than 50% occupied."
        di as error as smcl "Please increase the memory using {c -(}help memory:set memory{c )-}, or use the nomemcheck option."
        exit 498
        {c )-}
      - {c )-}
      - marksample touse, novarlist
      - qui count if `touse'
      = qui count if __000001
      - if r(N)==0 {c -(}
        di in red "no observations"
        exit 2000
        {c )-}
      - if "`bias'"=="bias" | "`mse'"=="mse" | "`rmse'"=="rmse" | "`cover'"=="cover" {c -(}
      = if "bias"=="bias" | "mse"=="mse" | "rmse"=="rmse" | "cover"=="cover" {c -(}
      - tempvar truevar
      - qui gen `truevar' = `true'
      = qui gen __000002 = true
      - qui count if missing(`truevar') & `touse'
      = qui count if missing(__000002) & __000001
      - if r(N)>0 {c -(}
        di as error "Missing values found for true value `true'"
        exit 498
        {c )-}
      - {c )-}
      - preserve
      - qui keep if `touse'
      = qui keep if __000001
      - if "`methodvar'"!="" {c -(}
      = if "method"!="" {c -(}
      - local origformat long
      - local betastub `betalist'
      = local betastub est
      - qui levelsof `methodvar', local(methods)
      = qui levelsof method, local(methods)
      - local label : val label `methodvar'
      = local label : val label method
      - local i 0
      - foreach method in `methods' {c -(}
      = foreach method in 1 2 {c -(}
      - if strpos("`method'"," ") {c -(}
      = if strpos("1"," ") {c -(}
        di as error `"Sorry, I can't handle method = "`method'". Please recode it without spaces."'
        exit 498
        {c )-}
      - if strtoname("b`method'")!="b`method'" {c -(}
      = if strtoname("b1")!="b1" {c -(}
        di as error `"Sorry, I can't handle method = "`method'". Please recode it using standard characters."'
        exit 498
        {c )-}
      - local ++i
      - local beta`i' `betalist'`method'
      = local beta1 est1
      - local newbetalist `newbetalist' `betalist'`method'
      = local newbetalist  est1
      - if "`selist'"!="" local se`i' `selist'`method'
      = if "se"!="" local se1 se1
      - if "`selist'"!="" local newselist `newselist' `selist'`method'
      = if "se"!="" local newselist  se1
      - if "`dftype'"=="number" local df`i' `df'
      = if ""=="number" local df1 
      - if "`dftype'"=="varname" local df`i' `dflist'`method'
      = if ""=="varname" local df1 1
      - if "`label'"!="" local label`i' : label `label' `method'
      = if ""!="" local label1 : label  1
      - else local label`i' "`method'"
      = else local label1 "1"
      - if "`label`i''"=="`ref'" local refmethod `i'
      = if "1"=="" local refmethod 1
      - {c )-}
      - if strpos("`method'"," ") {c -(}
      = if strpos("2"," ") {c -(}
        di as error `"Sorry, I can't handle method = "`method'". Please recode it without spaces."'
        exit 498
        {c )-}
      - if strtoname("b`method'")!="b`method'" {c -(}
      = if strtoname("b2")!="b2" {c -(}
        di as error `"Sorry, I can't handle method = "`method'". Please recode it using standard characters."'
        exit 498
        {c )-}
      - local ++i
      - local beta`i' `betalist'`method'
      = local beta2 est2
      - local newbetalist `newbetalist' `betalist'`method'
      = local newbetalist est1 est2
      - if "`selist'"!="" local se`i' `selist'`method'
      = if "se"!="" local se2 se2
      - if "`selist'"!="" local newselist `newselist' `selist'`method'
      = if "se"!="" local newselist se1 se2
      - if "`dftype'"=="number" local df`i' `df'
      = if ""=="number" local df2 
      - if "`dftype'"=="varname" local df`i' `dflist'`method'
      = if ""=="varname" local df2 2
      - if "`label'"!="" local label`i' : label `label' `method'
      = if ""!="" local label2 : label  2
      - else local label`i' "`method'"
      = else local label2 "2"
      - if "`label`i''"=="`ref'" local refmethod `i'
      = if "2"=="" local refmethod 2
      - {c )-}
      - local m `i'
      = local m 2
      - if "`refmethod'"=="" {c -(}
      = if ""=="" {c -(}
      - if "`ref'"!="" {c -(}
      = if ""!="" {c -(}
        if "`label'"=="" local offenders values
        else local offenders value labels
        di as error "Error in ref(): `ref' is not one of the `offenders' of `methodvar'"
        exit 498
        {c )-}
      - else local refmethod 1
      - {c )-}
      - di as text "Reshaping data to wide format ..."
      - keep `betalist' `selist' `dflist' `by' `byvar' `id' `methodvar' `touse' `truevar'
      = keep est se  true dgm true dgm rep method __000001 __000002
      - cap confirm string var `methodvar'
      = cap confirm string var method
      - if _rc==0 local string string
      - local bfmt0: format `betalist'
      = local bfmt0: format est
      - qui reshape wide `betalist' `selist' `dflist', i(`by' `id') j(`methodvar') `string'
      = qui reshape wide est se , i(true dgm rep) j(method) 
      - local betalist `newbetalist'
      = local betalist est1 est2
      - local selist `newselist'
      = local selist se1 se2
      - {c )-}
      - else {c -(}
        local origformat wide
        forvalues i=1/`m' {c -(}
        local label`i' : var label `beta`i''
        if "`label`i''"=="" local label`i' "`beta`i''"
        if "`beta`i''"=="`ref'" local refmethod `i'
        {c )-}
        if "`refmethod'"=="" {c -(}
        if "`ref'"!="" {c -(}
        di as error "ref(`ref') is not one of the listed point estimates"
        exit 498
        {c )-}
        else local refmethod 1
        {c )-}
        keep `betalist' `selist' `dflist' `by' `byvar' `id' `touse' `truevar'
        {c )-}
      - if mi("`force'") {c -(}
      = if mi("") {c -(}
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - tempvar betafreq`i'
      = tempvar betafreq1
      - egen `betafreq`i'' = count(`beta`i''), `byby'
      = egen __000003 = count(est1), by(true dgm)
      - cap assert `betafreq`i''!=1
      = cap assert __000003!=1
      - if _rc {c -(}
        di as error "Only one observation for `beta`i''. If this is what you intended, use the force option."
        exit 498
        {c )-}
      - {c )-}
      - tempvar betafreq`i'
      = tempvar betafreq2
      - egen `betafreq`i'' = count(`beta`i''), `byby'
      = egen __000004 = count(est2), by(true dgm)
      - cap assert `betafreq`i''!=1
      = cap assert __000004!=1
      - if _rc {c -(}
        di as error "Only one observation for `beta`i''. If this is what you intended, use the force option."
        exit 498
        {c )-}
      - {c )-}
      - {c )-}
      - tempvar missing
      - gen `missing' = 0
      = gen __000005 = 0
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - qui replace `missing' = missing(`beta`i'') & `touse'
      = qui replace __000005 = missing(est1) & __000001
      - if "`se`i''"!="" qui replace `missing' = 1 if missing(`se`i'') & `touse'
      = if "se1"!="" qui replace __000005 = 1 if missing(se1) & __000001
      - if "`se`i''"!="" qui replace `missing' = 1 if `se`i''==0 & `touse'
      = if "se1"!="" qui replace __000005 = 1 if se1==0 & __000001
      - qui count if `missing'
      = qui count if __000005
      - if r(N)>0 {c -(}
        if "`se`i''"!="" {c -(}
        qui replace `missing' = missing(`beta`i'') & missing(`se`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have both estimate and SE missing"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        di as text "--> no action taken"
        {c )-}
        qui replace `missing' = !missing(`se`i'') & missing(`beta`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have estimate missing and SE observed"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `se`i'' = . if `missing'
        di as text "--> SE changed to missing"
        {c )-}
        qui replace `missing' = missing(`se`i'') & !missing(`beta`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have estimate observed and SE missing"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `beta`i'' = . if `missing'
        di as text "--> estimate changed to missing"
        {c )-}
        qui replace `missing' = (`se`i''==0) & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have zero values of SE"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `beta`i'' = . if `missing'
        qui replace `se`i'' = . if `missing'
        di as text "--> estimate and SE changed to missing"
        {c )-}
        {c )-}
        {c )-}
      - {c )-}
      - qui replace `missing' = missing(`beta`i'') & `touse'
      = qui replace __000005 = missing(est2) & __000001
      - if "`se`i''"!="" qui replace `missing' = 1 if missing(`se`i'') & `touse'
      = if "se2"!="" qui replace __000005 = 1 if missing(se2) & __000001
      - if "`se`i''"!="" qui replace `missing' = 1 if `se`i''==0 & `touse'
      = if "se2"!="" qui replace __000005 = 1 if se2==0 & __000001
      - qui count if `missing'
      = qui count if __000005
      - if r(N)>0 {c -(}
        if "`se`i''"!="" {c -(}
        qui replace `missing' = missing(`beta`i'') & missing(`se`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have both estimate and SE missing"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        di as text "--> no action taken"
        {c )-}
        qui replace `missing' = !missing(`se`i'') & missing(`beta`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have estimate missing and SE observed"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `se`i'' = . if `missing'
        di as text "--> SE changed to missing"
        {c )-}
        qui replace `missing' = missing(`se`i'') & !missing(`beta`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have estimate observed and SE missing"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `beta`i'' = . if `missing'
        di as text "--> estimate changed to missing"
        {c )-}
        qui replace `missing' = (`se`i''==0) & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have zero values of SE"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `beta`i'' = . if `missing'
        qui replace `se`i'' = . if `missing'
        di as text "--> estimate and SE changed to missing"
        {c )-}
        {c )-}
        {c )-}
      - {c )-}
      - drop `missing'
      = drop __000005
      - if "`graph'"=="graph" {c -(}
      = if ""=="graph" {c -(}
        tempfile graph
        set graphics off
        forvalues i=1/`m' {c -(}
        cap gr7 `se`i'' `beta`i'', xla yla b2title("`beta`i''") l1title("`se`i''") t1title("`label`i''") saving(`graph'`i', replace) `graph2'
        if !_rc local gphlist `gphlist' `graph'`i'
        {c )-}
        if "`selist'"=="" local title Point estimates by method
        else local title Std error vs. point estimate by method
        set graphics on
        gr7 using `gphlist', title(`title')
        {c )-}
      - tempvar infb infse
      - gen `infb' = 0
      = gen __000006 = 0
      - gen `infse' = 0
      = gen __000007 = 0
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - qui summ `beta`i''
      = qui summ est1
      - if r(sd)<=0 {c -(}
        di as text "Warning for method `label`i'': estimate doesn't vary"
        continue
        {c )-}
      - qui replace `infb' = (abs(`beta`i''-r(mean))/r(sd) > `max') & !missing(`beta`i'')
      = qui replace __000006 = (abs(est1-r(mean))/r(sd) > 20) & !missing(est1)
      - if "`se`i''"!="" {c -(}
      = if "se1"!="" {c -(}
      - qui summ `se`i''
      = qui summ se1
      - if r(mean)<=0 {c -(}
        di as text "Warning for method `label`i'': `se`i'' is always 0"
        {c )-}
      - else qui replace `infse' = (`se`i''/r(mean) > `semax') & !missing(`se`i'')
      = else qui replace __000007 = (se1/r(mean) > 100) & !missing(se1)
      - {c )-}
      - qui count if `infb'
      = qui count if __000006
      - local ninfb = r(N)
      - qui count if `infse'
      = qui count if __000007
      - local ninfse = r(N)
      - if `ninfb'+`ninfse' > 0 {c -(}
      = if 0+0 > 0 {c -(}
        local text = cond("`dropbig'"=="dropbig","text","error")
        local warning = cond("`dropbig'"=="dropbig","Warning","Error")
        di as `text' `"`warning' for method `label`i'': "' as result `ninfb' as `text' `" observation(s) have standardised estimate > `max'"' _c
        if "`se`i''"!="" di as `text' `" and "' as result `ninfse' as `text' `" observation(s) have scaled SE > `semax'"'
        else di
        if "`listbig'"!="nolistbig" l `by' `id' `beta`i'' `se`i'' if `infb'|`infse', sepby(`sepby')
        else di as `text' "--> remove nolistbig option to list these observation(s)"
        if "`dropbig'"=="dropbig" {c -(}
        qui replace `beta`i'' = . if `infb'|`infse'
        if "`se`i''"!="" qui replace `se`i'' = . if `infb'|`infse'
        di as text `"--> estimate "' _c
        if "`se`i''"!="" di as text `"and SE "' _c
        di as text `"have been changed to missing values for these observation(s)"'
        {c )-}
        else {c -(}
        di as error "--> use dropbig option to drop these observation(s)"
        di as error "--> use max() option to change acceptable limit of point estimates"
        if "`se'"!="" di as error "--> use semax() option to change acceptable limit of standard errors"
        exit 498
        {c )-}
        {c )-}
      - {c )-}
      - qui summ `beta`i''
      = qui summ est2
      - if r(sd)<=0 {c -(}
        di as text "Warning for method `label`i'': estimate doesn't vary"
        continue
        {c )-}
      - qui replace `infb' = (abs(`beta`i''-r(mean))/r(sd) > `max') & !missing(`beta`i'')
      = qui replace __000006 = (abs(est2-r(mean))/r(sd) > 20) & !missing(est2)
      - if "`se`i''"!="" {c -(}
      = if "se2"!="" {c -(}
      - qui summ `se`i''
      = qui summ se2
      - if r(mean)<=0 {c -(}
        di as text "Warning for method `label`i'': `se`i'' is always 0"
        {c )-}
      - else qui replace `infse' = (`se`i''/r(mean) > `semax') & !missing(`se`i'')
      = else qui replace __000007 = (se2/r(mean) > 100) & !missing(se2)
      - {c )-}
      - qui count if `infb'
      = qui count if __000006
      - local ninfb = r(N)
      - qui count if `infse'
      = qui count if __000007
      - local ninfse = r(N)
      - if `ninfb'+`ninfse' > 0 {c -(}
      = if 0+0 > 0 {c -(}
        local text = cond("`dropbig'"=="dropbig","text","error")
        local warning = cond("`dropbig'"=="dropbig","Warning","Error")
        di as `text' `"`warning' for method `label`i'': "' as result `ninfb' as `text' `" observation(s) have standardised estimate > `max'"' _c
        if "`se`i''"!="" di as `text' `" and "' as result `ninfse' as `text' `" observation(s) have scaled SE > `semax'"'
        else di
        if "`listbig'"!="nolistbig" l `by' `id' `beta`i'' `se`i'' if `infb'|`infse', sepby(`sepby')
        else di as `text' "--> remove nolistbig option to list these observation(s)"
        if "`dropbig'"=="dropbig" {c -(}
        qui replace `beta`i'' = . if `infb'|`infse'
        if "`se`i''"!="" qui replace `se`i'' = . if `infb'|`infse'
        di as text `"--> estimate "' _c
        if "`se`i''"!="" di as text `"and SE "' _c
        di as text `"have been changed to missing values for these observation(s)"'
        {c )-}
        else {c -(}
        di as error "--> use dropbig option to drop these observation(s)"
        di as error "--> use max() option to change acceptable limit of point estimates"
        if "`se'"!="" di as error "--> use semax() option to change acceptable limit of standard errors"
        exit 498
        {c )-}
        {c )-}
      - {c )-}
      - di as text _newline "Starting to process results ..."
      - if `level'<1 local level=`level'*100
      = if 95<1 local level=95*100
      - if "`robust'"=="robust" & ("`relprec'"=="relprec" | "`relerror'"=="relerror") {c -(}
      = if ""=="robust" & ("relprec"=="relprec" | "relerror"=="relerror") {c -(}
        forvalues i=1/`m' {c -(}
        tempvar betamean`i'
        egen `betamean`i'' = mean(`beta`i''), `byby'
        {c )-}
        {c )-}
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - tempvar crit`i'
      = tempvar crit1
      - gen `crit`i'' = -invnorm((1-`level'/100)/2)
      = gen __000008 = -invnorm((1-95/100)/2)
      - if "`df`i''"!="" qui replace `crit`i'' = invttail(`df`i'',(1-`level'/100)/2) if !mi(`df`i'')
      = if ""!="" qui replace __000008 = invttail(,(1-95/100)/2) if !mi()
      - assert !mi(`crit`i'')
      = assert !mi(__000008)
      - local collcount `collcount' bsims_`i'=`beta`i''
      = local collcount  bsims_1=est1
      - if "`bias'"=="bias" {c -(}
      = if "bias"=="bias" {c -(}
      - qui gen bias_`i' = `beta`i'' - `truevar'
      = qui gen bias_1 = est1 - __000002
      - local collmean `collmean' bias_`i'
      = local collmean  bias_1
      - local collsd `collsd' biassd_`i' = bias_`i'
      = local collsd  biassd_1 = bias_1
      - {c )-}
      - if "`mean'"=="mean" {c -(}
      = if "mean"=="mean" {c -(}
      - local collmean `collmean' mean_`i' = `beta`i''
      = local collmean bias_1 mean_1 = est1
      - local collsd `collsd' meansd_`i' = `beta`i''
      = local collsd biassd_1 = bias_1 meansd_1 = est1
      - {c )-}
      - if "`relerror'"=="relerror" | "`modelse'"=="modelse" {c -(}
      = if "relerror"=="relerror" | "modelse"=="modelse" {c -(}
      - qui gen var_`i'=`se`i''^2
      = qui gen var_1=se1^2
      - {c )-}
      - if "`empse'"=="empse" | "`relerror'"=="relerror" | "`relprec'"=="relprec" | "`bias'"=="bias" {c -(}
      = if "empse"=="empse" | "relerror"=="relerror" | "relprec"=="relprec" | "bias"=="bias" {c -(}
      - local collsd `collsd' empse_`i'=`beta`i''
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1
      - {c )-}
      - if "`mse'"=="mse" | "`rmse'"=="rmse" {c -(}
      = if "mse"=="mse" | "rmse"=="rmse" {c -(}
      - qui gen mse_`i' = (`beta`i'' - `truevar')^2
      = qui gen mse_1 = (est1 - __000002)^2
      - local collmean `collmean' mse_`i'
      = local collmean bias_1 mean_1 = est1 mse_1
      - local collsd `collsd' msesd_`i'=mse_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1
      - {c )-}
      - if "`relprec'"=="relprec" & `i'!=`refmethod' {c -(}
      = if "relprec"=="relprec" & 1!=1 {c -(}
        qui byvar `byvar', r(rho N) gen unique: corr `beta`refmethod'' `beta`i''
        rename Rrho_ corr_`i'
        rename RN_ ncorr_`i'
        local collsum `collsum' corr_`i' ncorr_`i'
        {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" | "`sesims'"=="sesims" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" | "sesims"=="sesims" {c -(}
      - local collcount `collcount' sesims_`i'=`se`i''
      = local collcount bsims_1=est1 sesims_1=se1
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" {c -(}
      - local collmean `collmean' modelse_`i'=`se`i''
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1
      - local collmean `collmean' varmean_`i'=var_`i'
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1
      - local collsd `collsd' varsd_`i'=var_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1
      - local collsd `collsd' modelsesd_`i'=`se`i''
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1
      - {c )-}
      - if "`ciwidth'"=="ciwidth" {c -(}
      = if "ciwidth"=="ciwidth" {c -(}
      - qui gen ciwidth_`i' = 2*(`crit`i'')*`se`i''
      = qui gen ciwidth_1 = 2*(__000008)*se1
      - local collmean `collmean' ciwidth_`i'
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1
      - local collsd `collsd' ciwidthsd_`i' = ciwidth_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1
      - {c )-}
      - if "`cover'"=="cover" | "`power'"=="power" {c -(}
      = if "cover"=="cover" | "power"=="power" {c -(}
      - if "`cover'"=="cover" local collcount `collcount' bothsims_`i'=cover_`i'
      = if "cover"=="cover" local collcount bsims_1=est1 sesims_1=se1 bothsims_1=cover_1
      - else local collcount `collcount' bothsims_`i'=power_`i'
      = else local collcount bsims_1=est1 sesims_1=se1 bothsims_1=cover_1 bothsims_1=power_1
      - {c )-}
      - if "`cover'"=="cover" {c -(}
      = if "cover"=="cover" {c -(}
      - qui gen cover_`i' = 100*(abs(`beta`i''-`truevar')<(`crit`i'')*`se`i'') if !missing(`beta`i'') & !missing(`se`i'')
      = qui gen cover_1 = 100*(abs(est1-__000002)<(__000008)*se1) if !missing(est1) & !missing(se1)
      - local collmean `collmean' cover_`i'
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1
      - {c )-}
      - if "`power'"=="power" {c -(}
      = if "power"=="power" {c -(}
      - qui gen power_`i' = 100*(abs(`beta`i''-`null')>=(`crit`i'')*`se`i'') if !missing(`beta`i'') & !missing(`se`i'')
      = qui gen power_1 = 100*(abs(est1-0)>=(__000008)*se1) if !missing(est1) & !missing(se1)
      - local collmean `collmean' power_`i'
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1
      - {c )-}
      - if "`robust'"=="robust" {c -(}
      = if ""=="robust" {c -(}
        if "`empse'"=="empse" {c -(}
        tempvar empseT`i' empseB`i' empseTT`i' empseBB`i' empseTB`i'
        qui gen `empseT`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `empseB`i'' = 1
        qui gen `empseTT`i'' = `empseT`i''^2
        qui gen `empseBB`i'' = `empseB`i''^2
        qui gen `empseTB`i'' = `empseT`i''*`empseB`i''
        local collsum `collsum' `empseT`i'' `empseB`i'' `empseTT`i'' `empseTB`i'' `empseBB`i''
        {c )-}
        if "`relprec'"=="relprec" {c -(}
        tempvar relprecT`i' relprecB`i' relprecTT`i' relprecBB`i' relprecTB`i'
        qui gen `relprecT`i'' = (`beta`refmethod''-`betamean`refmethod'')^2
        qui gen `relprecB`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `relprecTT`i'' = `relprecT`i''^2
        qui gen `relprecBB`i'' = `relprecB`i''^2
        qui gen `relprecTB`i'' = `relprecT`i''*`relprecB`i''
        local collsum `collsum' `relprecT`i'' `relprecB`i'' `relprecTT`i'' `relprecTB`i'' `relprecBB`i''
        {c )-}
        if "`relerror'"=="relerror" {c -(}
        tempvar relerrorT`i' relerrorB`i' relerrorTT`i' relerrorBB`i' relerrorTB`i'
        qui gen `relerrorT`i'' = `se`i''^2
        qui gen `relerrorB`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `relerrorTT`i'' = `relerrorT`i''^2
        qui gen `relerrorBB`i'' = `relerrorB`i''^2
        qui gen `relerrorTB`i'' = `relerrorT`i''*`relerrorB`i''
        local collsum `collsum' `relerrorT`i'' `relerrorB`i'' `relerrorTT`i'' `relerrorTB`i'' `relerrorBB`i''
        {c )-}
        {c )-}
      - {c )-}
      - tempvar crit`i'
      = tempvar crit2
      - gen `crit`i'' = -invnorm((1-`level'/100)/2)
      = gen __000009 = -invnorm((1-95/100)/2)
      - if "`df`i''"!="" qui replace `crit`i'' = invttail(`df`i'',(1-`level'/100)/2) if !mi(`df`i'')
      = if ""!="" qui replace __000009 = invttail(,(1-95/100)/2) if !mi()
      - assert !mi(`crit`i'')
      = assert !mi(__000009)
      - local collcount `collcount' bsims_`i'=`beta`i''
      = local collcount bsims_1=est1 sesims_1=se1 bothsims_1=cover_1 bsims_2=est2
      - if "`bias'"=="bias" {c -(}
      = if "bias"=="bias" {c -(}
      - qui gen bias_`i' = `beta`i'' - `truevar'
      = qui gen bias_2 = est2 - __000002
      - local collmean `collmean' bias_`i'
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2
      - local collsd `collsd' biassd_`i' = bias_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2
      - {c )-}
      - if "`mean'"=="mean" {c -(}
      = if "mean"=="mean" {c -(}
      - local collmean `collmean' mean_`i' = `beta`i''
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = est2
      - local collsd `collsd' meansd_`i' = `beta`i''
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = est2
      - {c )-}
      - if "`relerror'"=="relerror" | "`modelse'"=="modelse" {c -(}
      = if "relerror"=="relerror" | "modelse"=="modelse" {c -(}
      - qui gen var_`i'=`se`i''^2
      = qui gen var_2=se2^2
      - {c )-}
      - if "`empse'"=="empse" | "`relerror'"=="relerror" | "`relprec'"=="relprec" | "`bias'"=="bias" {c -(}
      = if "empse"=="empse" | "relerror"=="relerror" | "relprec"=="relprec" | "bias"=="bias" {c -(}
      - local collsd `collsd' empse_`i'=`beta`i''
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = est2 empse_2=est2
      - {c )-}
      - if "`mse'"=="mse" | "`rmse'"=="rmse" {c -(}
      = if "mse"=="mse" | "rmse"=="rmse" {c -(}
      - qui gen mse_`i' = (`beta`i'' - `truevar')^2
      = qui gen mse_2 = (est2 - __000002)^2
      - local collmean `collmean' mse_`i'
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = est2 mse_2
      - local collsd `collsd' msesd_`i'=mse_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = est2 empse_2=est2 msesd_2=mse_2
      - {c )-}
      - if "`relprec'"=="relprec" & `i'!=`refmethod' {c -(}
      = if "relprec"=="relprec" & 2!=1 {c -(}
      - qui byvar `byvar', r(rho N) gen unique: corr `beta`refmethod'' `beta`i''
      = qui byvar true dgm, r(rho N) gen unique: corr est1 est2
      - rename Rrho_ corr_`i'
      = rename Rrho_ corr_2
      - rename RN_ ncorr_`i'
      = rename RN_ ncorr_2
      - local collsum `collsum' corr_`i' ncorr_`i'
      = local collsum  corr_2 ncorr_2
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" | "`sesims'"=="sesims" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" | "sesims"=="sesims" {c -(}
      - local collcount `collcount' sesims_`i'=`se`i''
      = local collcount bsims_1=est1 sesims_1=se1 bothsims_1=cover_1 bsims_2=est2 sesims_2=se2
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" {c -(}
      - local collmean `collmean' modelse_`i'=`se`i''
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = est2 mse_2 modelse_2=se2
      - local collmean `collmean' varmean_`i'=var_`i'
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = est2 mse_2 modelse_2=se2 varmean_2=var_2
      - local collsd `collsd' varsd_`i'=var_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = est2 empse_2=est2 msesd_2=mse_2 varsd_2=var_2
      - local collsd `collsd' modelsesd_`i'=`se`i''
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = est2 empse_2=est2 msesd_2=mse_2 varsd_2=var_2 modelsesd_2=se2
      - {c )-}
      - if "`ciwidth'"=="ciwidth" {c -(}
      = if "ciwidth"=="ciwidth" {c -(}
      - qui gen ciwidth_`i' = 2*(`crit`i'')*`se`i''
      = qui gen ciwidth_2 = 2*(__000009)*se2
      - local collmean `collmean' ciwidth_`i'
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = est2 mse_2 modelse_2=se2 varmean_2=var_2 ciwidth_2
      - local collsd `collsd' ciwidthsd_`i' = ciwidth_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = est2 empse_2=est2 msesd_2=mse_2 varsd_2=var_2 modelsesd_2=se2 ciwidthsd_2 = ciwidth_2
      - {c )-}
      - if "`cover'"=="cover" | "`power'"=="power" {c -(}
      = if "cover"=="cover" | "power"=="power" {c -(}
      - if "`cover'"=="cover" local collcount `collcount' bothsims_`i'=cover_`i'
      = if "cover"=="cover" local collcount bsims_1=est1 sesims_1=se1 bothsims_1=cover_1 bsims_2=est2 sesims_2=se2 bothsims_2=cover_2
      - else local collcount `collcount' bothsims_`i'=power_`i'
      = else local collcount bsims_1=est1 sesims_1=se1 bothsims_1=cover_1 bsims_2=est2 sesims_2=se2 bothsims_2=cover_2 bothsims_2=power_2
      - {c )-}
      - if "`cover'"=="cover" {c -(}
      = if "cover"=="cover" {c -(}
      - qui gen cover_`i' = 100*(abs(`beta`i''-`truevar')<(`crit`i'')*`se`i'') if !missing(`beta`i'') & !missing(`se`i'')
      = qui gen cover_2 = 100*(abs(est2-__000002)<(__000009)*se2) if !missing(est2) & !missing(se2)
      - local collmean `collmean' cover_`i'
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = est2 mse_2 modelse_2=se2 varmean_2=var_2 ciwidth_2 cover_2
      - {c )-}
      - if "`power'"=="power" {c -(}
      = if "power"=="power" {c -(}
      - qui gen power_`i' = 100*(abs(`beta`i''-`null')>=(`crit`i'')*`se`i'') if !missing(`beta`i'') & !missing(`se`i'')
      = qui gen power_2 = 100*(abs(est2-0)>=(__000009)*se2) if !missing(est2) & !missing(se2)
      - local collmean `collmean' power_`i'
      = local collmean bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = est2 mse_2 modelse_2=se2 varmean_2=var_2 ciwidth_2 cover_2 power_2
      - {c )-}
      - if "`robust'"=="robust" {c -(}
      = if ""=="robust" {c -(}
        if "`empse'"=="empse" {c -(}
        tempvar empseT`i' empseB`i' empseTT`i' empseBB`i' empseTB`i'
        qui gen `empseT`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `empseB`i'' = 1
        qui gen `empseTT`i'' = `empseT`i''^2
        qui gen `empseBB`i'' = `empseB`i''^2
        qui gen `empseTB`i'' = `empseT`i''*`empseB`i''
        local collsum `collsum' `empseT`i'' `empseB`i'' `empseTT`i'' `empseTB`i'' `empseBB`i''
        {c )-}
        if "`relprec'"=="relprec" {c -(}
        tempvar relprecT`i' relprecB`i' relprecTT`i' relprecBB`i' relprecTB`i'
        qui gen `relprecT`i'' = (`beta`refmethod''-`betamean`refmethod'')^2
        qui gen `relprecB`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `relprecTT`i'' = `relprecT`i''^2
        qui gen `relprecBB`i'' = `relprecB`i''^2
        qui gen `relprecTB`i'' = `relprecT`i''*`relprecB`i''
        local collsum `collsum' `relprecT`i'' `relprecB`i'' `relprecTT`i'' `relprecTB`i'' `relprecBB`i''
        {c )-}
        if "`relerror'"=="relerror" {c -(}
        tempvar relerrorT`i' relerrorB`i' relerrorTT`i' relerrorBB`i' relerrorTB`i'
        qui gen `relerrorT`i'' = `se`i''^2
        qui gen `relerrorB`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `relerrorTT`i'' = `relerrorT`i''^2
        qui gen `relerrorBB`i'' = `relerrorB`i''^2
        qui gen `relerrorTB`i'' = `relerrorT`i''*`relerrorB`i''
        local collsum `collsum' `relerrorT`i'' `relerrorB`i'' `relerrorTT`i'' `relerrorTB`i'' `relerrorBB`i''
        {c )-}
        {c )-}
      - {c )-}
      - if "`collmean'"!="" local collmean (mean) `collmean'
      = if "bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = est2 mse_2 modelse_2=se2 varmean_2=var_2 ciwidth_2 cover_2 power_2"!="" local collmean (mean) bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = est2 mse_2 modelse_2=se2 varmean_2=var_2 ciwidth_2 cover_2 power_2
      - if "`collsd'"!="" local collsd (sd) `collsd'
      = if "biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = est2 empse_2=est2 msesd_2=mse_2 varsd_2=var_2 modelsesd_2=se2 ciwidthsd_2 = ciwidth_2"!="" local collsd (sd) biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = est2 empse_2=est2 msesd_2=mse_2 varsd_2=var_2 modelsesd_2=se2 ciwidthsd_2 = ciwidth_2
      - if "`collcount'"!="" local collcount (count) `collcount'
      = if "bsims_1=est1 sesims_1=se1 bothsims_1=cover_1 bsims_2=est2 sesims_2=se2 bothsims_2=cover_2"!="" local collcount (count) bsims_1=est1 sesims_1=se1 bothsims_1=cover_1 bsims_2=est2 sesims_2=se2 bothsims_2=cover_2
      - if "`collsum'"!="" local collsum (sum) `collsum'
      = if "corr_2 ncorr_2"!="" local collsum (sum) corr_2 ncorr_2
      - collapse `collmean' `collsd' `collcount' `collsum', by(`byvar')
      = collapse (mean) bias_1 mean_1 = est1 mse_1 modelse_1=se1 varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = est2 mse_2 modelse_2=se2 varmean_2=var_2 ciwidth_2 cover_2 power_2 (sd) biassd_1 = bias_1 meansd_1 = est1 empse_1=est1 msesd_1=mse_1 varsd_1=var_1 modelsesd_1=se1 ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = est2 empse_2=est2 msesd_2=mse_2 varsd_2=var_2 modelsesd_2=se2 ciwidthsd_2 = ciwidth_2 (count) bsims_1=est1 sesims_1=se1 bothsims_1=cover_1 bsims_2=est2 sesims_2=se2 bothsims_2=cover_2 (sum) corr_2 ncorr_2, by(true dgm)
      - if !mi("`debug'") {c -(}
      = if !mi("") {c -(}
        di as input "Data after collapse:"
        l
        {c )-}
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - qui gen k_`i' = bsims_`i'/(bsims_`i'-1)
      = qui gen k_1 = bsims_1/(bsims_1-1)
      - if "`bias'"=="bias" {c -(}
      = if "bias"=="bias" {c -(}
      - qui gen bias_mcse_`i' = biassd_`i' / sqrt(bsims_`i')
      = qui gen bias_mcse_1 = biassd_1 / sqrt(bsims_1)
      - {c )-}
      - if "`mean'"=="mean" {c -(}
      = if "mean"=="mean" {c -(}
      - qui gen mean_mcse_`i' = meansd_`i' / sqrt(bsims_`i')
      = qui gen mean_mcse_1 = meansd_1 / sqrt(bsims_1)
      - {c )-}
      - if ("`empse'"=="empse" | "`relerror'"=="relerror") & "`robust'"=="" {c -(}
      = if ("empse"=="empse" | "relerror"=="relerror") & ""=="" {c -(}
      - qui gen empse_mcse_`i' = empse_`i'/sqrt(2*(bsims_`i'-1))
      = qui gen empse_mcse_1 = empse_1/sqrt(2*(bsims_1-1))
      - {c )-}
      - else if ("`empse'"=="empse") & "`robust'"=="robust" {c -(}
      = else if ("empse"=="empse") & ""=="robust" {c -(}
        qui replace `empseTT`i''=`empseTT`i''*(k_`i'^2)
        qui replace `empseTB`i''=`empseTB`i''*k_`i'
        qui replace `empseT`i'' =`empseT`i'' *k_`i'
        qui gen empse_mcse_`i' = sqrt(k_`i') * sqrt(`empseTT`i'' -2*(`empseT`i''/`empseB`i'')*`empseTB`i'' +(`empseT`i''/`empseB`i'')^2*`empseBB`i'') / `empseB`i''
        qui replace empse_mcse_`i' = empse_mcse_`i' / (2*empse_`i')
        {c )-}
      - if "`relprec'"=="relprec" {c -(}
      = if "relprec"=="relprec" {c -(}
      - if `i'!=`refmethod' {c -(}
      = if 1!=1 {c -(}
        qui gen relprec_`i' = 100 * ((empse_`refmethod'/empse_`i')^2-1)
        if "`robust'"=="" {c -(}
        qui gen relprec_mcse_`i' = 200 * (empse_`refmethod'/empse_`i')^2 * sqrt((1-(corr_`i')^2)/(ncorr_`i'-1))
        {c )-}
        else {c -(}
        qui gen relprec_mcse_`i' = 100 * sqrt(`relprecTT`i'' -2*(`relprecT`i''/`relprecB`i'')*`relprecTB`i'' +(`relprecT`i''/`relprecB`i'')^2*`relprecBB`i'') / `relprecB`i''
        {c )-}
        {c )-}
      - else {c -(}
      - qui gen relprec_`i' = .
      = qui gen relprec_1 = .
      - qui gen relprec_mcse_`i' = .
      = qui gen relprec_mcse_1 = .
      - {c )-}
      - {c )-}
      - if "`mse'"=="mse" {c -(}
      = if "mse"=="mse" {c -(}
      - qui gen mse_mcse_`i' = msesd_`i' / sqrt(bsims_`i')
      = qui gen mse_mcse_1 = msesd_1 / sqrt(bsims_1)
      - {c )-}
      - if "`rmse'"=="rmse" {c -(}
      = if "rmse"=="rmse" {c -(}
      - qui gen rmse_`i' = sqrt(mse_`i')
      = qui gen rmse_1 = sqrt(mse_1)
      - qui gen rmse_mcse_`i' = msesd_`i' / (2 * sqrt(bsims_`i') * rmse_`i')
      = qui gen rmse_mcse_1 = msesd_1 / (2 * sqrt(bsims_1) * rmse_1)
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" {c -(}
      - if "`modelsemethod'"=="rmse" {c -(}
      = if "rmse"=="rmse" {c -(}
      - qui replace modelse_`i' = sqrt(varmean_`i')
      = qui replace modelse_1 = sqrt(varmean_1)
      - qui gen modelse_mcse_`i' = varsd_`i' / sqrt(4 * sesims_`i' * varmean_`i')
      = qui gen modelse_mcse_1 = varsd_1 / sqrt(4 * sesims_1 * varmean_1)
      - {c )-}
      - else if "`modelsemethod'"=="mean" {c -(}
      = else if "rmse"=="mean" {c -(}
        qui gen modelse_mcse_`i' = modelsesd_`i' / sqrt(sesims_`i')
        {c )-}
      - {c )-}
      - if "`ciwidth'"=="ciwidth" {c -(}
      = if "ciwidth"=="ciwidth" {c -(}
      - qui gen ciwidth_mcse_`i' = ciwidthsd_`i' / sqrt(bsims_`i')
      = qui gen ciwidth_mcse_1 = ciwidthsd_1 / sqrt(bsims_1)
      - {c )-}
      - if "`relerror'"=="relerror" {c -(}
      = if "relerror"=="relerror" {c -(}
      - qui gen relerror_`i' = 100*(modelse_`i'/empse_`i'-1)
      = qui gen relerror_1 = 100*(modelse_1/empse_1-1)
      - if "`robust'"=="" qui gen relerror_mcse_`i' = 100*(modelse_`i'/empse_`i') * sqrt((modelse_mcse_`i'/modelse_`i')^2 + (empse_mcse_`i'/empse_`i')^2 )
      = if ""=="" qui gen relerror_mcse_1 = 100*(modelse_1/empse_1) * sqrt((modelse_mcse_1/modelse_1)^2 + (empse_mcse_1/empse_1)^2 )
      - else {c -(}
        qui gen relerror_mcse_`i' = sqrt(`relerrorTT`i'' -2*(`relerrorT`i''/`relerrorB`i'')*`relerrorTB`i'' +(`relerrorT`i''/`relerrorB`i'')^2*`relerrorBB`i'') / `relerrorB`i''
        qui replace relerror_mcse_`i' = relerror_mcse_`i' * 100 / (2*(1+relerror_`i'/100))
        {c )-}
      - {c )-}
      - if "`cover'"=="cover" {c -(}
      = if "cover"=="cover" {c -(}
      - qui gen cover_mcse_`i' = sqrt(cover_`i'*(100-cover_`i')/bothsims_`i') if bothsims_`i'>1
      = qui gen cover_mcse_1 = sqrt(cover_1*(100-cover_1)/bothsims_1) if bothsims_1>1
      - {c )-}
      - if "`power'"=="power" {c -(}
      = if "power"=="power" {c -(}
      - qui gen power_mcse_`i' = sqrt(power_`i'*(100-power_`i')/bothsims_`i') if bothsims_`i'>1
      = qui gen power_mcse_1 = sqrt(power_1*(100-power_1)/bothsims_1) if bothsims_1>1
      - {c )-}
      - cap drop varmean_`i'
      = cap drop varmean_1
      - cap drop varsd_`i'
      = cap drop varsd_1
      - {c )-}
      - qui gen k_`i' = bsims_`i'/(bsims_`i'-1)
      = qui gen k_2 = bsims_2/(bsims_2-1)
      - if "`bias'"=="bias" {c -(}
      = if "bias"=="bias" {c -(}
      - qui gen bias_mcse_`i' = biassd_`i' / sqrt(bsims_`i')
      = qui gen bias_mcse_2 = biassd_2 / sqrt(bsims_2)
      - {c )-}
      - if "`mean'"=="mean" {c -(}
      = if "mean"=="mean" {c -(}
      - qui gen mean_mcse_`i' = meansd_`i' / sqrt(bsims_`i')
      = qui gen mean_mcse_2 = meansd_2 / sqrt(bsims_2)
      - {c )-}
      - if ("`empse'"=="empse" | "`relerror'"=="relerror") & "`robust'"=="" {c -(}
      = if ("empse"=="empse" | "relerror"=="relerror") & ""=="" {c -(}
      - qui gen empse_mcse_`i' = empse_`i'/sqrt(2*(bsims_`i'-1))
      = qui gen empse_mcse_2 = empse_2/sqrt(2*(bsims_2-1))
      - {c )-}
      - else if ("`empse'"=="empse") & "`robust'"=="robust" {c -(}
      = else if ("empse"=="empse") & ""=="robust" {c -(}
        qui replace `empseTT`i''=`empseTT`i''*(k_`i'^2)
        qui replace `empseTB`i''=`empseTB`i''*k_`i'
        qui replace `empseT`i'' =`empseT`i'' *k_`i'
        qui gen empse_mcse_`i' = sqrt(k_`i') * sqrt(`empseTT`i'' -2*(`empseT`i''/`empseB`i'')*`empseTB`i'' +(`empseT`i''/`empseB`i'')^2*`empseBB`i'') / `empseB`i''
        qui replace empse_mcse_`i' = empse_mcse_`i' / (2*empse_`i')
        {c )-}
      - if "`relprec'"=="relprec" {c -(}
      = if "relprec"=="relprec" {c -(}
      - if `i'!=`refmethod' {c -(}
      = if 2!=1 {c -(}
      - qui gen relprec_`i' = 100 * ((empse_`refmethod'/empse_`i')^2-1)
      = qui gen relprec_2 = 100 * ((empse_1/empse_2)^2-1)
      - if "`robust'"=="" {c -(}
      = if ""=="" {c -(}
      - qui gen relprec_mcse_`i' = 200 * (empse_`refmethod'/empse_`i')^2 * sqrt((1-(corr_`i')^2)/(ncorr_`i'-1))
      = qui gen relprec_mcse_2 = 200 * (empse_1/empse_2)^2 * sqrt((1-(corr_2)^2)/(ncorr_2-1))
      - {c )-}
      - else {c -(}
        qui gen relprec_mcse_`i' = 100 * sqrt(`relprecTT`i'' -2*(`relprecT`i''/`relprecB`i'')*`relprecTB`i'' +(`relprecT`i''/`relprecB`i'')^2*`relprecBB`i'') / `relprecB`i''
        {c )-}
      - {c )-}
      - else {c -(}
        qui gen relprec_`i' = .
        qui gen relprec_mcse_`i' = .
        {c )-}
      - {c )-}
      - if "`mse'"=="mse" {c -(}
      = if "mse"=="mse" {c -(}
      - qui gen mse_mcse_`i' = msesd_`i' / sqrt(bsims_`i')
      = qui gen mse_mcse_2 = msesd_2 / sqrt(bsims_2)
      - {c )-}
      - if "`rmse'"=="rmse" {c -(}
      = if "rmse"=="rmse" {c -(}
      - qui gen rmse_`i' = sqrt(mse_`i')
      = qui gen rmse_2 = sqrt(mse_2)
      - qui gen rmse_mcse_`i' = msesd_`i' / (2 * sqrt(bsims_`i') * rmse_`i')
      = qui gen rmse_mcse_2 = msesd_2 / (2 * sqrt(bsims_2) * rmse_2)
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" {c -(}
      - if "`modelsemethod'"=="rmse" {c -(}
      = if "rmse"=="rmse" {c -(}
      - qui replace modelse_`i' = sqrt(varmean_`i')
      = qui replace modelse_2 = sqrt(varmean_2)
      - qui gen modelse_mcse_`i' = varsd_`i' / sqrt(4 * sesims_`i' * varmean_`i')
      = qui gen modelse_mcse_2 = varsd_2 / sqrt(4 * sesims_2 * varmean_2)
      - {c )-}
      - else if "`modelsemethod'"=="mean" {c -(}
      = else if "rmse"=="mean" {c -(}
        qui gen modelse_mcse_`i' = modelsesd_`i' / sqrt(sesims_`i')
        {c )-}
      - {c )-}
      - if "`ciwidth'"=="ciwidth" {c -(}
      = if "ciwidth"=="ciwidth" {c -(}
      - qui gen ciwidth_mcse_`i' = ciwidthsd_`i' / sqrt(bsims_`i')
      = qui gen ciwidth_mcse_2 = ciwidthsd_2 / sqrt(bsims_2)
      - {c )-}
      - if "`relerror'"=="relerror" {c -(}
      = if "relerror"=="relerror" {c -(}
      - qui gen relerror_`i' = 100*(modelse_`i'/empse_`i'-1)
      = qui gen relerror_2 = 100*(modelse_2/empse_2-1)
      - if "`robust'"=="" qui gen relerror_mcse_`i' = 100*(modelse_`i'/empse_`i') * sqrt((modelse_mcse_`i'/modelse_`i')^2 + (empse_mcse_`i'/empse_`i')^2 )
      = if ""=="" qui gen relerror_mcse_2 = 100*(modelse_2/empse_2) * sqrt((modelse_mcse_2/modelse_2)^2 + (empse_mcse_2/empse_2)^2 )
      - else {c -(}
        qui gen relerror_mcse_`i' = sqrt(`relerrorTT`i'' -2*(`relerrorT`i''/`relerrorB`i'')*`relerrorTB`i'' +(`relerrorT`i''/`relerrorB`i'')^2*`relerrorBB`i'') / `relerrorB`i''
        qui replace relerror_mcse_`i' = relerror_mcse_`i' * 100 / (2*(1+relerror_`i'/100))
        {c )-}
      - {c )-}
      - if "`cover'"=="cover" {c -(}
      = if "cover"=="cover" {c -(}
      - qui gen cover_mcse_`i' = sqrt(cover_`i'*(100-cover_`i')/bothsims_`i') if bothsims_`i'>1
      = qui gen cover_mcse_2 = sqrt(cover_2*(100-cover_2)/bothsims_2) if bothsims_2>1
      - {c )-}
      - if "`power'"=="power" {c -(}
      = if "power"=="power" {c -(}
      - qui gen power_mcse_`i' = sqrt(power_`i'*(100-power_`i')/bothsims_`i') if bothsims_`i'>1
      = qui gen power_mcse_2 = sqrt(power_2*(100-power_2)/bothsims_2) if bothsims_2>1
      - {c )-}
      - cap drop varmean_`i'
      = cap drop varmean_2
      - cap drop varsd_`i'
      = cap drop varsd_2
      - {c )-}
      - if !mi("`debug'") {c -(}
      = if !mi("") {c -(}
        di as input "Data after post-processing:"
        l
        {c )-}
      - local alpha=100-`level'
      = local alpha=100-95
      - local bsimsname Non-missing point estimates
      - local sesimsname Non-missing standard errors
      - local biasname Bias in point estimate
      - local meanname Mean of point estimate
      - local empsename Empirical standard error
      - local relprecname % gain in precision relative to method `label`refmethod''
      = local relprecname % gain in precision relative to method 1
      - local msename Mean squared error
      - local rmsename Root mean squared error
      - if "`modelsemethod'" =="mean" local modelsename Mean model-based standard error `sebeta'
      = if "rmse" =="mean" local modelsename Mean model-based standard error 
      - if "`modelsemethod'" =="rmse" local modelsename RMS model-based standard error `sebeta'
      = if "rmse" =="rmse" local modelsename RMS model-based standard error 
      - local ciwidthname Mean conf. interval width
      - local relerrorname Relative % error in standard error
      - local covername % coverage of nominal `level'% conf. interval
      = local covername % coverage of nominal 95% conf. interval
      - local powername % power of `alpha'% level test
      = local powername % power of 5% level test
      - local keeplist `byvar'
      = local keeplist true dgm
      - foreach name in `output' {c -(}
      = foreach name in bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power {c -(}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "bsims"!="bsims" & "bsims"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename bsims_1 method1bsims
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims
      - if `domcse' {c -(}
      = if 0 {c -(}
        rename `name'_mcse_`i' method`i'`name'_mcse
        local keeplist `keeplist' method`i'`name'_mcse
        {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename bsims_2 method2bsims
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims
      - if `domcse' {c -(}
      = if 0 {c -(}
        rename `name'_mcse_`i' method`i'`name'_mcse
        local keeplist `keeplist' method`i'`name'_mcse
        {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "sesims"!="bsims" & "sesims"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename sesims_1 method1sesims
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims
      - if `domcse' {c -(}
      = if 0 {c -(}
        rename `name'_mcse_`i' method`i'`name'_mcse
        local keeplist `keeplist' method`i'`name'_mcse
        {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename sesims_2 method2sesims
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims
      - if `domcse' {c -(}
      = if 0 {c -(}
        rename `name'_mcse_`i' method`i'`name'_mcse
        local keeplist `keeplist' method`i'`name'_mcse
        {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "bias"!="bsims" & "bias"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename bias_1 method1bias
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename bias_mcse_1 method1bias_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename bias_2 method2bias
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename bias_mcse_2 method2bias_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "mean"!="bsims" & "mean"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename mean_1 method1mean
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename mean_mcse_1 method1mean_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename mean_2 method2mean
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename mean_mcse_2 method2mean_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "empse"!="bsims" & "empse"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename empse_1 method1empse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename empse_mcse_1 method1empse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename empse_2 method2empse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename empse_mcse_2 method2empse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "relprec"!="bsims" & "relprec"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename relprec_1 method1relprec
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename relprec_mcse_1 method1relprec_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename relprec_2 method2relprec
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename relprec_mcse_2 method2relprec_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "mse"!="bsims" & "mse"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename mse_1 method1mse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename mse_mcse_1 method1mse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename mse_2 method2mse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename mse_mcse_2 method2mse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "rmse"!="bsims" & "rmse"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename rmse_1 method1rmse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename rmse_mcse_1 method1rmse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename rmse_2 method2rmse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename rmse_mcse_2 method2rmse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "modelse"!="bsims" & "modelse"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename modelse_1 method1modelse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename modelse_mcse_1 method1modelse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename modelse_2 method2modelse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename modelse_mcse_2 method2modelse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "ciwidth"!="bsims" & "ciwidth"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename ciwidth_1 method1ciwidth
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename ciwidth_mcse_1 method1ciwidth_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename ciwidth_2 method2ciwidth
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename ciwidth_mcse_2 method2ciwidth_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "relerror"!="bsims" & "relerror"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename relerror_1 method1relerror
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename relerror_mcse_1 method1relerror_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename relerror_2 method2relerror
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename relerror_mcse_2 method2relerror_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "cover"!="bsims" & "cover"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename cover_1 method1cover
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename cover_mcse_1 method1cover_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename cover_2 method2cover
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename cover_mcse_2 method2cover_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "power"!="bsims" & "power"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename power_1 method1power
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse method1power
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename power_mcse_1 method1power_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse method1power method1power_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename power_2 method2power
      - local keeplist `keeplist' method`i'`name'
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse method1power method1power_mcse method2power
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename power_mcse_2 method2power_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse method1power method1power_mcse method2power method2power_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - local methodlist `methodlist' method`i'
      = local methodlist  method1
      - {c )-}
      - local methodlist `methodlist' method`i'
      = local methodlist method1 method2
      - {c )-}
      - keep `keeplist'
      = keep true dgm method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse method1power method1power_mcse method2power method2power_mcse
      - qui reshape long `methodlist', i(`byvar') j(`gen'code) string
      = qui reshape long method1 method2, i(true dgm) j(_perfmeascode) string
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - char method`i'[varname] "`label`i''"
      = char method1[varname] "1"
      - label var method`i' "`label`i''"
      = label var method1 "1"
      - {c )-}
      - char method`i'[varname] "`label`i''"
      = char method2[varname] "2"
      - label var method`i' "`label`i''"
      = label var method2 "2"
      - {c )-}
      - local i 0
      - qui gen mcse = .
      - qui gen `gen'num = .
      = qui gen _perfmeasnum = .
      - foreach perfmeas in bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power {c -(}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="bsims"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="bsims_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="bsims" if _perfmeascode=="bsims_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 1 if _perfmeascode=="bsims" | _perfmeascode=="bsims_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "bsims"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "bsims"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "bsims"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "bsims"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "bsims"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "bsims"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "bsims"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "bsims"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "bsims"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "bsims"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "bsims"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "bsims"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "bsims"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 1 "Non-missing point estimates", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="sesims"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="sesims_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="sesims" if _perfmeascode=="sesims_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 2 if _perfmeascode=="sesims" | _perfmeascode=="sesims_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "sesims"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "sesims"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "sesims"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "sesims"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "sesims"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "sesims"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "sesims"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "sesims"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "sesims"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "sesims"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "sesims"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "sesims"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "sesims"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 2 "Non-missing standard errors", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="bias"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="bias_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="bias" if _perfmeascode=="bias_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 3 if _perfmeascode=="bias" | _perfmeascode=="bias_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "bias"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "bias"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "bias"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "bias"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "bias"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "bias"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "bias"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "bias"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "bias"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "bias"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "bias"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "bias"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "bias"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 3 "Bias in point estimate", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="mean"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="mean_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="mean" if _perfmeascode=="mean_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 4 if _perfmeascode=="mean" | _perfmeascode=="mean_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "mean"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "mean"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "mean"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "mean"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "mean"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "mean"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "mean"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "mean"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "mean"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "mean"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "mean"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "mean"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "mean"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 4 "Mean of point estimate", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="empse"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="empse_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="empse" if _perfmeascode=="empse_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 5 if _perfmeascode=="empse" | _perfmeascode=="empse_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "empse"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "empse"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "empse"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "empse"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "empse"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "empse"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "empse"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "empse"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "empse"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "empse"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "empse"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "empse"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "empse"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 5 "Empirical standard error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="relprec"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="relprec_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="relprec" if _perfmeascode=="relprec_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 6 if _perfmeascode=="relprec" | _perfmeascode=="relprec_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "relprec"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "relprec"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "relprec"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "relprec"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "relprec"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "relprec"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "relprec"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "relprec"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "relprec"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "relprec"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "relprec"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "relprec"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "relprec"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 6 "% precision gain relative to method 1", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="mse"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="mse_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="mse" if _perfmeascode=="mse_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 7 if _perfmeascode=="mse" | _perfmeascode=="mse_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "mse"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "mse"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "mse"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "mse"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "mse"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "mse"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "mse"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "mse"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "mse"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "mse"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "mse"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "mse"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "mse"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 7 "Mean squared error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="rmse"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="rmse_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="rmse" if _perfmeascode=="rmse_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 8 if _perfmeascode=="rmse" | _perfmeascode=="rmse_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "rmse"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "rmse"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "rmse"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "rmse"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "rmse"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "rmse"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "rmse"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "rmse"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "rmse"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "rmse"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "rmse"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "rmse"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "rmse"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 8 "Root mean squared error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="modelse"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="modelse_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="modelse" if _perfmeascode=="modelse_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 9 if _perfmeascode=="modelse" | _perfmeascode=="modelse_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "modelse"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "modelse"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "modelse"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "modelse"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "modelse"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "modelse"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "modelse"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "modelse"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "modelse"=="modelse" {c -(}
      - if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
      = if "rmse" =="mean" local label "Mean model-based standard error"
      - if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
      = if "rmse" =="rmse" local label "RMS model-based standard error"
      - {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "modelse"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "modelse"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "modelse"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "modelse"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 9 "RMS model-based standard error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="ciwidth"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="ciwidth_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="ciwidth" if _perfmeascode=="ciwidth_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 10 if _perfmeascode=="ciwidth" | _perfmeascode=="ciwidth_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "ciwidth"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "ciwidth"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "ciwidth"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "ciwidth"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "ciwidth"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "ciwidth"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "ciwidth"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "ciwidth"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "ciwidth"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "ciwidth"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "ciwidth"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "ciwidth"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "ciwidth"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 10 "Mean conf. interval width", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="relerror"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="relerror_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="relerror" if _perfmeascode=="relerror_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 11 if _perfmeascode=="relerror" | _perfmeascode=="relerror_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "relerror"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "relerror"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "relerror"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "relerror"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "relerror"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "relerror"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "relerror"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "relerror"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "relerror"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "relerror"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "relerror"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "relerror"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "relerror"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 11 "Relative % error in standard error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="cover"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="cover_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="cover" if _perfmeascode=="cover_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 12 if _perfmeascode=="cover" | _perfmeascode=="cover_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "cover"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "cover"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "cover"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "cover"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "cover"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "cover"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "cover"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "cover"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "cover"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "cover"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "cover"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "cover"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "cover"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 12 "% coverage of nominal 95% conf. interval", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="power"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="power_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="power" if _perfmeascode=="power_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 13 if _perfmeascode=="power" | _perfmeascode=="power_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "power"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "power"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "power"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "power"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "power"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "power"=="relprec" local label "% precision gain relative to method 1"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "power"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "power"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "power"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "power"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "power"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "power"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "power"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 13 "% power of 5% level test", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - assert !mi(mcse)
      - foreach var in `methodlist' {c -(}
      = foreach var in method1 method2 {c -(}
      - rename `var' `var'_
      = rename method1 method1_
      - local methodlist2 `methodlist2' `var'_
      = local methodlist2  method1_
      - {c )-}
      - rename `var' `var'_
      = rename method2 method2_
      - local methodlist2 `methodlist2' `var'_
      = local methodlist2 method1_ method2_
      - {c )-}
      - qui reshape wide `methodlist2', i(`byvar' `gen'num) j(mcse)
      = qui reshape wide method1_ method2_, i(true dgm _perfmeasnum) j(mcse)
      - local ids `gen'num `by'
      = local ids _perfmeasnum true dgm
      - local betas
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename method`i'_0 `beta`i''
      = rename method1_0 est1
      - label var `beta`i'' "`label`i''"
      = label var est1 "1"
      - char `beta`i''[varname] "`label`i''"
      = char est1[varname] "1"
      - local betasnomcse `betasnomcse' `beta`i''
      = local betasnomcse  est1
      - local betas `betas' `beta`i''
      = local betas  est1
      - if "`mcse'"=="mcse" {c -(}
      = if "mcse"=="mcse" {c -(}
      - rename method`i'_1 `beta`i''_mcse
      = rename method1_1 est1_mcse
      - local betas `betas' `beta`i''_mcse
      = local betas est1 est1_mcse
      - label var `beta`i''_mcse "`label`i'' (MCse)"
      = label var est1_mcse "1 (MCse)"
      - char `beta`i''_mcse[varname] "(MCse)"
      = char est1_mcse[varname] "(MCse)"
      - {c )-}
      - {c )-}
      - rename method`i'_0 `beta`i''
      = rename method2_0 est2
      - label var `beta`i'' "`label`i''"
      = label var est2 "2"
      - char `beta`i''[varname] "`label`i''"
      = char est2[varname] "2"
      - local betasnomcse `betasnomcse' `beta`i''
      = local betasnomcse est1 est2
      - local betas `betas' `beta`i''
      = local betas est1 est1_mcse est2
      - if "`mcse'"=="mcse" {c -(}
      = if "mcse"=="mcse" {c -(}
      - rename method`i'_1 `beta`i''_mcse
      = rename method2_1 est2_mcse
      - local betas `betas' `beta`i''_mcse
      = local betas est1 est1_mcse est2 est2_mcse
      - label var `beta`i''_mcse "`label`i'' (MCse)"
      = label var est2_mcse "2 (MCse)"
      - char `beta`i''_mcse[varname] "(MCse)"
      = char est2_mcse[varname] "(MCse)"
      - {c )-}
      - {c )-}
      - char `gen'num[varname] "Performance measure"
      = char _perfmeasnum[varname] "Performance measure"
      - label var `gen'num "Performance measure"
      = label var _perfmeasnum "Performance measure"
      - label var `gen'code "Performance measure"
      = label var _perfmeascode "Performance measure"
      - order `ids' `betas'
      = order _perfmeasnum true dgm est1 est1_mcse est2 est2_mcse
      - sort `gen'num `by'
      = sort _perfmeasnum true dgm
      - tokenize `format'
      = tokenize 
      - local bfmt "`1'"
      = local bfmt ""
      - local pctfmt "`2'"
      = local pctfmt ""
      - local nfmt "`3'"
      = local nfmt ""
      - if "`bfmt'"=="" {c -(}
      = if ""=="" {c -(}
      - if mi("`methodvar'") local bfmt: format `beta1'
      = if mi("method") local bfmt: format est1
      - else local bfmt `bfmt0'
      = else local bfmt %9.0g
      - {c )-}
      - if "`pctfmt'"=="" | "`pctfmt'"=="=" | "`pctfmt'"=="." local pctfmt `bfmt'
      = if ""=="" | ""=="=" | ""=="." local pctfmt %9.0g
      - if "`nfmt'"=="" local nfmt %7.0f
      = if ""=="" local nfmt %7.0f
      - if mi("`transpose'") {c -(}
      = if mi("") {c -(}
      - if "`list'"!="nolist" {c -(}
      = if ""!="nolist" {c -(}
      - if "`listsep'"=="" {c -(}
      = if ""=="" {c -(}
      - qui format `betas' `bfmt'
      = qui format est1 est1_mcse est2 est2_mcse %9.0g
      - list `ids' `betas', noo subvarname sepby(`gen'num `sepby') `abbreviate'
      = list _perfmeasnum true dgm est1 est1_mcse est2 est2_mcse, noo subvarname sepby(_perfmeasnum ) 
      - {c )-}
      - else {c -(}
        foreach perfmeas in `output' {c -(}
        di as text _new "``perfmeas'name'"
        local thisbetas = cond(inlist("`perfmeas'","bsims","sesims"), "betasnomcse", "betas")
        if inlist("`perfmeas'","bsims","sesims") local format `nfmt'
        else if inlist("`perfmeas'","bias","empse","modelse","mse") local format `bfmt'
        else local format `pctfmt'
        qui format `betas' `format'
        list `by' ``thisbetas'' if `gen'code=="`perfmeas'", noo subvarname sepby(`gen'num `sepby') `abbreviate'
        {c )-}
        {c )-}
      - {c )-}
      - qui format `betas' `bfmt'
      = qui format est1 est1_mcse est2 est2_mcse %9.0g
      - char `gen'num[varname]
      = char _perfmeasnum[varname]
      - {c )-}
      - else {c -(}
        di "Transposing results ..."
        drop `gen'num
        if "`origformat'"=="long" {c -(}
        {c )-}
        else if "`origformat'"=="wide" {c -(}
        foreach var of varlist `betas' {c -(}
        rename `var' b_`var'
        {c )-}
        local betastub b_
        {c )-}
        else exit 499
        qui reshape long `betastub', i(`gen'code `by') j(method) string
        qui reshape wide `betastub', i(`by' method) j(`gen'code) string
        if "`mcse'"=="mcse" {c -(}
        gen type = cond(substr(method,length(method)-4,5)=="_mcse","mcse","est")
        qui replace method = substr(method,1,length(method)-5) if type=="mcse"
        local type type
        local sep2 method
        {c )-}
        sort `by' method `type'
        foreach varname of varlist `betastub'* {c -(}
        local varname2 = substr("`varname'", 1+length("`betastub'"), .)
        rename `varname' `varname2'
        label var `varname2'
        {c )-}
        cap format `bias' `empse' `mse' `modelse' `bfmt'
        cap format `relprec' `relerror' `cover' `power' `pctfmt'
        cap format `bsims' `sesims' `sesims' `nfmt'
        if "`list'"!="nolist" {c -(}
        l `by' method `type' `bsims' `sesims' `bias' `empse' `relprec' `mse' `modelse' `relerror' `cover' `power', sepby(`by' `sep2') noo
        {c )-}
        {c )-}
      - if "`saving'"!="" {c -(}
      = if ""!="" {c -(}
        if "`by'"=="" drop `byvar'
        save `saving'
        {c )-}
      - if "`clear'"=="clear" {c -(}
      = if "clear"=="clear" {c -(}
      - restore, not
      - di as text "Results are now in memory."
      - {c )-}
      {hline 79} end simsum {hline}
    - if `methodlabels' == 0 local methodloop `metlist'
    = if 0 == 0 local methodloop 
    - else local methodloop `methodvalues'
    = else local methodloop 
    - foreach v in `methodloop' {c -(}
    = foreach v in  {c -(}
      if !mi("`se'") {c -(}
      if substr(" `estimate'`v'",strlen(" `estimate'`v'"),1)=="_" qui rename `estimate'`v'mcse `se'`v'
      else qui rename `estimate'`v'_mcse `se'`v'
      {c )-}
      else if substr(" `estimate'`v'",strlen(" `estimate'`v'"),1)=="_" qui rename `estimate'`v'mcse se`v'
      else qui rename `estimate'`v'_mcse se`v'
      {c )-}
    - local optionlistreshape `optionlist'
    = local optionlistreshape est se
    - local exclude "`true'"
    = local exclude "true"
    - local optionlistreshape: list optionlistreshape - exclude
    - if !mi("`metlist'") local methodreshape `metlist'
    = if !mi("") local methodreshape 
    - else local methodreshape `valmethod'
    = else local methodreshape 1 2
    - if `methodstringindi'==1 {c -(}
    = if 0==1 {c -(}
      qui reshape long `optionlistreshape', i(`dgm' `target' _perfmeasnum) j(`method' "`methodreshape'") string
      {c )-}
    - else if `methodstringindi'==0 & `methodlabels' == 0 {c -(}
    = else if 0==0 & 0 == 0 {c -(}
    - qui reshape long `optionlistreshape', i(`dgm' `target' _perfmeasnum) j(`method' "`methodreshape'")
    = qui reshape long est se, i(dgm  _perfmeasnum) j(method "1 2")
      {hline 76} begin reshape {hline}
      - u_mi_not_mi_set reshape other
      - if _caller() <= 10 {c -(}
        reshape_10 `0'
        exit
        {c )-}
      - if _caller() >= 12 {c -(}
      - global ReS_Call : di "version " string(_caller()) ":"
      - {c )-}
      - version 5.0, missing
      - if "`1'"=="clear" {c -(}
      = if "long"=="clear" {c -(}
        char _dta[ReS_ver]
        char _dta[ReS_i]
        char _dta[ReS_j]
        char _dta[ReS_jv]
        char _dta[ReS_Xij]
        char _dta[Res_Xi]
        char _dta[ReS_atwl]
        char _dta[ReS_str]
        local xijn : char _dta[ReS_Xij_n]
        if "`xijn'" != "" {c -(}
        forvalues i = 1/`xijn' {c -(}
        char _dta[ReS_Xij_wide`i']
        char _dta[ReS_Xij_long`i']
        {c )-}
        char _dta[ReS_Xij_n]
        {c )-}
        exit
        {c )-}
      - if "`1'"=="wide" | "`1'"=="long" {c -(}
      = if "long"=="wide" | "long"=="long" {c -(}
      - DoNew `*'
      = DoNew long est se, i(dgm _perfmeasnum) j(method 1 2 )
      - exit
      {hline 78} end reshape {hline}
    - label value `method' `methodformat'
    = label value method 
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("value", "val") > 0 ) {c -(}
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {c -(}
      = if "" != "" {c -(}
        local fix ", nofix"
        {c )-}
      - gettoken var rest : anything
      - while `"`rest'"' != "" {c -(}
      = while `""' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
      - local vlist : list anything - lab
      - if "`lab'" == "." {c -(}
      = if "" == "." {c -(}
        local lab ""
        {c )-}
      - foreach var of varlist `vlist' {c -(}
      = foreach var of varlist method {c -(}
      - `vv' _label `val' `var' `lab' `fix'
      = version 15, missing: _label value method  
      - {c )-}
      - {c )-}
      - else {c -(}
        `vv' _label `macval(0)'
        {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - else if `methodstringindi'==0 & `methodlabels' == 1 {c -(}
    = else if 0==0 & 0 == 1 {c -(}
      qui reshape long `optionlistreshape', i(`dgm' `target' _perfmeasnum) j(`method' "`methodvalues'")
      label value `method' `methodformat'
      {c )-}
    - {c )-}
    - else if `nformat'==3 {c -(}
    = else if 1==3 {c -(}
      qui order `rep' `dgm' `target'
      qui sort `rep' `dgm' `target'
      if `methodstringindi' == 0 & "`methodlabels'" == "1" local methodloop `methodvalues'
      else local methodloop `valmethod'
      foreach v in `methodloop' {c -(}
      if substr("`v'",strlen("`v'"),1)=="_" local v = substr("`v'", 1, index("`v'","_") - 1)
      local estlist`v' `estvars'`v'
      local estlist `estlist' `estlist`v''
      local selist`v' `sevars'`v'
      local selist `selist' `selist`v''
      {c )-}
      qui simsum `estlist' `if', true(`true') se(`selist') id(`rep') by(`truevariable' `dgm' `target') max(20) `anything' clear mcse gen(_perfmeas) `force'
      foreach v in `valmethod' {c -(}
      if substr("`v'",strlen("`v'"),1)=="_" local v = substr("`v'", 1, index("`v'","_") - 1)
      if `estchange' == 1 {c -(}
      qui rename `estimate'_`v'_mcse `se'`v'
      {c )-}
      else {c -(}
      if substr(" `estimate'`v'",strlen(" `estimate'`v'"),1)=="_" qui rename `estimate'`v'mcse `se'`v'
      else qui rename `estimate'`v'_mcse `se'`v'
      {c )-}
      if `sechange' == 1 qui rename `se'`v' `se'_`v'
      {c )-}
      {c )-}
    - qui gen indi = -_perfmeasnum
    - qui levelsof _perfmeasnum, local(lablevels)
      {hline 75} begin levelsof {hline}
      - version 15.0
      - syntax varname [if] [in] [, Separate(str) MISSing Local(name local) Clean MATROW(name) MATCELL(name) HEXadecimal ]
      - if ("`missing'" == "") {c -(}
      = if ("" == "") {c -(}
      - marksample touse, strok
      - {c )-}
      - else {c -(}
        marksample touse, strok novarlist
        {c )-}
      - if (`"`separate'"' == "") {c -(}
      = if (`""' == "") {c -(}
      - local separate " "
      - {c )-}
      - local typ : type `varlist'
      = local typ : type _perfmeasnum
      - if ("`typ'" == "strL" | substr("`typ'", 1, 3) == "str") {c -(}
      = if ("float" == "strL" | substr("float", 1, 3) == "str") {c -(}
        NoHexadecimal `hexadecimal'
        NoMatrow `matrow'
        {c )-}
      - mata: st_rclear()
      - if ("`typ'" == "strL") {c -(}
      = if ("float" == "strL") {c -(}
        LevelsOfStrL `varlist' if `touse', separate(`"`separate'"') `clean' matcell(`matcell')
        {c )-}
      - else if (substr("`typ'", 1, 3) == "str") {c -(}
      = else if (substr("float", 1, 3) == "str") {c -(}
        local isclean = ("`clean'" != "")
        mata: LevelsOfString("`varlist'", "`touse'", `"`separate'"', `isclean', "`matcell'")
        {c )-}
      - else {c -(}
      - local isint = inlist("`typ'", "byte", "int", "long")
      = local isint = inlist("float", "byte", "int", "long")
      - mata: LevelsOfReal("`varlist'", "`touse'", `"`separate'"', `isint', 1, "`matrow'", "`matcell'", "`hexadecimal'" != "")
      = mata: LevelsOfReal("_perfmeasnum", "__000001", `" "', 0, 1, "", "", "" != "")
      - if ("`usetab'" == "usetab") {c -(}
      = if ("" == "usetab") {c -(}
        cap LevelsOfTab `varlist' if `touse', `missing' separate(`"`separate'"') matrow(`matrow') matcell(`matcell') `hexadecimal'
        if (_rc) {c -(}
        mata: LevelsOfReal("`varlist'", "`touse'", `"`separate'"', `isint', 0, "`matrow'", "`matcell'", "`hexadecimal'" != "")
        {c )-}
        {c )-}
      - {c )-}
      - if ("`local'" != "") {c -(}
      = if ("lablevels" != "") {c -(}
      - c_local `local' `"`r(levels)'"'
      = c_local lablevels `"1 2 3 4 5 6 7 8 9 10 11 12 13"'
      - {c )-}
      - di as text `"`r(levels)'"'
      = di as text `"1 2 3 4 5 6 7 8 9 10 11 12 13"'
      {hline 77} end levelsof {hline}
    - foreach lablevel of local lablevels {c -(}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 1
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -1 "Non-missing point estimates", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -1 "Non-missing point estimates", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 2
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -2 "Non-missing standard errors", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -2 "Non-missing standard errors", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 3
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -3 "Bias in point estimate", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -3 "Bias in point estimate", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 4
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -4 "Mean of point estimate", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -4 "Mean of point estimate", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 5
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -5 "Empirical standard error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -5 "Empirical standard error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 6
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -6 "% precision gain relative to method 1", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -6 "% precision gain relative to method 1", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 7
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -7 "Mean squared error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -7 "Mean squared error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 8
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -8 "Root mean squared error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -8 "Root mean squared error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 9
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -9 "RMS model-based standard error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -9 "RMS model-based standard error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 10
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -10 "Mean conf. interval width", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -10 "Mean conf. interval width", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 11
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -11 "Relative % error in standard error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -11 "Relative % error in standard error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 12
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -12 "% coverage of nominal 95% conf. interval", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -12 "% coverage of nominal 95% conf. interval", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 13
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -13 "% power of 5% level test", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -13 "% power of 5% level test", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - label values indi indilab
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("values", "val") > 0 ) {c -(}
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {c -(}
      = if "" != "" {c -(}
        local fix ", nofix"
        {c )-}
      - gettoken var rest : anything
      - while `"`rest'"' != "" {c -(}
      = while `" indilab"' != "" {c -(}
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "indilab"
      - {c )-}
      - while `"`rest'"' != "" {c -(}
      = while `""' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
      - local vlist : list anything - lab
      - if "`lab'" == "." {c -(}
      = if "indilab" == "." {c -(}
        local lab ""
        {c )-}
      - foreach var of varlist `vlist' {c -(}
      = foreach var of varlist indi {c -(}
      - `vv' _label `val' `var' `lab' `fix'
      = version 15, missing: _label values indi indilab 
      - {c )-}
      - {c )-}
      - else {c -(}
        `vv' _label `macval(0)'
        {c )-}
      {hline 80} end label {hline}
    - qui drop _perfmeasnum
    - if `methodstringindi'==1 {c -(}
    = if 0==1 {c -(}
      capture quietly tostring `method', replace
      {c )-}
    - qui append using `estimatesdata'
    = qui append using C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp
      {hline 77} begin append {hline}
      - version 11
      - if (_caller() < 11) {c -(}
        local version : di "version " string(_caller()) ":"
        `version' _append `0'
        exit
        {c )-}
      - syntax [anything(everything)] [, GENerate(name) * ]
      - gettoken using filenames : anything
      - if (`"`using'"' != "using") {c -(}
      = if (`"using"' != "using") {c -(}
        di as err "using required"
        exit 100
        {c )-}
      - if (`"`filenames'"' == "") {c -(}
      = if (`" C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp"' == "") {c -(}
        di as err "invalid file specification"
        exit 198
        {c )-}
      - foreach filename of local filenames {c -(}
      - capture quietly describe using `"`filename'"'
      = capture quietly describe using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp"'
      - if (_rc) {c -(}
        di as err `"file `filename' not found"'
        exit 601
        {c )-}
      - {c )-}
      - if ("`generate'" != "") {c -(}
      = if ("" != "") {c -(}
        confirm new var `generate'
        local filenum 0
        gen byte `generate' = `filenum'
        local ++filenum
        local filenumpos = _N + 1
        {c )-}
      - foreach filename of local filenames {c -(}
      - capture noisily _append using `"`filename'"', `options'
      = capture noisily _append using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp"', 
      - if _rc {c -(}
        if ("`generate'" != "") {c -(}
        capture quietly drop if `generate' > 0
        capture quietly drop `generate'
        {c )-}
        exit _rc
        {c )-}
      - if ("`generate'" != "") {c -(}
      = if ("" != "") {c -(}
        quietly replace `generate' = `filenum' in `filenumpos'/L
        local ++filenum
        local filenumpos = _N + 1
        {c )-}
      - {c )-}
      {hline 79} end append {hline}
    - qui replace indi = `rep' if `rep'>0 & `rep'!=.
    = qui replace indi = rep if rep>0 & rep!=.
    - qui drop `rep'
    = qui drop rep
    - qui rename indi `rep'
    = qui rename indi rep
      =struct rename_peldf {c -(}
      =        string scalar        element
      =        real scalar  elementtype
      =        real scalar            arg
      =        real scalar            match
      =struct rename_patterndf {c -(}
      =        real scalar  patterntype
      =        string scalar            original
      =        struct rename_peldf rowvector          ellist
      =        real rowvector            n_of
      =        string rowvector            varnames
      =        string matrix            pieces
      =struct rename_optiondf {c -(}
      =        real scalar       isrecase
      =        real scalar       isrecase_upper, isrecase_lower, isrecase_proper
      =        real scalar       isdryrun
      =        real scalar       isrenumber, isaddnumber
      =        real scalar            from
      =        real scalar       issort
      =        real scalar       isdebug
      =        real scalar       istest
      =        real scalar       isr
      =void rename_optiondf_init(struct rename_optiondf scalar option)
      =        option.isrecase = option.isdryrun = 0
      =                                option.isrecase_proper = 0
      =        option.isrenumber = option.isaddnumber = 0
      =        option.issort     = 0
      =        option.isdebug    = 0
      =        option.istest     = 0
      =        option.isr        = 0
      =struct rename_renamedf {c -(}
      =        struct rename_patterndf rowvector      oldplist
      =        struct rename_patterndf rowvector      newplist
      =        struct rename_optiondf scalar       option
      =void rename_cmd(string scalar thirdarg)
      =        string scalar    input
      =real scalar can_do_fast(string scalar input)
      =        string rowvector    token
      =        real scalar    rc
      =        if (length(token)!=2) return(0)
      =        if (!st_isname(token[1])) return(0)
      =        if (!st_isname(token[2])) return(0)
      =        if (token[1] == token[2]) return(0)
      =        return(1)
      =void rename_cmd_u(string scalar input)
      =        struct rename_renamedf scalar       ren
      =                dump_pattern(ren.oldplist, "old after parsing", 0)
      =                dump_pattern(ren.newplist, "new after parsing", 0)
      =void xeq_old_to_new(struct rename_renamedf scalar ren)
      =                dump_pattern(ren.oldplist, "old after linkage", 0)
      =                dump_pattern(ren.newplist, "new after linkage", 0)
      =                dump_pattern(ren.oldplist, "old final", 1)
      =                dump_pattern(ren.newplist, "new final", 1)
      =void xeq_recase(struct rename_renamedf scalar ren)
      =        fillin_old_varnames(ren.oldplist, ren.newplist, 0)
      =                dump_pattern(ren.oldplist, "old final", 1)
      =                dump_pattern(ren.newplist, "new final", 1)
      =void parse_cmd(struct rename_renamedf scalar ren, string scalar input)
      =        real scalar            c
      =        string scalar            lhs, ops
      =        string scalar            oldnames, newnames
      =        parse_cmd_pat_els(ren.oldplist, oldnames, 0)
      =                parse_cmd_pat_els(ren.newplist, newnames, 1)
      =real scalar parse_cmd_commaloc(string scalar s)
      =        real scalar    i, L
      =        real scalar    nestlev
      =        string scalar    c
      =void getarg(string scalar input, string scalar arg, string scalar rest)
      =        real scalar    L, npar, i
      =        string scalar    c
      =void parse_cmd_options(struct rename_optiondf scalar option, string scalar ops)
      =        string scalar            token
      =        transmorphic      t
      =        rename_optiondf_init(option)
      =void confirm_options_consistent(struct rename_optiondf scalar option)
      =        string rowvector    list
      =void parse_cmd_options_u(struct rename_optiondf scalar option, string scalar token, transmorphic t)
      =real scalar parse_cmd_options_u_std(struct rename_optiondf scalar option, string scalar source)
      =        real scalar    l
      =                option.isdebug = 1
      =                option.isdryrun = 1
      =                option.isrecase = option.isrecase_lower = 1
      =                option.isrecase = option.isrecase_proper= 1
      =                option.isr = 1
      =                option.issort = 1
      =                option.istest = 1
      =                option.isrecase = option.isrecase_upper = 1
      =        else    return(0)
      =        return(1)
      =real scalar parse_cmd_options_u_number(struct rename_optiondf scalar option, string scalar source,
      =                                                                transmorphic t)
      =        string scalar            token
      =        real scalar            from
      =        real scalar            l
      =        string scalar            op
      =        if (option.isrenumber | option.isaddnumber)  return(0)
      =                option.isrenumber = 1
      =                option.isaddnumber = 1
      =                return(1)
      =        return(1)
      =void parse_cmd_pat_els(struct rename_patterndf rowvector pat, string scalar toparse, real pattype)
      =        string scalar            token, curlist
      =        transmorphic      t
      =        real scalar       first
      =        first   = 1
      =                                first    = 1
      =                                first   = 0
      =void parse_cmd_pat_el(struct rename_patterndf rowvector pat, string scalar token, real pattype)
      =        string scalar            mytoken
      =        struct rename_patterndf scalar      mypat
      =        real scalar            i, j
      =        real matrix            found
      =        mypat.n_of        = J(1, (8), 0)
      =        confirm_not_empty(mytoken, pattype==0 ?
      =                if (i=strpos(mytoken, "*")) found = (found \ (i, (3)))
      =                if (i=strpos(mytoken, "?")) found = (found \ (i, (4) ))
      =                if (i=strpos(mytoken, "#")) found = (found \ (i, (5)))
      =                if (i=strpos(mytoken, "(")) found = (found \ (i, (6)))
      =                if (i=strpos(mytoken, "=")) found = (found \ (i, (7)))
      =                if (i=strpos(mytoken, ".")) found = (found \ (i, (8)))
      =                        if (i==(3)) {c -(}
      =                        else if (i==(4)) {c -(}
      =                        else if (i==(5)) {c -(}
      =                        else if (i==(6)) {c -(}
      =                        else if (i==(7)) {c -(}
      =                        else if (i==(8)) {c -(}
      =string scalar set_subscript(struct rename_patterndf scalar pat, string scalar token, real pt)
      =        real scalar    i
      =        string scalar    c
      =        if (pt != 1) {c -(}
      =        if (pt != 1)              return(token)
      =void set_pat_ETstrlist(struct rename_patterndf scalar pat, string scalar token)
      =        struct rename_peldf scalar          el
      =        el.elementtype = (1)
      =        pat.n_of[(1)] = pat.n_of[(1)] + 1
      =string scalar set_pat_str(struct rename_patterndf scalar pat, string scalar token)
      =        struct rename_peldf scalar          el
      =        el.elementtype = (2)
      =string scalar set_pat_ETstar(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar          el
      =        if (pat.patterntype == 0 && length(pat.ellist)) {c -(}
      =                if (pat.ellist[length(pat.ellist)].elementtype == (3)) {c -(}
      =        el.elementtype = (3)
      =string scalar set_pat_ETnum_v(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar          el
      =        if (pat.patterntype == 0 && length(pat.ellist)) {c -(}
      =                if (pat.ellist[length(pat.ellist)].elementtype == (5)) {c -(}
      =        el.elementtype = (5)
      =string scalar set_pat_ETeq(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar  el
      =        if (pat.patterntype == 0) {c -(}
      =        el.elementtype = (7)
      =string scalar set_pat_ETodot(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar  el
      =        if (pat.patterntype == 0) {c -(}
      =        el.elementtype = (8)
      =string scalar set_pat_ETqm(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar  el
      =        el.elementtype = (4)
      =string scalar set_pat_ETnum_f(struct rename_patterndf scalar pat, string scalar token, real scalar loc)
      =        struct rename_peldf scalar          el
      =        real scalar            j
      =        el.elementtype = (6)
      =        if (el.arg > 10) {c -(}
      =void make_patternlist_lengths_equal(struct rename_renamedf scalar ren)
      =void build_recase_newpattern(struct rename_renamedf scalar ren)
      =        real scalar    i
      =        ren.newplist = rename_patterndf(length(ren.oldplist))
      =                ren.newplist[i].n_of        = J(1, (8), 0)
      =void link_patterns(struct rename_renamedf scalar ren)
      =        real scalar    i, jn
      =real scalar check_and_fix_ETnum(struct rename_patterndf scalar newp, struct rename_optiondf scalar option)
      =        real scalar            n, j, jn
      =        real scalar  tt
      =                if (tt==(5) | tt==(6)) {c -(}
      =                                (tt==(5) ? (9) : (10))
      =struct rename_linklocdf {c -(}
      =        real scalar    j_old, last_sequential_j_old
      =        real scalar    j_new
      =        real scalar    jn
      =        real rowvector    mapsub
      =void rename_linklocdf_init(struct rename_linklocdf scalar ll, real scalar jn)
      =void rename_linklocdf_next(struct rename_linklocdf scalar ll, struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp)
      =        real scalar subscr
      =real scalar map_subscript(real scalar subscr, real rowvector mapsub, struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp)
      =void link_patterns_u(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar jn)
      =        struct rename_linklocdf scalar      ll
      =        rename_linklocdf_init(ll, jn)
      =        rename_linklocdf_next(ll, oldp, newp)
      =                rename_linklocdf_next(ll, oldp, newp)
      =real rowvector pelidx_of_wcidx(struct rename_patterndf scalar oldp)
      =        real rowvector            toret
      =        real scalar            i
      =        real scalar  tt
      =                if (tt!=(1) & tt!=(2)) toret = (toret, i)
      =void confirm_wildcards_link(struct rename_patterndf scalar oldp, real scalar j_old,
      =                            struct rename_patterndf scalar newp, real scalar j_new)
      =        real scalar  tt_old, tt_new
      =        if (tt_new == (3)) return
      =        if (tt_new == (8))  return
      =        if (tt_new == (4)) {c -(}
      =                if (tt_old == (4)) return
      =        if (tt_new==(5) | tt_new==(6)) {c -(}
      =                if (tt_old==(5) | tt_old==(6)) return
      =string scalar printable_wildcard(struct rename_peldf scalar el)
      =        real scalar  tt
      =        if (tt == (3))  return("*")
      =        if (tt == (4))    return("?")
      =        if (tt == (8))  return(".")
      =        if (tt == (5)) return("#")
      =        if (tt == (6)) return("(" + el.arg*"*" + ")")
      =real scalar count_wildcards(struct rename_patterndf scalar pat)
      =        return(pat.n_of[(3)]  +
      =               pat.n_of[(4)]    +
      =               pat.n_of[(5)] +
      =               pat.n_of[(6)] +
      =               pat.n_of[(8)])
      =real scalar is_wildcard(real scalar tt)
      =        return( tt == (3)  |
      =                tt == (4)    |
      =                tt == (5) |
      =                tt == (6) |
      =                tt == (9) |
      =                tt == (10) |
      =                tt == (8)  )
      =real scalar find_next_wildcard(struct rename_peldf rowvector d, real scalar j0)
      =        real scalar    j
      =void fillin_old_varnames(struct rename_patterndf rowvector oldplist, struct rename_patterndf rowvector newplist,
      =                                                        real scalar issort)
      =        real scalar    i
      =        string scalar    tmpname
      =void fillin_old_varnames_u(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp,
      =                                        real scalar issort, string scalar tmpname)
      =        string rowvector            varnames, piece
      =        real scalar            i, n, nvars, nels
      =        string matrix            pieces
      =        real scalar  tt
      =        real scalar       filter_varlist, fillin_pieces
      =        filter_varlist = (oldp.n_of[(5)] + oldp.n_of[(6)] != 0)
      =        fillin_pieces  = (newp.n_of[(5)] + newp.n_of[(6)] +
      =                          newp.n_of[(3)]  + newp.n_of[(4)]    != 0)
      =        if (issort) fillin_pieces = 1
      =                        if (tt==(3) | tt==(4)) {c -(}
      =string scalar varlistpattern(struct rename_peldf rowvector ellist)
      =        real scalar    j
      =        string scalar    result
      =        if (ellist[1].elementtype == (1)) return(ellist[1].element)
      =string scalar varlist_el(struct rename_peldf scalar el)
      =        if (el.elementtype == (2))    return(el.element)
      =        if (el.elementtype == (3))   return("*")
      =        if (el.elementtype == (4))     return("?")
      =        if (el.elementtype == (5))  return("?*")
      =        if (el.elementtype == (6))  return(el.arg*"?")
      =struct rename_matchdf {c -(}
      =        real scalar    j0, j1
      =        real scalar    i0, i1
      =        string scalar    name
      =        string rowvector    pieces
      =real scalar matchvarname(string rowvector pieces, struct rename_peldf rowvector ellist, string scalar name)
      =        struct rename_matchdf scalar        m
      =                if (ellist[1].elementtype==(1)) {c -(}
      =                        return(1)
      =        if (!match_step(m, ellist)) return(0)
      =        return(1)
      =void match_setup(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, string scalar name)
      =real scalar match_step(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        real scalar            lefttomatch
      =        real scalar      mr
      =        real scalar     r
      =                if ((r=match_query_done(m))!=(-1)) return(r)
      =                if (match_simplification(m, ellist)==-1) return(0)
      =                if ((r=match_query_done(m))!=(-1)) return(r)
      =                        if (match_step_1(m, ellist)==-1) return(0)
      =                        if ((r=match_query_done(m))!=(-1)) return(r)
      =                        return(0)
      =                        if (mr==-1 | mr==0) return(0)
      =                        if (mr==-1 | mr==0) return(0)
      =real scalar match_step_1(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        if (ellist[m.j0].elementtype==(5)) {c -(}
      =                return(match_ETnum_v(m, ellist, 1))
      =        if (ellist[m.j0].elementtype==(3)) {c -(}
      =        return(-1)
      =real scalar match_step_2(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        if (ellist[m.j0].elementtype==(5)) {c -(}
      =                return(match_ETnum_v(m, ellist, 1))
      =        if (ellist[m.j0+1].elementtype==(5)) {c -(}
      =                return(match_ETnum_v(m, ellist, 0))
      =        return(-1)
      =real scalar match_step_3p(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        real scalar    j
      =        if (ellist[m.j0].elementtype==(3)) {c -(}
      =                if (ellist[j].elementtype==(3)) {c -(}
      =                if (ellist[j].elementtype==(5)) {c -(}
      =                        return(match_ETnum_v(m, ellist, 0))
      =        if (ellist[m.j0].elementtype==(5)) {c -(}
      =                return(match_ETnum_v(m, ellist, 1))
      =        return(-1)
      =real scalar match_query_done(struct rename_matchdf scalar m)
      =                if (m.i0 < m.i1) return(0)
      =                return(1)
      =        return((-1))
      =real scalar match_simplification(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        real scalar      mr
      =        while ((m.i1 >m.i0 & m.j1> m.j0)) {c -(}
      =                mr = match_fixed(m, ellist, 1)
      =                if (mr==-1) return(-1)
      =                if (mr==0)   break
      =        while ((m.i1 >m.i0 & m.j1> m.j0)) {c -(}
      =                mr = match_fixed(m, ellist, 0)
      =                if (mr==-1) return(-1)
      =                if (mr==0)   break
      =real scalar match_fixed(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, real scalar s)
      =        real scalar    j
      =        j = (s==1 ? m.j0 : m.j1-1)
      =        if (ellist[j].elementtype==(2))   return(match_ETstr(m, ellist, s))
      =        if (ellist[j].elementtype==(6)) return(match_ETnum_f(m, ellist, s))
      =        if (ellist[j].elementtype==(4))    return(match_ETqm(m, ellist, s))
      =        return(0)
      =real scalar match_ETstr(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, real scalar s)
      =        real scalar    j, len
      =        j = (s==1 ? m.j0 : m.j1-1)
      =        if (ellist[j].elementtype != (2)) return(0)
      =        if ((s==1 ?  usubstr(m.name, m.i0, len) :
      =                return(-1)
      =        return(1)
      =real scalar match_ETnum_f(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, real scalar s)
      =        real scalar    j, i, len
      =        string scalar    str, c
      =        j = (s==1 ? m.j0 : m.j1-1)
      =        if (ellist[j].elementtype != (6)) return(0)
      =        str = (s==1 ?  usubstr(m.name, m.i0, len) : usubstr(m.name, -len, .))
      =        if (ustrlen(str)!=len) return(-1)
      =                if (c<"0" | c>"9") return(-1)
      =        return(1)
      =real scalar match_ETqm(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, real scalar s)
      =        if (ellist[s==1 ? m.j0 : m.j1-1].elementtype != (4)) {c -(}
      =                return(0)
      =        if (m.i0==m.i1) return(-1)
      =        return(1)
      =real scalar match_ETnum_v(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, real scalar s)
      =        real scalar            j, i0, i1, len
      =        string scalar            c
      =        string scalar            c1
      =        struct rename_matchdf scalar        hold
      =        j = (s==1 ? m.j0 : m.j1-1)
      =        if (ellist[j].elementtype != (5)) return(0)
      =        if (s==1) {c -(}
      =                if (match_step(m, ellist)==1) return(1)
      =        return(-1)
      =real scalar match_ETstar_left(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist)
      =        real scalar            len, newlen
      =        struct rename_matchdf scalar        hold
      =        real scalar       next_is_ETnum_v
      =        if (ellist[m.j0].elementtype != (3)) return(0)
      =                post_match_piece(m, 1, len)
      =                return(1)
      =        next_is_ETnum_v = (ellist[m.j0+1].elementtype==(5))
      =                post_match_piece(m, 1, len)
      =                if (match_step(m, ellist)==1) {c -(}
      =                                        post_match_piece(m, 1, newlen)
      =                        return(1)
      =        return(-1)
      =real scalar mstargiveback(string scalar s)
      =        real scalar    l
      =        string scalar    c
      =        string scalar    c1
      =void post_match_piece(struct rename_matchdf scalar m, real scalar s, real scalar len)
      =        if (s==1) {c -(}
      =void sort_old_varnames(struct rename_renamedf scalar ren)
      =        real scalar i
      =void sort_appropriate_field(struct rename_patterndf rowvector oldplist, struct rename_patterndf rowvector newplist)
      =        real scalar            i
      =        real scalar            j
      =real scalar j_of_renumber(struct rename_patterndf scalar plist)
      =        real scalar            j
      =        real scalar  tt
      =                if (tt==(9) | tt==(10)) return(j)
      =real scalar j_of_number(struct rename_patterndf scalar plist)
      =        real scalar            j, jtoret
      =        real scalar  tt
      =                if (tt==(3) | tt==(4) | tt==(5) | tt==(6)) {c -(}
      =void sort_on_field(struct rename_patterndf scalar plist, real scalar j)
      =        real scalar  tt
      =        real colvector            o
      =        string colvector            vc
      =                if (tt==(5) | tt==(6)) {c -(}
      =void fillin_new_varnames_recase(struct rename_renamedf scalar ren)
      =        real scalar    i
      =void fillin_new_varnames(struct rename_patterndf rowvector oldplist, struct rename_patterndf rowvector newplist, real scalar from)
      =        real scalar    i
      =void fillin_new_varnames_u(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar from)
      =        real scalar    i
      =        if (newp.ellist[1].elementtype==(1)) {c -(}
      =void fillin_new_varnames_u_u(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar from, real scalar i)
      =        real scalar            j
      =        string scalar            name
      =        real scalar  tt
      =                if (tt==(2)) {c -(}
      =                else if (tt==(3)) {c -(}
      =                else if (tt==(4)) {c -(}
      =                else if (tt==(5)) {c -(}
      =                else if (tt==(6)) {c -(}
      =                else if (tt==(7)) {c -(}
      =                else if (tt==(9)) {c -(}
      =                else if (tt==(10)) {c -(}
      =                else if (tt != (8)) {c -(}
      =string scalar fmt_ETnum_f(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar i, real scalar j)
      =        real scalar    n, len
      =        string scalar    res, orig
      =string scalar fmt_ETnum_f_r(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar j, real scalar from)
      =        real scalar    n, len
      =        string scalar res
      =string matrix build_toren(struct rename_patterndf rowvector oldplist, struct rename_patterndf rowvector newplist)
      =        string matrix    toren
      =        real scalar    i, N, n, k, k2
      =        real colvector    toselect
      =        string rowvector    lastrow, newrow
      =        real scalar hasomissions
      =                                hasomissions = 1
      =void perform_renames(string matrix toren, struct rename_optiondf scalar option)
      =        real scalar       use_intermediary
      =        string matrix            toren_nonulls
      =                        perform_dryrun(toren, toren_nonulls, 0)
      =void confirm_newnames_new(string matrix toren)
      =        real scalar    i
      =        real rowvector    varnum
      =        string rowvector    tocheck, badvar
      =void perform_set_r(string matrix toren)
      =void perform_test(string matrix toren, real scalar use_intermediary)
      =        real scalar    i
      =void perform_rename_straight(string matrix toren)
      =        real scalar    i
      =        real scalar    breakstatus
      =void perform_rename_intermediary(string matrix toren)
      =        real scalar    i
      =        real scalar    breakstatus
      =        string rowvector    tmpname
      =void perform_dryrun(string matrix toren, string matrix toren_nonulls, real scalar use_intermediary)
      =        real scalar    i
      =        real scalar    maxlen
      =        string scalar    sfmt, sfmtit
      =void dryrun_note1(string matrix toren, string matrix toren_nonulls)
      =        real scalar    i
      =        real scalar    nulls
      =void dryrun_note2(string matrix toren, real scalar use_intermediary)
      =        string colvector    dupnames, newname, oldname
      =real scalar names_not_jointly_unique(string matrix toren)
      =        real scalar    n0, n1
      =        string colvector    fulllist
      =void confirm_names_unique(string matrix toren)
      =void confirm_names_unique_1(string matrix toren, real scalar j)
      =        string colvector    names, corresponding
      =        string scalar    s
      =        real scalar    n
      =string colvector corresponding_names(string matrix toren, string scalar name, real scalar js, real scalar jd)
      =        real scalar    i
      =        string colvector    dups
      =void confirm_new_varnames_valid(string matrix toren)
      =        real scalar    i, n
      =        real colvector    bad
      =void confirm_not_empty(string scalar str, string scalar expected)
      =void errprint_bf_list(string vector list , |real scalar USER_MAXEL)
      =        real scalar            MAXEL
      =        real scalar            i, top
      =        real scalar       chopped
      =                        chopped = 1
      =                        chopped = 0
      =void errprint_bf_string(string scalar user_s, |real scalar USER_MAXLEN)
      =        real scalar            MAXLEN
      =        real scalar            len_last, target_last
      =        real scalar            len_remaining
      =        real scalar            i
      =        string rowvector            els
      =        string scalar            s, first, last
      =        real scalar       cont
      =        cont = 1
      =                else            cont   = 0
      =        string scalar    indent
      =void error_preceding_dash( pattype)
      =                        (pattype==0 ? "oldname" : "newname" ) )
      =void error_following_dash( pattype, string scalar what)
      =                        (pattype==0 ? "oldname" : "newname" ) )
      =void option_not_allowed(string scalar option)
      =void option_number_misspecified(string scalar op)
      =void error_ETnum_f_too_long(real scalar n_digits)
      =        errprintf("the {c -(}bf:(###...#){c )-} pattern is %g.\n", 10)
      =void error_patternlengths_unequal(struct rename_patterndf rowvector oldplist, struct rename_patterndf rowvector newplist)
      =        string scalar    s_old, s_new
      =void error_too_many_renumbers(string scalar op, struct rename_patterndf scalar newp)
      =void error_strlist_length(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp)
      =        real scalar    n_old, n_new
      =        string scalar    s_old, s_new
      =void error_missing_ETnum(string scalar opname, struct rename_patterndf scalar newp)
      =void error_too_many_wildcards(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp,
      =                                                        real scalar isaddnumber)
      =void error_wildcardmatch_qm(struct rename_patterndf scalar oldp, real scalar j_old,
      =                            struct rename_patterndf scalar newp, real scalar j_new)
      =void error_wildcardmatch_hash(struct rename_patterndf scalar oldp, real scalar j_old,
      =                              struct rename_patterndf scalar newp, real scalar j_new)
      =void error_no_right_bracket(string scalar original)
      =void error_inside_brackets(string scalar original)
      =void error_newnumber_subscripted(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp)
      =void error_subscript_invalid(struct rename_patterndf scalar oldp, struct rename_patterndf scalar newp, real scalar subscr)
      =void error_subscripts_in_old(struct rename_patterndf scalar pat)
      =void dump_pattern(struct rename_patterndf rowvector pat, string scalar typ, real scalar incl_names)
      =        real scalar    i, j, n
      =        real scalar    nv, k, m
      =                        pat[i].n_of[(2)],
      =                        pat[i].n_of[(3)],
      =                        pat[i].n_of[(4)],
      =                        pat[i].n_of[(5)],
      =                        pat[i].n_of[(6)],
      =                        pat[i].n_of[(7)],
      =                        pat[i].n_of[(8)])
      =string scalar dump_xlate_tt(real scalar t)
      =        if (t==(1))     return("ETstrlist")
      =        if (t==(2))         return("ETstr")
      =        if (t==(3))        return("ETstar")
      =        if (t==(4))          return("ETqm")
      =        if (t==(5))       return("ETnum_v")
      =        if (t==(6))       return("ETnum_f")
      =        if (t==(7))          return("ETeq")
      =        if (t==(8))        return("ETodot")
      =        if (t==(9))     return("ETnum_v_r")
      =        if (t==(10))     return("ETnum_f_r")
      =void dump_options(struct rename_renamedf scalar ren)
      =void match_debug(struct rename_matchdf scalar m, struct rename_peldf rowvector ellist, string scalar msg)
      =string rowvector list_subtract(string rowvector a, string rowvector b)
      =        string rowvector result
      =string rowvector expand_varlist(string scalar pattern, string scalar tmpname)
      =        real scalar    rc
      =        string rowvector    result
      =string scalar ordinal_suffix(real scalar i)
      =        real scalar    lastdigit
      {hline 77} begin rename {hline}
      - version 12
      - mata: rename_cmd("`3'")
      = mata: rename_cmd("")
      {hline 79} end rename {hline}
    - qui gen byte _dataset = `rep'>0 if `rep'!=.
    = qui gen byte _dataset = rep>0 if rep!=.
    - label define estimatesperformancelab 0 "Performance" 1 "Estimates"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define estimatesperformancelab 0 "Performance" 1 "Estimates"
      - {c )-}
      {hline 80} end label {hline}
    - label values _dataset estimatesperformancelab
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("values", "val") > 0 ) {c -(}
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {c -(}
      = if "" != "" {c -(}
        local fix ", nofix"
        {c )-}
      - gettoken var rest : anything
      - while `"`rest'"' != "" {c -(}
      = while `" estimatesperformancelab"' != "" {c -(}
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "estimatesperformancelab"
      - {c )-}
      - while `"`rest'"' != "" {c -(}
      = while `""' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
      - local vlist : list anything - lab
      - if "`lab'" == "." {c -(}
      = if "estimatesperformancelab" == "." {c -(}
        local lab ""
        {c )-}
      - foreach var of varlist `vlist' {c -(}
      = foreach var of varlist _dataset {c -(}
      - `vv' _label `val' `var' `lab' `fix'
      = version 15, missing: _label values _dataset estimatesperformancelab 
      - {c )-}
      - {c )-}
      - else {c -(}
        `vv' _label `macval(0)'
        {c )-}
      {hline 80} end label {hline}
    - if "`perfonly'"!="" qui drop if `rep'>0 & `rep'!=.
    = if ""!="" qui drop if rep>0 & rep!=.
    - qui order `allnames'
    = qui order rep dgm method true est se __000000
      {hline 78} begin order {hline}
      - version 11
      - if (_caller()<11) {c -(}
        _order `macval(0)'
        exit
        {c )-}
      - syntax varlist[, Before(varname) After(varname) first last SEQuential ALPHAbetic]
      - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'" == "" & "`alphabetic'" == "" & "`sequential'" == "") {c -(}
      = if (`""' == "" & `""' == "" & "" == "" & "" == "" & "" == "" & "" == "") {c -(}
      - _order `macval(0)'
      = _order rep dgm method true est se __000000
      - exit
      {hline 80} end order {hline}
    - if `methodcreated'!=1 {c -(}
    = if 0!=1 {c -(}
    - cap confirm numeric variable `method'
    = cap confirm numeric variable method
    - if _rc local methodstringindi = 1
    - else local methodstringindi = 0
    - local methodlabels = 0
    - if `nformat'==1 | (`nformat'==3 & `nmethod'==1) {c -(}
    = if 1==1 | (1==3 & 1==1) {c -(}
    - if `nmethod'!=0 {c -(}
    = if 1!=0 {c -(}
    - qui tab `method',m
    = qui tab method,m
    - local nmethodlabels = `r(r)'
    = local nmethodlabels = 2
    - cap qui labelsof `method'
    = cap qui labelsof method
      {hline 75} begin labelsof {hline}
      - version 8
      - syntax name [, Label ]
      - if "`label'"=="" {c -(}
      = if ""=="" {c -(}
      - local labdef: value label `namelist'
      = local labdef: value label method
      - if `"`labdef'"'=="" {c -(}
      = if `""'=="" {c -(}
      - exit
      {hline 77} end labelsof {hline}
    - cap qui ret list
    - if `"`r(labels)'"'!="" {c -(}
    = if `""'!="" {c -(}
      local 0 = `"`r(labels)'"'
      forvalues i = 1/`nmethodlabels' {c -(}
      gettoken `method'label`i' 0 : 0, parse(": ")
      local methlist `methlist' ``method'label`i''
      local methodlabels = 1
      {c )-}
      {c )-}
    - else {c -(}
    - qui levels `method', local(levels)
    = qui levels method, local(levels)
      {hline 77} begin levels {hline}
      - version 8
      - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
      - if "`separate'" == "" local sep " "
      = if "" == "" local sep " "
      - else local sep "`separate'"
      = else local sep ""
      - if "`missing'" != "" local novarlist "novarlist"
      = if "" != "" local novarlist "novarlist"
      - marksample touse, strok `novarlist'
      = marksample touse, strok 
      - capture confirm numeric variable `varlist'
      = capture confirm numeric variable method
      - local isnum = _rc != 7
      - if `isnum' {c -(}
      = if 1 {c -(}
      - capture assert `varlist' == int(`varlist') if `touse'
      = capture assert method == int(method) if __000002
      - if _rc {c -(}
        di as err "`varlist' contains non-integer values"
        exit 459
        {c )-}
      - tempname Vals
      - qui tab `varlist' if `touse', `missing' matrow(`Vals')
      = qui tab method if __000002,  matrow(__000003)
      - local nvals = r(r)
      - forval i = 1 / `nvals' {c -(}
      = forval i = 1 / 2 {c -(}
      - local val = `Vals'[`i',1]
      = local val = __000003[1,1]
      - if `i' < `nvals' local vals "`vals'`val'`sep'"
      = if 1 < 2 local vals "1 "
      - else local vals "`vals'`val'"
      = else local vals "1 1"
      - {c )-}
      - local val = `Vals'[`i',1]
      = local val = __000003[2,1]
      - if `i' < `nvals' local vals "`vals'`val'`sep'"
      = if 2 < 2 local vals "1 2 "
      - else local vals "`vals'`val'"
      = else local vals "1 2"
      - {c )-}
      - {c )-}
      - else {c -(}
        tempvar select counter
        bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
        generate `counter' = sum(`select') * (`select' == 1)
        sort `counter'
        qui count if `counter' == 0
        local j = 1 + r(N)
        local nvals = _N
        if "`clean'" != "" {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals "`vals'`=`varlist'[`i']'`sep'"
        {c )-}
        else local vals "`vals'`=`varlist'[`i']'"
        {c )-}
        {c )-}
        else {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
        {c )-}
        else local vals `"`vals'`"`=`varlist'[`i']'"'"'
        {c )-}
        {c )-}
        {c )-}
      - di as txt `"`vals'"'
      = di as txt `"1 2"'
      - return local levels `"`vals'"'
      = return local levels `"1 2"'
      - if "`local'" != "" {c -(}
      = if "levels" != "" {c -(}
      - c_local `local' `"`vals'"'
      = c_local levels `"1 2"'
      - {c )-}
      {hline 79} end levels {hline}
    - tokenize `"`levels'"'
    = tokenize `"1 2"'
    - if `methodstringindi' == 0 {c -(}
    = if 0 == 0 {c -(}
    - forvalues i = 1/`nmethodlabels' {c -(}
    = forvalues i = 1/2 {c -(}
    - local `method'label`i' `i'
    = local methodlabel1 1
    - local methlist `methlist' ``method'label`i''
    = local methlist  1
    - {c )-}
    - local `method'label`i' `i'
    = local methodlabel2 2
    - local methlist `methlist' ``method'label`i''
    = local methlist 1 2
    - {c )-}
    - {c )-}
    - else forvalues i = 1/`nmethodlabels' {c -(}
    = else forvalues i = 1/2 {c -(}
      local `method'label`i' ``i''
      local methlist `methlist' ``method'label`i''
      {c )-}
    - {c )-}
    - {c )-}
    - {c )-}
    - if `nformat'==1 {c -(}
    = if 1==1 {c -(}
    - local valmethod = "`methlist'"
    = local valmethod = "1 2"
    - {c )-}
    - else if `nformat'==2 {c -(}
    = else if 1==2 {c -(}
      local valmethod = "`method'"
      {c )-}
    - else if `nformat'==3 {c -(}
    = else if 1==3 {c -(}
      if `nmethod'==1 {c -(}
      local valmethod = "`methlist'"
      {c )-}
      else if `nmethod'>=1 & `nmethod'!=. {c -(}
      local valmethod = "`methlist'"
      {c )-}
      {c )-}
    - {c )-}
    - local simananalyserun = 1
    - local allthings `allthings' simananalyserun ifanalyse estchange sechange
    = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 simananalyserun ifanalyse estchange sechange
    - foreach thing in `allthings' {c -(}
    = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 simananalyserun ifanalyse estchange sechange {c -(}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 simananalyserun ifanalyse estchange sechange
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_rep] rep
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_dgm] dgm
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_target] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_method] method
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_estimate] est
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_se] se
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_df] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ci] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_p] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_true] true
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_order] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_lci] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_uci] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ifsetup] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_insetup] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_format] format 1: long-long
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_targetformat] long
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_methodformat] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_nformat] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ntarget] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ndgm] 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_nmethod] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_numtarget] N/A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_valtarget] N/A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_nummethod] 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_valmethod] 1 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ntrue] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ntruevalue] single
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_dgmvar] dgm
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_numdgm] 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_dgmcreated] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_targetlabels] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_methodcreated] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_methodlabels] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_methodvalues] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ntruestub] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_descriptiontype] variable
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_cidescriptiontype] variables
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_truedescriptiontype] variable
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_estvars] est
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_sevars] se
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_dfvars] N/A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_civars] N/A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_pvars] N/A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_truevars] true
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_simansetuprun] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_m1] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_simananalyserun] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ifanalyse] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_estchange] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_sechange] 0
    - {c )-}
    - di as text "siman analyse has run successfully"
siman analyse has run successfully
    - if "`table'"!="notable" {c -(}
    = if ""!="notable" {c -(}
    - cap noi siman_table
      {hline 72} begin siman_table {hline}
      - version 15
      - syntax [anything] [if], [Column(varlist) debug]
      - foreach thing in `_dta[siman_allthings]' {c -(}
      = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 simananalyserun ifanalyse estchange sechange {c -(}
      - local `thing' : char _dta[siman_`thing']
      = local allthings : char _dta[siman_allthings]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local rep : char _dta[siman_rep]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgm : char _dta[siman_dgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local target : char _dta[siman_target]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local method : char _dta[siman_method]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estimate : char _dta[siman_estimate]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local se : char _dta[siman_se]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local df : char _dta[siman_df]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ci : char _dta[siman_ci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local p : char _dta[siman_p]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local true : char _dta[siman_true]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local order : char _dta[siman_order]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local lci : char _dta[siman_lci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local uci : char _dta[siman_uci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifsetup : char _dta[siman_ifsetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local insetup : char _dta[siman_insetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local format : char _dta[siman_format]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetformat : char _dta[siman_targetformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodformat : char _dta[siman_methodformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nformat : char _dta[siman_nformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntarget : char _dta[siman_ntarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ndgm : char _dta[siman_ndgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nmethod : char _dta[siman_nmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numtarget : char _dta[siman_numtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valtarget : char _dta[siman_valtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nummethod : char _dta[siman_nummethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valmethod : char _dta[siman_valmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntrue : char _dta[siman_ntrue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruevalue : char _dta[siman_ntruevalue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmvar : char _dta[siman_dgmvar]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numdgm : char _dta[siman_numdgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmcreated : char _dta[siman_dgmcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetlabels : char _dta[siman_targetlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodcreated : char _dta[siman_methodcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodlabels : char _dta[siman_methodlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodvalues : char _dta[siman_methodvalues]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruestub : char _dta[siman_ntruestub]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local descriptiontype : char _dta[siman_descriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local cidescriptiontype : char _dta[siman_cidescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truedescriptiontype : char _dta[siman_truedescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estvars : char _dta[siman_estvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sevars : char _dta[siman_sevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dfvars : char _dta[siman_dfvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local civars : char _dta[siman_civars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local pvars : char _dta[siman_pvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truevars : char _dta[siman_truevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simansetuprun : char _dta[siman_simansetuprun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m1 : char _dta[siman_m1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simananalyserun : char _dta[siman_simananalyserun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifanalyse : char _dta[siman_ifanalyse]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estchange : char _dta[siman_estchange]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sechange : char _dta[siman_sechange]
      - {c )-}
      - if "`simananalyserun'"=="0" | "`simananalyserun'"=="" {c -(}
      = if "1"=="0" | "1"=="" {c -(}
        di as error "siman analyse has not been run.  Please use siman_analyse first before siman_table."
        exit 498
        {c )-}
      - preserve
      - if `nformat'!=1 {c -(}
      = if 1!=1 {c -(}
        qui siman_reshape, longlong
        foreach thing in `_dta[siman_allthings]' {c -(}
        local `thing' : char _dta[siman_`thing']
        {c )-}
        {c )-}
      - foreach val in `estvars' `sevars' {c -(}
      = foreach val in est se {c -(}
      - if strpos("`val'","_")!=0 {c -(}
      = if strpos("est","_")!=0 {c -(}
        if substr("`val'",strlen("`val'"),1)=="_" {c -(}
        local l = substr("`val'", 1,strlen("`val'","_") - 1)
        local `l'vars = "`l'"
        {c )-}
        {c )-}
      - {c )-}
      - if strpos("`val'","_")!=0 {c -(}
      = if strpos("se","_")!=0 {c -(}
        if substr("`val'",strlen("`val'"),1)=="_" {c -(}
        local l = substr("`val'", 1,strlen("`val'","_") - 1)
        local `l'vars = "`l'"
        {c )-}
        {c )-}
      - {c )-}
      - qui drop if `rep'>0
      = qui drop if rep>0
      - tempvar touse
      - marksample touse
      - if `dgmcreated' local dgm
      = if 0 local dgm
      - cap bysort `dgm' `method' `target' : assert `touse'==`touse'[1]
      = cap bysort dgm method  : assert __000002==__000002[1]
      - if _rc {c -(}
        di as error "'if' can only be used for dgm, method and target."
        exit 498
        {c )-}
      - if "`anything'"!="" {c -(}
      = if ""!="" {c -(}
        tempvar keep
        gen `keep' = 0
        foreach thing of local anything {c -(}
        qui count if _perfmeascode == "`thing'"
        if r(N)==0 di as error "Warning: performance measure not found: `thing'"
        qui replace `keep' = 1 if _perfmeascode == "`thing'"
        {c )-}
        qui keep if `keep'
        drop `keep'
        {c )-}
      - local perfvar = "bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power"
      - qui gen _perfmeascodeorder=.
      - local p = 0
      - foreach perf of local perfvar {c -(}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 0 if _perfmeascode == "bsims"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels  0 "bsims"
      - local p = `p' + 1
      = local p = 0 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 1 if _perfmeascode == "sesims"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims"
      - local p = `p' + 1
      = local p = 1 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 2 if _perfmeascode == "bias"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias"
      - local p = `p' + 1
      = local p = 2 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 3 if _perfmeascode == "mean"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean"
      - local p = `p' + 1
      = local p = 3 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 4 if _perfmeascode == "empse"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse"
      - local p = `p' + 1
      = local p = 4 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 5 if _perfmeascode == "relprec"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec"
      - local p = `p' + 1
      = local p = 5 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 6 if _perfmeascode == "mse"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse"
      - local p = `p' + 1
      = local p = 6 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 7 if _perfmeascode == "rmse"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse"
      - local p = `p' + 1
      = local p = 7 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 8 if _perfmeascode == "modelse"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse"
      - local p = `p' + 1
      = local p = 8 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 9 if _perfmeascode == "ciwidth"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth"
      - local p = `p' + 1
      = local p = 9 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 10 if _perfmeascode == "relerror"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth" 10 "relerror"
      - local p = `p' + 1
      = local p = 10 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 11 if _perfmeascode == "cover"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth" 10 "relerror" 11 "cover"
      - local p = `p' + 1
      = local p = 11 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 12 if _perfmeascode == "power"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth" 10 "relerror" 11 "cover" 12 "power"
      - local p = `p' + 1
      = local p = 12 + 1
      - {c )-}
      - label define perfl `perflabels'
      = label define perfl 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth" 10 "relerror" 11 "cover" 12 "power"
      - label values _perfmeascodeorder perfl
      - label variable _perfmeascodeorder "performance measure"
      - if "`sevars'" == "N/A" local sevars
      = if "se" == "N/A" local sevars
      - if `dgmcreated' local dgmvar
      = if 0 local dgmvar
      - foreach onedgmvar in `dgmvar' {c -(}
      = foreach onedgmvar in dgm {c -(}
      - summ `onedgmvar' `if', meanonly
      = summ dgm , meanonly
      - if r(min)<r(max) local newdgmvar `newdgmvar' `onedgmvar'
      = if r(min)<r(max) local newdgmvar  dgm
      - else if !mi("`debug'") di as error "Ignoring non-varying dgmvar: `onedgmvar'"
      = else if !mi("") di as error "Ignoring non-varying dgmvar: dgm"
      - {c )-}
      - local dgmvar `newdgmvar'
      = local dgmvar dgm
      - local myfactors _perfmeascodeorder `dgmvar' `target' `method'
      = local myfactors _perfmeascodeorder dgm  method
      - if !mi("`debug'") di as input "Factors to display: `myfactors'"
      = if !mi("") di as input "Factors to display: _perfmeascodeorder dgm  method"
      - tempvar group
      - foreach thing in dgmvar target method {c -(}
      - local n`thing'vars = wordcount("``thing''")
      = local ndgmvarvars = wordcount("dgm")
      - if !mi("`thing'") {c -(}
      = if !mi("dgmvar") {c -(}
      - egen `group' = group(``thing'')
      = egen __000003 = group(dgm)
      - qui levelsof `group'
      = qui levelsof __000003
      - local n`thing'levels = r(r)
      = local ndgmvarlevels = r(r)
      - {c )-}
      - else n`thing'levels = 1
      = else ndgmvarlevels = 1
      - if !mi("`debug'") di "`n`thing'levels' levels, `thing': `n`thing'vars' variables (``thing'')"
      = if !mi("") di "2 levels, dgmvar: 1 variables (dgm)"
      - drop `group'
      = drop __000003
      - {c )-}
      - local n`thing'vars = wordcount("``thing''")
      = local ntargetvars = wordcount("")
      - if !mi("`thing'") {c -(}
      = if !mi("target") {c -(}
      - egen `group' = group(``thing'')
      = egen __000003 = group()
      - qui levelsof `group'
      = qui levelsof __000003
      - local n`thing'levels = r(r)
      = local ntargetlevels = r(r)
      - {c )-}
      - else n`thing'levels = 1
      = else ntargetlevels = 1
      - if !mi("`debug'") di "`n`thing'levels' levels, `thing': `n`thing'vars' variables (``thing'')"
      = if !mi("") di "1 levels, target: 0 variables ()"
      - drop `group'
      = drop __000003
      - {c )-}
      - local n`thing'vars = wordcount("``thing''")
      = local nmethodvars = wordcount("method")
      - if !mi("`thing'") {c -(}
      = if !mi("method") {c -(}
      - egen `group' = group(``thing'')
      = egen __000003 = group(method)
      - qui levelsof `group'
      = qui levelsof __000003
      - local n`thing'levels = r(r)
      = local nmethodlevels = r(r)
      - {c )-}
      - else n`thing'levels = 1
      = else nmethodlevels = 1
      - if !mi("`debug'") di "`n`thing'levels' levels, `thing': `n`thing'vars' variables (``thing'')"
      = if !mi("") di "2 levels, method: 1 variables (method)"
      - drop `group'
      = drop __000003
      - {c )-}
      - if "`column'"=="" {c -(}
      = if ""=="" {c -(}
      - if `nmethodlevels'>1 local column `method'
      = if 2>1 local column method
      - else if `ntargetlevels'>1 local column `target'
      = else if 1>1 local column 
      - else local column : word 1 of `dgmvar'
      = else local column : word 1 of dgm
      - {c )-}
      - if !strpos("`column'","perfmeas") local row _perfmeascodeorder
      = if !strpos("method","perfmeas") local row _perfmeascodeorder
      - else di as error "siman table doesn't yet know how to format the table when perfmeas is in the columns"
      - local by : list myfactors - column
      - local by : list by - row
      - if wordcount("`by'")>4 {c -(}
      = if wordcount("dgm")>4 {c -(}
        di as error "There are too many factors to display. Consider using an if condition for your dgmvars."
        {c )-}
      - local tablecommand tabdisp `row' `column' `if', by(`by') c(`estvars' `sevars') stubwidth(20)
      = local tablecommand tabdisp _perfmeascodeorder method , by(dgm) c(est se) stubwidth(20)
      - if !mi("`debug'") {c -(}
      = if !mi("") {c -(}
        di "Table column: `column'"
        di "Table row: `row'"
        di "Table by: `by'"
        di "Table command: `tablecommand'"
        {c )-}
      - `tablecommand'
      = tabdisp _perfmeascodeorder method , by(dgm) c(est se) stubwidth(20)

{hline 21}{c TT}{hline 21}
dgm and performance  {c |}        method       
measure              {c |}         1          2
{hline 21}{c +}{hline 21}
1                    {c |}
               bsims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}  {res}.0002289  -.0014641
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                mean {c |}  {res}.0002289  -.0014641
                     {txt}{c |}          {res}           
                     {txt}{c |} 
               empse {c |}  {res}.0780572   .1130985
                     {txt}{c |}          {res}           
                     {txt}{c |} 
             relprec {c |}          {res}  -52.36644
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                 mse {c |}  {res}.0060869   .0127806
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                rmse {c |}  {res}.0780185   .1130514
                     {txt}{c |}          {res}           
                     {txt}{c |} 
             modelse {c |}  {res}.0788192   .1139285
                     {txt}{c |}          {res}           
                     {txt}{c |} 
             ciwidth {c |}  {res}.3083858   .4446949
                     {txt}{c |}          {res}           
                     {txt}{c |} 
            relerror {c |}  {res}.9762075   .7338889
                     {txt}{c |}          {res}           
                     {txt}{c |} 
               cover {c |}      {res}94.9       96.3
                     {txt}{c |}          {res}           
                     {txt}{c |} 
               power {c |}       {res}5.1        3.7
                     {txt}{c |}          {res}           
{txt}{hline 21}{c +}{hline 21}
2                    {c |}
               bsims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}      {res}1000       1000
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.0009174   .0019476
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                mean {c |} {res}-.0009174   .0019476
                     {txt}{c |}          {res}           
                     {txt}{c |} 
               empse {c |}  {res}.0929352   .1280842
                     {txt}{c |}          {res}           
                     {txt}{c |} 
             relprec {c |}          {res}  -47.35358
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                 mse {c |}  {res}.0086291    .016393
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                rmse {c |}  {res}.0928932    .128035
                     {txt}{c |}          {res}           
                     {txt}{c |} 
             modelse {c |}  {res}.0909457   .1317889
                     {txt}{c |}          {res}           
                     {txt}{c |} 
             ciwidth {c |}  {res}.3558723   .5142831
                     {txt}{c |}          {res}           
                     {txt}{c |} 
            relerror {c |} {res}-2.140658    2.89238
                     {txt}{c |}          {res}           
                     {txt}{c |} 
               cover {c |}      {res}94.8       96.4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
               power {c |}       {res}5.2        3.6
                     {txt}{c |}          {res}           
{txt}{hline 21}{c BT}{hline 21}
      - cap assert missing(`sevars')
      = cap assert missing(se)
      - if _rc {c -(}
        di "{c -(}it: NOTE: Where there are 2 entries in the table, {c )-}"
        di "{c -(}it: the first entry is the performance measure and {c )-}"
        di "{c -(}it: the second entry is its Monte Carlo error.{c )-}"
        {c )-}
      - restore
      {hline 74} end siman_table {hline}
    - if _rc {c -(}
      di as text "siman analyse has run successfully, but presenting the results using siman table has failed"
      exit _rc
      {c )-}
    - {c )-}

{com}. 
. siman lollyplot, xtitle("test x-title") ytitle("test y-title") name("lollyplot_test5")
{txt}Performance measures not specified: defaulting to bias empse cover
Drawing graph...
{res}{txt}
{com}.  
.  
. 
. * more than 3 methods for plots, methlist option
. ****************************************************
. clear all
{res}{txt}
{com}. prog drop _all
{txt}
{com}. use data/bvsim_all_out.dta, clear
{txt}
{com}. rename _dnum dnum
{res}{txt}
{com}. drop simno hazard hazcens shape cens pmcar n truebeta truegamma corr mdm
{txt}
{com}. drop if _n>100
{txt}(17,900 observations deleted)

{com}. reshape long beta_ sebeta_ gamma_ segamma_, i(dnum) j(method)
{txt}(note: j = 1 2 3 4 5 6 7 8 9 10)

Data{col 36}wide{col 43}->{col 48}long
{hline 77}
Number of obs.                 {res}     100   {txt}->{res}    1000
{txt}Number of variables            {res}      41   {txt}->{res}       6
{txt}j variable (10 values)                    ->   {res}method
{txt}xij variables:
              {res}beta_1 beta_2 ... beta_10   {txt}->   {res}beta_
        sebeta_1 sebeta_2 ... sebeta_10   {txt}->   {res}sebeta_
           gamma_1 gamma_2 ... gamma_10   {txt}->   {res}gamma_
     segamma_1 segamma_2 ... segamma_10   {txt}->   {res}segamma_
{txt}{hline 77}

{com}. rename beta_ estbeta
{res}{txt}
{com}. rename sebeta_ sebeta
{res}{txt}
{com}. rename gamma_ estgamma
{res}{txt}
{com}. rename segamma_ segamma
{res}{txt}
{com}. reshape long est se, i(dnum method) j(target "beta" "gamma")

{txt}Data{col 36}wide{col 43}->{col 48}long
{hline 77}
Number of obs.                 {res}    1000   {txt}->{res}    2000
{txt}Number of variables            {res}       6   {txt}->{res}       5
{txt}j variable (2 values)                     ->   {res}target
{txt}xij variables:
                       {res}estbeta estgamma   {txt}->   {res}est
                         sebeta segamma   {txt}->   {res}se
{txt}{hline 77}

{com}. gen dgm = 1
{txt}
{com}. expand 2, gen(dupindicator)
{txt}(2,000 observations created)

{com}. replace dgm=2 if dupindicator==1
{txt}(2,000 real changes made)

{com}. drop dupindicator
{txt}
{com}. 
. siman setup, rep(dnum) dgm(dgm) est(est) se(se) method(method) target(target)

{txt}{col 20}SUMMARY OF DATA
_____________________________________________________

The siman format is:{res}{col 35}format 1: long-long
{txt}The format for targets is:{res}{col 35}long
{txt}The format for methods is:{res}{col 35}long
{txt}The number of targets is:{res}{col 35}2
{txt}The target values are:{res}{col 35}beta gamma

{txt}The number of methods is:{res}{col 35}10
{txt}The method values are:{res}{col 35}1 2 3 4 5 6 7 8 9 10

Data generating mechanism (dgm)
{txt}The total number of dgms is: {res}{col 35}2
{txt}The dgm variables (# levels): {res}{col 35}dgm (2) 

Estimates are contained in the dataset

{txt}The estimates variable is:{res}{col 35}est
{txt}The se variable is:{res}{col 35}se
{txt}The df variable is:{res}{col 35}N/A
{txt}The ci variables are:{res}{col 35}N/A
{txt}The p variable is:{res}{col 35}N/A
{txt}The true variable is:{res}{col 35}N/A
{txt}_____________________________________________________

{com}. siman comparemethodsscatter, methlist(3 7) name("cms_test6", replace) 
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number 
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("est",strlen("est"),1)=="_" local estimate = substr("est", 1, index("est","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("",strlen(""),1)=="_" local true = substr("", 1, index("","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    
        - local numberdgms: word count `dgm'
        = local numberdgms: word count dgm
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 1!=1 local optionlist est se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 2
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 1 {c -(}
          - capture assert `varlist' == int(`varlist') if `touse'
          = capture assert method == int(method) if __000004
          - if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
          - tempname Vals
          - qui tab `varlist' if `touse', `missing' matrow(`Vals')
          = qui tab method if __000004,  matrow(__000005)
          - local nvals = r(r)
          - forval i = 1 / `nvals' {c -(}
          = forval i = 1 / 2 {c -(}
          - local val = `Vals'[`i',1]
          = local val = __000005[1,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 1 < 2 local vals "3 "
          - else local vals "`vals'`val'"
          = else local vals "3 3"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000005[2,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 2 < 2 local vals "3 7 "
          - else local vals "`vals'`val'"
          = else local vals "3 7"
          - {c )-}
          - {c )-}
          - else {c -(}
            tempvar select counter
            bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
            generate `counter' = sum(`select') * (`select' == 1)
            sort `counter'
            qui count if `counter' == 0
            local j = 1 + r(N)
            local nvals = _N
            if "`clean'" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
            else {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
            else local vals `"`vals'`"`=`varlist'[`i']'"'"'
            {c )-}
            {c )-}
            {c )-}
          - di as txt `"`vals'"'
          = di as txt `"3 7"'
          - return local levels `"`vals'"'
          = return local levels `"3 7"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"3 7"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"3 7"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/2 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("3",strlen("3"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "3"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist 3
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist 3 3
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("7",strlen("7"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "7"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist 7
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist 3 7
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "3 7"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "3"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 0 == 0 {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        = qui reshape wide "est se", i(dnum dgm "target") j(method "3 7")
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide est se , i(dnum dgm target ) j(method 3 7 )
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 0 == 1 & "0" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/10 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m3] 3
        - if `i'==1 local siman_method `i'
        = if 3==1 local siman_method 3
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 3>=2 local siman_method 1 2 3
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m4] 4
        - if `i'==1 local siman_method `i'
        = if 4==1 local siman_method 4
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 4>=2 local siman_method 1 2 3 4
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m5] 5
        - if `i'==1 local siman_method `i'
        = if 5==1 local siman_method 5
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 5>=2 local siman_method 1 2 3 4 5
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m6] 6
        - if `i'==1 local siman_method `i'
        = if 6==1 local siman_method 6
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 6>=2 local siman_method 1 2 3 4 5 6
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m7] 7
        - if `i'==1 local siman_method `i'
        = if 7==1 local siman_method 7
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 7>=2 local siman_method 1 2 3 4 5 6 7
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m8] 8
        - if `i'==1 local siman_method `i'
        = if 8==1 local siman_method 8
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 8>=2 local siman_method 1 2 3 4 5 6 7 8
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m9] 9
        - if `i'==1 local siman_method `i'
        = if 9==1 local siman_method 9
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 9>=2 local siman_method 1 2 3 4 5 6 7 8 9
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m10] 10
        - if `i'==1 local siman_method `i'
        = if 10==1 local siman_method 10
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 10>=2 local siman_method 1 2 3 4 5 6 7 8 9 10
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] 
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if ""!="" char _dta[siman_truevars] 
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "single"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "single"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "3 7"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
Working.....
{res}{txt}
{com}. siman comparemethodsscatter, methlist(3 5 7) name("cms_test6a", replace) 
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number 
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("est",strlen("est"),1)=="_" local estimate = substr("est", 1, index("est","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("",strlen(""),1)=="_" local true = substr("", 1, index("","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    
        - local numberdgms: word count `dgm'
        = local numberdgms: word count dgm
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 1!=1 local optionlist est se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 3
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 1 {c -(}
          - capture assert `varlist' == int(`varlist') if `touse'
          = capture assert method == int(method) if __000004
          - if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
          - tempname Vals
          - qui tab `varlist' if `touse', `missing' matrow(`Vals')
          = qui tab method if __000004,  matrow(__000005)
          - local nvals = r(r)
          - forval i = 1 / `nvals' {c -(}
          = forval i = 1 / 3 {c -(}
          - local val = `Vals'[`i',1]
          = local val = __000005[1,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 1 < 3 local vals "3 "
          - else local vals "`vals'`val'"
          = else local vals "3 3"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000005[2,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 2 < 3 local vals "3 5 "
          - else local vals "`vals'`val'"
          = else local vals "3 5 5"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000005[3,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 3 < 3 local vals "3 5 7 "
          - else local vals "`vals'`val'"
          = else local vals "3 5 7"
          - {c )-}
          - {c )-}
          - else {c -(}
            tempvar select counter
            bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
            generate `counter' = sum(`select') * (`select' == 1)
            sort `counter'
            qui count if `counter' == 0
            local j = 1 + r(N)
            local nvals = _N
            if "`clean'" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
            else {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
            else local vals `"`vals'`"`=`varlist'[`i']'"'"'
            {c )-}
            {c )-}
            {c )-}
          - di as txt `"`vals'"'
          = di as txt `"3 5 7"'
          - return local levels `"`vals'"'
          = return local levels `"3 5 7"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"3 5 7"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"3 5 7"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/3 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("3",strlen("3"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "3"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist 3
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist 3 3
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("5",strlen("5"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "5"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist 5
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist 3 5
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("7",strlen("7"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel3 = "7"
        - if `m'==1 local metlist `metlabel`m''
        = if 3==1 local metlist 7
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 3>=2 local metlist 3 5 7
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "3 5 7"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "3"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 0 == 0 {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        = qui reshape wide "est se", i(dnum dgm "target") j(method "3 5 7")
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide est se , i(dnum dgm target ) j(method 3 5 7 )
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 0 == 1 & "0" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/10 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m3] 3
        - if `i'==1 local siman_method `i'
        = if 3==1 local siman_method 3
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 3>=2 local siman_method 1 2 3
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m4] 4
        - if `i'==1 local siman_method `i'
        = if 4==1 local siman_method 4
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 4>=2 local siman_method 1 2 3 4
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m5] 5
        - if `i'==1 local siman_method `i'
        = if 5==1 local siman_method 5
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 5>=2 local siman_method 1 2 3 4 5
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m6] 6
        - if `i'==1 local siman_method `i'
        = if 6==1 local siman_method 6
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 6>=2 local siman_method 1 2 3 4 5 6
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m7] 7
        - if `i'==1 local siman_method `i'
        = if 7==1 local siman_method 7
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 7>=2 local siman_method 1 2 3 4 5 6 7
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m8] 8
        - if `i'==1 local siman_method `i'
        = if 8==1 local siman_method 8
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 8>=2 local siman_method 1 2 3 4 5 6 7 8
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m9] 9
        - if `i'==1 local siman_method `i'
        = if 9==1 local siman_method 9
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 9>=2 local siman_method 1 2 3 4 5 6 7 8 9
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m10] 10
        - if `i'==1 local siman_method `i'
        = if 10==1 local siman_method 10
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 10>=2 local siman_method 1 2 3 4 5 6 7 8 9 10
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] 
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if ""!="" char _dta[siman_truevars] 
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "single"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "single"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "3 5 7"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
Working.....
{res}{txt}
{com}. siman comparemethodsscatter if target=="beta" & dgm==1
{txt}Warning: With 10 methods compared, this plot may be too dense to read.  If you find it unreadable, you can choose the methods to compare using -siman comparemethodsscatter-, methlist(a b) where a and b are the methods you are particularly interested to compare.
        - set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number 
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("est",strlen("est"),1)=="_" local estimate = substr("est", 1, index("est","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("",strlen(""),1)=="_" local true = substr("", 1, index("","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    
        - local numberdgms: word count `dgm'
        = local numberdgms: word count dgm
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 1!=1 local optionlist est se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 10
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 1 {c -(}
          - capture assert `varlist' == int(`varlist') if `touse'
          = capture assert method == int(method) if __000003
          - if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
          - tempname Vals
          - qui tab `varlist' if `touse', `missing' matrow(`Vals')
          = qui tab method if __000003,  matrow(__000004)
          - local nvals = r(r)
          - forval i = 1 / `nvals' {c -(}
          = forval i = 1 / 10 {c -(}
          - local val = `Vals'[`i',1]
          = local val = __000004[1,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 1 < 10 local vals "1 "
          - else local vals "`vals'`val'"
          = else local vals "1 1"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[2,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 2 < 10 local vals "1 2 "
          - else local vals "`vals'`val'"
          = else local vals "1 2 2"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[3,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 3 < 10 local vals "1 2 3 "
          - else local vals "`vals'`val'"
          = else local vals "1 2 3 3"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[4,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 4 < 10 local vals "1 2 3 4 "
          - else local vals "`vals'`val'"
          = else local vals "1 2 3 4 4"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[5,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 5 < 10 local vals "1 2 3 4 5 "
          - else local vals "`vals'`val'"
          = else local vals "1 2 3 4 5 5"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[6,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 6 < 10 local vals "1 2 3 4 5 6 "
          - else local vals "`vals'`val'"
          = else local vals "1 2 3 4 5 6 6"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[7,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 7 < 10 local vals "1 2 3 4 5 6 7 "
          - else local vals "`vals'`val'"
          = else local vals "1 2 3 4 5 6 7 7"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[8,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 8 < 10 local vals "1 2 3 4 5 6 7 8 "
          - else local vals "`vals'`val'"
          = else local vals "1 2 3 4 5 6 7 8 8"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[9,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 9 < 10 local vals "1 2 3 4 5 6 7 8 9 "
          - else local vals "`vals'`val'"
          = else local vals "1 2 3 4 5 6 7 8 9 9"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[10,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 10 < 10 local vals "1 2 3 4 5 6 7 8 9 10 "
          - else local vals "`vals'`val'"
          = else local vals "1 2 3 4 5 6 7 8 9 10"
          - {c )-}
          - {c )-}
          - else {c -(}
            tempvar select counter
            bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
            generate `counter' = sum(`select') * (`select' == 1)
            sort `counter'
            qui count if `counter' == 0
            local j = 1 + r(N)
            local nvals = _N
            if "`clean'" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
            else {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
            else local vals `"`vals'`"`=`varlist'[`i']'"'"'
            {c )-}
            {c )-}
            {c )-}
          - di as txt `"`vals'"'
          = di as txt `"1 2 3 4 5 6 7 8 9 10"'
          - return local levels `"`vals'"'
          = return local levels `"1 2 3 4 5 6 7 8 9 10"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"1 2 3 4 5 6 7 8 9 10"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"1 2 3 4 5 6 7 8 9 10"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/10 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("1",strlen("1"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "1"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist 1
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist 1 1
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("2",strlen("2"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "2"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist 2
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist 1 2
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("3",strlen("3"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel3 = "3"
        - if `m'==1 local metlist `metlabel`m''
        = if 3==1 local metlist 3
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 3>=2 local metlist 1 2 3
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("4",strlen("4"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel4 = "4"
        - if `m'==1 local metlist `metlabel`m''
        = if 4==1 local metlist 4
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 4>=2 local metlist 1 2 3 4
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("5",strlen("5"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel5 = "5"
        - if `m'==1 local metlist `metlabel`m''
        = if 5==1 local metlist 5
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 5>=2 local metlist 1 2 3 4 5
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("6",strlen("6"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel6 = "6"
        - if `m'==1 local metlist `metlabel`m''
        = if 6==1 local metlist 6
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 6>=2 local metlist 1 2 3 4 5 6
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("7",strlen("7"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel7 = "7"
        - if `m'==1 local metlist `metlabel`m''
        = if 7==1 local metlist 7
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 7>=2 local metlist 1 2 3 4 5 6 7
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("8",strlen("8"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel8 = "8"
        - if `m'==1 local metlist `metlabel`m''
        = if 8==1 local metlist 8
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 8>=2 local metlist 1 2 3 4 5 6 7 8
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("9",strlen("9"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel9 = "9"
        - if `m'==1 local metlist `metlabel`m''
        = if 9==1 local metlist 9
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 9>=2 local metlist 1 2 3 4 5 6 7 8 9
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("10",strlen("10"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel10 = "10"
        - if `m'==1 local metlist `metlabel`m''
        = if 10==1 local metlist 10
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 10>=2 local metlist 1 2 3 4 5 6 7 8 9 10
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "1 2 3 4 5 6 7 8 9 10"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "1"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 0 == 0 {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        = qui reshape wide "est se", i(dnum dgm "target") j(method "1 2 3 4 5 6 7 8 9 10")
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide est se , i(dnum dgm target ) j(method 1 2 3 4 5 6 7 8 9 10 )
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 0 == 1 & "0" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/10 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m3] 3
        - if `i'==1 local siman_method `i'
        = if 3==1 local siman_method 3
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 3>=2 local siman_method 1 2 3
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m4] 4
        - if `i'==1 local siman_method `i'
        = if 4==1 local siman_method 4
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 4>=2 local siman_method 1 2 3 4
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m5] 5
        - if `i'==1 local siman_method `i'
        = if 5==1 local siman_method 5
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 5>=2 local siman_method 1 2 3 4 5
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m6] 6
        - if `i'==1 local siman_method `i'
        = if 6==1 local siman_method 6
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 6>=2 local siman_method 1 2 3 4 5 6
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m7] 7
        - if `i'==1 local siman_method `i'
        = if 7==1 local siman_method 7
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 7>=2 local siman_method 1 2 3 4 5 6 7
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m8] 8
        - if `i'==1 local siman_method `i'
        = if 8==1 local siman_method 8
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 8>=2 local siman_method 1 2 3 4 5 6 7 8
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m9] 9
        - if `i'==1 local siman_method `i'
        = if 9==1 local siman_method 9
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 9>=2 local siman_method 1 2 3 4 5 6 7 8 9
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m10] 10
        - if `i'==1 local siman_method `i'
        = if 10==1 local siman_method 10
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 10>=2 local siman_method 1 2 3 4 5 6 7 8 9 10
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] 
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if ""!="" char _dta[siman_truevars] 
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "single"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "single"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "1 2 3 4 5 6 7 8 9 10"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
Working.....
{res}{txt}
{com}. siman comparemethodsscatter if target=="beta" & dgm==1, methlist(1 2 3) 
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("est") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" | "0" != "1" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number 
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("est",strlen("est"),1)=="_" local estimate = substr("est", 1, index("est","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("",strlen(""),1)=="_" local true = substr("", 1, index("","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "single"=="single" local optionlist est se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "single"=="multiple" local optionlist est se    
        - local numberdgms: word count `dgm'
        = local numberdgms: word count dgm
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 1!=1 local optionlist est se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 3
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 1 {c -(}
          - capture assert `varlist' == int(`varlist') if `touse'
          = capture assert method == int(method) if __000004
          - if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
          - tempname Vals
          - qui tab `varlist' if `touse', `missing' matrow(`Vals')
          = qui tab method if __000004,  matrow(__000005)
          - local nvals = r(r)
          - forval i = 1 / `nvals' {c -(}
          = forval i = 1 / 3 {c -(}
          - local val = `Vals'[`i',1]
          = local val = __000005[1,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 1 < 3 local vals "1 "
          - else local vals "`vals'`val'"
          = else local vals "1 1"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000005[2,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 2 < 3 local vals "1 2 "
          - else local vals "`vals'`val'"
          = else local vals "1 2 2"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000005[3,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 3 < 3 local vals "1 2 3 "
          - else local vals "`vals'`val'"
          = else local vals "1 2 3"
          - {c )-}
          - {c )-}
          - else {c -(}
            tempvar select counter
            bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
            generate `counter' = sum(`select') * (`select' == 1)
            sort `counter'
            qui count if `counter' == 0
            local j = 1 + r(N)
            local nvals = _N
            if "`clean'" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
            else {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
            else local vals `"`vals'`"`=`varlist'[`i']'"'"'
            {c )-}
            {c )-}
            {c )-}
          - di as txt `"`vals'"'
          = di as txt `"1 2 3"'
          - return local levels `"`vals'"'
          = return local levels `"1 2 3"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"1 2 3"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"1 2 3"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/3 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("1",strlen("1"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "1"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist 1
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist 1 1
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("2",strlen("2"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "2"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist 2
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist 1 2
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("3",strlen("3"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel3 = "3"
        - if `m'==1 local metlist `metlabel`m''
        = if 3==1 local metlist 3
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 3>=2 local metlist 1 2 3
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "1 2 3"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "1"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 0 == 0 {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        = qui reshape wide "est se", i(dnum dgm "target") j(method "1 2 3")
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide est se , i(dnum dgm target ) j(method 1 2 3 )
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 0 == 1 & "0" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/10 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m3] 3
        - if `i'==1 local siman_method `i'
        = if 3==1 local siman_method 3
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 3>=2 local siman_method 1 2 3
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m4] 4
        - if `i'==1 local siman_method `i'
        = if 4==1 local siman_method 4
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 4>=2 local siman_method 1 2 3 4
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m5] 5
        - if `i'==1 local siman_method `i'
        = if 5==1 local siman_method 5
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 5>=2 local siman_method 1 2 3 4 5
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m6] 6
        - if `i'==1 local siman_method `i'
        = if 6==1 local siman_method 6
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 6>=2 local siman_method 1 2 3 4 5 6
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m7] 7
        - if `i'==1 local siman_method `i'
        = if 7==1 local siman_method 7
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 7>=2 local siman_method 1 2 3 4 5 6 7
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m8] 8
        - if `i'==1 local siman_method `i'
        = if 8==1 local siman_method 8
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 8>=2 local siman_method 1 2 3 4 5 6 7 8
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m9] 9
        - if `i'==1 local siman_method `i'
        = if 9==1 local siman_method 9
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 9>=2 local siman_method 1 2 3 4 5 6 7 8 9
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m10] 10
        - if `i'==1 local siman_method `i'
        = if 10==1 local siman_method 10
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 10>=2 local siman_method 1 2 3 4 5 6 7 8 9 10
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] est
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] 
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "est"!="" char _dta[siman_estvars] est
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if ""!="" char _dta[siman_truevars] 
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "single"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "single"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "1 2 3"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
Working.....
{res}{txt}
{com}. siman_blandaltman, methlist(3 7) name("ba_test6", replace)
      {txt}- set tracedepth 1
      - if mi("`estimate'") & mi("`se'") {c -(}
      = if mi("est") & mi("se") {c -(}
        di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
        exit 498
        {c )-}
      - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
      = if "single"=="single" | "0" != "1" local optionlist est se   
      - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
      = else if "single"=="multiple" local optionlist est se    
      - local truenumber = 0
      - cap confirm number `true'
      = cap confirm number 
      - if !_rc local truenumber = 1
      - if `dgmcreated' == 1 {c -(}
      = if 0 == 1 {c -(}
        cap confirm variable dgm
        if _rc {c -(}
        qui gen dgm = 1
        local dgm dgm
        local ndgm = 1
        {c )-}
        {c )-}
      - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
      = if "0" == "1" & 1==1 {c -(}
        qui cap labelsof `method'
        if !_rc local methodvalues `r(values)'
        else qui cap levelsof `method'
        if !_rc local methodvalues `r(levels)'
        {c )-}
      - if "`longwide'"!="" {c -(}
      = if "longwide"!="" {c -(}
      - if `nformat'==2 {c -(}
      = if 1==2 {c -(}
        if "`order'" == "method" {c -(}
        forvalues j = 1/`nmethod' {c -(}
        foreach option in `optionlist' {c -(}
        local `option'stubreshape`m`j'' = "`option'`m`j''"
        if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
        else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
        {c )-}
        {c )-}
        {c )-}
        else if "`order'" == "target" {c -(}
        forvalues j = 1/`ntarget' {c -(}
        foreach option in `optionlist' {c -(}
        local `option'stubreshape`t`j'' = "`option'`t`j''"
        if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
        else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
        {c )-}
        {c )-}
        {c )-}
        if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
        qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
        {c )-}
        else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
        qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
        {c )-}
        if "`order'" == "method" {c -(}
        if !mi("``true'stubreshapelist'") {c -(}
        forvalues j = 1/`nmethod' {c -(}
        qui tokenize ``true'stubreshapelist'
        if `j'==1 qui rename ``j'' `true'
        else qui drop ``j''
        {c )-}
        {c )-}
        char _dta[siman_truedescriptiontype] "variable"
        local ntruestub 0
        char _dta[siman_ntruestub] 0
        {c )-}
        foreach u of var * {c -(}
        if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
        {c )-}
        if `nformat'==2 & "`order'" == "method" {c -(}
        capture confirm variable target
        if _rc {c -(}
        rename _j target
        local target = "target"
        {c )-}
        else {c -(}
        di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
        exit 498
        {c )-}
        char _dta[siman_format] "format 3: long-wide"
        char _dta[siman_targetformat] "long"
        char _dta[siman_methodformat] "wide"
        char _dta[siman_nformat] 3
        char _dta[siman_target] "`target'"
        if `ntarget'!=0 char _dta[siman_ntarget] 1
        char _dta[siman_descriptiontype] "stub"
        if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
        char _dta[siman_cidescriptiontype] "stubs"
        if mi("`describe") siman_describe
        {c )-}
        if `nformat'==2 & "`order'" == "target" {c -(}
        capture confirm variable method
        if _rc {c -(}
        rename _j method
        local method = "method"
        {c )-}
        else {c -(}
        di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
        exit 498
        {c )-}
        qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
        qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
        local c 1
        foreach j in `valmethod' {c -(}
        if `c'==1 {c -(}
        cap confirm variable `true'`j'
        if !_rc {c -(}
        qui rename `true'`j' `true'
        {c )-}
        local c = `c' + 1
        {c )-}
        else cap qui drop `true'`j'
        {c )-}
        local truedescriptiontype "variable"
        char _dta[siman_truedescriptiontype] "variable"
        local ntruestub 0
        char _dta[siman_format] "format 3: long-wide"
        char _dta[siman_targetformat] "long"
        char _dta[siman_methodformat] "wide"
        char _dta[siman_nformat] 3
        char _dta[siman_target] "target"
        if `ntarget'!=0 char _dta[siman_ntarget] 1
        char _dta[siman_descriptiontype] "stub"
        char _dta[siman_order]: method
        if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
        if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
        char _dta[siman_cidescriptiontype] "stubs"
        if "`truevaluecreated'" == "1" {c -(}
        local truevars `trueuser'
        char _dta[siman_[siman_truevars] "`trueuser'"
        {c )-}
        if mi("`describe") siman_describe
        {c )-}
        {c )-}
      - else if `nformat'==1 & `nmethod'!=0 {c -(}
      = else if 1==1 & 1!=0 {c -(}
      - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
      = if substr("est",strlen("est"),1)=="_" local estimate = substr("est", 1, index("est","_") - 1)
      - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
      = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
      - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
      = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
      - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
      = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
      - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
      = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
      - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
      = if substr("",strlen(""),1)=="_" local true = substr("", 1, index("","_") - 1)
      - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
      = if "single"=="single" local optionlist est se   
      - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
      = else if "single"=="multiple" local optionlist est se    
      - local numberdgms: word count `dgm'
      = local numberdgms: word count dgm
      - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
      = if 1!=1 local optionlist est se   
      - qui tab `method'
      = qui tab method
      - local nmethodlabels = `r(r)'
      = local nmethodlabels = 2
      - qui levels `method', local(mlevels)
      = qui levels method, local(mlevels)
        {hline 75} begin levels {hline}
        - version 8
        - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
        - if "`separate'" == "" local sep " "
        = if "" == "" local sep " "
        - else local sep "`separate'"
        = else local sep ""
        - if "`missing'" != "" local novarlist "novarlist"
        = if "" != "" local novarlist "novarlist"
        - marksample touse, strok `novarlist'
        = marksample touse, strok 
        - capture confirm numeric variable `varlist'
        = capture confirm numeric variable method
        - local isnum = _rc != 7
        - if `isnum' {c -(}
        = if 1 {c -(}
        - capture assert `varlist' == int(`varlist') if `touse'
        = capture assert method == int(method) if __000004
        - if _rc {c -(}
          di as err "`varlist' contains non-integer values"
          exit 459
          {c )-}
        - tempname Vals
        - qui tab `varlist' if `touse', `missing' matrow(`Vals')
        = qui tab method if __000004,  matrow(__000005)
        - local nvals = r(r)
        - forval i = 1 / `nvals' {c -(}
        = forval i = 1 / 2 {c -(}
        - local val = `Vals'[`i',1]
        = local val = __000005[1,1]
        - if `i' < `nvals' local vals "`vals'`val'`sep'"
        = if 1 < 2 local vals "3 "
        - else local vals "`vals'`val'"
        = else local vals "3 3"
        - {c )-}
        - local val = `Vals'[`i',1]
        = local val = __000005[2,1]
        - if `i' < `nvals' local vals "`vals'`val'`sep'"
        = if 2 < 2 local vals "3 7 "
        - else local vals "`vals'`val'"
        = else local vals "3 7"
        - {c )-}
        - {c )-}
        - else {c -(}
          tempvar select counter
          bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
          generate `counter' = sum(`select') * (`select' == 1)
          sort `counter'
          qui count if `counter' == 0
          local j = 1 + r(N)
          local nvals = _N
          if "`clean'" != "" {c -(}
          forval i = `j' / `nvals' {c -(}
          if `i' < `nvals' {c -(}
          local vals "`vals'`=`varlist'[`i']'`sep'"
          {c )-}
          else local vals "`vals'`=`varlist'[`i']'"
          {c )-}
          {c )-}
          else {c -(}
          forval i = `j' / `nvals' {c -(}
          if `i' < `nvals' {c -(}
          local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
          {c )-}
          else local vals `"`vals'`"`=`varlist'[`i']'"'"'
          {c )-}
          {c )-}
          {c )-}
        - di as txt `"`vals'"'
        = di as txt `"3 7"'
        - return local levels `"`vals'"'
        = return local levels `"3 7"'
        - if "`local'" != "" {c -(}
        = if "mlevels" != "" {c -(}
        - c_local `local' `"`vals'"'
        = c_local mlevels `"3 7"'
        - {c )-}
        {hline 77} end levels {hline}
      - qui tokenize `"`mlevels'"'
      = qui tokenize `"3 7"'
      - cap quietly label drop `method'
      = cap quietly label drop method
        {hline 76} begin label {hline}
        - version 10.0
        - local vv : display "version " string(_caller()) ", missing:"
        - gettoken val : 0
        - if (strpos("`val'", "val") > 0 ) {c -(}
        = if (strpos("drop", "val") > 0 ) {c -(}
          gettoken val 0 : 0
          syntax anything [, nofix]
          if "`fix'" != "" {c -(}
          local fix ", nofix"
          {c )-}
          gettoken var rest : anything
          while `"`rest'"' != "" {c -(}
          gettoken lab rest : rest
          local label "`lab'"
          {c )-}
          local vlist : list anything - lab
          if "`lab'" == "." {c -(}
          local lab ""
          {c )-}
          foreach var of varlist `vlist' {c -(}
          `vv' _label `val' `var' `lab' `fix'
          {c )-}
          {c )-}
        - else {c -(}
        - `vv' _label `macval(0)'
        = version 15, missing: _label drop method
          {c )-}
        {hline 78} end label {hline}
      - local labelchange = 0
      - forvalues m = 1/`nmethodlabels' {c -(}
      = forvalues m = 1/2 {c -(}
      - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
      = if substr("3",strlen("3"),1)=="_" {c -(}
        local label`m' = substr("``m''", 1, index("``m''","_") - 1)
        local metlabel`m' = "``m''"
        local labelchange = 1
        if `m'==1 {c -(}
        local labelvalues `m' "`label`m''"
        local metlist `metlabel`m''
        {c )-}
        else if `m'>1 {c -(}
        local labelvalues `labelvalues' `m' "`label`m''"
        local metlist `metlist' `metlabel`m''
        {c )-}
        {c )-}
      - else {c -(}
      - local metlabel`m' = "``m''"
      = local metlabel1 = "3"
      - if `m'==1 local metlist `metlabel`m''
      = if 1==1 local metlist 3
      - else if `m'>=2 local metlist `metlist' `metlabel`m''
      = else if 1>=2 local metlist 3 3
      - {c )-}
      - {c )-}
      - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
      = if substr("7",strlen("7"),1)=="_" {c -(}
        local label`m' = substr("``m''", 1, index("``m''","_") - 1)
        local metlabel`m' = "``m''"
        local labelchange = 1
        if `m'==1 {c -(}
        local labelvalues `m' "`label`m''"
        local metlist `metlabel`m''
        {c )-}
        else if `m'>1 {c -(}
        local labelvalues `labelvalues' `m' "`label`m''"
        local metlist `metlist' `metlabel`m''
        {c )-}
        {c )-}
      - else {c -(}
      - local metlabel`m' = "``m''"
      = local metlabel2 = "7"
      - if `m'==1 local metlist `metlabel`m''
      = if 2==1 local metlist 7
      - else if `m'>=2 local metlist `metlist' `metlabel`m''
      = else if 2>=2 local metlist 3 7
      - {c )-}
      - {c )-}
      - if `labelchange'==1 {c -(}
      = if 0==1 {c -(}
        label define methodlab `labelvalues'
        label values `method' methodlab
        {c )-}
      - local valmethod = "`metlist'"
      = local valmethod = "3 7"
      - forvalues i=1/`nmethod' {c -(}
      = forvalues i=1/1 {c -(}
      - local m`i' = "``i''"
      = local m1 = "3"
      - {c )-}
      - local string = 0
      - capture confirm numeric variable `method'
      = capture confirm numeric variable method
      - if _rc local string = 1
      - if `string' == 0 {c -(}
      = if 0 == 0 {c -(}
      - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
      = qui reshape wide "est se", i(dnum dgm "target") j(method "3 7")
        {hline 74} begin reshape {hline}
        - u_mi_not_mi_set reshape other
        - if _caller() <= 10 {c -(}
          reshape_10 `0'
          exit
          {c )-}
        - if _caller() >= 12 {c -(}
        - global ReS_Call : di "version " string(_caller()) ":"
        - {c )-}
        - version 5.0, missing
        - if "`1'"=="clear" {c -(}
        = if "wide"=="clear" {c -(}
          char _dta[ReS_ver]
          char _dta[ReS_i]
          char _dta[ReS_j]
          char _dta[ReS_jv]
          char _dta[ReS_Xij]
          char _dta[Res_Xi]
          char _dta[ReS_atwl]
          char _dta[ReS_str]
          local xijn : char _dta[ReS_Xij_n]
          if "`xijn'" != "" {c -(}
          forvalues i = 1/`xijn' {c -(}
          char _dta[ReS_Xij_wide`i']
          char _dta[ReS_Xij_long`i']
          {c )-}
          char _dta[ReS_Xij_n]
          {c )-}
          exit
          {c )-}
        - if "`1'"=="wide" | "`1'"=="long" {c -(}
        = if "wide"=="wide" | "wide"=="long" {c -(}
        - DoNew `*'
        = DoNew wide est se , i(dnum dgm target ) j(method 3 7 )
        - exit
        {hline 76} end reshape {hline}
      - {c )-}
      - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
      = else if 0 == 1 & "0" != "1" {c -(}
        qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
        {c )-}
      - else if "`methodlabels'" == "1" {c -(}
      = else if "0" == "1" {c -(}
        qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
        {c )-}
      - char _dta[siman_format] "format 3: long-wide"
      - char _dta[siman_targetformat] "long"
      - char _dta[siman_methodformat] "wide"
      - char _dta[siman_nformat] 3
      - forvalues i=1/`nummethod' {c -(}
      = forvalues i=1/10 {c -(}
      - char _dta[siman_m`i'] `i'
      = char _dta[siman_m1] 1
      - if `i'==1 local siman_method `i'
      = if 1==1 local siman_method 1
      - else if `i'>=2 local siman_method `siman_method' `i'
      = else if 1>=2 local siman_method 1 1
      - {c )-}
      - char _dta[siman_m`i'] `i'
      = char _dta[siman_m2] 2
      - if `i'==1 local siman_method `i'
      = if 2==1 local siman_method 2
      - else if `i'>=2 local siman_method `siman_method' `i'
      = else if 2>=2 local siman_method 1 2
      - {c )-}
      - char _dta[siman_m`i'] `i'
      = char _dta[siman_m3] 3
      - if `i'==1 local siman_method `i'
      = if 3==1 local siman_method 3
      - else if `i'>=2 local siman_method `siman_method' `i'
      = else if 3>=2 local siman_method 1 2 3
      - {c )-}
      - char _dta[siman_m`i'] `i'
      = char _dta[siman_m4] 4
      - if `i'==1 local siman_method `i'
      = if 4==1 local siman_method 4
      - else if `i'>=2 local siman_method `siman_method' `i'
      = else if 4>=2 local siman_method 1 2 3 4
      - {c )-}
      - char _dta[siman_m`i'] `i'
      = char _dta[siman_m5] 5
      - if `i'==1 local siman_method `i'
      = if 5==1 local siman_method 5
      - else if `i'>=2 local siman_method `siman_method' `i'
      = else if 5>=2 local siman_method 1 2 3 4 5
      - {c )-}
      - char _dta[siman_m`i'] `i'
      = char _dta[siman_m6] 6
      - if `i'==1 local siman_method `i'
      = if 6==1 local siman_method 6
      - else if `i'>=2 local siman_method `siman_method' `i'
      = else if 6>=2 local siman_method 1 2 3 4 5 6
      - {c )-}
      - char _dta[siman_m`i'] `i'
      = char _dta[siman_m7] 7
      - if `i'==1 local siman_method `i'
      = if 7==1 local siman_method 7
      - else if `i'>=2 local siman_method `siman_method' `i'
      = else if 7>=2 local siman_method 1 2 3 4 5 6 7
      - {c )-}
      - char _dta[siman_m`i'] `i'
      = char _dta[siman_m8] 8
      - if `i'==1 local siman_method `i'
      = if 8==1 local siman_method 8
      - else if `i'>=2 local siman_method `siman_method' `i'
      = else if 8>=2 local siman_method 1 2 3 4 5 6 7 8
      - {c )-}
      - char _dta[siman_m`i'] `i'
      = char _dta[siman_m9] 9
      - if `i'==1 local siman_method `i'
      = if 9==1 local siman_method 9
      - else if `i'>=2 local siman_method `siman_method' `i'
      = else if 9>=2 local siman_method 1 2 3 4 5 6 7 8 9
      - {c )-}
      - char _dta[siman_m`i'] `i'
      = char _dta[siman_m10] 10
      - if `i'==1 local siman_method `i'
      = if 10==1 local siman_method 10
      - else if `i'>=2 local siman_method `siman_method' `i'
      = else if 10>=2 local siman_method 1 2 3 4 5 6 7 8 9 10
      - {c )-}
      - char _dta[siman_estimate] `estimate'
      = char _dta[siman_estimate] est
      - char _dta[siman_se] `se'
      = char _dta[siman_se] se
      - char _dta[siman_df] `df'
      = char _dta[siman_df] 
      - char _dta[siman_ci] `ci'
      = char _dta[siman_ci] 
      - char _dta[siman_p] `p'
      = char _dta[siman_p] 
      - char _dta[siman_true] `true'
      = char _dta[siman_true] 
      - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
      = if "est"!="" char _dta[siman_estvars] est
      - if "`se'"!="" char _dta[siman_sevars] `se'
      = if "se"!="" char _dta[siman_sevars] se
      - if "`df'"!="" char _dta[siman_dfvars] `df'
      = if ""!="" char _dta[siman_dfvars] 
      - if "`ci'"!="" char _dta[siman_civars] `ci'
      = if ""!="" char _dta[siman_civars] 
      - if "`p'"!="" char _dta[siman_pvars] `p'
      = if ""!="" char _dta[siman_pvars] 
      - if "`true'"!="" char _dta[siman_truevars] `true'
      = if ""!="" char _dta[siman_truevars] 
      - char _dta[siman_method] "`siman_valmethod'"
      = char _dta[siman_method] ""
      - char _dta[siman_descriptiontype] "stub"
      - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
      = if "single"=="single" char _dta[siman_truedescriptiontype] "variable"
      - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
      = if "single"=="multiple" char _dta[siman_truedescriptiontype] "stub"
      - char _dta[siman_cidescriptiontype] "stubs"
      - if mi("`describe") siman_describe
      - {c )-}
      - else if `nformat'==1 & `nmethod'==0 {c -(}
      = else if 1==1 & 1==0 {c -(}
        di as error "Can not reshape targets to wide format"
        exit 498
        {c )-}
      - {c )-}
      - else
      - if "`longlong'"!="" {c -(}
      = if ""!="" {c -(}
        if `nformat'==3 {c -(}
        if `methodlabels' == 1 local valmethod "`metlist'"
        qui tokenize "`valmethod'"
        if `nmethod'!=0 {c -(}
        forvalues v=1/`nummethod' {c -(}
        if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
        if `v'==1 local valmethod `valmethod`v''
        else if `v'>=2 local valmethod `valmethod' `valmethod`v''
        {c )-}
        {c )-}
        {c )-}
        local string = 0
        forvalues i=1/`nmethod' {c -(}
        qui capture confirm number `m`i''
        if _rc {c -(}
        local string = 1
        {c )-}
        {c )-}
        if "`estchange'" == "1" local estimateunderscore = "`estvars'"
        if "`sechange'" == "1" local seunderscore = "`sevars'"
        if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
        if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
        if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
        if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
        local optionlistreshape `optionlist'
        local exclude "`true'"
        local optionlistreshape: list optionlistreshape - exclude
        local methodname: char _dta[ReS_j]
        if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
        if "`methodlables'" == "1" local methodreshape "`methodvalues'"
        else local methodreshape "`valmethod'"
        if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
        local trueindgm = strpos("`dgm'","`true'")
        if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
        else local optionlistreshape `optionlist'
        if `truenumber' == 1 local optionlistreshape `optionlist'
        if "`ntruestub'" == "0" local optionlistreshape `optionlist'
        if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
        {c )-}
        else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
        {c )-}
        else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
        {c )-}
        else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
        {c )-}
        else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
        {c )-}
        {c )-}
        else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
        if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
        {c )-}
        else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
        {c )-}
        else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
        {c )-}
        else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
        {c )-}
        else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
        {c )-}
        {c )-}
        foreach u of var * {c -(}
        if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
        {c )-}
        char _dta[siman_format] "format 1: long-long"
        char _dta[siman_targetformat] "long"
        char _dta[siman_methodformat] "long"
        char _dta[siman_nformat] 1
        if `nmethod'!=0 char _dta[siman_method] "`methodname'"
        if `nmethod'!=0 char _dta[siman_nmethod] 1
        char _dta[siman_descriptiontype] "variable"
        char _dta[siman_truedescriptiontype] "variable"
        char _dta[siman_cidescriptiontype] "variables"
        char _dta[siman_estimate] `estimate'
        char _dta[siman_se] `se'
        if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        if "`se'"!="" char _dta[siman_sevars] `se'
        if "`simananalyserun'"=="1" {c -(}
        preserve
        qui tempfile sortperf
        qui drop if `rep'<0
        qui save `sortperf'
        restore
        qui drop if `rep'>0
        if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
        else qui gsort -`rep' `dgm' `target'
        qui append using `sortperf'
        {c )-}
        if mi("`describe") siman_describe
        {c )-}
        {c )-}
      - local allthings `allthings' metlist
      = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
      - char _dta[siman_metlist] "`metlist'"
      = char _dta[siman_metlist] "3 7"
      - char _dta[siman_allthings] `allthings'
      = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
      - if `dgmcreated' == 1 qui drop dgm
      = if 0 == 1 qui drop dgm
working....
{res}{txt}
{com}. 
. * check error messages
. cap siman comparemethodsscatter if method <= 3
{txt}
{com}. assert _rc
{txt}
{com}. cap siman comparemethodsscatter, methlist(1/5)
{txt}
{com}. assert _rc
{txt}
{com}. cap siman blandaltman if method <= 3
{txt}
{com}. assert _rc
{txt}
{com}. cap siman blandaltman, methlist(1/5)
{txt}
{com}. assert _rc
{txt}
{com}. 
.  
.   
. **********************************************************
. * DGM defined by multiple variables with multiple levels
. **********************************************************
. clear all
{res}{txt}
{com}. prog drop _all
{txt}
{com}. use nestloop/res.dta, clear
{txt}
{com}. keep v1 theta rho pc k exppeto expg2 var2peto var2g2
{txt}
{com}. * theta needs to be in integer format for levelsof command to work (doesn't accept non-integer values), so make integer values with non-integer labels
. gen theta_new=2
{txt}
{com}. replace theta_new=1 if theta == 0.5
{txt}(192 real changes made)

{com}. replace theta_new=3 if theta == 0.75
{txt}(192 real changes made)

{com}. replace theta_new=4 if theta == 1 
{txt}(192 real changes made)

{com}. label define theta_new 1 "0.5" 2 "0.67" 3 "0.75" 4 "1"
{txt}
{com}. label values theta_new theta_new
{txt}
{com}. label var theta_new "theta categories"
{txt}
{com}. *br theta theta_new
. drop theta
{txt}
{com}. rename theta_new theta
{res}{txt}
{com}. gen pc_str = ""
{txt}(768 missing values generated)

{com}. replace pc_str = "5%" if pc == 1
{txt}variable {bf}pc_str{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str2{sf}
{txt}(192 real changes made)

{com}. replace pc_str = "10%" if pc == 2
{txt}variable {bf}pc_str{sf} was {bf}{res}str2{sf}{txt} now {bf}{res}str3{sf}
{txt}(192 real changes made)

{com}. replace pc_str = "20%" if pc == 3
{txt}(192 real changes made)

{com}. replace pc_str = "30%" if pc == 4
{txt}(192 real changes made)

{com}. drop pc
{txt}
{com}. rename pc_str pc
{res}{txt}
{com}. siman setup, rep(v1) dgm(theta rho pc k) method(peto g2) estimate(exp) se(var2) true(theta)
{res}  {txt}variable {bf}pc{sf} was {bf}{res}long{sf}{txt} now {bf}{res}byte{sf}
{txt}  (2,304 bytes saved)
{err}Warning: variable pc, which appears in dgm(), was stored as a string. It has been
encoded as numeric so that subsequent siman commands will work. If you require a
different order, encode pc as numeric before running -siman setup-.

{txt}{col 20}SUMMARY OF DATA
_____________________________________________________

The siman format is:{res}{col 35}format 3: long-wide
{txt}The format for targets is:{res}{col 35}long
{txt}The format for methods is:{res}{col 35}wide
{txt}The number of targets is:{res}{col 35}N/A
{txt}The target values are:{res}{col 35}N/A

{txt}The number of methods is:{res}{col 35}2
{txt}The method values are:{res}{col 35}peto g2

Data generating mechanism (dgm)
{txt}The total number of dgms is: {res}{col 35}192
{txt}The dgm variables (# levels): {res}{col 35}theta (4) rho (4) pc (4) k (3) 

Estimates are contained in the dataset

{txt}The estimates stub is:{res}{col 35}exp
{txt}The se stub is:{res}{col 35}var2
{txt}The df stub is:{res}{col 35}N/A
{txt}The ci stubs are:{res}{col 35}N/A
{txt}The p stub is:{res}{col 35}N/A
{txt}The true variable is:{res}{col 35}theta
{txt}_____________________________________________________

{com}. 
. * graphs
. siman scatter, ytitle("test y-title") xtitle("test x-title") name("scatter_test7", replace) 
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("exp") & mi("var2") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist exp var2   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist exp var2    theta
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number theta
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 3==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
          else if `nformat'==1 & `nmethod'!=0 {c -(}
          if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
          if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
          if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
          if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
          if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
          if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
          if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
          else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
          local numberdgms: word count `dgm'
          if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
          qui tab `method'
          local nmethodlabels = `r(r)'
          qui levels `method', local(mlevels)
          qui tokenize `"`mlevels'"'
          cap quietly label drop `method'
          local labelchange = 0
          forvalues m = 1/`nmethodlabels' {c -(}
          if substr("``m''",strlen("``m''"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          else {c -(}
          local metlabel`m' = "``m''"
          if `m'==1 local metlist `metlabel`m''
          else if `m'>=2 local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          if `labelchange'==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
          local valmethod = "`metlist'"
          forvalues i=1/`nmethod' {c -(}
          local m`i' = "``i''"
          {c )-}
          local string = 0
          capture confirm numeric variable `method'
          if _rc local string = 1
          if `string' == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
          else if `string' == 1 & "`methodlabels'" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
          else if "`methodlabels'" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          forvalues i=1/`nummethod' {c -(}
          char _dta[siman_m`i'] `i'
          if `i'==1 local siman_method `i'
          else if `i'>=2 local siman_method `siman_method' `i'
          {c )-}
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          char _dta[siman_df] `df'
          char _dta[siman_ci] `ci'
          char _dta[siman_p] `p'
          char _dta[siman_true] `true'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`df'"!="" char _dta[siman_dfvars] `df'
          if "`ci'"!="" char _dta[siman_civars] `ci'
          if "`p'"!="" char _dta[siman_pvars] `p'
          if "`true'"!="" char _dta[siman_truevars] `true'
          char _dta[siman_method] "`siman_valmethod'"
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          else if `nformat'==1 & `nmethod'==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
          {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if "longlong"!="" {c -(}
        - if `nformat'==3 {c -(}
        = if 3==3 {c -(}
        - if `methodlabels' == 1 local valmethod "`metlist'"
        = if 0 == 1 local valmethod ""
        - qui tokenize "`valmethod'"
        = qui tokenize "peto g2"
        - if `nmethod'!=0 {c -(}
        = if 2!=0 {c -(}
        - forvalues v=1/`nummethod' {c -(}
        = forvalues v=1/2 {c -(}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("peto",strlen("peto"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("g2",strlen("g2"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - {c )-}
        - local string = 0
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/2 {c -(}
        - qui capture confirm number `m`i''
        = qui capture confirm number peto
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - qui capture confirm number `m`i''
        = qui capture confirm number g2
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - if "`estchange'" == "1" local estimateunderscore = "`estvars'"
        = if "" == "1" local estimateunderscore = "exp"
        - if "`sechange'" == "1" local seunderscore = "`sevars'"
        = if "" == "1" local seunderscore = "var2"
        - if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
        = if ("" != "1" & "" != "1") local optionlist exp var2   
        - if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
        = if ("" == "1" & "" != "1") local optionlist  var2   
        - if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
        = if ("" != "1" & "" == "1") local optionlist exp    
        - if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
        = if ("" == "1" & "" == "1") local optionlist     
        - local optionlistreshape `optionlist'
        = local optionlistreshape exp var2
        - local exclude "`true'"
        = local exclude "theta"
        - local optionlistreshape: list optionlistreshape - exclude
        - local methodname: char _dta[ReS_j]
        - if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
        = if mi("") | "" == "_j" | "" == "mcse" local methodname "method"
        - if "`methodlables'" == "1" local methodreshape "`methodvalues'"
        = if "" == "1" local methodreshape ""
        - else local methodreshape "`valmethod'"
        = else local methodreshape "peto g2"
        - if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
        = if "stub" == "stub" | 0 == 1 {c -(}
        - local trueindgm = strpos("`dgm'","`true'")
        = local trueindgm = strpos("theta rho pc k","theta")
        - if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
        = if 1 == 0 local optionlistreshape exp var2 theta
        - else local optionlistreshape `optionlist'
        = else local optionlistreshape exp var2
        - if `truenumber' == 1 local optionlistreshape `optionlist'
        = if 0 == 1 local optionlistreshape exp var2
        - if "`ntruestub'" == "0" local optionlistreshape `optionlist'
        = if "0" == "0" local optionlistreshape exp var2
        - if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = if 1 == 0 & 0<=1 & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 0<=1 & 2!=0 {c -(}
        - qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
        = qui reshape long "exp var2", i(v1 theta rho pc k ) j(method "peto g2") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "long"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "long"=="wide" | "long"=="long" {c -(}
          - DoNew `*'
          = DoNew long exp var2 , i(v1 theta rho pc k ) j(method peto g2 ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        = else if 0>1 & 0!=. & 2==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
        - else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 0 & 0>1 & 0!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
        - else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 0>1 & 0!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
        - {c )-}
        - else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
        = else if "stub" == "variable" & 0 == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
        - foreach u of var * {c -(}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("v1",strlen("v1"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("theta",strlen("theta"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("rho",strlen("rho"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("pc",strlen("pc"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("k",strlen("k"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("method",strlen("method"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("exp",strlen("exp"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("var2",strlen("var2"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - char _dta[siman_format] "format 1: long-long"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "long"
        - char _dta[siman_nformat] 1
        - if `nmethod'!=0 char _dta[siman_method] "`methodname'"
        = if 2!=0 char _dta[siman_method] "method"
        - if `nmethod'!=0 char _dta[siman_nmethod] 1
        = if 2!=0 char _dta[siman_nmethod] 1
        - char _dta[siman_descriptiontype] "variable"
        - char _dta[siman_truedescriptiontype] "variable"
        - char _dta[siman_cidescriptiontype] "variables"
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] exp
        - char _dta[siman_se] `se'
        = char _dta[siman_se] var2
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "exp"!="" char _dta[siman_estvars] exp
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "var2"!="" char _dta[siman_sevars] var2
        - if "`simananalyserun'"=="1" {c -(}
        = if ""=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
        - if mi("`describe") siman_describe
        - {c )-}
        - {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] ""
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
working.....
{err}{it: WARNING: 384 panels will be created, consider using 'if' or 'by' options as detailed in {help siman_scatter:siman scatter}}
{res}{txt}
{com}. 
. siman swarm, graphoptions(ytitle("test y-title") xtitle("test x-title") name("swarm_test7", replace)) 
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("exp") & mi("var2") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist exp var2   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist exp var2    theta
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number theta
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 3==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
          else if `nformat'==1 & `nmethod'!=0 {c -(}
          if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
          if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
          if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
          if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
          if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
          if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
          if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
          else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
          local numberdgms: word count `dgm'
          if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
          qui tab `method'
          local nmethodlabels = `r(r)'
          qui levels `method', local(mlevels)
          qui tokenize `"`mlevels'"'
          cap quietly label drop `method'
          local labelchange = 0
          forvalues m = 1/`nmethodlabels' {c -(}
          if substr("``m''",strlen("``m''"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          else {c -(}
          local metlabel`m' = "``m''"
          if `m'==1 local metlist `metlabel`m''
          else if `m'>=2 local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          if `labelchange'==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
          local valmethod = "`metlist'"
          forvalues i=1/`nmethod' {c -(}
          local m`i' = "``i''"
          {c )-}
          local string = 0
          capture confirm numeric variable `method'
          if _rc local string = 1
          if `string' == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
          else if `string' == 1 & "`methodlabels'" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
          else if "`methodlabels'" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          forvalues i=1/`nummethod' {c -(}
          char _dta[siman_m`i'] `i'
          if `i'==1 local siman_method `i'
          else if `i'>=2 local siman_method `siman_method' `i'
          {c )-}
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          char _dta[siman_df] `df'
          char _dta[siman_ci] `ci'
          char _dta[siman_p] `p'
          char _dta[siman_true] `true'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`df'"!="" char _dta[siman_dfvars] `df'
          if "`ci'"!="" char _dta[siman_civars] `ci'
          if "`p'"!="" char _dta[siman_pvars] `p'
          if "`true'"!="" char _dta[siman_truevars] `true'
          char _dta[siman_method] "`siman_valmethod'"
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          else if `nformat'==1 & `nmethod'==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
          {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if "longlong"!="" {c -(}
        - if `nformat'==3 {c -(}
        = if 3==3 {c -(}
        - if `methodlabels' == 1 local valmethod "`metlist'"
        = if 0 == 1 local valmethod ""
        - qui tokenize "`valmethod'"
        = qui tokenize "peto g2"
        - if `nmethod'!=0 {c -(}
        = if 2!=0 {c -(}
        - forvalues v=1/`nummethod' {c -(}
        = forvalues v=1/2 {c -(}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("peto",strlen("peto"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("g2",strlen("g2"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - {c )-}
        - local string = 0
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/2 {c -(}
        - qui capture confirm number `m`i''
        = qui capture confirm number peto
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - qui capture confirm number `m`i''
        = qui capture confirm number g2
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - if "`estchange'" == "1" local estimateunderscore = "`estvars'"
        = if "" == "1" local estimateunderscore = "exp"
        - if "`sechange'" == "1" local seunderscore = "`sevars'"
        = if "" == "1" local seunderscore = "var2"
        - if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
        = if ("" != "1" & "" != "1") local optionlist exp var2   
        - if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
        = if ("" == "1" & "" != "1") local optionlist  var2   
        - if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
        = if ("" != "1" & "" == "1") local optionlist exp    
        - if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
        = if ("" == "1" & "" == "1") local optionlist     
        - local optionlistreshape `optionlist'
        = local optionlistreshape exp var2
        - local exclude "`true'"
        = local exclude "theta"
        - local optionlistreshape: list optionlistreshape - exclude
        - local methodname: char _dta[ReS_j]
        - if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
        = if mi("") | "" == "_j" | "" == "mcse" local methodname "method"
        - if "`methodlables'" == "1" local methodreshape "`methodvalues'"
        = if "" == "1" local methodreshape ""
        - else local methodreshape "`valmethod'"
        = else local methodreshape "peto g2"
        - if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
        = if "stub" == "stub" | 0 == 1 {c -(}
        - local trueindgm = strpos("`dgm'","`true'")
        = local trueindgm = strpos("theta rho pc k","theta")
        - if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
        = if 1 == 0 local optionlistreshape exp var2 theta
        - else local optionlistreshape `optionlist'
        = else local optionlistreshape exp var2
        - if `truenumber' == 1 local optionlistreshape `optionlist'
        = if 0 == 1 local optionlistreshape exp var2
        - if "`ntruestub'" == "0" local optionlistreshape `optionlist'
        = if "0" == "0" local optionlistreshape exp var2
        - if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = if 1 == 0 & 0<=1 & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 0<=1 & 2!=0 {c -(}
        - qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
        = qui reshape long "exp var2", i(v1 theta rho pc k ) j(method "peto g2") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "long"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "long"=="wide" | "long"=="long" {c -(}
          - DoNew `*'
          = DoNew long exp var2 , i(v1 theta rho pc k ) j(method peto g2 ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        = else if 0>1 & 0!=. & 2==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
        - else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 0 & 0>1 & 0!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
        - else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 0>1 & 0!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
        - {c )-}
        - else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
        = else if "stub" == "variable" & 0 == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
        - foreach u of var * {c -(}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("v1",strlen("v1"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("theta",strlen("theta"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("rho",strlen("rho"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("pc",strlen("pc"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("k",strlen("k"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("method",strlen("method"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("exp",strlen("exp"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("var2",strlen("var2"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - char _dta[siman_format] "format 1: long-long"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "long"
        - char _dta[siman_nformat] 1
        - if `nmethod'!=0 char _dta[siman_method] "`methodname'"
        = if 2!=0 char _dta[siman_method] "method"
        - if `nmethod'!=0 char _dta[siman_nmethod] 1
        = if 2!=0 char _dta[siman_nmethod] 1
        - char _dta[siman_descriptiontype] "variable"
        - char _dta[siman_truedescriptiontype] "variable"
        - char _dta[siman_cidescriptiontype] "variables"
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] exp
        - char _dta[siman_se] `se'
        = char _dta[siman_se] var2
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "exp"!="" char _dta[siman_estvars] exp
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "var2"!="" char _dta[siman_sevars] var2
        - if "`simananalyserun'"=="1" {c -(}
        = if ""=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
        - if mi("`describe") siman_describe
        - {c )-}
        - {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] ""
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
{res}{txt}working.....

{com}. 
. siman zipplot, scheme(scheme(s2color)) legend(order(3 "Carrot" 4 "Stalk")) xtit("x-title") ytit("y-title") ylab(0 40 100) noncoveroptions(pstyle(p3)) ///
> coveroptions(pstyle(p4)) scatteroptions(mcol(gray%50)) truegraphoptions(pstyle(p6)) name("zipplot_test7", replace)
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("exp") & mi("var2") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist exp var2   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist exp var2    theta
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number theta
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 3==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
          else if `nformat'==1 & `nmethod'!=0 {c -(}
          if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
          if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
          if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
          if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
          if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
          if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
          if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
          else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
          local numberdgms: word count `dgm'
          if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
          qui tab `method'
          local nmethodlabels = `r(r)'
          qui levels `method', local(mlevels)
          qui tokenize `"`mlevels'"'
          cap quietly label drop `method'
          local labelchange = 0
          forvalues m = 1/`nmethodlabels' {c -(}
          if substr("``m''",strlen("``m''"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          else {c -(}
          local metlabel`m' = "``m''"
          if `m'==1 local metlist `metlabel`m''
          else if `m'>=2 local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          if `labelchange'==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
          local valmethod = "`metlist'"
          forvalues i=1/`nmethod' {c -(}
          local m`i' = "``i''"
          {c )-}
          local string = 0
          capture confirm numeric variable `method'
          if _rc local string = 1
          if `string' == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
          else if `string' == 1 & "`methodlabels'" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
          else if "`methodlabels'" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          forvalues i=1/`nummethod' {c -(}
          char _dta[siman_m`i'] `i'
          if `i'==1 local siman_method `i'
          else if `i'>=2 local siman_method `siman_method' `i'
          {c )-}
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          char _dta[siman_df] `df'
          char _dta[siman_ci] `ci'
          char _dta[siman_p] `p'
          char _dta[siman_true] `true'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`df'"!="" char _dta[siman_dfvars] `df'
          if "`ci'"!="" char _dta[siman_civars] `ci'
          if "`p'"!="" char _dta[siman_pvars] `p'
          if "`true'"!="" char _dta[siman_truevars] `true'
          char _dta[siman_method] "`siman_valmethod'"
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          else if `nformat'==1 & `nmethod'==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
          {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if "longlong"!="" {c -(}
        - if `nformat'==3 {c -(}
        = if 3==3 {c -(}
        - if `methodlabels' == 1 local valmethod "`metlist'"
        = if 0 == 1 local valmethod ""
        - qui tokenize "`valmethod'"
        = qui tokenize "peto g2"
        - if `nmethod'!=0 {c -(}
        = if 2!=0 {c -(}
        - forvalues v=1/`nummethod' {c -(}
        = forvalues v=1/2 {c -(}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("peto",strlen("peto"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("g2",strlen("g2"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - {c )-}
        - local string = 0
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/2 {c -(}
        - qui capture confirm number `m`i''
        = qui capture confirm number peto
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - qui capture confirm number `m`i''
        = qui capture confirm number g2
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - if "`estchange'" == "1" local estimateunderscore = "`estvars'"
        = if "" == "1" local estimateunderscore = "exp"
        - if "`sechange'" == "1" local seunderscore = "`sevars'"
        = if "" == "1" local seunderscore = "var2"
        - if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
        = if ("" != "1" & "" != "1") local optionlist exp var2   
        - if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
        = if ("" == "1" & "" != "1") local optionlist  var2   
        - if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
        = if ("" != "1" & "" == "1") local optionlist exp    
        - if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
        = if ("" == "1" & "" == "1") local optionlist     
        - local optionlistreshape `optionlist'
        = local optionlistreshape exp var2
        - local exclude "`true'"
        = local exclude "theta"
        - local optionlistreshape: list optionlistreshape - exclude
        - local methodname: char _dta[ReS_j]
        - if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
        = if mi("") | "" == "_j" | "" == "mcse" local methodname "method"
        - if "`methodlables'" == "1" local methodreshape "`methodvalues'"
        = if "" == "1" local methodreshape ""
        - else local methodreshape "`valmethod'"
        = else local methodreshape "peto g2"
        - if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
        = if "stub" == "stub" | 0 == 1 {c -(}
        - local trueindgm = strpos("`dgm'","`true'")
        = local trueindgm = strpos("theta rho pc k","theta")
        - if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
        = if 1 == 0 local optionlistreshape exp var2 theta
        - else local optionlistreshape `optionlist'
        = else local optionlistreshape exp var2
        - if `truenumber' == 1 local optionlistreshape `optionlist'
        = if 0 == 1 local optionlistreshape exp var2
        - if "`ntruestub'" == "0" local optionlistreshape `optionlist'
        = if "0" == "0" local optionlistreshape exp var2
        - if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = if 1 == 0 & 0<=1 & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 0<=1 & 2!=0 {c -(}
        - qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
        = qui reshape long "exp var2", i(v1 theta rho pc k ) j(method "peto g2") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "long"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "long"=="wide" | "long"=="long" {c -(}
          - DoNew `*'
          = DoNew long exp var2 , i(v1 theta rho pc k ) j(method peto g2 ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        = else if 0>1 & 0!=. & 2==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
        - else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 0 & 0>1 & 0!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
        - else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 0>1 & 0!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
        - {c )-}
        - else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
        = else if "stub" == "variable" & 0 == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
        - foreach u of var * {c -(}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("v1",strlen("v1"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("theta",strlen("theta"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("rho",strlen("rho"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("pc",strlen("pc"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("k",strlen("k"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("method",strlen("method"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("exp",strlen("exp"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("var2",strlen("var2"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - char _dta[siman_format] "format 1: long-long"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "long"
        - char _dta[siman_nformat] 1
        - if `nmethod'!=0 char _dta[siman_method] "`methodname'"
        = if 2!=0 char _dta[siman_method] "method"
        - if `nmethod'!=0 char _dta[siman_nmethod] 1
        = if 2!=0 char _dta[siman_nmethod] 1
        - char _dta[siman_descriptiontype] "variable"
        - char _dta[siman_truedescriptiontype] "variable"
        - char _dta[siman_cidescriptiontype] "variables"
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] exp
        - char _dta[siman_se] `se'
        = char _dta[siman_se] var2
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "exp"!="" char _dta[siman_estvars] exp
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "var2"!="" char _dta[siman_sevars] var2
        - if "`simananalyserun'"=="1" {c -(}
        = if ""=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
        - if mi("`describe") siman_describe
        - {c )-}
        - {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] ""
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
{err}{it: WARNING: 4 graphs each of 24 panels will be created, consider using 'if' or 'by' options as detailed in {help siman_zipplot:siman zipplot}}
{txt}Drawing 4 graphs (1 per true value)...
{res}{txt}
{com}. 
. serset clear
{txt}
{com}. if ${c -(}detail{c )-} == 1 siman comparemethodsscatter, title("testtitle") subgr(xtit("testaxis")) name("cms_test7", replace) 
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("exp") & mi("var2") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist exp var2   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist exp var2    theta
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number theta
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 3==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
          else if `nformat'==1 & `nmethod'!=0 {c -(}
          if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
          if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
          if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
          if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
          if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
          if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
          if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
          else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
          local numberdgms: word count `dgm'
          if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
          qui tab `method'
          local nmethodlabels = `r(r)'
          qui levels `method', local(mlevels)
          qui tokenize `"`mlevels'"'
          cap quietly label drop `method'
          local labelchange = 0
          forvalues m = 1/`nmethodlabels' {c -(}
          if substr("``m''",strlen("``m''"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          else {c -(}
          local metlabel`m' = "``m''"
          if `m'==1 local metlist `metlabel`m''
          else if `m'>=2 local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          if `labelchange'==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
          local valmethod = "`metlist'"
          forvalues i=1/`nmethod' {c -(}
          local m`i' = "``i''"
          {c )-}
          local string = 0
          capture confirm numeric variable `method'
          if _rc local string = 1
          if `string' == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
          else if `string' == 1 & "`methodlabels'" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
          else if "`methodlabels'" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          forvalues i=1/`nummethod' {c -(}
          char _dta[siman_m`i'] `i'
          if `i'==1 local siman_method `i'
          else if `i'>=2 local siman_method `siman_method' `i'
          {c )-}
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          char _dta[siman_df] `df'
          char _dta[siman_ci] `ci'
          char _dta[siman_p] `p'
          char _dta[siman_true] `true'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`df'"!="" char _dta[siman_dfvars] `df'
          if "`ci'"!="" char _dta[siman_civars] `ci'
          if "`p'"!="" char _dta[siman_pvars] `p'
          if "`true'"!="" char _dta[siman_truevars] `true'
          char _dta[siman_method] "`siman_valmethod'"
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          else if `nformat'==1 & `nmethod'==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
          {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if "longlong"!="" {c -(}
        - if `nformat'==3 {c -(}
        = if 3==3 {c -(}
        - if `methodlabels' == 1 local valmethod "`metlist'"
        = if 0 == 1 local valmethod ""
        - qui tokenize "`valmethod'"
        = qui tokenize "peto g2"
        - if `nmethod'!=0 {c -(}
        = if 2!=0 {c -(}
        - forvalues v=1/`nummethod' {c -(}
        = forvalues v=1/2 {c -(}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("peto",strlen("peto"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("g2",strlen("g2"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - {c )-}
        - local string = 0
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/2 {c -(}
        - qui capture confirm number `m`i''
        = qui capture confirm number peto
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - qui capture confirm number `m`i''
        = qui capture confirm number g2
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - if "`estchange'" == "1" local estimateunderscore = "`estvars'"
        = if "" == "1" local estimateunderscore = "exp"
        - if "`sechange'" == "1" local seunderscore = "`sevars'"
        = if "" == "1" local seunderscore = "var2"
        - if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
        = if ("" != "1" & "" != "1") local optionlist exp var2   
        - if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
        = if ("" == "1" & "" != "1") local optionlist  var2   
        - if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
        = if ("" != "1" & "" == "1") local optionlist exp    
        - if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
        = if ("" == "1" & "" == "1") local optionlist     
        - local optionlistreshape `optionlist'
        = local optionlistreshape exp var2
        - local exclude "`true'"
        = local exclude "theta"
        - local optionlistreshape: list optionlistreshape - exclude
        - local methodname: char _dta[ReS_j]
        - if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
        = if mi("") | "" == "_j" | "" == "mcse" local methodname "method"
        - if "`methodlables'" == "1" local methodreshape "`methodvalues'"
        = if "" == "1" local methodreshape ""
        - else local methodreshape "`valmethod'"
        = else local methodreshape "peto g2"
        - if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
        = if "stub" == "stub" | 0 == 1 {c -(}
        - local trueindgm = strpos("`dgm'","`true'")
        = local trueindgm = strpos("theta rho pc k","theta")
        - if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
        = if 1 == 0 local optionlistreshape exp var2 theta
        - else local optionlistreshape `optionlist'
        = else local optionlistreshape exp var2
        - if `truenumber' == 1 local optionlistreshape `optionlist'
        = if 0 == 1 local optionlistreshape exp var2
        - if "`ntruestub'" == "0" local optionlistreshape `optionlist'
        = if "0" == "0" local optionlistreshape exp var2
        - if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = if 1 == 0 & 0<=1 & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 0<=1 & 2!=0 {c -(}
        - qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
        = qui reshape long "exp var2", i(v1 theta rho pc k ) j(method "peto g2") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "long"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "long"=="wide" | "long"=="long" {c -(}
          - DoNew `*'
          = DoNew long exp var2 , i(v1 theta rho pc k ) j(method peto g2 ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        = else if 0>1 & 0!=. & 2==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
        - else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 0 & 0>1 & 0!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
        - else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 0>1 & 0!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
        - {c )-}
        - else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
        = else if "stub" == "variable" & 0 == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
        - foreach u of var * {c -(}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("v1",strlen("v1"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("theta",strlen("theta"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("rho",strlen("rho"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("pc",strlen("pc"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("k",strlen("k"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("method",strlen("method"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("exp",strlen("exp"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("var2",strlen("var2"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - char _dta[siman_format] "format 1: long-long"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "long"
        - char _dta[siman_nformat] 1
        - if `nmethod'!=0 char _dta[siman_method] "`methodname'"
        = if 2!=0 char _dta[siman_method] "method"
        - if `nmethod'!=0 char _dta[siman_nmethod] 1
        = if 2!=0 char _dta[siman_nmethod] 1
        - char _dta[siman_descriptiontype] "variable"
        - char _dta[siman_truedescriptiontype] "variable"
        - char _dta[siman_cidescriptiontype] "variables"
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] exp
        - char _dta[siman_se] `se'
        = char _dta[siman_se] var2
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "exp"!="" char _dta[siman_estvars] exp
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "var2"!="" char _dta[siman_sevars] var2
        - if "`simananalyserun'"=="1" {c -(}
        = if ""=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
        - if mi("`describe") siman_describe
        - {c )-}
        - {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] ""
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
        - set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("exp") & mi("var2") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist exp var2   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist exp var2    theta
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number theta
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("exp",strlen("exp"),1)=="_" local estimate = substr("exp", 1, index("exp","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("var2",strlen("var2"),1)=="_" local se = substr("var2", 1, index("var2","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("theta",strlen("theta"),1)=="_" local true = substr("theta", 1, index("theta","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" local optionlist exp var2   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist exp var2    theta
        - local numberdgms: word count `dgm'
        = local numberdgms: word count theta rho pc k
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 4!=1 local optionlist exp var2   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 2
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 0 {c -(}
            capture assert `varlist' == int(`varlist') if `touse'
            if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
            tempname Vals
            qui tab `varlist' if `touse', `missing' matrow(`Vals')
            local nvals = r(r)
            forval i = 1 / `nvals' {c -(}
            local val = `Vals'[`i',1]
            if `i' < `nvals' local vals "`vals'`val'`sep'"
            else local vals "`vals'`val'"
            {c )-}
            {c )-}
          - else {c -(}
          - tempvar select counter
          - bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
          = bysort __000003 method : gen byte __000004 = (_n == 1) * __000003
          - generate `counter' = sum(`select') * (`select' == 1)
          = generate __000005 = sum(__000004) * (__000004 == 1)
          - sort `counter'
          = sort __000005
          - qui count if `counter' == 0
          = qui count if __000005 == 0
          - local j = 1 + r(N)
          - local nvals = _N
          - if "`clean'" != "" {c -(}
          = if "" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
          - else {c -(}
          - forval i = `j' / `nvals' {c -(}
          = forval i = 1535 / 1536 {c -(}
          - if `i' < `nvals' {c -(}
          = if 1535 < 1536 {c -(}
          - local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
          = local vals `"`"g2"' "'
          - {c )-}
          - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
          = else local vals `"`"g2"' `"g2"'"'
          - {c )-}
          - if `i' < `nvals' {c -(}
          = if 1536 < 1536 {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
          - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
          = else local vals `"`"g2"' `"peto"'"'
          - {c )-}
          - {c )-}
          - {c )-}
          - di as txt `"`vals'"'
          = di as txt `"`"g2"' `"peto"'"'
          - return local levels `"`vals'"'
          = return local levels `"`"g2"' `"peto"'"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"`"g2"' `"peto"'"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"`"g2"' `"peto"'"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/2 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("g2",strlen("g2"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "g2"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist g2
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist g2 g2
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("peto",strlen("peto"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "peto"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist peto
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist g2 peto
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "g2 peto"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "g2"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 1 == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 1 == 1 & "0" != "1" {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
        = qui reshape wide "exp var2", i(v1 theta rho pc k "") j(method "g2 peto") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide exp var2 , i(v1 theta rho pc k  ) j(method g2 peto ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/2 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] exp
        - char _dta[siman_se] `se'
        = char _dta[siman_se] var2
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] theta
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "exp"!="" char _dta[siman_estvars] exp
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "var2"!="" char _dta[siman_sevars] var2
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if "theta"!="" char _dta[siman_truevars] theta
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "multiple"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "multiple"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 metlist metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "g2 peto"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 metlist metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
Working.....
{err}{it: WARNING: 192 graphs will be created, consider using 'if' option as detailed in {help              siman_comparemethodsscatter:siman comparemethodsscatter}}
{res}{txt}
{com}. 
. if ${c -(}detail{c )-} == 1 siman blandaltman, ytitle("test y-title") xtitle("test x-title") name("ba_test7", replace) 
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("exp") & mi("var2") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist exp var2   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist exp var2    theta
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number theta
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 3==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
          else if `nformat'==1 & `nmethod'!=0 {c -(}
          if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
          if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
          if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
          if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
          if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
          if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
          if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
          else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
          local numberdgms: word count `dgm'
          if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
          qui tab `method'
          local nmethodlabels = `r(r)'
          qui levels `method', local(mlevels)
          qui tokenize `"`mlevels'"'
          cap quietly label drop `method'
          local labelchange = 0
          forvalues m = 1/`nmethodlabels' {c -(}
          if substr("``m''",strlen("``m''"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          else {c -(}
          local metlabel`m' = "``m''"
          if `m'==1 local metlist `metlabel`m''
          else if `m'>=2 local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          if `labelchange'==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
          local valmethod = "`metlist'"
          forvalues i=1/`nmethod' {c -(}
          local m`i' = "``i''"
          {c )-}
          local string = 0
          capture confirm numeric variable `method'
          if _rc local string = 1
          if `string' == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
          else if `string' == 1 & "`methodlabels'" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
          else if "`methodlabels'" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          forvalues i=1/`nummethod' {c -(}
          char _dta[siman_m`i'] `i'
          if `i'==1 local siman_method `i'
          else if `i'>=2 local siman_method `siman_method' `i'
          {c )-}
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          char _dta[siman_df] `df'
          char _dta[siman_ci] `ci'
          char _dta[siman_p] `p'
          char _dta[siman_true] `true'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`df'"!="" char _dta[siman_dfvars] `df'
          if "`ci'"!="" char _dta[siman_civars] `ci'
          if "`p'"!="" char _dta[siman_pvars] `p'
          if "`true'"!="" char _dta[siman_truevars] `true'
          char _dta[siman_method] "`siman_valmethod'"
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          else if `nformat'==1 & `nmethod'==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
          {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if "longlong"!="" {c -(}
        - if `nformat'==3 {c -(}
        = if 3==3 {c -(}
        - if `methodlabels' == 1 local valmethod "`metlist'"
        = if 0 == 1 local valmethod ""
        - qui tokenize "`valmethod'"
        = qui tokenize "peto g2"
        - if `nmethod'!=0 {c -(}
        = if 2!=0 {c -(}
        - forvalues v=1/`nummethod' {c -(}
        = forvalues v=1/2 {c -(}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("peto",strlen("peto"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("g2",strlen("g2"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - {c )-}
        - local string = 0
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/2 {c -(}
        - qui capture confirm number `m`i''
        = qui capture confirm number peto
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - qui capture confirm number `m`i''
        = qui capture confirm number g2
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - if "`estchange'" == "1" local estimateunderscore = "`estvars'"
        = if "" == "1" local estimateunderscore = "exp"
        - if "`sechange'" == "1" local seunderscore = "`sevars'"
        = if "" == "1" local seunderscore = "var2"
        - if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
        = if ("" != "1" & "" != "1") local optionlist exp var2   
        - if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
        = if ("" == "1" & "" != "1") local optionlist  var2   
        - if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
        = if ("" != "1" & "" == "1") local optionlist exp    
        - if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
        = if ("" == "1" & "" == "1") local optionlist     
        - local optionlistreshape `optionlist'
        = local optionlistreshape exp var2
        - local exclude "`true'"
        = local exclude "theta"
        - local optionlistreshape: list optionlistreshape - exclude
        - local methodname: char _dta[ReS_j]
        - if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
        = if mi("") | "" == "_j" | "" == "mcse" local methodname "method"
        - if "`methodlables'" == "1" local methodreshape "`methodvalues'"
        = if "" == "1" local methodreshape ""
        - else local methodreshape "`valmethod'"
        = else local methodreshape "peto g2"
        - if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
        = if "stub" == "stub" | 0 == 1 {c -(}
        - local trueindgm = strpos("`dgm'","`true'")
        = local trueindgm = strpos("theta rho pc k","theta")
        - if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
        = if 1 == 0 local optionlistreshape exp var2 theta
        - else local optionlistreshape `optionlist'
        = else local optionlistreshape exp var2
        - if `truenumber' == 1 local optionlistreshape `optionlist'
        = if 0 == 1 local optionlistreshape exp var2
        - if "`ntruestub'" == "0" local optionlistreshape `optionlist'
        = if "0" == "0" local optionlistreshape exp var2
        - if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = if 1 == 0 & 0<=1 & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 0<=1 & 2!=0 {c -(}
        - qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
        = qui reshape long "exp var2", i(v1 theta rho pc k ) j(method "peto g2") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "long"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "long"=="wide" | "long"=="long" {c -(}
          - DoNew `*'
          = DoNew long exp var2 , i(v1 theta rho pc k ) j(method peto g2 ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        = else if 0>1 & 0!=. & 2==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
        - else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 0 & 0>1 & 0!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
        - else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 0>1 & 0!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
        - {c )-}
        - else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
        = else if "stub" == "variable" & 0 == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
        - foreach u of var * {c -(}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("v1",strlen("v1"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("theta",strlen("theta"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("rho",strlen("rho"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("pc",strlen("pc"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("k",strlen("k"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("method",strlen("method"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("exp",strlen("exp"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("var2",strlen("var2"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - char _dta[siman_format] "format 1: long-long"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "long"
        - char _dta[siman_nformat] 1
        - if `nmethod'!=0 char _dta[siman_method] "`methodname'"
        = if 2!=0 char _dta[siman_method] "method"
        - if `nmethod'!=0 char _dta[siman_nmethod] 1
        = if 2!=0 char _dta[siman_nmethod] 1
        - char _dta[siman_descriptiontype] "variable"
        - char _dta[siman_truedescriptiontype] "variable"
        - char _dta[siman_cidescriptiontype] "variables"
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] exp
        - char _dta[siman_se] `se'
        = char _dta[siman_se] var2
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "exp"!="" char _dta[siman_estvars] exp
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "var2"!="" char _dta[siman_sevars] var2
        - if "`simananalyserun'"=="1" {c -(}
        = if ""=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
        - if mi("`describe") siman_describe
        - {c )-}
        - {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] ""
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
        - set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("exp") & mi("var2") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist exp var2   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist exp var2    theta
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number theta
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("exp",strlen("exp"),1)=="_" local estimate = substr("exp", 1, index("exp","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("var2",strlen("var2"),1)=="_" local se = substr("var2", 1, index("var2","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("theta",strlen("theta"),1)=="_" local true = substr("theta", 1, index("theta","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" local optionlist exp var2   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist exp var2    theta
        - local numberdgms: word count `dgm'
        = local numberdgms: word count theta rho pc k
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 4!=1 local optionlist exp var2   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 2
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 1 {c -(}
          - capture assert `varlist' == int(`varlist') if `touse'
          = capture assert method == int(method) if __000003
          - if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
          - tempname Vals
          - qui tab `varlist' if `touse', `missing' matrow(`Vals')
          = qui tab method if __000003,  matrow(__000004)
          - local nvals = r(r)
          - forval i = 1 / `nvals' {c -(}
          = forval i = 1 / 2 {c -(}
          - local val = `Vals'[`i',1]
          = local val = __000004[1,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 1 < 2 local vals "1 "
          - else local vals "`vals'`val'"
          = else local vals "1 1"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[2,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 2 < 2 local vals "1 2 "
          - else local vals "`vals'`val'"
          = else local vals "1 2"
          - {c )-}
          - {c )-}
          - else {c -(}
            tempvar select counter
            bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
            generate `counter' = sum(`select') * (`select' == 1)
            sort `counter'
            qui count if `counter' == 0
            local j = 1 + r(N)
            local nvals = _N
            if "`clean'" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
            else {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
            else local vals `"`vals'`"`=`varlist'[`i']'"'"'
            {c )-}
            {c )-}
            {c )-}
          - di as txt `"`vals'"'
          = di as txt `"1 2"'
          - return local levels `"`vals'"'
          = return local levels `"1 2"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"1 2"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"1 2"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/2 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("1",strlen("1"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "1"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist 1
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist 1 1
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("2",strlen("2"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "2"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist 2
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist 1 2
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "1 2"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "1"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 0 == 0 {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        = qui reshape wide "exp var2", i(v1 theta rho pc k "") j(method "1 2")
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide exp var2 , i(v1 theta rho pc k  ) j(method 1 2 )
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 0 == 1 & "0" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/2 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] exp
        - char _dta[siman_se] `se'
        = char _dta[siman_se] var2
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] theta
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "exp"!="" char _dta[siman_estvars] exp
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "var2"!="" char _dta[siman_sevars] var2
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if "theta"!="" char _dta[siman_truevars] theta
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "multiple"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "multiple"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 metlist metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "1 2"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 metlist metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
working....
{err}{it: WARNING: 192 graphs will be created, consider using 'if' option as detailed in {help siman_blandaltman:siman blandaltman}}
{res}{txt}
{com}. 
. siman analyse
    {txt}- set tracedepth 1
    - if "`method'"=="" {c -(}
    = if "peto g2"=="" {c -(}
      di as error "The variable 'method' is missing so siman analyse can not be run.  Please create a variable in your dataset called method containing the method value(s)."
      exit 498
      {c )-}
    - if "`simananalyserun'"=="1" & "`replace'" == "" {c -(}
    = if ""=="1" & "" == "" {c -(}
      di as error "There are already performance measures in the dataset.  If you would like to replace these, please use the 'replace' option"
      exit 498
      {c )-}
    - if mi("`estimate'") | mi("`se'") {c -(}
    = if mi("exp") | mi("var2") {c -(}
      di as error "siman analyse requires est() and se() to be specified in set-up"
      exit 498
      {c )-}
    - local estimatesindi = (`rep'[_N]>0)
    = local estimatesindi = (v1[_N]>0)
    - if "`simananalyserun'"=="1" & "`replace'" == "replace" & `estimatesindi'==1 {c -(}
    = if ""=="1" & "" == "replace" & 1==1 {c -(}
      qui drop if `rep'<0
      qui drop _perfmeascode
      qui drop _dataset
      {c )-}
    - else if "`simananalyserun'"=="1" & "`replace'" == "replace" & `estimatesindi'==0 {c -(}
    = else if ""=="1" & "" == "replace" & 1==0 {c -(}
      di as error "There are no estimates data in the data set.  Please re-load data and use siman setup to import data."
      exit 498
      {c )-}
    - local simananalyserun = 0
    - if "`simansetuprun'"=="0" | "`simansetuprun'"=="" {c -(}
    = if "1"=="0" | "1"=="" {c -(}
      di as error "siman setup has not been run.  Please use siman setup first before siman analyse."
      exit 498
      {c )-}
    - cap confirm variable `true'
    = cap confirm variable theta
    - if _rc==0 {c -(}
    - local extratrue : list true - dgm
    - if !mi("`extratrue'") local truevariable `true'
    = if !mi("") local truevariable theta
    - {c )-}
    - if ("`if'"=="" & "`ifsetup'"!="") local ifanalyse = `"`ifsetup'"'
    = if (""=="" & ""!="") local ifanalyse = `""'
    - else local ifanalyse = `"`if'"'
    = else local ifanalyse = `""'
    - qui tempvar touse
    - qui generate `touse' = 0
    = qui generate __000000 = 0
    - qui replace `touse' = 1 `ifanalyse'
    = qui replace __000000 = 1 
    - preserve
    - if `nformat'!=1 {c -(}
    = if 3!=1 {c -(}
    - qui siman_reshape, longlong
      {hline 70} begin siman_reshape {hline}
      - version 15
      - syntax, [LONGWIDE LONGLONG noDEscribe]
      - foreach thing in `_dta[siman_allthings]' {c -(}
      = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 {c -(}
      - local `thing' : char _dta[siman_`thing']
      = local allthings : char _dta[siman_allthings]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local rep : char _dta[siman_rep]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgm : char _dta[siman_dgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local target : char _dta[siman_target]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local method : char _dta[siman_method]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estimate : char _dta[siman_estimate]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local se : char _dta[siman_se]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local df : char _dta[siman_df]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ci : char _dta[siman_ci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local p : char _dta[siman_p]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local true : char _dta[siman_true]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local order : char _dta[siman_order]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local lci : char _dta[siman_lci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local uci : char _dta[siman_uci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifsetup : char _dta[siman_ifsetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local insetup : char _dta[siman_insetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local format : char _dta[siman_format]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetformat : char _dta[siman_targetformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodformat : char _dta[siman_methodformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nformat : char _dta[siman_nformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntarget : char _dta[siman_ntarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ndgm : char _dta[siman_ndgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nmethod : char _dta[siman_nmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numtarget : char _dta[siman_numtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valtarget : char _dta[siman_valtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nummethod : char _dta[siman_nummethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valmethod : char _dta[siman_valmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntrue : char _dta[siman_ntrue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruevalue : char _dta[siman_ntruevalue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmvar : char _dta[siman_dgmvar]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numdgm : char _dta[siman_numdgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmcreated : char _dta[siman_dgmcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetlabels : char _dta[siman_targetlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodcreated : char _dta[siman_methodcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodlabels : char _dta[siman_methodlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodvalues : char _dta[siman_methodvalues]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruestub : char _dta[siman_ntruestub]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local descriptiontype : char _dta[siman_descriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local cidescriptiontype : char _dta[siman_cidescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truedescriptiontype : char _dta[siman_truedescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estvars : char _dta[siman_estvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sevars : char _dta[siman_sevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dfvars : char _dta[siman_dfvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local civars : char _dta[siman_civars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local pvars : char _dta[siman_pvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truevars : char _dta[siman_truevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simansetuprun : char _dta[siman_simansetuprun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m1 : char _dta[siman_m1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m2 : char _dta[siman_m2]
      - {c )-}
      - set trace on
      - set tracedepth 1
      - if mi("`estimate'") & mi("`se'") {c -(}
      = if mi("exp") & mi("var2") {c -(}
        di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
        exit 498
        {c )-}
      - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
      = if "multiple"=="single" | "0" != "1" local optionlist exp var2   
      - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
      = else if "multiple"=="multiple" local optionlist exp var2    theta
      - local truenumber = 0
      - cap confirm number `true'
      = cap confirm number theta
      - if !_rc local truenumber = 1
      - if `dgmcreated' == 1 {c -(}
      = if 0 == 1 {c -(}
        cap confirm variable dgm
        if _rc {c -(}
        qui gen dgm = 1
        local dgm dgm
        local ndgm = 1
        {c )-}
        {c )-}
      - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
      = if "0" == "1" & 3==1 {c -(}
        qui cap labelsof `method'
        if !_rc local methodvalues `r(values)'
        else qui cap levelsof `method'
        if !_rc local methodvalues `r(levels)'
        {c )-}
      - if "`longwide'"!="" {c -(}
      = if ""!="" {c -(}
        if `nformat'==2 {c -(}
        if "`order'" == "method" {c -(}
        forvalues j = 1/`nmethod' {c -(}
        foreach option in `optionlist' {c -(}
        local `option'stubreshape`m`j'' = "`option'`m`j''"
        if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
        else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
        {c )-}
        {c )-}
        {c )-}
        else if "`order'" == "target" {c -(}
        forvalues j = 1/`ntarget' {c -(}
        foreach option in `optionlist' {c -(}
        local `option'stubreshape`t`j'' = "`option'`t`j''"
        if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
        else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
        {c )-}
        {c )-}
        {c )-}
        if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
        qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
        {c )-}
        else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
        qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
        {c )-}
        if "`order'" == "method" {c -(}
        if !mi("``true'stubreshapelist'") {c -(}
        forvalues j = 1/`nmethod' {c -(}
        qui tokenize ``true'stubreshapelist'
        if `j'==1 qui rename ``j'' `true'
        else qui drop ``j''
        {c )-}
        {c )-}
        char _dta[siman_truedescriptiontype] "variable"
        local ntruestub 0
        char _dta[siman_ntruestub] 0
        {c )-}
        foreach u of var * {c -(}
        if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
        {c )-}
        if `nformat'==2 & "`order'" == "method" {c -(}
        capture confirm variable target
        if _rc {c -(}
        rename _j target
        local target = "target"
        {c )-}
        else {c -(}
        di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
        exit 498
        {c )-}
        char _dta[siman_format] "format 3: long-wide"
        char _dta[siman_targetformat] "long"
        char _dta[siman_methodformat] "wide"
        char _dta[siman_nformat] 3
        char _dta[siman_target] "`target'"
        if `ntarget'!=0 char _dta[siman_ntarget] 1
        char _dta[siman_descriptiontype] "stub"
        if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
        char _dta[siman_cidescriptiontype] "stubs"
        if mi("`describe") siman_describe
        {c )-}
        if `nformat'==2 & "`order'" == "target" {c -(}
        capture confirm variable method
        if _rc {c -(}
        rename _j method
        local method = "method"
        {c )-}
        else {c -(}
        di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
        exit 498
        {c )-}
        qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
        qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
        local c 1
        foreach j in `valmethod' {c -(}
        if `c'==1 {c -(}
        cap confirm variable `true'`j'
        if !_rc {c -(}
        qui rename `true'`j' `true'
        {c )-}
        local c = `c' + 1
        {c )-}
        else cap qui drop `true'`j'
        {c )-}
        local truedescriptiontype "variable"
        char _dta[siman_truedescriptiontype] "variable"
        local ntruestub 0
        char _dta[siman_format] "format 3: long-wide"
        char _dta[siman_targetformat] "long"
        char _dta[siman_methodformat] "wide"
        char _dta[siman_nformat] 3
        char _dta[siman_target] "target"
        if `ntarget'!=0 char _dta[siman_ntarget] 1
        char _dta[siman_descriptiontype] "stub"
        char _dta[siman_order]: method
        if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
        if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
        char _dta[siman_cidescriptiontype] "stubs"
        if "`truevaluecreated'" == "1" {c -(}
        local truevars `trueuser'
        char _dta[siman_[siman_truevars] "`trueuser'"
        {c )-}
        if mi("`describe") siman_describe
        {c )-}
        {c )-}
        else if `nformat'==1 & `nmethod'!=0 {c -(}
        if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        local numberdgms: word count `dgm'
        if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        qui tab `method'
        local nmethodlabels = `r(r)'
        qui levels `method', local(mlevels)
        qui tokenize `"`mlevels'"'
        cap quietly label drop `method'
        local labelchange = 0
        forvalues m = 1/`nmethodlabels' {c -(}
        if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        local label`m' = substr("``m''", 1, index("``m''","_") - 1)
        local metlabel`m' = "``m''"
        local labelchange = 1
        if `m'==1 {c -(}
        local labelvalues `m' "`label`m''"
        local metlist `metlabel`m''
        {c )-}
        else if `m'>1 {c -(}
        local labelvalues `labelvalues' `m' "`label`m''"
        local metlist `metlist' `metlabel`m''
        {c )-}
        {c )-}
        else {c -(}
        local metlabel`m' = "``m''"
        if `m'==1 local metlist `metlabel`m''
        else if `m'>=2 local metlist `metlist' `metlabel`m''
        {c )-}
        {c )-}
        if `labelchange'==1 {c -(}
        label define methodlab `labelvalues'
        label values `method' methodlab
        {c )-}
        local valmethod = "`metlist'"
        forvalues i=1/`nmethod' {c -(}
        local m`i' = "``i''"
        {c )-}
        local string = 0
        capture confirm numeric variable `method'
        if _rc local string = 1
        if `string' == 0 {c -(}
        qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        {c )-}
        else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
        {c )-}
        else if "`methodlabels'" == "1" {c -(}
        qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
        {c )-}
        char _dta[siman_format] "format 3: long-wide"
        char _dta[siman_targetformat] "long"
        char _dta[siman_methodformat] "wide"
        char _dta[siman_nformat] 3
        forvalues i=1/`nummethod' {c -(}
        char _dta[siman_m`i'] `i'
        if `i'==1 local siman_method `i'
        else if `i'>=2 local siman_method `siman_method' `i'
        {c )-}
        char _dta[siman_estimate] `estimate'
        char _dta[siman_se] `se'
        char _dta[siman_df] `df'
        char _dta[siman_ci] `ci'
        char _dta[siman_p] `p'
        char _dta[siman_true] `true'
        if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        if "`se'"!="" char _dta[siman_sevars] `se'
        if "`df'"!="" char _dta[siman_dfvars] `df'
        if "`ci'"!="" char _dta[siman_civars] `ci'
        if "`p'"!="" char _dta[siman_pvars] `p'
        if "`true'"!="" char _dta[siman_truevars] `true'
        char _dta[siman_method] "`siman_valmethod'"
        char _dta[siman_descriptiontype] "stub"
        if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        char _dta[siman_cidescriptiontype] "stubs"
        if mi("`describe") siman_describe
        {c )-}
        else if `nformat'==1 & `nmethod'==0 {c -(}
        di as error "Can not reshape targets to wide format"
        exit 498
        {c )-}
        {c )-}
      - else
      - if "`longlong'"!="" {c -(}
      = if "longlong"!="" {c -(}
      - if `nformat'==3 {c -(}
      = if 3==3 {c -(}
      - if `methodlabels' == 1 local valmethod "`metlist'"
      = if 0 == 1 local valmethod ""
      - qui tokenize "`valmethod'"
      = qui tokenize "peto g2"
      - if `nmethod'!=0 {c -(}
      = if 2!=0 {c -(}
      - forvalues v=1/`nummethod' {c -(}
      = forvalues v=1/2 {c -(}
      - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
      = if substr("peto",strlen("peto"),1)=="_" {c -(}
        local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
        if `v'==1 local valmethod `valmethod`v''
        else if `v'>=2 local valmethod `valmethod' `valmethod`v''
        {c )-}
      - {c )-}
      - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
      = if substr("g2",strlen("g2"),1)=="_" {c -(}
        local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
        if `v'==1 local valmethod `valmethod`v''
        else if `v'>=2 local valmethod `valmethod' `valmethod`v''
        {c )-}
      - {c )-}
      - {c )-}
      - local string = 0
      - forvalues i=1/`nmethod' {c -(}
      = forvalues i=1/2 {c -(}
      - qui capture confirm number `m`i''
      = qui capture confirm number peto
      - if _rc {c -(}
      - local string = 1
      - {c )-}
      - {c )-}
      - qui capture confirm number `m`i''
      = qui capture confirm number g2
      - if _rc {c -(}
      - local string = 1
      - {c )-}
      - {c )-}
      - if "`estchange'" == "1" local estimateunderscore = "`estvars'"
      = if "" == "1" local estimateunderscore = "exp"
      - if "`sechange'" == "1" local seunderscore = "`sevars'"
      = if "" == "1" local seunderscore = "var2"
      - if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
      = if ("" != "1" & "" != "1") local optionlist exp var2   
      - if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
      = if ("" == "1" & "" != "1") local optionlist  var2   
      - if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
      = if ("" != "1" & "" == "1") local optionlist exp    
      - if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
      = if ("" == "1" & "" == "1") local optionlist     
      - local optionlistreshape `optionlist'
      = local optionlistreshape exp var2
      - local exclude "`true'"
      = local exclude "theta"
      - local optionlistreshape: list optionlistreshape - exclude
      - local methodname: char _dta[ReS_j]
      - if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
      = if mi("") | "" == "_j" | "" == "mcse" local methodname "method"
      - if "`methodlables'" == "1" local methodreshape "`methodvalues'"
      = if "" == "1" local methodreshape ""
      - else local methodreshape "`valmethod'"
      = else local methodreshape "peto g2"
      - if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
      = if "stub" == "stub" | 0 == 1 {c -(}
      - local trueindgm = strpos("`dgm'","`true'")
      = local trueindgm = strpos("theta rho pc k","theta")
      - if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
      = if 1 == 0 local optionlistreshape exp var2 theta
      - else local optionlistreshape `optionlist'
      = else local optionlistreshape exp var2
      - if `truenumber' == 1 local optionlistreshape `optionlist'
      = if 0 == 1 local optionlistreshape exp var2
      - if "`ntruestub'" == "0" local optionlistreshape `optionlist'
      = if "0" == "0" local optionlistreshape exp var2
      - if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
      = if 1 == 0 & 0<=1 & 2!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
        {c )-}
      - else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
      = else if 1 == 1 & 0<=1 & 2!=0 {c -(}
      - qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
      = qui reshape long "exp var2", i(v1 theta rho pc k ) j(method "peto g2") string
        {hline 74} begin reshape {hline}
        - u_mi_not_mi_set reshape other
        - if _caller() <= 10 {c -(}
          reshape_10 `0'
          exit
          {c )-}
        - if _caller() >= 12 {c -(}
        - global ReS_Call : di "version " string(_caller()) ":"
        - {c )-}
        - version 5.0, missing
        - if "`1'"=="clear" {c -(}
        = if "long"=="clear" {c -(}
          char _dta[ReS_ver]
          char _dta[ReS_i]
          char _dta[ReS_j]
          char _dta[ReS_jv]
          char _dta[ReS_Xij]
          char _dta[Res_Xi]
          char _dta[ReS_atwl]
          char _dta[ReS_str]
          local xijn : char _dta[ReS_Xij_n]
          if "`xijn'" != "" {c -(}
          forvalues i = 1/`xijn' {c -(}
          char _dta[ReS_Xij_wide`i']
          char _dta[ReS_Xij_long`i']
          {c )-}
          char _dta[ReS_Xij_n]
          {c )-}
          exit
          {c )-}
        - if "`1'"=="wide" | "`1'"=="long" {c -(}
        = if "long"=="wide" | "long"=="long" {c -(}
        - DoNew `*'
        = DoNew long exp var2 , i(v1 theta rho pc k ) j(method peto g2 ) string
        - exit
        {hline 76} end reshape {hline}
      - {c )-}
      - else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
      = else if 0>1 & 0!=. & 2==0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
        {c )-}
      - else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
      = else if 1 == 0 & 0>1 & 0!=. & 2!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
        {c )-}
      - else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
      = else if 1 == 1 & 0>1 & 0!=. & 2!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
        {c )-}
      - {c )-}
      - else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
      = else if "stub" == "variable" & 0 == 0 {c -(}
        if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
        {c )-}
        else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
        {c )-}
        else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
        {c )-}
        else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
        {c )-}
        else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
        {c )-}
        {c )-}
      - foreach u of var * {c -(}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("v1",strlen("v1"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("theta",strlen("theta"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("rho",strlen("rho"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("pc",strlen("pc"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("k",strlen("k"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("method",strlen("method"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("exp",strlen("exp"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("var2",strlen("var2"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
      = if substr("__000000",strlen("__000000"),1)=="_" {c -(}
        local U = substr("`u'", 1, index("`u'","_") - 1)
        if "`U'" != "" {c -(}
        capture rename `u' `U'
        if _rc di as txt "problem with `u'"
        {c )-}
        {c )-}
      - {c )-}
      - char _dta[siman_format] "format 1: long-long"
      - char _dta[siman_targetformat] "long"
      - char _dta[siman_methodformat] "long"
      - char _dta[siman_nformat] 1
      - if `nmethod'!=0 char _dta[siman_method] "`methodname'"
      = if 2!=0 char _dta[siman_method] "method"
      - if `nmethod'!=0 char _dta[siman_nmethod] 1
      = if 2!=0 char _dta[siman_nmethod] 1
      - char _dta[siman_descriptiontype] "variable"
      - char _dta[siman_truedescriptiontype] "variable"
      - char _dta[siman_cidescriptiontype] "variables"
      - char _dta[siman_estimate] `estimate'
      = char _dta[siman_estimate] exp
      - char _dta[siman_se] `se'
      = char _dta[siman_se] var2
      - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
      = if "exp"!="" char _dta[siman_estvars] exp
      - if "`se'"!="" char _dta[siman_sevars] `se'
      = if "var2"!="" char _dta[siman_sevars] var2
      - if "`simananalyserun'"=="1" {c -(}
      = if ""=="1" {c -(}
        preserve
        qui tempfile sortperf
        qui drop if `rep'<0
        qui save `sortperf'
        restore
        qui drop if `rep'>0
        if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
        else qui gsort -`rep' `dgm' `target'
        qui append using `sortperf'
        {c )-}
      - if mi("`describe") siman_describe
      - {c )-}
      - {c )-}
      - local allthings `allthings' metlist
      = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 metlist
      - char _dta[siman_metlist] "`metlist'"
      = char _dta[siman_metlist] ""
      - char _dta[siman_allthings] `allthings'
      = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 metlist
      - if `dgmcreated' == 1 qui drop dgm
      = if 0 == 1 qui drop dgm
      {hline 72} end siman_reshape {hline}
    - if `methodcreated' == 0 local method method
    = if 0 == 0 local method method
    - else local method `method'
    = else local method method
    - {c )-}
    - qui sort `dgm' `target' `method' `touse'
    = qui sort theta rho pc k  method __000000
    - capture by `dgm' `target' `method': assert `touse'==`touse'[_n-1] if _n>1
    = capture by theta rho pc k  method: assert __000000==__000000[_n-1] if _n>1
    - if _rc == 9 {c -(}
      di as error "The 'if' option can not be applied to 'rep' in siman analyse."
      exit 498
      {c )-}
    - restore
    - qui keep if `touse'
    = qui keep if __000000
    - qui unab allnames : *
      {hline 79} begin unab {hline}
      - version 6
      - gettoken user 0: 0, parse(" :")
      - gettoken colon 0: 0, parse(" :")
      - if `"`colon'"' != ":" {c -(} error 198 {c )-}
      = if `":"' != ":" {c -(} error 198 {c )-}
      - syntax [varlist(default=empty)] [, MIN(integer 1) MAX(integer 120000) NAME(string)]
      - c_local `user' `varlist'
      = c_local allnames v1 k exppeto expg2 var2peto var2g2 rho theta pc __000000
      - local n : word count `varlist'
      = local n : word count v1 k exppeto expg2 var2peto var2g2 rho theta pc __000000
      - if `n'>=`min' & `n'<=`max' {c -(} exit {c )-}
      = if 10>=1 & 10<=120000 {c -(} exit {c )-}
      {hline 81} end unab {hline}
    - tempfile estimatesdata
    - qui save `estimatesdata'
    = qui save C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp
    - qui drop if `rep'<0
    = qui drop if v1<0
    - local methodstringindi = 0
    - capture confirm string variable `method'
    = capture confirm string variable method
    - if !_rc local methodstringindi = 1
    - local optionlist `estimate' `se'
    = local optionlist exp var2
    - foreach u of var * {c -(}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("v1",strlen("v1"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("k",strlen("k"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("exppeto",strlen("exppeto"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("expg2",strlen("expg2"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("var2peto",strlen("var2peto"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("var2g2",strlen("var2g2"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("rho",strlen("rho"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("theta",strlen("theta"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("pc",strlen("pc"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("__000000",strlen("__000000"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - local estchange = 0
    - if substr("`estimate'",strlen("`estimate'"),1)=="_" {c -(}
    = if substr("exp",strlen("exp"),1)=="_" {c -(}
      local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
      local estchange = 1
      {c )-}
    - local sechange = 0
    - if substr("`se'",strlen("`se'"),1)=="_" {c -(}
    = if substr("var2",strlen("var2"),1)=="_" {c -(}
      local se = substr("`se'", 1, index("`se'","_") - 1)
      local sechange = 1
      {c )-}
    - local optionlist `estimate' `se'
    = local optionlist exp var2
    - if `nformat'==1 {c -(}
    = if 3==1 {c -(}
      local methodformat : value label `method'
      qui order `rep' `dgm' `target' `method'
      qui sort `rep' `dgm' `target' `method'
      qui tab `method'
      local nmethodlabels = `r(r)'
      qui levels `method', local(levels)
      tokenize `"`levels'"'
      forvalues f = 1/`nmethodlabels' {c -(}
      if substr("``f''",strlen("``f''"),1)=="_" local g = substr("``f''", 1, index("``f''","_") - 1)
      if `methodstringindi' == 0 & `methodlabels'!=1 local methodlabel`f' = "`g'"
      else local methodlabel`f' = "``g''"
      if `f'==1 local methodlist `methodlabel`f''
      else if `f'>=2 local methodlist `methodlist' `methodlabel`f''
      {c )-}
      local estsimsum = "`estimate'"
      local sesimsum = "`se'"
      capture confirm variable _perfmeascode
      if !_rc {c -(}
      di as error "siman would like to name a variable '_perfmeascode', but that name already exists in your dataset.  Please rename your variable _perfmeascode as something else."
      exit 498
      {c )-}
      capture confirm variable _dataset
      if !_rc {c -(}
      di as error "siman would like to name a variable '_dataset', but that name already exists in your data.  Please rename your variable _dataset as something else."
      exit 498
      {c )-}
      qui simsum `estsimsum' `if', true(`true') se(`sesimsum') method(`method') id(`rep') by(`truevariable' `dgm' `target') max(20) `anything' clear mcse gen(_perfmeas) `force'
      if `methodlabels' == 0 local methodloop `metlist'
      else local methodloop `methodvalues'
      foreach v in `methodloop' {c -(}
      if !mi("`se'") {c -(}
      if substr(" `estimate'`v'",strlen(" `estimate'`v'"),1)=="_" qui rename `estimate'`v'mcse `se'`v'
      else qui rename `estimate'`v'_mcse `se'`v'
      {c )-}
      else if substr(" `estimate'`v'",strlen(" `estimate'`v'"),1)=="_" qui rename `estimate'`v'mcse se`v'
      else qui rename `estimate'`v'_mcse se`v'
      {c )-}
      local optionlistreshape `optionlist'
      local exclude "`true'"
      local optionlistreshape: list optionlistreshape - exclude
      if !mi("`metlist'") local methodreshape `metlist'
      else local methodreshape `valmethod'
      if `methodstringindi'==1 {c -(}
      qui reshape long `optionlistreshape', i(`dgm' `target' _perfmeasnum) j(`method' "`methodreshape'") string
      {c )-}
      else if `methodstringindi'==0 & `methodlabels' == 0 {c -(}
      qui reshape long `optionlistreshape', i(`dgm' `target' _perfmeasnum) j(`method' "`methodreshape'")
      label value `method' `methodformat'
      {c )-}
      else if `methodstringindi'==0 & `methodlabels' == 1 {c -(}
      qui reshape long `optionlistreshape', i(`dgm' `target' _perfmeasnum) j(`method' "`methodvalues'")
      label value `method' `methodformat'
      {c )-}
      {c )-}
    - else if `nformat'==3 {c -(}
    = else if 3==3 {c -(}
    - qui order `rep' `dgm' `target'
    = qui order v1 theta rho pc k 
      {hline 78} begin order {hline}
      - version 11
      - if (_caller()<11) {c -(}
        _order `macval(0)'
        exit
        {c )-}
      - syntax varlist[, Before(varname) After(varname) first last SEQuential ALPHAbetic]
      - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'" == "" & "`alphabetic'" == "" & "`sequential'" == "") {c -(}
      = if (`""' == "" & `""' == "" & "" == "" & "" == "" & "" == "" & "" == "") {c -(}
      - _order `macval(0)'
      = _order v1 theta rho pc k 
      - exit
      {hline 80} end order {hline}
    - qui sort `rep' `dgm' `target'
    = qui sort v1 theta rho pc k 
    - if `methodstringindi' == 0 & "`methodlabels'" == "1" local methodloop `methodvalues'
    = if 0 == 0 & "0" == "1" local methodloop 
    - else local methodloop `valmethod'
    = else local methodloop peto g2
    - foreach v in `methodloop' {c -(}
    = foreach v in peto g2 {c -(}
    - if substr("`v'",strlen("`v'"),1)=="_" local v = substr("`v'", 1, index("`v'","_") - 1)
    = if substr("peto",strlen("peto"),1)=="_" local v = substr("peto", 1, index("peto","_") - 1)
    - local estlist`v' `estvars'`v'
    = local estlistpeto exppeto
    - local estlist `estlist' `estlist`v''
    = local estlist  exppeto
    - local selist`v' `sevars'`v'
    = local selistpeto var2peto
    - local selist `selist' `selist`v''
    = local selist  var2peto
    - {c )-}
    - if substr("`v'",strlen("`v'"),1)=="_" local v = substr("`v'", 1, index("`v'","_") - 1)
    = if substr("g2",strlen("g2"),1)=="_" local v = substr("g2", 1, index("g2","_") - 1)
    - local estlist`v' `estvars'`v'
    = local estlistg2 expg2
    - local estlist `estlist' `estlist`v''
    = local estlist exppeto expg2
    - local selist`v' `sevars'`v'
    = local selistg2 var2g2
    - local selist `selist' `selist`v''
    = local selist var2peto var2g2
    - {c )-}
    - qui simsum `estlist' `if', true(`true') se(`selist') id(`rep') by(`truevariable' `dgm' `target') max(20) `anything' clear mcse gen(_perfmeas) `force'
    = qui simsum exppeto expg2 , true(theta) se(var2peto var2g2) id(v1) by( theta rho pc k ) max(20)  clear mcse gen(_perfmeas) 
      {hline 77} begin simsum {hline}
      - version 10
      - if _caller() >= 12 {c -(}
      - local hidden hidden
      - {c )-}
      - return `hidden' local simsum_version "2.0.3"
      = return hidden local simsum_version "2.0.3"
      - syntax varlist [if] [in], [true(string) METHodvar(varname) id(varlist) se(varlist) SEPrefix(string) SESuffix(string) graph GRAPH2(string) noMEMcheck max(real 10) semax(real 100) dropbig nolistbig listmiss level(real $S_level) by(varlist) mcse robust MODELSEMethod(string) ref(string) null(real 0) df(string) DFPrefix(string) DFSuffix(string) bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power force nolist listsep format(string) sepby(varlist) ABbreviate(passthru) clear saving(string) gen(string) TRANSpose debug ]
      = syntax varlist [if] [in], [true(string) METHodvar(varname) id(varlist) se(varlist) SEPrefix(string) SESuffix(string) graph GRAPH2(string) noMEMcheck max(real 10) semax(real 100) dropbig nolistbig listmiss level(real 95) by(varlist) mcse robust MODELSEMethod(string) ref(string) null(real 0) df(string) DFPrefix(string) DFSuffix(string) bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power force nolist listsep format(string) sepby(varlist) ABbreviate(passthru) clear saving(string) gen(string) TRANSpose debug ]
      - if "`modelsemethod'"=="" local modelsemethod rmse
      = if ""=="" local modelsemethod rmse
      - if "`modelsemethod'"!="rmse" & "`modelsemethod'"!="mean" {c -(}
      = if "rmse"!="rmse" & "rmse"!="mean" {c -(}
        di as error "Syntax: modelsemethod(rmse|mean)"
        exit 498
        {c )-}
      - if !mi("`graph2'") local graph graph
      = if !mi("") local graph graph
      - if "`by'"!="" {c -(}
      = if "theta rho pc k"!="" {c -(}
      - local byby by(`by')
      = local byby by(theta rho pc k)
      - local byvar `by'
      = local byvar theta rho pc k
      - {c )-}
      - else {c -(}
        tempvar byvar
        gen `byvar'=0
        {c )-}
      - local i 0
      - foreach beta of varlist `varlist' {c -(}
      = foreach beta of varlist exppeto expg2 {c -(}
      - local ++i
      - local beta`i' `beta'
      = local beta1 exppeto
      - local betalist `betalist' `beta'
      = local betalist  exppeto
      - {c )-}
      - local ++i
      - local beta`i' `beta'
      = local beta2 expg2
      - local betalist `betalist' `beta'
      = local betalist exppeto expg2
      - {c )-}
      - local m `i'
      = local m 2
      - if "`seprefix'"!="" | "`sesuffix'"!="" {c -(}
      = if ""!="" | ""!="" {c -(}
        if "`se'"!="" {c -(}
        di as error "Can't specify se() with seprefix() or sesuffix()"
        exit 498
        {c )-}
        forvalues i=1/`m' {c -(}
        local se`i' `seprefix'`beta`i''`sesuffix'
        confirm var `se`i''
        local selist `selist' `se`i''
        {c )-}
        {c )-}
      - else if "`se'"!="" {c -(}
      = else if "var2peto var2g2"!="" {c -(}
      - local i 0
      - foreach sevar of varlist `se' {c -(}
      = foreach sevar of varlist var2peto var2g2 {c -(}
      - local ++i
      - local se`i' `sevar'
      = local se1 var2peto
      - local selist `selist' `se`i''
      = local selist  var2peto
      - {c )-}
      - local ++i
      - local se`i' `sevar'
      = local se2 var2g2
      - local selist `selist' `se`i''
      = local selist var2peto var2g2
      - {c )-}
      - if `i'<`m' {c -(}
      = if 2<2 {c -(}
        di as error "Fewer variables in se(`se') than in `betalist'"
        exit 498
        {c )-}
      - if `i'>`m' {c -(}
      = if 2>2 {c -(}
        di as error "More variables in se(`se') than in `betalist'"
        exit 498
        {c )-}
      - {c )-}
      - if "`dfprefix'"!="" | "`dfsuffix'"!="" {c -(}
      = if ""!="" | ""!="" {c -(}
        if "`df'"!="" {c -(}
        di as error "Can't specify df() with dfprefix() or dfsuffix()"
        exit 498
        {c )-}
        forvalues i=1/`m' {c -(}
        local df`i' `dfprefix'`beta`i''`dfsuffix'
        confirm var `df`i''
        local dflist `dflist' `df`i''
        {c )-}
        {c )-}
      - else if "`df'"!="" {c -(}
      = else if ""!="" {c -(}
        cap confirm number `df'
        if !_rc local dftype number
        else {c -(}
        cap assert `df'==`df'
        if !_rc local dftype varname
        else {c -(}
        cap confirm var `df'
        if !_rc local dftype varlist
        else local dftype error
        {c )-}
        {c )-}
        if inlist("`dftype'","number","varname") {c -(}
        forvalues i=1/`m' {c -(}
        local df`i' `df'
        {c )-}
        if "`dftype'"=="varname" local dflist `df'
        cap assert !mi(`df')
        if _rc di as error "Warning: missing values in df()"
        {c )-}
        else if "`dftype'"=="varlist" {c -(}
        local i 0
        foreach dfvar of varlist `df' {c -(}
        local ++i
        local df`i' `dfvar'
        local dflist `dflist' `dfvar'
        cap assert !mi(`df`i'')
        if _rc di as error "Warning: missing values in df()"
        {c )-}
        if `i'!=`m' local dftype error
        {c )-}
        if "`dftype'"=="error" {c -(}
        di as error "df must contain number, string or varlist of same length as estimates"
        exit 498
        {c )-}
        {c )-}
      - local allpms bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power
      - foreach pm of local allpms {c -(}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  bsims
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  sesims
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  bias
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  mean
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  empse
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  relprec
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  mse
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  rmse
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  modelse
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  ciwidth
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  relerror
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  cover
      - {c )-}
      - if !mi("``pm''") local origoutput `origoutput' `pm'
      = if !mi("") local origoutput  power
      - {c )-}
      - if mi("`origoutput'") {c -(}
      = if mi("") {c -(}
      - foreach pm of local allpms {c -(}
      - local `pm' `pm'
      = local bsims bsims
      - {c )-}
      - local `pm' `pm'
      = local sesims sesims
      - {c )-}
      - local `pm' `pm'
      = local bias bias
      - {c )-}
      - local `pm' `pm'
      = local mean mean
      - {c )-}
      - local `pm' `pm'
      = local empse empse
      - {c )-}
      - local `pm' `pm'
      = local relprec relprec
      - {c )-}
      - local `pm' `pm'
      = local mse mse
      - {c )-}
      - local `pm' `pm'
      = local rmse rmse
      - {c )-}
      - local `pm' `pm'
      = local modelse modelse
      - {c )-}
      - local `pm' `pm'
      = local ciwidth ciwidth
      - {c )-}
      - local `pm' `pm'
      = local relerror relerror
      - {c )-}
      - local `pm' `pm'
      = local cover cover
      - {c )-}
      - local `pm' `pm'
      = local power power
      - {c )-}
      - {c )-}
      - if "`se1'"=="" {c -(}
      = if "var2peto"=="" {c -(}
        foreach perfmeas in sesims modelse ciwidth relerror cover power {c -(}
        if !mi("``perfmeas''") local droppm1 `droppm1' `perfmeas'
        local `perfmeas'
        {c )-}
        if !mi("`droppm1'") {c -(}
        if !mi("`origoutput'") di as error "" _c
        else di as text "" _c
        di "SE not reported, so ignoring performance measures: `droppm1'"
        {c )-}
        {c )-}
      - if "`true'"=="" {c -(}
      = if "theta"=="" {c -(}
        foreach perfmeas in bias mse rmse cover {c -(}
        if !mi("``perfmeas''") local droppm2 `droppm2' `perfmeas'
        local `perfmeas'
        {c )-}
        if !mi("`droppm2'") {c -(}
        if !mi("`origoutput'") di as error "" _c
        else di as text "" _c
        di "true() not specified, so ignoring performance measures: `droppm2'"
        {c )-}
        {c )-}
      - foreach pm of local allpms {c -(}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("bsims") local output  bsims
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("sesims") local output bsims sesims
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("bias") local output bsims sesims bias
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("mean") local output bsims sesims bias mean
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("empse") local output bsims sesims bias mean empse
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("relprec") local output bsims sesims bias mean empse relprec
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("mse") local output bsims sesims bias mean empse relprec mse
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("rmse") local output bsims sesims bias mean empse relprec mse rmse
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("modelse") local output bsims sesims bias mean empse relprec mse rmse modelse
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("ciwidth") local output bsims sesims bias mean empse relprec mse rmse modelse ciwidth
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("relerror") local output bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("cover") local output bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover
      - {c )-}
      - if !mi("``pm''") local output `output' `pm'
      = if !mi("power") local output bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power
      - {c )-}
      - if "`output'"=="" {c -(}
      = if "bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power"=="" {c -(}
        di as error "No performance measures specified"
        exit 498
        {c )-}
      - if inlist("`output'","bsims","sesims","bims sesims") & "`mcse'"=="mcse" {c -(}
      = if inlist("bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power","bsims","sesims","bims sesims") & "mcse"=="mcse" {c -(}
        di as error "Only bsims and/or sesims specified - mcse ignored"
        local mcse
        {c )-}
      - if "`methodvar'"!="" {c -(}
      = if ""!="" {c -(}
        if `m'>1 {c -(}
        di as error "Only one estimate variable allowed with long format"
        exit 498
        {c )-}
        if "`id'"=="" {c -(}
        di as error "id() is required with long format"
        exit 498
        {c )-}
        {c )-}
      - if "`list'"=="nolist" & "`clear'"=="" & "`saving'"=="" {c -(}
      = if ""=="nolist" & "clear"=="" & ""=="" {c -(}
        di as error "No output requested! Please specify clear or saving(), or don't specify nolist"
        exit 498
        {c )-}
      - if "`gen'"=="" local gen perfmeas
      = if "_perfmeas"=="" local gen perfmeas
      - cap confirm new variable `gen'num
      = cap confirm new variable _perfmeasnum
      - local rc1=_rc
      - cap confirm new variable `gen'code
      = cap confirm new variable _perfmeascode
      - if _rc | `rc1' {c -(}
      = if _rc | 0 {c -(}
        di as error as smcl "{c -(}p{c )-}Variable `gen'num and/or `gen'code already exists. This is probably because the current data are -simsum- output. If this is what you want, use the gen() option.{c -(}p_end{c )-}"
        exit 498
        {c )-}
      - if "`memcheck'"!="nomemcheck" {c -(}
      = if ""!="nomemcheck" {c -(}
      - qui desc, short
      - if r(width)/r(widthmax)>0.45 {c -(}
        di as error "simsum is memory-hungry and can fail slowly if memory is more than 50% occupied."
        di as error as smcl "Please increase the memory using {c -(}help memory:set memory{c )-}, or use the nomemcheck option."
        exit 498
        {c )-}
      - {c )-}
      - marksample touse, novarlist
      - qui count if `touse'
      = qui count if __000001
      - if r(N)==0 {c -(}
        di in red "no observations"
        exit 2000
        {c )-}
      - if "`bias'"=="bias" | "`mse'"=="mse" | "`rmse'"=="rmse" | "`cover'"=="cover" {c -(}
      = if "bias"=="bias" | "mse"=="mse" | "rmse"=="rmse" | "cover"=="cover" {c -(}
      - tempvar truevar
      - qui gen `truevar' = `true'
      = qui gen __000002 = theta
      - qui count if missing(`truevar') & `touse'
      = qui count if missing(__000002) & __000001
      - if r(N)>0 {c -(}
        di as error "Missing values found for true value `true'"
        exit 498
        {c )-}
      - {c )-}
      - preserve
      - qui keep if `touse'
      = qui keep if __000001
      - if "`methodvar'"!="" {c -(}
      = if ""!="" {c -(}
        local origformat long
        local betastub `betalist'
        qui levelsof `methodvar', local(methods)
        local label : val label `methodvar'
        local i 0
        foreach method in `methods' {c -(}
        if strpos("`method'"," ") {c -(}
        di as error `"Sorry, I can't handle method = "`method'". Please recode it without spaces."'
        exit 498
        {c )-}
        if strtoname("b`method'")!="b`method'" {c -(}
        di as error `"Sorry, I can't handle method = "`method'". Please recode it using standard characters."'
        exit 498
        {c )-}
        local ++i
        local beta`i' `betalist'`method'
        local newbetalist `newbetalist' `betalist'`method'
        if "`selist'"!="" local se`i' `selist'`method'
        if "`selist'"!="" local newselist `newselist' `selist'`method'
        if "`dftype'"=="number" local df`i' `df'
        if "`dftype'"=="varname" local df`i' `dflist'`method'
        if "`label'"!="" local label`i' : label `label' `method'
        else local label`i' "`method'"
        if "`label`i''"=="`ref'" local refmethod `i'
        {c )-}
        local m `i'
        if "`refmethod'"=="" {c -(}
        if "`ref'"!="" {c -(}
        if "`label'"=="" local offenders values
        else local offenders value labels
        di as error "Error in ref(): `ref' is not one of the `offenders' of `methodvar'"
        exit 498
        {c )-}
        else local refmethod 1
        {c )-}
        di as text "Reshaping data to wide format ..."
        keep `betalist' `selist' `dflist' `by' `byvar' `id' `methodvar' `touse' `truevar'
        cap confirm string var `methodvar'
        if _rc==0 local string string
        local bfmt0: format `betalist'
        qui reshape wide `betalist' `selist' `dflist', i(`by' `id') j(`methodvar') `string'
        local betalist `newbetalist'
        local selist `newselist'
        {c )-}
      - else {c -(}
      - local origformat wide
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - local label`i' : var label `beta`i''
      = local label1 : var label exppeto
      - if "`label`i''"=="" local label`i' "`beta`i''"
      = if "exp.Peto"=="" local label1 "exppeto"
      - if "`beta`i''"=="`ref'" local refmethod `i'
      = if "exppeto"=="" local refmethod 1
      - {c )-}
      - local label`i' : var label `beta`i''
      = local label2 : var label expg2
      - if "`label`i''"=="" local label`i' "`beta`i''"
      = if "exp.G2"=="" local label2 "expg2"
      - if "`beta`i''"=="`ref'" local refmethod `i'
      = if "expg2"=="" local refmethod 2
      - {c )-}
      - if "`refmethod'"=="" {c -(}
      = if ""=="" {c -(}
      - if "`ref'"!="" {c -(}
      = if ""!="" {c -(}
        di as error "ref(`ref') is not one of the listed point estimates"
        exit 498
        {c )-}
      - else local refmethod 1
      - {c )-}
      - keep `betalist' `selist' `dflist' `by' `byvar' `id' `touse' `truevar'
      = keep exppeto expg2 var2peto var2g2  theta rho pc k theta rho pc k v1 __000001 __000002
      - {c )-}
      - if mi("`force'") {c -(}
      = if mi("") {c -(}
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - tempvar betafreq`i'
      = tempvar betafreq1
      - egen `betafreq`i'' = count(`beta`i''), `byby'
      = egen __000003 = count(exppeto), by(theta rho pc k)
      - cap assert `betafreq`i''!=1
      = cap assert __000003!=1
      - if _rc {c -(}
        di as error "Only one observation for `beta`i''. If this is what you intended, use the force option."
        exit 498
        {c )-}
      - {c )-}
      - tempvar betafreq`i'
      = tempvar betafreq2
      - egen `betafreq`i'' = count(`beta`i''), `byby'
      = egen __000004 = count(expg2), by(theta rho pc k)
      - cap assert `betafreq`i''!=1
      = cap assert __000004!=1
      - if _rc {c -(}
        di as error "Only one observation for `beta`i''. If this is what you intended, use the force option."
        exit 498
        {c )-}
      - {c )-}
      - {c )-}
      - tempvar missing
      - gen `missing' = 0
      = gen __000005 = 0
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - qui replace `missing' = missing(`beta`i'') & `touse'
      = qui replace __000005 = missing(exppeto) & __000001
      - if "`se`i''"!="" qui replace `missing' = 1 if missing(`se`i'') & `touse'
      = if "var2peto"!="" qui replace __000005 = 1 if missing(var2peto) & __000001
      - if "`se`i''"!="" qui replace `missing' = 1 if `se`i''==0 & `touse'
      = if "var2peto"!="" qui replace __000005 = 1 if var2peto==0 & __000001
      - qui count if `missing'
      = qui count if __000005
      - if r(N)>0 {c -(}
        if "`se`i''"!="" {c -(}
        qui replace `missing' = missing(`beta`i'') & missing(`se`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have both estimate and SE missing"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        di as text "--> no action taken"
        {c )-}
        qui replace `missing' = !missing(`se`i'') & missing(`beta`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have estimate missing and SE observed"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `se`i'' = . if `missing'
        di as text "--> SE changed to missing"
        {c )-}
        qui replace `missing' = missing(`se`i'') & !missing(`beta`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have estimate observed and SE missing"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `beta`i'' = . if `missing'
        di as text "--> estimate changed to missing"
        {c )-}
        qui replace `missing' = (`se`i''==0) & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have zero values of SE"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `beta`i'' = . if `missing'
        qui replace `se`i'' = . if `missing'
        di as text "--> estimate and SE changed to missing"
        {c )-}
        {c )-}
        {c )-}
      - {c )-}
      - qui replace `missing' = missing(`beta`i'') & `touse'
      = qui replace __000005 = missing(expg2) & __000001
      - if "`se`i''"!="" qui replace `missing' = 1 if missing(`se`i'') & `touse'
      = if "var2g2"!="" qui replace __000005 = 1 if missing(var2g2) & __000001
      - if "`se`i''"!="" qui replace `missing' = 1 if `se`i''==0 & `touse'
      = if "var2g2"!="" qui replace __000005 = 1 if var2g2==0 & __000001
      - qui count if `missing'
      = qui count if __000005
      - if r(N)>0 {c -(}
        if "`se`i''"!="" {c -(}
        qui replace `missing' = missing(`beta`i'') & missing(`se`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have both estimate and SE missing"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        di as text "--> no action taken"
        {c )-}
        qui replace `missing' = !missing(`se`i'') & missing(`beta`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have estimate missing and SE observed"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `se`i'' = . if `missing'
        di as text "--> SE changed to missing"
        {c )-}
        qui replace `missing' = missing(`se`i'') & !missing(`beta`i'') & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have estimate observed and SE missing"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `beta`i'' = . if `missing'
        di as text "--> estimate changed to missing"
        {c )-}
        qui replace `missing' = (`se`i''==0) & `touse'
        qui count if `missing'
        if r(N)>0 {c -(}
        di as text _new "Warning for method `label`i'': " as result r(N) as text " observation(s) have zero values of SE"
        if "`listmiss'"=="listmiss" list `by' `id' `beta`i'' `se`i'' if `missing', sepby(`sepby')
        qui replace `beta`i'' = . if `missing'
        qui replace `se`i'' = . if `missing'
        di as text "--> estimate and SE changed to missing"
        {c )-}
        {c )-}
        {c )-}
      - {c )-}
      - drop `missing'
      = drop __000005
      - if "`graph'"=="graph" {c -(}
      = if ""=="graph" {c -(}
        tempfile graph
        set graphics off
        forvalues i=1/`m' {c -(}
        cap gr7 `se`i'' `beta`i'', xla yla b2title("`beta`i''") l1title("`se`i''") t1title("`label`i''") saving(`graph'`i', replace) `graph2'
        if !_rc local gphlist `gphlist' `graph'`i'
        {c )-}
        if "`selist'"=="" local title Point estimates by method
        else local title Std error vs. point estimate by method
        set graphics on
        gr7 using `gphlist', title(`title')
        {c )-}
      - tempvar infb infse
      - gen `infb' = 0
      = gen __000006 = 0
      - gen `infse' = 0
      = gen __000007 = 0
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - qui summ `beta`i''
      = qui summ exppeto
      - if r(sd)<=0 {c -(}
        di as text "Warning for method `label`i'': estimate doesn't vary"
        continue
        {c )-}
      - qui replace `infb' = (abs(`beta`i''-r(mean))/r(sd) > `max') & !missing(`beta`i'')
      = qui replace __000006 = (abs(exppeto-r(mean))/r(sd) > 20) & !missing(exppeto)
      - if "`se`i''"!="" {c -(}
      = if "var2peto"!="" {c -(}
      - qui summ `se`i''
      = qui summ var2peto
      - if r(mean)<=0 {c -(}
        di as text "Warning for method `label`i'': `se`i'' is always 0"
        {c )-}
      - else qui replace `infse' = (`se`i''/r(mean) > `semax') & !missing(`se`i'')
      = else qui replace __000007 = (var2peto/r(mean) > 100) & !missing(var2peto)
      - {c )-}
      - qui count if `infb'
      = qui count if __000006
      - local ninfb = r(N)
      - qui count if `infse'
      = qui count if __000007
      - local ninfse = r(N)
      - if `ninfb'+`ninfse' > 0 {c -(}
      = if 0+0 > 0 {c -(}
        local text = cond("`dropbig'"=="dropbig","text","error")
        local warning = cond("`dropbig'"=="dropbig","Warning","Error")
        di as `text' `"`warning' for method `label`i'': "' as result `ninfb' as `text' `" observation(s) have standardised estimate > `max'"' _c
        if "`se`i''"!="" di as `text' `" and "' as result `ninfse' as `text' `" observation(s) have scaled SE > `semax'"'
        else di
        if "`listbig'"!="nolistbig" l `by' `id' `beta`i'' `se`i'' if `infb'|`infse', sepby(`sepby')
        else di as `text' "--> remove nolistbig option to list these observation(s)"
        if "`dropbig'"=="dropbig" {c -(}
        qui replace `beta`i'' = . if `infb'|`infse'
        if "`se`i''"!="" qui replace `se`i'' = . if `infb'|`infse'
        di as text `"--> estimate "' _c
        if "`se`i''"!="" di as text `"and SE "' _c
        di as text `"have been changed to missing values for these observation(s)"'
        {c )-}
        else {c -(}
        di as error "--> use dropbig option to drop these observation(s)"
        di as error "--> use max() option to change acceptable limit of point estimates"
        if "`se'"!="" di as error "--> use semax() option to change acceptable limit of standard errors"
        exit 498
        {c )-}
        {c )-}
      - {c )-}
      - qui summ `beta`i''
      = qui summ expg2
      - if r(sd)<=0 {c -(}
        di as text "Warning for method `label`i'': estimate doesn't vary"
        continue
        {c )-}
      - qui replace `infb' = (abs(`beta`i''-r(mean))/r(sd) > `max') & !missing(`beta`i'')
      = qui replace __000006 = (abs(expg2-r(mean))/r(sd) > 20) & !missing(expg2)
      - if "`se`i''"!="" {c -(}
      = if "var2g2"!="" {c -(}
      - qui summ `se`i''
      = qui summ var2g2
      - if r(mean)<=0 {c -(}
        di as text "Warning for method `label`i'': `se`i'' is always 0"
        {c )-}
      - else qui replace `infse' = (`se`i''/r(mean) > `semax') & !missing(`se`i'')
      = else qui replace __000007 = (var2g2/r(mean) > 100) & !missing(var2g2)
      - {c )-}
      - qui count if `infb'
      = qui count if __000006
      - local ninfb = r(N)
      - qui count if `infse'
      = qui count if __000007
      - local ninfse = r(N)
      - if `ninfb'+`ninfse' > 0 {c -(}
      = if 0+0 > 0 {c -(}
        local text = cond("`dropbig'"=="dropbig","text","error")
        local warning = cond("`dropbig'"=="dropbig","Warning","Error")
        di as `text' `"`warning' for method `label`i'': "' as result `ninfb' as `text' `" observation(s) have standardised estimate > `max'"' _c
        if "`se`i''"!="" di as `text' `" and "' as result `ninfse' as `text' `" observation(s) have scaled SE > `semax'"'
        else di
        if "`listbig'"!="nolistbig" l `by' `id' `beta`i'' `se`i'' if `infb'|`infse', sepby(`sepby')
        else di as `text' "--> remove nolistbig option to list these observation(s)"
        if "`dropbig'"=="dropbig" {c -(}
        qui replace `beta`i'' = . if `infb'|`infse'
        if "`se`i''"!="" qui replace `se`i'' = . if `infb'|`infse'
        di as text `"--> estimate "' _c
        if "`se`i''"!="" di as text `"and SE "' _c
        di as text `"have been changed to missing values for these observation(s)"'
        {c )-}
        else {c -(}
        di as error "--> use dropbig option to drop these observation(s)"
        di as error "--> use max() option to change acceptable limit of point estimates"
        if "`se'"!="" di as error "--> use semax() option to change acceptable limit of standard errors"
        exit 498
        {c )-}
        {c )-}
      - {c )-}
      - di as text _newline "Starting to process results ..."
      - if `level'<1 local level=`level'*100
      = if 95<1 local level=95*100
      - if "`robust'"=="robust" & ("`relprec'"=="relprec" | "`relerror'"=="relerror") {c -(}
      = if ""=="robust" & ("relprec"=="relprec" | "relerror"=="relerror") {c -(}
        forvalues i=1/`m' {c -(}
        tempvar betamean`i'
        egen `betamean`i'' = mean(`beta`i''), `byby'
        {c )-}
        {c )-}
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - tempvar crit`i'
      = tempvar crit1
      - gen `crit`i'' = -invnorm((1-`level'/100)/2)
      = gen __000008 = -invnorm((1-95/100)/2)
      - if "`df`i''"!="" qui replace `crit`i'' = invttail(`df`i'',(1-`level'/100)/2) if !mi(`df`i'')
      = if ""!="" qui replace __000008 = invttail(,(1-95/100)/2) if !mi()
      - assert !mi(`crit`i'')
      = assert !mi(__000008)
      - local collcount `collcount' bsims_`i'=`beta`i''
      = local collcount  bsims_1=exppeto
      - if "`bias'"=="bias" {c -(}
      = if "bias"=="bias" {c -(}
      - qui gen bias_`i' = `beta`i'' - `truevar'
      = qui gen bias_1 = exppeto - __000002
      - local collmean `collmean' bias_`i'
      = local collmean  bias_1
      - local collsd `collsd' biassd_`i' = bias_`i'
      = local collsd  biassd_1 = bias_1
      - {c )-}
      - if "`mean'"=="mean" {c -(}
      = if "mean"=="mean" {c -(}
      - local collmean `collmean' mean_`i' = `beta`i''
      = local collmean bias_1 mean_1 = exppeto
      - local collsd `collsd' meansd_`i' = `beta`i''
      = local collsd biassd_1 = bias_1 meansd_1 = exppeto
      - {c )-}
      - if "`relerror'"=="relerror" | "`modelse'"=="modelse" {c -(}
      = if "relerror"=="relerror" | "modelse"=="modelse" {c -(}
      - qui gen var_`i'=`se`i''^2
      = qui gen var_1=var2peto^2
      - {c )-}
      - if "`empse'"=="empse" | "`relerror'"=="relerror" | "`relprec'"=="relprec" | "`bias'"=="bias" {c -(}
      = if "empse"=="empse" | "relerror"=="relerror" | "relprec"=="relprec" | "bias"=="bias" {c -(}
      - local collsd `collsd' empse_`i'=`beta`i''
      = local collsd biassd_1 = bias_1 meansd_1 = exppeto empse_1=exppeto
      - {c )-}
      - if "`mse'"=="mse" | "`rmse'"=="rmse" {c -(}
      = if "mse"=="mse" | "rmse"=="rmse" {c -(}
      - qui gen mse_`i' = (`beta`i'' - `truevar')^2
      = qui gen mse_1 = (exppeto - __000002)^2
      - local collmean `collmean' mse_`i'
      = local collmean bias_1 mean_1 = exppeto mse_1
      - local collsd `collsd' msesd_`i'=mse_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = exppeto empse_1=exppeto msesd_1=mse_1
      - {c )-}
      - if "`relprec'"=="relprec" & `i'!=`refmethod' {c -(}
      = if "relprec"=="relprec" & 1!=1 {c -(}
        qui byvar `byvar', r(rho N) gen unique: corr `beta`refmethod'' `beta`i''
        rename Rrho_ corr_`i'
        rename RN_ ncorr_`i'
        local collsum `collsum' corr_`i' ncorr_`i'
        {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" | "`sesims'"=="sesims" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" | "sesims"=="sesims" {c -(}
      - local collcount `collcount' sesims_`i'=`se`i''
      = local collcount bsims_1=exppeto sesims_1=var2peto
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" {c -(}
      - local collmean `collmean' modelse_`i'=`se`i''
      = local collmean bias_1 mean_1 = exppeto mse_1 modelse_1=var2peto
      - local collmean `collmean' varmean_`i'=var_`i'
      = local collmean bias_1 mean_1 = exppeto mse_1 modelse_1=var2peto varmean_1=var_1
      - local collsd `collsd' varsd_`i'=var_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = exppeto empse_1=exppeto msesd_1=mse_1 varsd_1=var_1
      - local collsd `collsd' modelsesd_`i'=`se`i''
      = local collsd biassd_1 = bias_1 meansd_1 = exppeto empse_1=exppeto msesd_1=mse_1 varsd_1=var_1 modelsesd_1=var2peto
      - {c )-}
      - if "`ciwidth'"=="ciwidth" {c -(}
      = if "ciwidth"=="ciwidth" {c -(}
      - qui gen ciwidth_`i' = 2*(`crit`i'')*`se`i''
      = qui gen ciwidth_1 = 2*(__000008)*var2peto
      - local collmean `collmean' ciwidth_`i'
      = local collmean bias_1 mean_1 = exppeto mse_1 modelse_1=var2peto varmean_1=var_1 ciwidth_1
      - local collsd `collsd' ciwidthsd_`i' = ciwidth_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = exppeto empse_1=exppeto msesd_1=mse_1 varsd_1=var_1 modelsesd_1=var2peto ciwidthsd_1 = ciwidth_1
      - {c )-}
      - if "`cover'"=="cover" | "`power'"=="power" {c -(}
      = if "cover"=="cover" | "power"=="power" {c -(}
      - if "`cover'"=="cover" local collcount `collcount' bothsims_`i'=cover_`i'
      = if "cover"=="cover" local collcount bsims_1=exppeto sesims_1=var2peto bothsims_1=cover_1
      - else local collcount `collcount' bothsims_`i'=power_`i'
      = else local collcount bsims_1=exppeto sesims_1=var2peto bothsims_1=cover_1 bothsims_1=power_1
      - {c )-}
      - if "`cover'"=="cover" {c -(}
      = if "cover"=="cover" {c -(}
      - qui gen cover_`i' = 100*(abs(`beta`i''-`truevar')<(`crit`i'')*`se`i'') if !missing(`beta`i'') & !missing(`se`i'')
      = qui gen cover_1 = 100*(abs(exppeto-__000002)<(__000008)*var2peto) if !missing(exppeto) & !missing(var2peto)
      - local collmean `collmean' cover_`i'
      = local collmean bias_1 mean_1 = exppeto mse_1 modelse_1=var2peto varmean_1=var_1 ciwidth_1 cover_1
      - {c )-}
      - if "`power'"=="power" {c -(}
      = if "power"=="power" {c -(}
      - qui gen power_`i' = 100*(abs(`beta`i''-`null')>=(`crit`i'')*`se`i'') if !missing(`beta`i'') & !missing(`se`i'')
      = qui gen power_1 = 100*(abs(exppeto-0)>=(__000008)*var2peto) if !missing(exppeto) & !missing(var2peto)
      - local collmean `collmean' power_`i'
      = local collmean bias_1 mean_1 = exppeto mse_1 modelse_1=var2peto varmean_1=var_1 ciwidth_1 cover_1 power_1
      - {c )-}
      - if "`robust'"=="robust" {c -(}
      = if ""=="robust" {c -(}
        if "`empse'"=="empse" {c -(}
        tempvar empseT`i' empseB`i' empseTT`i' empseBB`i' empseTB`i'
        qui gen `empseT`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `empseB`i'' = 1
        qui gen `empseTT`i'' = `empseT`i''^2
        qui gen `empseBB`i'' = `empseB`i''^2
        qui gen `empseTB`i'' = `empseT`i''*`empseB`i''
        local collsum `collsum' `empseT`i'' `empseB`i'' `empseTT`i'' `empseTB`i'' `empseBB`i''
        {c )-}
        if "`relprec'"=="relprec" {c -(}
        tempvar relprecT`i' relprecB`i' relprecTT`i' relprecBB`i' relprecTB`i'
        qui gen `relprecT`i'' = (`beta`refmethod''-`betamean`refmethod'')^2
        qui gen `relprecB`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `relprecTT`i'' = `relprecT`i''^2
        qui gen `relprecBB`i'' = `relprecB`i''^2
        qui gen `relprecTB`i'' = `relprecT`i''*`relprecB`i''
        local collsum `collsum' `relprecT`i'' `relprecB`i'' `relprecTT`i'' `relprecTB`i'' `relprecBB`i''
        {c )-}
        if "`relerror'"=="relerror" {c -(}
        tempvar relerrorT`i' relerrorB`i' relerrorTT`i' relerrorBB`i' relerrorTB`i'
        qui gen `relerrorT`i'' = `se`i''^2
        qui gen `relerrorB`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `relerrorTT`i'' = `relerrorT`i''^2
        qui gen `relerrorBB`i'' = `relerrorB`i''^2
        qui gen `relerrorTB`i'' = `relerrorT`i''*`relerrorB`i''
        local collsum `collsum' `relerrorT`i'' `relerrorB`i'' `relerrorTT`i'' `relerrorTB`i'' `relerrorBB`i''
        {c )-}
        {c )-}
      - {c )-}
      - tempvar crit`i'
      = tempvar crit2
      - gen `crit`i'' = -invnorm((1-`level'/100)/2)
      = gen __000009 = -invnorm((1-95/100)/2)
      - if "`df`i''"!="" qui replace `crit`i'' = invttail(`df`i'',(1-`level'/100)/2) if !mi(`df`i'')
      = if ""!="" qui replace __000009 = invttail(,(1-95/100)/2) if !mi()
      - assert !mi(`crit`i'')
      = assert !mi(__000009)
      - local collcount `collcount' bsims_`i'=`beta`i''
      = local collcount bsims_1=exppeto sesims_1=var2peto bothsims_1=cover_1 bsims_2=expg2
      - if "`bias'"=="bias" {c -(}
      = if "bias"=="bias" {c -(}
      - qui gen bias_`i' = `beta`i'' - `truevar'
      = qui gen bias_2 = expg2 - __000002
      - local collmean `collmean' bias_`i'
      = local collmean bias_1 mean_1 = exppeto mse_1 modelse_1=var2peto varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2
      - local collsd `collsd' biassd_`i' = bias_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = exppeto empse_1=exppeto msesd_1=mse_1 varsd_1=var_1 modelsesd_1=var2peto ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2
      - {c )-}
      - if "`mean'"=="mean" {c -(}
      = if "mean"=="mean" {c -(}
      - local collmean `collmean' mean_`i' = `beta`i''
      = local collmean bias_1 mean_1 = exppeto mse_1 modelse_1=var2peto varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = expg2
      - local collsd `collsd' meansd_`i' = `beta`i''
      = local collsd biassd_1 = bias_1 meansd_1 = exppeto empse_1=exppeto msesd_1=mse_1 varsd_1=var_1 modelsesd_1=var2peto ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = expg2
      - {c )-}
      - if "`relerror'"=="relerror" | "`modelse'"=="modelse" {c -(}
      = if "relerror"=="relerror" | "modelse"=="modelse" {c -(}
      - qui gen var_`i'=`se`i''^2
      = qui gen var_2=var2g2^2
      - {c )-}
      - if "`empse'"=="empse" | "`relerror'"=="relerror" | "`relprec'"=="relprec" | "`bias'"=="bias" {c -(}
      = if "empse"=="empse" | "relerror"=="relerror" | "relprec"=="relprec" | "bias"=="bias" {c -(}
      - local collsd `collsd' empse_`i'=`beta`i''
      = local collsd biassd_1 = bias_1 meansd_1 = exppeto empse_1=exppeto msesd_1=mse_1 varsd_1=var_1 modelsesd_1=var2peto ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = expg2 empse_2=expg2
      - {c )-}
      - if "`mse'"=="mse" | "`rmse'"=="rmse" {c -(}
      = if "mse"=="mse" | "rmse"=="rmse" {c -(}
      - qui gen mse_`i' = (`beta`i'' - `truevar')^2
      = qui gen mse_2 = (expg2 - __000002)^2
      - local collmean `collmean' mse_`i'
      = local collmean bias_1 mean_1 = exppeto mse_1 modelse_1=var2peto varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = expg2 mse_2
      - local collsd `collsd' msesd_`i'=mse_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = exppeto empse_1=exppeto msesd_1=mse_1 varsd_1=var_1 modelsesd_1=var2peto ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = expg2 empse_2=expg2 msesd_2=mse_2
      - {c )-}
      - if "`relprec'"=="relprec" & `i'!=`refmethod' {c -(}
      = if "relprec"=="relprec" & 2!=1 {c -(}
      - qui byvar `byvar', r(rho N) gen unique: corr `beta`refmethod'' `beta`i''
      = qui byvar theta rho pc k, r(rho N) gen unique: corr exppeto expg2
      - rename Rrho_ corr_`i'
      = rename Rrho_ corr_2
      - rename RN_ ncorr_`i'
      = rename RN_ ncorr_2
      - local collsum `collsum' corr_`i' ncorr_`i'
      = local collsum  corr_2 ncorr_2
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" | "`sesims'"=="sesims" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" | "sesims"=="sesims" {c -(}
      - local collcount `collcount' sesims_`i'=`se`i''
      = local collcount bsims_1=exppeto sesims_1=var2peto bothsims_1=cover_1 bsims_2=expg2 sesims_2=var2g2
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" {c -(}
      - local collmean `collmean' modelse_`i'=`se`i''
      = local collmean bias_1 mean_1 = exppeto mse_1 modelse_1=var2peto varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = expg2 mse_2 modelse_2=var2g2
      - local collmean `collmean' varmean_`i'=var_`i'
      = local collmean bias_1 mean_1 = exppeto mse_1 modelse_1=var2peto varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = expg2 mse_2 modelse_2=var2g2 varmean_2=var_2
      - local collsd `collsd' varsd_`i'=var_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = exppeto empse_1=exppeto msesd_1=mse_1 varsd_1=var_1 modelsesd_1=var2peto ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = expg2 empse_2=expg2 msesd_2=mse_2 varsd_2=var_2
      - local collsd `collsd' modelsesd_`i'=`se`i''
      = local collsd biassd_1 = bias_1 meansd_1 = exppeto empse_1=exppeto msesd_1=mse_1 varsd_1=var_1 modelsesd_1=var2peto ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = expg2 empse_2=expg2 msesd_2=mse_2 varsd_2=var_2 modelsesd_2=var2g2
      - {c )-}
      - if "`ciwidth'"=="ciwidth" {c -(}
      = if "ciwidth"=="ciwidth" {c -(}
      - qui gen ciwidth_`i' = 2*(`crit`i'')*`se`i''
      = qui gen ciwidth_2 = 2*(__000009)*var2g2
      - local collmean `collmean' ciwidth_`i'
      = local collmean bias_1 mean_1 = exppeto mse_1 modelse_1=var2peto varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = expg2 mse_2 modelse_2=var2g2 varmean_2=var_2 ciwidth_2
      - local collsd `collsd' ciwidthsd_`i' = ciwidth_`i'
      = local collsd biassd_1 = bias_1 meansd_1 = exppeto empse_1=exppeto msesd_1=mse_1 varsd_1=var_1 modelsesd_1=var2peto ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = expg2 empse_2=expg2 msesd_2=mse_2 varsd_2=var_2 modelsesd_2=var2g2 ciwidthsd_2 = ciwidth_2
      - {c )-}
      - if "`cover'"=="cover" | "`power'"=="power" {c -(}
      = if "cover"=="cover" | "power"=="power" {c -(}
      - if "`cover'"=="cover" local collcount `collcount' bothsims_`i'=cover_`i'
      = if "cover"=="cover" local collcount bsims_1=exppeto sesims_1=var2peto bothsims_1=cover_1 bsims_2=expg2 sesims_2=var2g2 bothsims_2=cover_2
      - else local collcount `collcount' bothsims_`i'=power_`i'
      = else local collcount bsims_1=exppeto sesims_1=var2peto bothsims_1=cover_1 bsims_2=expg2 sesims_2=var2g2 bothsims_2=cover_2 bothsims_2=power_2
      - {c )-}
      - if "`cover'"=="cover" {c -(}
      = if "cover"=="cover" {c -(}
      - qui gen cover_`i' = 100*(abs(`beta`i''-`truevar')<(`crit`i'')*`se`i'') if !missing(`beta`i'') & !missing(`se`i'')
      = qui gen cover_2 = 100*(abs(expg2-__000002)<(__000009)*var2g2) if !missing(expg2) & !missing(var2g2)
      - local collmean `collmean' cover_`i'
      = local collmean bias_1 mean_1 = exppeto mse_1 modelse_1=var2peto varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = expg2 mse_2 modelse_2=var2g2 varmean_2=var_2 ciwidth_2 cover_2
      - {c )-}
      - if "`power'"=="power" {c -(}
      = if "power"=="power" {c -(}
      - qui gen power_`i' = 100*(abs(`beta`i''-`null')>=(`crit`i'')*`se`i'') if !missing(`beta`i'') & !missing(`se`i'')
      = qui gen power_2 = 100*(abs(expg2-0)>=(__000009)*var2g2) if !missing(expg2) & !missing(var2g2)
      - local collmean `collmean' power_`i'
      = local collmean bias_1 mean_1 = exppeto mse_1 modelse_1=var2peto varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = expg2 mse_2 modelse_2=var2g2 varmean_2=var_2 ciwidth_2 cover_2 power_2
      - {c )-}
      - if "`robust'"=="robust" {c -(}
      = if ""=="robust" {c -(}
        if "`empse'"=="empse" {c -(}
        tempvar empseT`i' empseB`i' empseTT`i' empseBB`i' empseTB`i'
        qui gen `empseT`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `empseB`i'' = 1
        qui gen `empseTT`i'' = `empseT`i''^2
        qui gen `empseBB`i'' = `empseB`i''^2
        qui gen `empseTB`i'' = `empseT`i''*`empseB`i''
        local collsum `collsum' `empseT`i'' `empseB`i'' `empseTT`i'' `empseTB`i'' `empseBB`i''
        {c )-}
        if "`relprec'"=="relprec" {c -(}
        tempvar relprecT`i' relprecB`i' relprecTT`i' relprecBB`i' relprecTB`i'
        qui gen `relprecT`i'' = (`beta`refmethod''-`betamean`refmethod'')^2
        qui gen `relprecB`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `relprecTT`i'' = `relprecT`i''^2
        qui gen `relprecBB`i'' = `relprecB`i''^2
        qui gen `relprecTB`i'' = `relprecT`i''*`relprecB`i''
        local collsum `collsum' `relprecT`i'' `relprecB`i'' `relprecTT`i'' `relprecTB`i'' `relprecBB`i''
        {c )-}
        if "`relerror'"=="relerror" {c -(}
        tempvar relerrorT`i' relerrorB`i' relerrorTT`i' relerrorBB`i' relerrorTB`i'
        qui gen `relerrorT`i'' = `se`i''^2
        qui gen `relerrorB`i'' = (`beta`i''-`betamean`i'')^2
        qui gen `relerrorTT`i'' = `relerrorT`i''^2
        qui gen `relerrorBB`i'' = `relerrorB`i''^2
        qui gen `relerrorTB`i'' = `relerrorT`i''*`relerrorB`i''
        local collsum `collsum' `relerrorT`i'' `relerrorB`i'' `relerrorTT`i'' `relerrorTB`i'' `relerrorBB`i''
        {c )-}
        {c )-}
      - {c )-}
      - if "`collmean'"!="" local collmean (mean) `collmean'
      = if "bias_1 mean_1 = exppeto mse_1 modelse_1=var2peto varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = expg2 mse_2 modelse_2=var2g2 varmean_2=var_2 ciwidth_2 cover_2 power_2"!="" local collmean (mean) bias_1 mean_1 = exppeto mse_1 modelse_1=var2peto varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = expg2 mse_2 modelse_2=var2g2 varmean_2=var_2 ciwidth_2 cover_2 power_2
      - if "`collsd'"!="" local collsd (sd) `collsd'
      = if "biassd_1 = bias_1 meansd_1 = exppeto empse_1=exppeto msesd_1=mse_1 varsd_1=var_1 modelsesd_1=var2peto ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = expg2 empse_2=expg2 msesd_2=mse_2 varsd_2=var_2 modelsesd_2=var2g2 ciwidthsd_2 = ciwidth_2"!="" local collsd (sd) biassd_1 = bias_1 meansd_1 = exppeto empse_1=exppeto msesd_1=mse_1 varsd_1=var_1 modelsesd_1=var2peto ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = expg2 empse_2=expg2 msesd_2=mse_2 varsd_2=var_2 modelsesd_2=var2g2 ciwidthsd_2 = ciwidth_2
      - if "`collcount'"!="" local collcount (count) `collcount'
      = if "bsims_1=exppeto sesims_1=var2peto bothsims_1=cover_1 bsims_2=expg2 sesims_2=var2g2 bothsims_2=cover_2"!="" local collcount (count) bsims_1=exppeto sesims_1=var2peto bothsims_1=cover_1 bsims_2=expg2 sesims_2=var2g2 bothsims_2=cover_2
      - if "`collsum'"!="" local collsum (sum) `collsum'
      = if "corr_2 ncorr_2"!="" local collsum (sum) corr_2 ncorr_2
      - collapse `collmean' `collsd' `collcount' `collsum', by(`byvar')
      = collapse (mean) bias_1 mean_1 = exppeto mse_1 modelse_1=var2peto varmean_1=var_1 ciwidth_1 cover_1 power_1 bias_2 mean_2 = expg2 mse_2 modelse_2=var2g2 varmean_2=var_2 ciwidth_2 cover_2 power_2 (sd) biassd_1 = bias_1 meansd_1 = exppeto empse_1=exppeto msesd_1=mse_1 varsd_1=var_1 modelsesd_1=var2peto ciwidthsd_1 = ciwidth_1 biassd_2 = bias_2 meansd_2 = expg2 empse_2=expg2 msesd_2=mse_2 varsd_2=var_2 modelsesd_2=var2g2 ciwidthsd_2 = ciwidth_2 (count) bsims_1=exppeto sesims_1=var2peto bothsims_1=cover_1 bsims_2=expg2 sesims_2=var2g2 bothsims_2=cover_2 (sum) corr_2 ncorr_2, by(theta rho pc k)
      - if !mi("`debug'") {c -(}
      = if !mi("") {c -(}
        di as input "Data after collapse:"
        l
        {c )-}
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - qui gen k_`i' = bsims_`i'/(bsims_`i'-1)
      = qui gen k_1 = bsims_1/(bsims_1-1)
      - if "`bias'"=="bias" {c -(}
      = if "bias"=="bias" {c -(}
      - qui gen bias_mcse_`i' = biassd_`i' / sqrt(bsims_`i')
      = qui gen bias_mcse_1 = biassd_1 / sqrt(bsims_1)
      - {c )-}
      - if "`mean'"=="mean" {c -(}
      = if "mean"=="mean" {c -(}
      - qui gen mean_mcse_`i' = meansd_`i' / sqrt(bsims_`i')
      = qui gen mean_mcse_1 = meansd_1 / sqrt(bsims_1)
      - {c )-}
      - if ("`empse'"=="empse" | "`relerror'"=="relerror") & "`robust'"=="" {c -(}
      = if ("empse"=="empse" | "relerror"=="relerror") & ""=="" {c -(}
      - qui gen empse_mcse_`i' = empse_`i'/sqrt(2*(bsims_`i'-1))
      = qui gen empse_mcse_1 = empse_1/sqrt(2*(bsims_1-1))
      - {c )-}
      - else if ("`empse'"=="empse") & "`robust'"=="robust" {c -(}
      = else if ("empse"=="empse") & ""=="robust" {c -(}
        qui replace `empseTT`i''=`empseTT`i''*(k_`i'^2)
        qui replace `empseTB`i''=`empseTB`i''*k_`i'
        qui replace `empseT`i'' =`empseT`i'' *k_`i'
        qui gen empse_mcse_`i' = sqrt(k_`i') * sqrt(`empseTT`i'' -2*(`empseT`i''/`empseB`i'')*`empseTB`i'' +(`empseT`i''/`empseB`i'')^2*`empseBB`i'') / `empseB`i''
        qui replace empse_mcse_`i' = empse_mcse_`i' / (2*empse_`i')
        {c )-}
      - if "`relprec'"=="relprec" {c -(}
      = if "relprec"=="relprec" {c -(}
      - if `i'!=`refmethod' {c -(}
      = if 1!=1 {c -(}
        qui gen relprec_`i' = 100 * ((empse_`refmethod'/empse_`i')^2-1)
        if "`robust'"=="" {c -(}
        qui gen relprec_mcse_`i' = 200 * (empse_`refmethod'/empse_`i')^2 * sqrt((1-(corr_`i')^2)/(ncorr_`i'-1))
        {c )-}
        else {c -(}
        qui gen relprec_mcse_`i' = 100 * sqrt(`relprecTT`i'' -2*(`relprecT`i''/`relprecB`i'')*`relprecTB`i'' +(`relprecT`i''/`relprecB`i'')^2*`relprecBB`i'') / `relprecB`i''
        {c )-}
        {c )-}
      - else {c -(}
      - qui gen relprec_`i' = .
      = qui gen relprec_1 = .
      - qui gen relprec_mcse_`i' = .
      = qui gen relprec_mcse_1 = .
      - {c )-}
      - {c )-}
      - if "`mse'"=="mse" {c -(}
      = if "mse"=="mse" {c -(}
      - qui gen mse_mcse_`i' = msesd_`i' / sqrt(bsims_`i')
      = qui gen mse_mcse_1 = msesd_1 / sqrt(bsims_1)
      - {c )-}
      - if "`rmse'"=="rmse" {c -(}
      = if "rmse"=="rmse" {c -(}
      - qui gen rmse_`i' = sqrt(mse_`i')
      = qui gen rmse_1 = sqrt(mse_1)
      - qui gen rmse_mcse_`i' = msesd_`i' / (2 * sqrt(bsims_`i') * rmse_`i')
      = qui gen rmse_mcse_1 = msesd_1 / (2 * sqrt(bsims_1) * rmse_1)
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" {c -(}
      - if "`modelsemethod'"=="rmse" {c -(}
      = if "rmse"=="rmse" {c -(}
      - qui replace modelse_`i' = sqrt(varmean_`i')
      = qui replace modelse_1 = sqrt(varmean_1)
      - qui gen modelse_mcse_`i' = varsd_`i' / sqrt(4 * sesims_`i' * varmean_`i')
      = qui gen modelse_mcse_1 = varsd_1 / sqrt(4 * sesims_1 * varmean_1)
      - {c )-}
      - else if "`modelsemethod'"=="mean" {c -(}
      = else if "rmse"=="mean" {c -(}
        qui gen modelse_mcse_`i' = modelsesd_`i' / sqrt(sesims_`i')
        {c )-}
      - {c )-}
      - if "`ciwidth'"=="ciwidth" {c -(}
      = if "ciwidth"=="ciwidth" {c -(}
      - qui gen ciwidth_mcse_`i' = ciwidthsd_`i' / sqrt(bsims_`i')
      = qui gen ciwidth_mcse_1 = ciwidthsd_1 / sqrt(bsims_1)
      - {c )-}
      - if "`relerror'"=="relerror" {c -(}
      = if "relerror"=="relerror" {c -(}
      - qui gen relerror_`i' = 100*(modelse_`i'/empse_`i'-1)
      = qui gen relerror_1 = 100*(modelse_1/empse_1-1)
      - if "`robust'"=="" qui gen relerror_mcse_`i' = 100*(modelse_`i'/empse_`i') * sqrt((modelse_mcse_`i'/modelse_`i')^2 + (empse_mcse_`i'/empse_`i')^2 )
      = if ""=="" qui gen relerror_mcse_1 = 100*(modelse_1/empse_1) * sqrt((modelse_mcse_1/modelse_1)^2 + (empse_mcse_1/empse_1)^2 )
      - else {c -(}
        qui gen relerror_mcse_`i' = sqrt(`relerrorTT`i'' -2*(`relerrorT`i''/`relerrorB`i'')*`relerrorTB`i'' +(`relerrorT`i''/`relerrorB`i'')^2*`relerrorBB`i'') / `relerrorB`i''
        qui replace relerror_mcse_`i' = relerror_mcse_`i' * 100 / (2*(1+relerror_`i'/100))
        {c )-}
      - {c )-}
      - if "`cover'"=="cover" {c -(}
      = if "cover"=="cover" {c -(}
      - qui gen cover_mcse_`i' = sqrt(cover_`i'*(100-cover_`i')/bothsims_`i') if bothsims_`i'>1
      = qui gen cover_mcse_1 = sqrt(cover_1*(100-cover_1)/bothsims_1) if bothsims_1>1
      - {c )-}
      - if "`power'"=="power" {c -(}
      = if "power"=="power" {c -(}
      - qui gen power_mcse_`i' = sqrt(power_`i'*(100-power_`i')/bothsims_`i') if bothsims_`i'>1
      = qui gen power_mcse_1 = sqrt(power_1*(100-power_1)/bothsims_1) if bothsims_1>1
      - {c )-}
      - cap drop varmean_`i'
      = cap drop varmean_1
      - cap drop varsd_`i'
      = cap drop varsd_1
      - {c )-}
      - qui gen k_`i' = bsims_`i'/(bsims_`i'-1)
      = qui gen k_2 = bsims_2/(bsims_2-1)
      - if "`bias'"=="bias" {c -(}
      = if "bias"=="bias" {c -(}
      - qui gen bias_mcse_`i' = biassd_`i' / sqrt(bsims_`i')
      = qui gen bias_mcse_2 = biassd_2 / sqrt(bsims_2)
      - {c )-}
      - if "`mean'"=="mean" {c -(}
      = if "mean"=="mean" {c -(}
      - qui gen mean_mcse_`i' = meansd_`i' / sqrt(bsims_`i')
      = qui gen mean_mcse_2 = meansd_2 / sqrt(bsims_2)
      - {c )-}
      - if ("`empse'"=="empse" | "`relerror'"=="relerror") & "`robust'"=="" {c -(}
      = if ("empse"=="empse" | "relerror"=="relerror") & ""=="" {c -(}
      - qui gen empse_mcse_`i' = empse_`i'/sqrt(2*(bsims_`i'-1))
      = qui gen empse_mcse_2 = empse_2/sqrt(2*(bsims_2-1))
      - {c )-}
      - else if ("`empse'"=="empse") & "`robust'"=="robust" {c -(}
      = else if ("empse"=="empse") & ""=="robust" {c -(}
        qui replace `empseTT`i''=`empseTT`i''*(k_`i'^2)
        qui replace `empseTB`i''=`empseTB`i''*k_`i'
        qui replace `empseT`i'' =`empseT`i'' *k_`i'
        qui gen empse_mcse_`i' = sqrt(k_`i') * sqrt(`empseTT`i'' -2*(`empseT`i''/`empseB`i'')*`empseTB`i'' +(`empseT`i''/`empseB`i'')^2*`empseBB`i'') / `empseB`i''
        qui replace empse_mcse_`i' = empse_mcse_`i' / (2*empse_`i')
        {c )-}
      - if "`relprec'"=="relprec" {c -(}
      = if "relprec"=="relprec" {c -(}
      - if `i'!=`refmethod' {c -(}
      = if 2!=1 {c -(}
      - qui gen relprec_`i' = 100 * ((empse_`refmethod'/empse_`i')^2-1)
      = qui gen relprec_2 = 100 * ((empse_1/empse_2)^2-1)
      - if "`robust'"=="" {c -(}
      = if ""=="" {c -(}
      - qui gen relprec_mcse_`i' = 200 * (empse_`refmethod'/empse_`i')^2 * sqrt((1-(corr_`i')^2)/(ncorr_`i'-1))
      = qui gen relprec_mcse_2 = 200 * (empse_1/empse_2)^2 * sqrt((1-(corr_2)^2)/(ncorr_2-1))
      - {c )-}
      - else {c -(}
        qui gen relprec_mcse_`i' = 100 * sqrt(`relprecTT`i'' -2*(`relprecT`i''/`relprecB`i'')*`relprecTB`i'' +(`relprecT`i''/`relprecB`i'')^2*`relprecBB`i'') / `relprecB`i''
        {c )-}
      - {c )-}
      - else {c -(}
        qui gen relprec_`i' = .
        qui gen relprec_mcse_`i' = .
        {c )-}
      - {c )-}
      - if "`mse'"=="mse" {c -(}
      = if "mse"=="mse" {c -(}
      - qui gen mse_mcse_`i' = msesd_`i' / sqrt(bsims_`i')
      = qui gen mse_mcse_2 = msesd_2 / sqrt(bsims_2)
      - {c )-}
      - if "`rmse'"=="rmse" {c -(}
      = if "rmse"=="rmse" {c -(}
      - qui gen rmse_`i' = sqrt(mse_`i')
      = qui gen rmse_2 = sqrt(mse_2)
      - qui gen rmse_mcse_`i' = msesd_`i' / (2 * sqrt(bsims_`i') * rmse_`i')
      = qui gen rmse_mcse_2 = msesd_2 / (2 * sqrt(bsims_2) * rmse_2)
      - {c )-}
      - if "`modelse'"=="modelse" | "`relerror'"=="relerror" {c -(}
      = if "modelse"=="modelse" | "relerror"=="relerror" {c -(}
      - if "`modelsemethod'"=="rmse" {c -(}
      = if "rmse"=="rmse" {c -(}
      - qui replace modelse_`i' = sqrt(varmean_`i')
      = qui replace modelse_2 = sqrt(varmean_2)
      - qui gen modelse_mcse_`i' = varsd_`i' / sqrt(4 * sesims_`i' * varmean_`i')
      = qui gen modelse_mcse_2 = varsd_2 / sqrt(4 * sesims_2 * varmean_2)
      - {c )-}
      - else if "`modelsemethod'"=="mean" {c -(}
      = else if "rmse"=="mean" {c -(}
        qui gen modelse_mcse_`i' = modelsesd_`i' / sqrt(sesims_`i')
        {c )-}
      - {c )-}
      - if "`ciwidth'"=="ciwidth" {c -(}
      = if "ciwidth"=="ciwidth" {c -(}
      - qui gen ciwidth_mcse_`i' = ciwidthsd_`i' / sqrt(bsims_`i')
      = qui gen ciwidth_mcse_2 = ciwidthsd_2 / sqrt(bsims_2)
      - {c )-}
      - if "`relerror'"=="relerror" {c -(}
      = if "relerror"=="relerror" {c -(}
      - qui gen relerror_`i' = 100*(modelse_`i'/empse_`i'-1)
      = qui gen relerror_2 = 100*(modelse_2/empse_2-1)
      - if "`robust'"=="" qui gen relerror_mcse_`i' = 100*(modelse_`i'/empse_`i') * sqrt((modelse_mcse_`i'/modelse_`i')^2 + (empse_mcse_`i'/empse_`i')^2 )
      = if ""=="" qui gen relerror_mcse_2 = 100*(modelse_2/empse_2) * sqrt((modelse_mcse_2/modelse_2)^2 + (empse_mcse_2/empse_2)^2 )
      - else {c -(}
        qui gen relerror_mcse_`i' = sqrt(`relerrorTT`i'' -2*(`relerrorT`i''/`relerrorB`i'')*`relerrorTB`i'' +(`relerrorT`i''/`relerrorB`i'')^2*`relerrorBB`i'') / `relerrorB`i''
        qui replace relerror_mcse_`i' = relerror_mcse_`i' * 100 / (2*(1+relerror_`i'/100))
        {c )-}
      - {c )-}
      - if "`cover'"=="cover" {c -(}
      = if "cover"=="cover" {c -(}
      - qui gen cover_mcse_`i' = sqrt(cover_`i'*(100-cover_`i')/bothsims_`i') if bothsims_`i'>1
      = qui gen cover_mcse_2 = sqrt(cover_2*(100-cover_2)/bothsims_2) if bothsims_2>1
      - {c )-}
      - if "`power'"=="power" {c -(}
      = if "power"=="power" {c -(}
      - qui gen power_mcse_`i' = sqrt(power_`i'*(100-power_`i')/bothsims_`i') if bothsims_`i'>1
      = qui gen power_mcse_2 = sqrt(power_2*(100-power_2)/bothsims_2) if bothsims_2>1
      - {c )-}
      - cap drop varmean_`i'
      = cap drop varmean_2
      - cap drop varsd_`i'
      = cap drop varsd_2
      - {c )-}
      - if !mi("`debug'") {c -(}
      = if !mi("") {c -(}
        di as input "Data after post-processing:"
        l
        {c )-}
      - local alpha=100-`level'
      = local alpha=100-95
      - local bsimsname Non-missing point estimates
      - local sesimsname Non-missing standard errors
      - local biasname Bias in point estimate
      - local meanname Mean of point estimate
      - local empsename Empirical standard error
      - local relprecname % gain in precision relative to method `label`refmethod''
      = local relprecname % gain in precision relative to method exp.Peto
      - local msename Mean squared error
      - local rmsename Root mean squared error
      - if "`modelsemethod'" =="mean" local modelsename Mean model-based standard error `sebeta'
      = if "rmse" =="mean" local modelsename Mean model-based standard error 
      - if "`modelsemethod'" =="rmse" local modelsename RMS model-based standard error `sebeta'
      = if "rmse" =="rmse" local modelsename RMS model-based standard error 
      - local ciwidthname Mean conf. interval width
      - local relerrorname Relative % error in standard error
      - local covername % coverage of nominal `level'% conf. interval
      = local covername % coverage of nominal 95% conf. interval
      - local powername % power of `alpha'% level test
      = local powername % power of 5% level test
      - local keeplist `byvar'
      = local keeplist theta rho pc k
      - foreach name in `output' {c -(}
      = foreach name in bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power {c -(}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "bsims"!="bsims" & "bsims"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename bsims_1 method1bsims
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims
      - if `domcse' {c -(}
      = if 0 {c -(}
        rename `name'_mcse_`i' method`i'`name'_mcse
        local keeplist `keeplist' method`i'`name'_mcse
        {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename bsims_2 method2bsims
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims
      - if `domcse' {c -(}
      = if 0 {c -(}
        rename `name'_mcse_`i' method`i'`name'_mcse
        local keeplist `keeplist' method`i'`name'_mcse
        {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "sesims"!="bsims" & "sesims"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename sesims_1 method1sesims
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims
      - if `domcse' {c -(}
      = if 0 {c -(}
        rename `name'_mcse_`i' method`i'`name'_mcse
        local keeplist `keeplist' method`i'`name'_mcse
        {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename sesims_2 method2sesims
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims
      - if `domcse' {c -(}
      = if 0 {c -(}
        rename `name'_mcse_`i' method`i'`name'_mcse
        local keeplist `keeplist' method`i'`name'_mcse
        {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "bias"!="bsims" & "bias"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename bias_1 method1bias
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename bias_mcse_1 method1bias_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename bias_2 method2bias
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename bias_mcse_2 method2bias_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "mean"!="bsims" & "mean"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename mean_1 method1mean
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename mean_mcse_1 method1mean_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename mean_2 method2mean
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename mean_mcse_2 method2mean_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "empse"!="bsims" & "empse"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename empse_1 method1empse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename empse_mcse_1 method1empse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename empse_2 method2empse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename empse_mcse_2 method2empse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "relprec"!="bsims" & "relprec"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename relprec_1 method1relprec
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename relprec_mcse_1 method1relprec_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename relprec_2 method2relprec
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename relprec_mcse_2 method2relprec_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "mse"!="bsims" & "mse"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename mse_1 method1mse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename mse_mcse_1 method1mse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename mse_2 method2mse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename mse_mcse_2 method2mse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "rmse"!="bsims" & "rmse"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename rmse_1 method1rmse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename rmse_mcse_1 method1rmse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename rmse_2 method2rmse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename rmse_mcse_2 method2rmse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "modelse"!="bsims" & "modelse"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename modelse_1 method1modelse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename modelse_mcse_1 method1modelse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename modelse_2 method2modelse
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename modelse_mcse_2 method2modelse_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "ciwidth"!="bsims" & "ciwidth"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename ciwidth_1 method1ciwidth
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename ciwidth_mcse_1 method1ciwidth_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename ciwidth_2 method2ciwidth
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename ciwidth_mcse_2 method2ciwidth_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "relerror"!="bsims" & "relerror"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename relerror_1 method1relerror
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename relerror_mcse_1 method1relerror_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename relerror_2 method2relerror
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename relerror_mcse_2 method2relerror_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "cover"!="bsims" & "cover"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename cover_1 method1cover
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename cover_mcse_1 method1cover_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename cover_2 method2cover
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename cover_mcse_2 method2cover_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - local domcse = "`mcse'"=="mcse" & "`name'"!="bsims" & "`name'"!="sesims"
      = local domcse = "mcse"=="mcse" & "power"!="bsims" & "power"!="sesims"
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename `name'_`i' method`i'`name'
      = rename power_1 method1power
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse method1power
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename power_mcse_1 method1power_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse method1power method1power_mcse
      - {c )-}
      - {c )-}
      - rename `name'_`i' method`i'`name'
      = rename power_2 method2power
      - local keeplist `keeplist' method`i'`name'
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse method1power method1power_mcse method2power
      - if `domcse' {c -(}
      = if 1 {c -(}
      - rename `name'_mcse_`i' method`i'`name'_mcse
      = rename power_mcse_2 method2power_mcse
      - local keeplist `keeplist' method`i'`name'_mcse
      = local keeplist theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse method1power method1power_mcse method2power method2power_mcse
      - {c )-}
      - {c )-}
      - {c )-}
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - local methodlist `methodlist' method`i'
      = local methodlist  method1
      - {c )-}
      - local methodlist `methodlist' method`i'
      = local methodlist method1 method2
      - {c )-}
      - keep `keeplist'
      = keep theta rho pc k method1bsims method2bsims method1sesims method2sesims method1bias method1bias_mcse method2bias method2bias_mcse method1mean method1mean_mcse method2mean method2mean_mcse method1empse method1empse_mcse method2empse method2empse_mcse method1relprec method1relprec_mcse method2relprec method2relprec_mcse method1mse method1mse_mcse method2mse method2mse_mcse method1rmse method1rmse_mcse method2rmse method2rmse_mcse method1modelse method1modelse_mcse method2modelse method2modelse_mcse method1ciwidth method1ciwidth_mcse method2ciwidth method2ciwidth_mcse method1relerror method1relerror_mcse method2relerror method2relerror_mcse method1cover method1cover_mcse method2cover method2cover_mcse method1power method1power_mcse method2power method2power_mcse
      - qui reshape long `methodlist', i(`byvar') j(`gen'code) string
      = qui reshape long method1 method2, i(theta rho pc k) j(_perfmeascode) string
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - char method`i'[varname] "`label`i''"
      = char method1[varname] "exp.Peto"
      - label var method`i' "`label`i''"
      = label var method1 "exp.Peto"
      - {c )-}
      - char method`i'[varname] "`label`i''"
      = char method2[varname] "exp.G2"
      - label var method`i' "`label`i''"
      = label var method2 "exp.G2"
      - {c )-}
      - local i 0
      - qui gen mcse = .
      - qui gen `gen'num = .
      = qui gen _perfmeasnum = .
      - foreach perfmeas in bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power {c -(}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="bsims"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="bsims_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="bsims" if _perfmeascode=="bsims_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 1 if _perfmeascode=="bsims" | _perfmeascode=="bsims_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "bsims"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "bsims"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "bsims"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "bsims"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "bsims"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "bsims"=="relprec" local label "% precision gain relative to method exp.Peto"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "bsims"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "bsims"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "bsims"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "bsims"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "bsims"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "bsims"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "bsims"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 1 "Non-missing point estimates", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="sesims"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="sesims_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="sesims" if _perfmeascode=="sesims_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 2 if _perfmeascode=="sesims" | _perfmeascode=="sesims_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "sesims"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "sesims"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "sesims"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "sesims"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "sesims"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "sesims"=="relprec" local label "% precision gain relative to method exp.Peto"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "sesims"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "sesims"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "sesims"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "sesims"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "sesims"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "sesims"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "sesims"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 2 "Non-missing standard errors", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="bias"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="bias_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="bias" if _perfmeascode=="bias_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 3 if _perfmeascode=="bias" | _perfmeascode=="bias_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "bias"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "bias"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "bias"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "bias"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "bias"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "bias"=="relprec" local label "% precision gain relative to method exp.Peto"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "bias"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "bias"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "bias"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "bias"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "bias"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "bias"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "bias"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 3 "Bias in point estimate", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="mean"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="mean_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="mean" if _perfmeascode=="mean_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 4 if _perfmeascode=="mean" | _perfmeascode=="mean_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "mean"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "mean"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "mean"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "mean"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "mean"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "mean"=="relprec" local label "% precision gain relative to method exp.Peto"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "mean"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "mean"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "mean"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "mean"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "mean"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "mean"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "mean"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 4 "Mean of point estimate", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="empse"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="empse_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="empse" if _perfmeascode=="empse_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 5 if _perfmeascode=="empse" | _perfmeascode=="empse_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "empse"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "empse"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "empse"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "empse"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "empse"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "empse"=="relprec" local label "% precision gain relative to method exp.Peto"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "empse"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "empse"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "empse"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "empse"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "empse"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "empse"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "empse"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 5 "Empirical standard error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="relprec"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="relprec_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="relprec" if _perfmeascode=="relprec_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 6 if _perfmeascode=="relprec" | _perfmeascode=="relprec_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "relprec"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "relprec"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "relprec"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "relprec"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "relprec"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "relprec"=="relprec" local label "% precision gain relative to method exp.Peto"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "relprec"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "relprec"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "relprec"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "relprec"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "relprec"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "relprec"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "relprec"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 6 "% precision gain relative to method exp.Peto", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="mse"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="mse_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="mse" if _perfmeascode=="mse_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 7 if _perfmeascode=="mse" | _perfmeascode=="mse_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "mse"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "mse"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "mse"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "mse"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "mse"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "mse"=="relprec" local label "% precision gain relative to method exp.Peto"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "mse"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "mse"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "mse"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "mse"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "mse"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "mse"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "mse"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 7 "Mean squared error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="rmse"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="rmse_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="rmse" if _perfmeascode=="rmse_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 8 if _perfmeascode=="rmse" | _perfmeascode=="rmse_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "rmse"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "rmse"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "rmse"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "rmse"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "rmse"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "rmse"=="relprec" local label "% precision gain relative to method exp.Peto"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "rmse"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "rmse"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "rmse"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "rmse"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "rmse"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "rmse"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "rmse"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 8 "Root mean squared error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="modelse"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="modelse_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="modelse" if _perfmeascode=="modelse_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 9 if _perfmeascode=="modelse" | _perfmeascode=="modelse_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "modelse"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "modelse"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "modelse"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "modelse"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "modelse"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "modelse"=="relprec" local label "% precision gain relative to method exp.Peto"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "modelse"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "modelse"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "modelse"=="modelse" {c -(}
      - if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
      = if "rmse" =="mean" local label "Mean model-based standard error"
      - if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
      = if "rmse" =="rmse" local label "RMS model-based standard error"
      - {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "modelse"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "modelse"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "modelse"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "modelse"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 9 "RMS model-based standard error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="ciwidth"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="ciwidth_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="ciwidth" if _perfmeascode=="ciwidth_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 10 if _perfmeascode=="ciwidth" | _perfmeascode=="ciwidth_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "ciwidth"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "ciwidth"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "ciwidth"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "ciwidth"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "ciwidth"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "ciwidth"=="relprec" local label "% precision gain relative to method exp.Peto"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "ciwidth"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "ciwidth"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "ciwidth"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "ciwidth"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "ciwidth"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "ciwidth"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "ciwidth"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 10 "Mean conf. interval width", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="relerror"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="relerror_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="relerror" if _perfmeascode=="relerror_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 11 if _perfmeascode=="relerror" | _perfmeascode=="relerror_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "relerror"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "relerror"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "relerror"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "relerror"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "relerror"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "relerror"=="relprec" local label "% precision gain relative to method exp.Peto"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "relerror"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "relerror"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "relerror"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "relerror"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "relerror"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "relerror"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "relerror"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 11 "Relative % error in standard error", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="cover"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="cover_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="cover" if _perfmeascode=="cover_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 12 if _perfmeascode=="cover" | _perfmeascode=="cover_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "cover"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "cover"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "cover"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "cover"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "cover"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "cover"=="relprec" local label "% precision gain relative to method exp.Peto"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "cover"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "cover"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "cover"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "cover"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "cover"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "cover"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "cover"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 12 "% coverage of nominal 95% conf. interval", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - local ++i
      - qui replace mcse=0 if `gen'code=="`perfmeas'"
      = qui replace mcse=0 if _perfmeascode=="power"
      - qui replace mcse=1 if `gen'code=="`perfmeas'_mcse"
      = qui replace mcse=1 if _perfmeascode=="power_mcse"
      - qui replace `gen'code="`perfmeas'" if `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeascode="power" if _perfmeascode=="power_mcse"
      - qui replace `gen'num = `i' if `gen'code=="`perfmeas'" | `gen'code=="`perfmeas'_mcse"
      = qui replace _perfmeasnum = 13 if _perfmeascode=="power" | _perfmeascode=="power_mcse"
      - if "`perfmeas'"=="bsims" local label "Non-missing point estimates"
      = if "power"=="bsims" local label "Non-missing point estimates"
      - if "`perfmeas'"=="sesims" local label "Non-missing standard errors"
      = if "power"=="sesims" local label "Non-missing standard errors"
      - if "`perfmeas'"=="bias" local label "Bias in point estimate"
      = if "power"=="bias" local label "Bias in point estimate"
      - if "`perfmeas'"=="mean" local label "Mean of point estimate"
      = if "power"=="mean" local label "Mean of point estimate"
      - if "`perfmeas'"=="empse" local label "Empirical standard error"
      = if "power"=="empse" local label "Empirical standard error"
      - if "`perfmeas'"=="relprec" local label "% precision gain relative to method `label`refmethod''"
      = if "power"=="relprec" local label "% precision gain relative to method exp.Peto"
      - if "`perfmeas'"=="mse" local label "Mean squared error"
      = if "power"=="mse" local label "Mean squared error"
      - if "`perfmeas'"=="rmse" local label "Root mean squared error"
      = if "power"=="rmse" local label "Root mean squared error"
      - if "`perfmeas'"=="modelse" {c -(}
      = if "power"=="modelse" {c -(}
        if "`modelsemethod'" =="mean" local label "Mean model-based standard error"
        if "`modelsemethod'" =="rmse" local label "RMS model-based standard error"
        {c )-}
      - if "`perfmeas'"=="ciwidth" local label "Mean conf. interval width"
      = if "power"=="ciwidth" local label "Mean conf. interval width"
      - if "`perfmeas'"=="relerror" local label "Relative % error in standard error"
      = if "power"=="relerror" local label "Relative % error in standard error"
      - if "`perfmeas'"=="cover" local label "% coverage of nominal `level'% conf. interval"
      = if "power"=="cover" local label "% coverage of nominal 95% conf. interval"
      - if "`perfmeas'"=="power" local label "% power of `alpha'% level test"
      = if "power"=="power" local label "% power of 5% level test"
      - label def `gen'num `i' "`label'", add
      = label def _perfmeasnum 13 "% power of 5% level test", add
      - label val `gen'num `gen'num
      = label val _perfmeasnum _perfmeasnum
      - {c )-}
      - assert !mi(mcse)
      - foreach var in `methodlist' {c -(}
      = foreach var in method1 method2 {c -(}
      - rename `var' `var'_
      = rename method1 method1_
      - local methodlist2 `methodlist2' `var'_
      = local methodlist2  method1_
      - {c )-}
      - rename `var' `var'_
      = rename method2 method2_
      - local methodlist2 `methodlist2' `var'_
      = local methodlist2 method1_ method2_
      - {c )-}
      - qui reshape wide `methodlist2', i(`byvar' `gen'num) j(mcse)
      = qui reshape wide method1_ method2_, i(theta rho pc k _perfmeasnum) j(mcse)
      - local ids `gen'num `by'
      = local ids _perfmeasnum theta rho pc k
      - local betas
      - forvalues i=1/`m' {c -(}
      = forvalues i=1/2 {c -(}
      - rename method`i'_0 `beta`i''
      = rename method1_0 exppeto
      - label var `beta`i'' "`label`i''"
      = label var exppeto "exp.Peto"
      - char `beta`i''[varname] "`label`i''"
      = char exppeto[varname] "exp.Peto"
      - local betasnomcse `betasnomcse' `beta`i''
      = local betasnomcse  exppeto
      - local betas `betas' `beta`i''
      = local betas  exppeto
      - if "`mcse'"=="mcse" {c -(}
      = if "mcse"=="mcse" {c -(}
      - rename method`i'_1 `beta`i''_mcse
      = rename method1_1 exppeto_mcse
      - local betas `betas' `beta`i''_mcse
      = local betas exppeto exppeto_mcse
      - label var `beta`i''_mcse "`label`i'' (MCse)"
      = label var exppeto_mcse "exp.Peto (MCse)"
      - char `beta`i''_mcse[varname] "(MCse)"
      = char exppeto_mcse[varname] "(MCse)"
      - {c )-}
      - {c )-}
      - rename method`i'_0 `beta`i''
      = rename method2_0 expg2
      - label var `beta`i'' "`label`i''"
      = label var expg2 "exp.G2"
      - char `beta`i''[varname] "`label`i''"
      = char expg2[varname] "exp.G2"
      - local betasnomcse `betasnomcse' `beta`i''
      = local betasnomcse exppeto expg2
      - local betas `betas' `beta`i''
      = local betas exppeto exppeto_mcse expg2
      - if "`mcse'"=="mcse" {c -(}
      = if "mcse"=="mcse" {c -(}
      - rename method`i'_1 `beta`i''_mcse
      = rename method2_1 expg2_mcse
      - local betas `betas' `beta`i''_mcse
      = local betas exppeto exppeto_mcse expg2 expg2_mcse
      - label var `beta`i''_mcse "`label`i'' (MCse)"
      = label var expg2_mcse "exp.G2 (MCse)"
      - char `beta`i''_mcse[varname] "(MCse)"
      = char expg2_mcse[varname] "(MCse)"
      - {c )-}
      - {c )-}
      - char `gen'num[varname] "Performance measure"
      = char _perfmeasnum[varname] "Performance measure"
      - label var `gen'num "Performance measure"
      = label var _perfmeasnum "Performance measure"
      - label var `gen'code "Performance measure"
      = label var _perfmeascode "Performance measure"
      - order `ids' `betas'
      = order _perfmeasnum theta rho pc k exppeto exppeto_mcse expg2 expg2_mcse
      - sort `gen'num `by'
      = sort _perfmeasnum theta rho pc k
      - tokenize `format'
      = tokenize 
      - local bfmt "`1'"
      = local bfmt ""
      - local pctfmt "`2'"
      = local pctfmt ""
      - local nfmt "`3'"
      = local nfmt ""
      - if "`bfmt'"=="" {c -(}
      = if ""=="" {c -(}
      - if mi("`methodvar'") local bfmt: format `beta1'
      = if mi("") local bfmt: format exppeto
      - else local bfmt `bfmt0'
      = else local bfmt 
      - {c )-}
      - if "`pctfmt'"=="" | "`pctfmt'"=="=" | "`pctfmt'"=="." local pctfmt `bfmt'
      = if ""=="" | ""=="=" | ""=="." local pctfmt %9.0g
      - if "`nfmt'"=="" local nfmt %7.0f
      = if ""=="" local nfmt %7.0f
      - if mi("`transpose'") {c -(}
      = if mi("") {c -(}
      - if "`list'"!="nolist" {c -(}
      = if ""!="nolist" {c -(}
      - if "`listsep'"=="" {c -(}
      = if ""=="" {c -(}
      - qui format `betas' `bfmt'
      = qui format exppeto exppeto_mcse expg2 expg2_mcse %9.0g
      - list `ids' `betas', noo subvarname sepby(`gen'num `sepby') `abbreviate'
      = list _perfmeasnum theta rho pc k exppeto exppeto_mcse expg2 expg2_mcse, noo subvarname sepby(_perfmeasnum ) 
      - {c )-}
      - else {c -(}
        foreach perfmeas in `output' {c -(}
        di as text _new "``perfmeas'name'"
        local thisbetas = cond(inlist("`perfmeas'","bsims","sesims"), "betasnomcse", "betas")
        if inlist("`perfmeas'","bsims","sesims") local format `nfmt'
        else if inlist("`perfmeas'","bias","empse","modelse","mse") local format `bfmt'
        else local format `pctfmt'
        qui format `betas' `format'
        list `by' ``thisbetas'' if `gen'code=="`perfmeas'", noo subvarname sepby(`gen'num `sepby') `abbreviate'
        {c )-}
        {c )-}
      - {c )-}
      - qui format `betas' `bfmt'
      = qui format exppeto exppeto_mcse expg2 expg2_mcse %9.0g
      - char `gen'num[varname]
      = char _perfmeasnum[varname]
      - {c )-}
      - else {c -(}
        di "Transposing results ..."
        drop `gen'num
        if "`origformat'"=="long" {c -(}
        {c )-}
        else if "`origformat'"=="wide" {c -(}
        foreach var of varlist `betas' {c -(}
        rename `var' b_`var'
        {c )-}
        local betastub b_
        {c )-}
        else exit 499
        qui reshape long `betastub', i(`gen'code `by') j(method) string
        qui reshape wide `betastub', i(`by' method) j(`gen'code) string
        if "`mcse'"=="mcse" {c -(}
        gen type = cond(substr(method,length(method)-4,5)=="_mcse","mcse","est")
        qui replace method = substr(method,1,length(method)-5) if type=="mcse"
        local type type
        local sep2 method
        {c )-}
        sort `by' method `type'
        foreach varname of varlist `betastub'* {c -(}
        local varname2 = substr("`varname'", 1+length("`betastub'"), .)
        rename `varname' `varname2'
        label var `varname2'
        {c )-}
        cap format `bias' `empse' `mse' `modelse' `bfmt'
        cap format `relprec' `relerror' `cover' `power' `pctfmt'
        cap format `bsims' `sesims' `sesims' `nfmt'
        if "`list'"!="nolist" {c -(}
        l `by' method `type' `bsims' `sesims' `bias' `empse' `relprec' `mse' `modelse' `relerror' `cover' `power', sepby(`by' `sep2') noo
        {c )-}
        {c )-}
      - if "`saving'"!="" {c -(}
      = if ""!="" {c -(}
        if "`by'"=="" drop `byvar'
        save `saving'
        {c )-}
      - if "`clear'"=="clear" {c -(}
      = if "clear"=="clear" {c -(}
      - restore, not
      - di as text "Results are now in memory."
      - {c )-}
      {hline 79} end simsum {hline}
    - foreach v in `valmethod' {c -(}
    = foreach v in peto g2 {c -(}
    - if substr("`v'",strlen("`v'"),1)=="_" local v = substr("`v'", 1, index("`v'","_") - 1)
    = if substr("peto",strlen("peto"),1)=="_" local v = substr("peto", 1, index("peto","_") - 1)
    - if `estchange' == 1 {c -(}
    = if 0 == 1 {c -(}
      qui rename `estimate'_`v'_mcse `se'`v'
      {c )-}
    - else {c -(}
    - if substr(" `estimate'`v'",strlen(" `estimate'`v'"),1)=="_" qui rename `estimate'`v'mcse `se'`v'
    = if substr(" exppeto",strlen(" exppeto"),1)=="_" qui rename exppetomcse var2peto
    - else qui rename `estimate'`v'_mcse `se'`v'
    = else qui rename exppeto_mcse var2peto
      {hline 77} begin rename {hline}
      - version 12
      - mata: rename_cmd("`3'")
      = mata: rename_cmd("")
      {hline 79} end rename {hline}
    - {c )-}
    - if `sechange' == 1 qui rename `se'`v' `se'_`v'
    = if 0 == 1 qui rename var2peto var2_peto
    - {c )-}
    - if substr("`v'",strlen("`v'"),1)=="_" local v = substr("`v'", 1, index("`v'","_") - 1)
    = if substr("g2",strlen("g2"),1)=="_" local v = substr("g2", 1, index("g2","_") - 1)
    - if `estchange' == 1 {c -(}
    = if 0 == 1 {c -(}
      qui rename `estimate'_`v'_mcse `se'`v'
      {c )-}
    - else {c -(}
    - if substr(" `estimate'`v'",strlen(" `estimate'`v'"),1)=="_" qui rename `estimate'`v'mcse `se'`v'
    = if substr(" expg2",strlen(" expg2"),1)=="_" qui rename expg2mcse var2g2
    - else qui rename `estimate'`v'_mcse `se'`v'
    = else qui rename expg2_mcse var2g2
      {hline 77} begin rename {hline}
      - version 12
      - mata: rename_cmd("`3'")
      = mata: rename_cmd("")
      {hline 79} end rename {hline}
    - {c )-}
    - if `sechange' == 1 qui rename `se'`v' `se'_`v'
    = if 0 == 1 qui rename var2g2 var2_g2
    - {c )-}
    - {c )-}
    - qui gen indi = -_perfmeasnum
    - qui levelsof _perfmeasnum, local(lablevels)
      =        if (N <= 2000) {c -(}
      =        y = srswor(x, 200)
      =        if (rows(t) >= 50) {c -(}
      =        return(multiplicity(sum(t[., 2] :== 1), rows(t)) < 50)
      {hline 75} begin levelsof {hline}
      - version 15.0
      - syntax varname [if] [in] [, Separate(str) MISSing Local(name local) Clean MATROW(name) MATCELL(name) HEXadecimal ]
      - if ("`missing'" == "") {c -(}
      = if ("" == "") {c -(}
      - marksample touse, strok
      - {c )-}
      - else {c -(}
        marksample touse, strok novarlist
        {c )-}
      - if (`"`separate'"' == "") {c -(}
      = if (`""' == "") {c -(}
      - local separate " "
      - {c )-}
      - local typ : type `varlist'
      = local typ : type _perfmeasnum
      - if ("`typ'" == "strL" | substr("`typ'", 1, 3) == "str") {c -(}
      = if ("float" == "strL" | substr("float", 1, 3) == "str") {c -(}
        NoHexadecimal `hexadecimal'
        NoMatrow `matrow'
        {c )-}
      - mata: st_rclear()
      - if ("`typ'" == "strL") {c -(}
      = if ("float" == "strL") {c -(}
        LevelsOfStrL `varlist' if `touse', separate(`"`separate'"') `clean' matcell(`matcell')
        {c )-}
      - else if (substr("`typ'", 1, 3) == "str") {c -(}
      = else if (substr("float", 1, 3) == "str") {c -(}
        local isclean = ("`clean'" != "")
        mata: LevelsOfString("`varlist'", "`touse'", `"`separate'"', `isclean', "`matcell'")
        {c )-}
      - else {c -(}
      - local isint = inlist("`typ'", "byte", "int", "long")
      = local isint = inlist("float", "byte", "int", "long")
      - mata: LevelsOfReal("`varlist'", "`touse'", `"`separate'"', `isint', 1, "`matrow'", "`matcell'", "`hexadecimal'" != "")
      = mata: LevelsOfReal("_perfmeasnum", "__000001", `" "', 0, 1, "", "", "" != "")
      - if ("`usetab'" == "usetab") {c -(}
      = if ("usetab" == "usetab") {c -(}
      - cap LevelsOfTab `varlist' if `touse', `missing' separate(`"`separate'"') matrow(`matrow') matcell(`matcell') `hexadecimal'
      = cap LevelsOfTab _perfmeasnum if __000001,  separate(`" "') matrow() matcell() 
      - if (_rc) {c -(}
        mata: LevelsOfReal("`varlist'", "`touse'", `"`separate'"', `isint', 0, "`matrow'", "`matcell'", "`hexadecimal'" != "")
        {c )-}
      - {c )-}
      - {c )-}
      - if ("`local'" != "") {c -(}
      = if ("lablevels" != "") {c -(}
      - c_local `local' `"`r(levels)'"'
      = c_local lablevels `"1 2 3 4 5 6 7 8 9 10 11 12 13"'
      - {c )-}
      - di as text `"`r(levels)'"'
      = di as text `"1 2 3 4 5 6 7 8 9 10 11 12 13"'
      {hline 77} end levelsof {hline}
    - foreach lablevel of local lablevels {c -(}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 1
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -1 "Non-missing point estimates", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -1 "Non-missing point estimates", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 2
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -2 "Non-missing standard errors", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -2 "Non-missing standard errors", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 3
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -3 "Bias in point estimate", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -3 "Bias in point estimate", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 4
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -4 "Mean of point estimate", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -4 "Mean of point estimate", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 5
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -5 "Empirical standard error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -5 "Empirical standard error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 6
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -6 "% precision gain relative to method exp.Peto", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -6 "% precision gain relative to method exp.Peto", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 7
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -7 "Mean squared error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -7 "Mean squared error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 8
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -8 "Root mean squared error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -8 "Root mean squared error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 9
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -9 "RMS model-based standard error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -9 "RMS model-based standard error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 10
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -10 "Mean conf. interval width", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -10 "Mean conf. interval width", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 11
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -11 "Relative % error in standard error", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -11 "Relative % error in standard error", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 12
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -12 "% coverage of nominal 95% conf. interval", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -12 "% coverage of nominal 95% conf. interval", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - local labvalue : label (_perfmeasnum) `lablevel'
    = local labvalue : label (_perfmeasnum) 13
    - label define indilab -`lablevel' "`labvalue'", modify
    = label define indilab -13 "% power of 5% level test", modify
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define indilab -13 "% power of 5% level test", modify
      - {c )-}
      {hline 80} end label {hline}
    - {c )-}
    - label values indi indilab
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("values", "val") > 0 ) {c -(}
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {c -(}
      = if "" != "" {c -(}
        local fix ", nofix"
        {c )-}
      - gettoken var rest : anything
      - while `"`rest'"' != "" {c -(}
      = while `" indilab"' != "" {c -(}
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "indilab"
      - {c )-}
      - while `"`rest'"' != "" {c -(}
      = while `""' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
      - local vlist : list anything - lab
      - if "`lab'" == "." {c -(}
      = if "indilab" == "." {c -(}
        local lab ""
        {c )-}
      - foreach var of varlist `vlist' {c -(}
      = foreach var of varlist indi {c -(}
      - `vv' _label `val' `var' `lab' `fix'
      = version 15, missing: _label values indi indilab 
      - {c )-}
      - {c )-}
      - else {c -(}
        `vv' _label `macval(0)'
        {c )-}
      {hline 80} end label {hline}
    - qui drop _perfmeasnum
    - if `methodstringindi'==1 {c -(}
    = if 0==1 {c -(}
      capture quietly tostring `method', replace
      {c )-}
    - qui append using `estimatesdata'
    = qui append using C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp
      {hline 77} begin append {hline}
      - version 11
      - if (_caller() < 11) {c -(}
        local version : di "version " string(_caller()) ":"
        `version' _append `0'
        exit
        {c )-}
      - syntax [anything(everything)] [, GENerate(name) * ]
      - gettoken using filenames : anything
      - if (`"`using'"' != "using") {c -(}
      = if (`"using"' != "using") {c -(}
        di as err "using required"
        exit 100
        {c )-}
      - if (`"`filenames'"' == "") {c -(}
      = if (`" C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp"' == "") {c -(}
        di as err "invalid file specification"
        exit 198
        {c )-}
      - foreach filename of local filenames {c -(}
      - capture quietly describe using `"`filename'"'
      = capture quietly describe using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp"'
      - if (_rc) {c -(}
        di as err `"file `filename' not found"'
        exit 601
        {c )-}
      - {c )-}
      - if ("`generate'" != "") {c -(}
      = if ("" != "") {c -(}
        confirm new var `generate'
        local filenum 0
        gen byte `generate' = `filenum'
        local ++filenum
        local filenumpos = _N + 1
        {c )-}
      - foreach filename of local filenames {c -(}
      - capture noisily _append using `"`filename'"', `options'
      = capture noisily _append using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000002.tmp"', 
      - if _rc {c -(}
        if ("`generate'" != "") {c -(}
        capture quietly drop if `generate' > 0
        capture quietly drop `generate'
        {c )-}
        exit _rc
        {c )-}
      - if ("`generate'" != "") {c -(}
      = if ("" != "") {c -(}
        quietly replace `generate' = `filenum' in `filenumpos'/L
        local ++filenum
        local filenumpos = _N + 1
        {c )-}
      - {c )-}
      {hline 79} end append {hline}
    - qui replace indi = `rep' if `rep'>0 & `rep'!=.
    = qui replace indi = v1 if v1>0 & v1!=.
    - qui drop `rep'
    = qui drop v1
    - qui rename indi `rep'
    = qui rename indi v1
      {hline 77} begin rename {hline}
      - version 12
      - mata: rename_cmd("`3'")
      = mata: rename_cmd("")
      {hline 79} end rename {hline}
    - qui gen byte _dataset = `rep'>0 if `rep'!=.
    = qui gen byte _dataset = v1>0 if v1!=.
    - label define estimatesperformancelab 0 "Performance" 1 "Estimates"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("define", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 15, missing: _label define estimatesperformancelab 0 "Performance" 1 "Estimates"
      - {c )-}
      {hline 80} end label {hline}
    - label values _dataset estimatesperformancelab
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("values", "val") > 0 ) {c -(}
      - gettoken val 0 : 0
      - syntax anything [, nofix]
      - if "`fix'" != "" {c -(}
      = if "" != "" {c -(}
        local fix ", nofix"
        {c )-}
      - gettoken var rest : anything
      - while `"`rest'"' != "" {c -(}
      = while `" estimatesperformancelab"' != "" {c -(}
      - gettoken lab rest : rest
      - local label "`lab'"
      = local label "estimatesperformancelab"
      - {c )-}
      - while `"`rest'"' != "" {c -(}
      = while `""' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
      - local vlist : list anything - lab
      - if "`lab'" == "." {c -(}
      = if "estimatesperformancelab" == "." {c -(}
        local lab ""
        {c )-}
      - foreach var of varlist `vlist' {c -(}
      = foreach var of varlist _dataset {c -(}
      - `vv' _label `val' `var' `lab' `fix'
      = version 15, missing: _label values _dataset estimatesperformancelab 
      - {c )-}
      - {c )-}
      - else {c -(}
        `vv' _label `macval(0)'
        {c )-}
      {hline 80} end label {hline}
    - if "`perfonly'"!="" qui drop if `rep'>0 & `rep'!=.
    = if ""!="" qui drop if v1>0 & v1!=.
    - qui order `allnames'
    = qui order v1 k exppeto expg2 var2peto var2g2 rho theta pc __000000
      {hline 78} begin order {hline}
      - version 11
      - if (_caller()<11) {c -(}
        _order `macval(0)'
        exit
        {c )-}
      - syntax varlist[, Before(varname) After(varname) first last SEQuential ALPHAbetic]
      - if (`"`before'"' == "" & `"`after'"' == "" & "`first'" == "" & "`last'" == "" & "`alphabetic'" == "" & "`sequential'" == "") {c -(}
      = if (`""' == "" & `""' == "" & "" == "" & "" == "" & "" == "" & "" == "") {c -(}
      - _order `macval(0)'
      = _order v1 k exppeto expg2 var2peto var2g2 rho theta pc __000000
      - exit
      {hline 80} end order {hline}
    - if `methodcreated'!=1 {c -(}
    = if 0!=1 {c -(}
    - cap confirm numeric variable `method'
    = cap confirm numeric variable method
    - if _rc local methodstringindi = 1
    - else local methodstringindi = 0
    - local methodlabels = 0
    - if `nformat'==1 | (`nformat'==3 & `nmethod'==1) {c -(}
    = if 3==1 | (3==3 & 2==1) {c -(}
      if `nmethod'!=0 {c -(}
      qui tab `method',m
      local nmethodlabels = `r(r)'
      cap qui labelsof `method'
      cap qui ret list
      if `"`r(labels)'"'!="" {c -(}
      local 0 = `"`r(labels)'"'
      forvalues i = 1/`nmethodlabels' {c -(}
      gettoken `method'label`i' 0 : 0, parse(": ")
      local methlist `methlist' ``method'label`i''
      local methodlabels = 1
      {c )-}
      {c )-}
      else {c -(}
      qui levels `method', local(levels)
      tokenize `"`levels'"'
      if `methodstringindi' == 0 {c -(}
      forvalues i = 1/`nmethodlabels' {c -(}
      local `method'label`i' `i'
      local methlist `methlist' ``method'label`i''
      {c )-}
      {c )-}
      else forvalues i = 1/`nmethodlabels' {c -(}
      local `method'label`i' ``i''
      local methlist `methlist' ``method'label`i''
      {c )-}
      {c )-}
      {c )-}
      {c )-}
    - if `nformat'==1 {c -(}
    = if 3==1 {c -(}
      local valmethod = "`methlist'"
      {c )-}
    - else if `nformat'==2 {c -(}
    = else if 3==2 {c -(}
      local valmethod = "`method'"
      {c )-}
    - else if `nformat'==3 {c -(}
    = else if 3==3 {c -(}
    - if `nmethod'==1 {c -(}
    = if 2==1 {c -(}
      local valmethod = "`methlist'"
      {c )-}
    - else if `nmethod'>=1 & `nmethod'!=. {c -(}
    = else if 2>=1 & 2!=. {c -(}
    - local valmethod = "`methlist'"
    = local valmethod = ""
    - {c )-}
    - {c )-}
    - {c )-}
    - local simananalyserun = 1
    - local allthings `allthings' simananalyserun ifanalyse estchange sechange
    = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 simananalyserun ifanalyse estchange sechange
    - foreach thing in `allthings' {c -(}
    = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 simananalyserun ifanalyse estchange sechange {c -(}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 simananalyserun ifanalyse estchange sechange
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_rep] v1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_dgm] theta rho pc k
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_target] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_method] method
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_estimate] exp
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_se] var2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_df] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ci] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_p] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_true] theta
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_order] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_lci] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_uci] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ifsetup] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_insetup] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_format] format 3: long-wide
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_targetformat] long
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_methodformat] wide
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_nformat] 3
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ntarget] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ndgm] 4
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_nmethod] 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_numtarget] N/A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_valtarget] N/A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_nummethod] 2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_valmethod] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ntrue] 4
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ntruevalue] multiple
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_dgmvar] theta rho pc k
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_numdgm] 4
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_dgmcreated] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_targetlabels] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_methodcreated] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_methodlabels] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_methodvalues] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ntruestub] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_descriptiontype] stub
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_cidescriptiontype] stubs
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_truedescriptiontype] stub
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_estvars] exp
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_sevars] var2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_dfvars] N/A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_civars] N/A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_pvars] N/A
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_truevars] theta
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_simansetuprun] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_m1] peto
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_m2] g2
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_simananalyserun] 1
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_ifanalyse] 
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_estchange] 0
    - {c )-}
    - char _dta[siman_`thing'] ``thing''
    = char _dta[siman_sechange] 0
    - {c )-}
    - di as text "siman analyse has run successfully"
siman analyse has run successfully
    - if "`table'"!="notable" {c -(}
    = if ""!="notable" {c -(}
    - cap noi siman_table
      {hline 72} begin siman_table {hline}
      - version 15
      - syntax [anything] [if], [Column(varlist) debug]
      - foreach thing in `_dta[siman_allthings]' {c -(}
      = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 simananalyserun ifanalyse estchange sechange {c -(}
      - local `thing' : char _dta[siman_`thing']
      = local allthings : char _dta[siman_allthings]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local rep : char _dta[siman_rep]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgm : char _dta[siman_dgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local target : char _dta[siman_target]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local method : char _dta[siman_method]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estimate : char _dta[siman_estimate]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local se : char _dta[siman_se]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local df : char _dta[siman_df]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ci : char _dta[siman_ci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local p : char _dta[siman_p]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local true : char _dta[siman_true]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local order : char _dta[siman_order]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local lci : char _dta[siman_lci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local uci : char _dta[siman_uci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifsetup : char _dta[siman_ifsetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local insetup : char _dta[siman_insetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local format : char _dta[siman_format]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetformat : char _dta[siman_targetformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodformat : char _dta[siman_methodformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nformat : char _dta[siman_nformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntarget : char _dta[siman_ntarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ndgm : char _dta[siman_ndgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nmethod : char _dta[siman_nmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numtarget : char _dta[siman_numtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valtarget : char _dta[siman_valtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nummethod : char _dta[siman_nummethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valmethod : char _dta[siman_valmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntrue : char _dta[siman_ntrue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruevalue : char _dta[siman_ntruevalue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmvar : char _dta[siman_dgmvar]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numdgm : char _dta[siman_numdgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmcreated : char _dta[siman_dgmcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetlabels : char _dta[siman_targetlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodcreated : char _dta[siman_methodcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodlabels : char _dta[siman_methodlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodvalues : char _dta[siman_methodvalues]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruestub : char _dta[siman_ntruestub]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local descriptiontype : char _dta[siman_descriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local cidescriptiontype : char _dta[siman_cidescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truedescriptiontype : char _dta[siman_truedescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estvars : char _dta[siman_estvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sevars : char _dta[siman_sevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dfvars : char _dta[siman_dfvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local civars : char _dta[siman_civars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local pvars : char _dta[siman_pvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truevars : char _dta[siman_truevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simansetuprun : char _dta[siman_simansetuprun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m1 : char _dta[siman_m1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m2 : char _dta[siman_m2]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simananalyserun : char _dta[siman_simananalyserun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifanalyse : char _dta[siman_ifanalyse]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estchange : char _dta[siman_estchange]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sechange : char _dta[siman_sechange]
      - {c )-}
      - if "`simananalyserun'"=="0" | "`simananalyserun'"=="" {c -(}
      = if "1"=="0" | "1"=="" {c -(}
        di as error "siman analyse has not been run.  Please use siman_analyse first before siman_table."
        exit 498
        {c )-}
      - preserve
      - if `nformat'!=1 {c -(}
      = if 3!=1 {c -(}
      - qui siman_reshape, longlong
        - set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("exp") & mi("var2") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist exp var2   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist exp var2    theta
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number theta
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 3==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
          else if `nformat'==1 & `nmethod'!=0 {c -(}
          if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
          if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
          if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
          if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
          if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
          if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
          if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
          else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
          local numberdgms: word count `dgm'
          if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
          qui tab `method'
          local nmethodlabels = `r(r)'
          qui levels `method', local(mlevels)
          qui tokenize `"`mlevels'"'
          cap quietly label drop `method'
          local labelchange = 0
          forvalues m = 1/`nmethodlabels' {c -(}
          if substr("``m''",strlen("``m''"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          else {c -(}
          local metlabel`m' = "``m''"
          if `m'==1 local metlist `metlabel`m''
          else if `m'>=2 local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          if `labelchange'==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
          local valmethod = "`metlist'"
          forvalues i=1/`nmethod' {c -(}
          local m`i' = "``i''"
          {c )-}
          local string = 0
          capture confirm numeric variable `method'
          if _rc local string = 1
          if `string' == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
          else if `string' == 1 & "`methodlabels'" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
          else if "`methodlabels'" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          forvalues i=1/`nummethod' {c -(}
          char _dta[siman_m`i'] `i'
          if `i'==1 local siman_method `i'
          else if `i'>=2 local siman_method `siman_method' `i'
          {c )-}
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          char _dta[siman_df] `df'
          char _dta[siman_ci] `ci'
          char _dta[siman_p] `p'
          char _dta[siman_true] `true'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`df'"!="" char _dta[siman_dfvars] `df'
          if "`ci'"!="" char _dta[siman_civars] `ci'
          if "`p'"!="" char _dta[siman_pvars] `p'
          if "`true'"!="" char _dta[siman_truevars] `true'
          char _dta[siman_method] "`siman_valmethod'"
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          else if `nformat'==1 & `nmethod'==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
          {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if "longlong"!="" {c -(}
        - if `nformat'==3 {c -(}
        = if 3==3 {c -(}
        - if `methodlabels' == 1 local valmethod "`metlist'"
        = if 0 == 1 local valmethod ""
        - qui tokenize "`valmethod'"
        = qui tokenize ""
        - if `nmethod'!=0 {c -(}
        = if 2!=0 {c -(}
        - forvalues v=1/`nummethod' {c -(}
        = forvalues v=1/2 {c -(}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("",strlen(""),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("",strlen(""),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - {c )-}
        - local string = 0
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/2 {c -(}
        - qui capture confirm number `m`i''
        = qui capture confirm number peto
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - qui capture confirm number `m`i''
        = qui capture confirm number g2
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - if "`estchange'" == "1" local estimateunderscore = "`estvars'"
        = if "0" == "1" local estimateunderscore = "exp"
        - if "`sechange'" == "1" local seunderscore = "`sevars'"
        = if "0" == "1" local seunderscore = "var2"
        - if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
        = if ("0" != "1" & "0" != "1") local optionlist exp var2   
        - if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
        = if ("0" == "1" & "0" != "1") local optionlist  var2   
        - if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
        = if ("0" != "1" & "0" == "1") local optionlist exp    
        - if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
        = if ("0" == "1" & "0" == "1") local optionlist     
        - local optionlistreshape `optionlist'
        = local optionlistreshape exp var2
        - local exclude "`true'"
        = local exclude "theta"
        - local optionlistreshape: list optionlistreshape - exclude
        - local methodname: char _dta[ReS_j]
        - if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
        = if mi("mcse") | "mcse" == "_j" | "mcse" == "mcse" local methodname "method"
        - if "`methodlables'" == "1" local methodreshape "`methodvalues'"
        = if "" == "1" local methodreshape ""
        - else local methodreshape "`valmethod'"
        = else local methodreshape ""
        - if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
        = if "stub" == "stub" | 0 == 1 {c -(}
        - local trueindgm = strpos("`dgm'","`true'")
        = local trueindgm = strpos("theta rho pc k","theta")
        - if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
        = if 1 == 0 local optionlistreshape exp var2 theta
        - else local optionlistreshape `optionlist'
        = else local optionlistreshape exp var2
        - if `truenumber' == 1 local optionlistreshape `optionlist'
        = if 0 == 1 local optionlistreshape exp var2
        - if "`ntruestub'" == "0" local optionlistreshape `optionlist'
        = if "0" == "0" local optionlistreshape exp var2
        - if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = if 1 == 0 & 0<=1 & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 0<=1 & 2!=0 {c -(}
        - qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
        = qui reshape long "exp var2", i(v1 theta rho pc k ) j(method "") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "long"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "long"=="wide" | "long"=="long" {c -(}
          - DoNew `*'
          = DoNew long exp var2 , i(v1 theta rho pc k ) j(method  ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        = else if 0>1 & 0!=. & 2==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
        - else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 0 & 0>1 & 0!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
        - else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 0>1 & 0!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
        - {c )-}
        - else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
        = else if "stub" == "variable" & 0 == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
        - foreach u of var * {c -(}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("v1",strlen("v1"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("theta",strlen("theta"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("rho",strlen("rho"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("pc",strlen("pc"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("k",strlen("k"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("method",strlen("method"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("exp",strlen("exp"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("var2",strlen("var2"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("__000000",strlen("__000000"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("_perfmeascode",strlen("_perfmeascode"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("_dataset",strlen("_dataset"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - char _dta[siman_format] "format 1: long-long"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "long"
        - char _dta[siman_nformat] 1
        - if `nmethod'!=0 char _dta[siman_method] "`methodname'"
        = if 2!=0 char _dta[siman_method] "method"
        - if `nmethod'!=0 char _dta[siman_nmethod] 1
        = if 2!=0 char _dta[siman_nmethod] 1
        - char _dta[siman_descriptiontype] "variable"
        - char _dta[siman_truedescriptiontype] "variable"
        - char _dta[siman_cidescriptiontype] "variables"
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] exp
        - char _dta[siman_se] `se'
        = char _dta[siman_se] var2
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "exp"!="" char _dta[siman_estvars] exp
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "var2"!="" char _dta[siman_sevars] var2
        - if "`simananalyserun'"=="1" {c -(}
        = if "1"=="1" {c -(}
        - preserve
        - qui tempfile sortperf
        - qui drop if `rep'<0
        = qui drop if v1<0
        - qui save `sortperf'
        = qui save C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000005.tmp
        - restore
        - qui drop if `rep'>0
        = qui drop if v1>0
        - if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
        = if 0!= 1 qui gsort -v1 theta rho pc k  method
          {hline 74} begin gsort {hline}
          - if _caller() >= 12 {c -(}
          - local vv : di "version " string(_caller()) ":"
          - {c )-}
          - tempname myr
          - _return hold `myr'
          = _return hold __000001
          - version 6.0, missing
          - parse `"`*'"', parse(" +-,")
          = parse `"-v1 theta rho pc k method"', parse(" +-,")
          - local noryet 1
          - local i 1
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"-"'!="" & `"-"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"-"'=="-" | `"-"'=="+" {c -(}
          - local sign `"`1'"'
          = local sign `"-"'
          - mac shift
          - if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
          = if `"v1"'=="," | `"v1"'=="" {c -(} error 198 {c )-}
          - {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev v1
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 1 & `"-"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign1 `"-"'
          - local names `"`names' `1'"'
          = local names `" v1"'
          - local i=`i'+1
          = local i=1+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"theta"'!="" & `"theta"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"theta"'=="-" | `"theta"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev theta
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign2 `"+"'
          - local names `"`names' `1'"'
          = local names `" v1 theta"'
          - local i=`i'+1
          = local i=2+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"rho"'!="" & `"rho"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"rho"'=="-" | `"rho"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev rho
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign3 `"+"'
          - local names `"`names' `1'"'
          = local names `" v1 theta rho"'
          - local i=`i'+1
          = local i=3+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"pc"'!="" & `"pc"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"pc"'=="-" | `"pc"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev pc
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign4 `"+"'
          - local names `"`names' `1'"'
          = local names `" v1 theta rho pc"'
          - local i=`i'+1
          = local i=4+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"k"'!="" & `"k"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"k"'=="-" | `"k"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev k
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign5 `"+"'
          - local names `"`names' `1'"'
          = local names `" v1 theta rho pc k"'
          - local i=`i'+1
          = local i=5+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"method"'!="" & `"method"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"method"'=="-" | `"method"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev method
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign6 `"+"'
          - local names `"`names' `1'"'
          = local names `" v1 theta rho pc k method"'
          - local i=`i'+1
          = local i=6+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `""'!="" & `""'!="," {c -(}
            if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
            else local sign "+"
            unabbrev `1'
            if `noryet' & `"`sign'"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
            else {c -(}
            local noryet 0
            local sign`i' `"`sign'"'
            local names `"`names' `1'"'
            local i=`i'+1
            {c )-}
            mac shift
            {c )-}
          - if `"`part1'"'=="" & `"`names'"'=="" {c -(}
          = if `""'=="" & `" v1 theta rho pc k method"'=="" {c -(}
            di in red "varlist required"
            exit 100
            {c )-}
          - local options "Generate(string) Mfirst"
          - parse `"`*'"'
          = parse `""'
          - if `"`generat'"'!="" {c -(}
          = if `""'!="" {c -(}
            confirm new var `generat'
            {c )-}
          - parse `"`names'"', parse(" ")
          = parse `" v1 theta rho pc k method"', parse(" ")
          - local i 1
          - while `"``i''"'!="" {c -(}
          = while `"v1"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort v1
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000002 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by v1: replace __000002=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000002= 0 - sum(__000002)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type v1
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("float",1,3) != "str" {c -(}
          - if "`sign`i''" == "-" {c -(}
          = if "-" == "-" {c -(}
          - tempvar nn
          - qui gen long `nn' = .
          = qui gen long __000003 = .
          - qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
          = qui by v1: replace __000003 = 1 if _n==1 & v1>=.
          - qui sum `nn' if ``i''>=., meanonly
          = qui sum __000003 if v1>=., meanonly
          - local nsum = `r(sum)'
          = local nsum = 0
          - qui replace `nn' = sum(`nn') if ``i''>=.
          = qui replace __000003 = sum(__000003) if v1>=.
          - qui replace `n' = `nsum' - `nn' if ``i''>=.
          = qui replace __000002 = 0 - __000003 if v1>=.
          - {c )-}
          - else {c -(}
            qui replace `n'=``i'' if ``i''>=.
            {c )-}
          - {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000002"'
          - quietly compress `n'
          = quietly compress __000002
          - local i=`i'+1
          = local i=1+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"theta"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort theta
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000004 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by theta: replace __000004=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000004= 0 + sum(__000004)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type theta
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("float",1,3) != "str" {c -(}
          - if "`sign`i''" == "-" {c -(}
          = if "+" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
          - else {c -(}
          - qui replace `n'=``i'' if ``i''>=.
          = qui replace __000004=theta if theta>=.
          - {c )-}
          - {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000002 __000004"'
          - quietly compress `n'
          = quietly compress __000004
          - local i=`i'+1
          = local i=2+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"rho"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort rho
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000005 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by rho: replace __000005=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000005= 0 + sum(__000005)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type rho
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("float",1,3) != "str" {c -(}
          - if "`sign`i''" == "-" {c -(}
          = if "+" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
          - else {c -(}
          - qui replace `n'=``i'' if ``i''>=.
          = qui replace __000005=rho if rho>=.
          - {c )-}
          - {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000002 __000004 __000005"'
          - quietly compress `n'
          = quietly compress __000005
          - local i=`i'+1
          = local i=3+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"pc"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort pc
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000006 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by pc: replace __000006=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000006= 0 + sum(__000006)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type pc
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("byte",1,3) != "str" {c -(}
          - if "`sign`i''" == "-" {c -(}
          = if "+" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
          - else {c -(}
          - qui replace `n'=``i'' if ``i''>=.
          = qui replace __000006=pc if pc>=.
          - {c )-}
          - {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000002 __000004 __000005 __000006"'
          - quietly compress `n'
          = quietly compress __000006
          - local i=`i'+1
          = local i=4+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"k"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort k
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000007 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by k: replace __000007=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000007= 0 + sum(__000007)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type k
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("byte",1,3) != "str" {c -(}
          - if "`sign`i''" == "-" {c -(}
          = if "+" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
          - else {c -(}
          - qui replace `n'=``i'' if ``i''>=.
          = qui replace __000007=k if k>=.
          - {c )-}
          - {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000002 __000004 __000005 __000006 __000007"'
          - quietly compress `n'
          = quietly compress __000007
          - local i=`i'+1
          = local i=5+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"method"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort method
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000008 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by method: replace __000008=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000008= 0 + sum(__000008)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type method
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("str4",1,3) != "str" {c -(}
            if "`sign`i''" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
            else {c -(}
            qui replace `n'=``i'' if ``i''>=.
            {c )-}
            {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000002 __000004 __000005 __000006 __000007 __000008"'
          - quietly compress `n'
          = quietly compress __000008
          - local i=`i'+1
          = local i=6+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `""'!="" {c -(}
            `vv' sort ``i''
            tempvar n
            quietly gen long `n' = .
            quietly by ``i'': replace `n'=1 if _n==1
            quietly replace `n'= 0 `sign`i'' sum(`n')
            if `"`mfirst'"' == "" {c -(}
            local typ : type ``i''
            if bsubstr("`typ'",1,3) != "str" {c -(}
            if "`sign`i''" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
            else {c -(}
            qui replace `n'=``i'' if ``i''>=.
            {c )-}
            {c )-}
            {c )-}
            local tvars `"`tvars' `n'"'
            quietly compress `n'
            local i=`i'+1
            {c )-}
          - `vv' sort `part1' `tvars'
          = version 15: sort   __000002 __000004 __000005 __000006 __000007 __000008
          - if `"`generat'"'!="" {c -(}
          = if `""'!="" {c -(}
            tempvar mark
            qui by `part1' `tvars': gen `c(obs_t)' `mark' = 1 if _n==1
            qui replace `mark' = sum(`mark')
            qui compress `mark'
            `vv' sort `mark'
            rename `mark' `generat'
            {c )-}
          - _return restore `myr'
          = _return restore __000001
          {hline 76} end gsort {hline}
        - else qui gsort -`rep' `dgm' `target'
        = else qui gsort -v1 theta rho pc k 
        - qui append using `sortperf'
        = qui append using C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000005.tmp
          {hline 73} begin append {hline}
          - version 11
          - if (_caller() < 11) {c -(}
            local version : di "version " string(_caller()) ":"
            `version' _append `0'
            exit
            {c )-}
          - syntax [anything(everything)] [, GENerate(name) * ]
          - gettoken using filenames : anything
          - if (`"`using'"' != "using") {c -(}
          = if (`"using"' != "using") {c -(}
            di as err "using required"
            exit 100
            {c )-}
          - if (`"`filenames'"' == "") {c -(}
          = if (`" C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000005.tmp"' == "") {c -(}
            di as err "invalid file specification"
            exit 198
            {c )-}
          - foreach filename of local filenames {c -(}
          - capture quietly describe using `"`filename'"'
          = capture quietly describe using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000005.tmp"'
          - if (_rc) {c -(}
            di as err `"file `filename' not found"'
            exit 601
            {c )-}
          - {c )-}
          - if ("`generate'" != "") {c -(}
          = if ("" != "") {c -(}
            confirm new var `generate'
            local filenum 0
            gen byte `generate' = `filenum'
            local ++filenum
            local filenumpos = _N + 1
            {c )-}
          - foreach filename of local filenames {c -(}
          - capture noisily _append using `"`filename'"', `options'
          = capture noisily _append using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000005.tmp"', 
          - if _rc {c -(}
            if ("`generate'" != "") {c -(}
            capture quietly drop if `generate' > 0
            capture quietly drop `generate'
            {c )-}
            exit _rc
            {c )-}
          - if ("`generate'" != "") {c -(}
          = if ("" != "") {c -(}
            quietly replace `generate' = `filenum' in `filenumpos'/L
            local ++filenum
            local filenumpos = _N + 1
            {c )-}
          - {c )-}
          {hline 75} end append {hline}
        - {c )-}
        - if mi("`describe") siman_describe
        - {c )-}
        - {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 simananalyserun ifanalyse estchange sechange metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] ""
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 simananalyserun ifanalyse estchange sechange metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
      - foreach thing in `_dta[siman_allthings]' {c -(}
      = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 simananalyserun ifanalyse estchange sechange metlist {c -(}
      - local `thing' : char _dta[siman_`thing']
      = local allthings : char _dta[siman_allthings]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local rep : char _dta[siman_rep]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgm : char _dta[siman_dgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local target : char _dta[siman_target]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local method : char _dta[siman_method]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estimate : char _dta[siman_estimate]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local se : char _dta[siman_se]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local df : char _dta[siman_df]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ci : char _dta[siman_ci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local p : char _dta[siman_p]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local true : char _dta[siman_true]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local order : char _dta[siman_order]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local lci : char _dta[siman_lci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local uci : char _dta[siman_uci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifsetup : char _dta[siman_ifsetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local insetup : char _dta[siman_insetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local format : char _dta[siman_format]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetformat : char _dta[siman_targetformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodformat : char _dta[siman_methodformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nformat : char _dta[siman_nformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntarget : char _dta[siman_ntarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ndgm : char _dta[siman_ndgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nmethod : char _dta[siman_nmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numtarget : char _dta[siman_numtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valtarget : char _dta[siman_valtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nummethod : char _dta[siman_nummethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valmethod : char _dta[siman_valmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntrue : char _dta[siman_ntrue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruevalue : char _dta[siman_ntruevalue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmvar : char _dta[siman_dgmvar]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numdgm : char _dta[siman_numdgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmcreated : char _dta[siman_dgmcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetlabels : char _dta[siman_targetlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodcreated : char _dta[siman_methodcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodlabels : char _dta[siman_methodlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodvalues : char _dta[siman_methodvalues]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruestub : char _dta[siman_ntruestub]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local descriptiontype : char _dta[siman_descriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local cidescriptiontype : char _dta[siman_cidescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truedescriptiontype : char _dta[siman_truedescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estvars : char _dta[siman_estvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sevars : char _dta[siman_sevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dfvars : char _dta[siman_dfvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local civars : char _dta[siman_civars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local pvars : char _dta[siman_pvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truevars : char _dta[siman_truevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simansetuprun : char _dta[siman_simansetuprun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m1 : char _dta[siman_m1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m2 : char _dta[siman_m2]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simananalyserun : char _dta[siman_simananalyserun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifanalyse : char _dta[siman_ifanalyse]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estchange : char _dta[siman_estchange]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sechange : char _dta[siman_sechange]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local metlist : char _dta[siman_metlist]
      - {c )-}
      - {c )-}
      - foreach val in `estvars' `sevars' {c -(}
      = foreach val in exp var2 {c -(}
      - if strpos("`val'","_")!=0 {c -(}
      = if strpos("exp","_")!=0 {c -(}
        if substr("`val'",strlen("`val'"),1)=="_" {c -(}
        local l = substr("`val'", 1,strlen("`val'","_") - 1)
        local `l'vars = "`l'"
        {c )-}
        {c )-}
      - {c )-}
      - if strpos("`val'","_")!=0 {c -(}
      = if strpos("var2","_")!=0 {c -(}
        if substr("`val'",strlen("`val'"),1)=="_" {c -(}
        local l = substr("`val'", 1,strlen("`val'","_") - 1)
        local `l'vars = "`l'"
        {c )-}
        {c )-}
      - {c )-}
      - qui drop if `rep'>0
      = qui drop if v1>0
      - tempvar touse
      - marksample touse
      - if `dgmcreated' local dgm
      = if 0 local dgm
      - cap bysort `dgm' `method' `target' : assert `touse'==`touse'[1]
      = cap bysort theta rho pc k method  : assert __000002==__000002[1]
      - if _rc {c -(}
        di as error "'if' can only be used for dgm, method and target."
        exit 498
        {c )-}
      - if "`anything'"!="" {c -(}
      = if ""!="" {c -(}
        tempvar keep
        gen `keep' = 0
        foreach thing of local anything {c -(}
        qui count if _perfmeascode == "`thing'"
        if r(N)==0 di as error "Warning: performance measure not found: `thing'"
        qui replace `keep' = 1 if _perfmeascode == "`thing'"
        {c )-}
        qui keep if `keep'
        drop `keep'
        {c )-}
      - local perfvar = "bsims sesims bias mean empse relprec mse rmse modelse ciwidth relerror cover power"
      - qui gen _perfmeascodeorder=.
      - local p = 0
      - foreach perf of local perfvar {c -(}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 0 if _perfmeascode == "bsims"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels  0 "bsims"
      - local p = `p' + 1
      = local p = 0 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 1 if _perfmeascode == "sesims"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims"
      - local p = `p' + 1
      = local p = 1 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 2 if _perfmeascode == "bias"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias"
      - local p = `p' + 1
      = local p = 2 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 3 if _perfmeascode == "mean"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean"
      - local p = `p' + 1
      = local p = 3 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 4 if _perfmeascode == "empse"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse"
      - local p = `p' + 1
      = local p = 4 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 5 if _perfmeascode == "relprec"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec"
      - local p = `p' + 1
      = local p = 5 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 6 if _perfmeascode == "mse"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse"
      - local p = `p' + 1
      = local p = 6 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 7 if _perfmeascode == "rmse"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse"
      - local p = `p' + 1
      = local p = 7 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 8 if _perfmeascode == "modelse"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse"
      - local p = `p' + 1
      = local p = 8 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 9 if _perfmeascode == "ciwidth"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth"
      - local p = `p' + 1
      = local p = 9 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 10 if _perfmeascode == "relerror"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth" 10 "relerror"
      - local p = `p' + 1
      = local p = 10 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 11 if _perfmeascode == "cover"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth" 10 "relerror" 11 "cover"
      - local p = `p' + 1
      = local p = 11 + 1
      - {c )-}
      - qui replace _perfmeascodeorder = `p' if _perfmeascode == "`perf'"
      = qui replace _perfmeascodeorder = 12 if _perfmeascode == "power"
      - local perflabels `perflabels' `p' "`perf'"
      = local perflabels 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth" 10 "relerror" 11 "cover" 12 "power"
      - local p = `p' + 1
      = local p = 12 + 1
      - {c )-}
      - label define perfl `perflabels'
      = label define perfl 0 "bsims" 1 "sesims" 2 "bias" 3 "mean" 4 "empse" 5 "relprec" 6 "mse" 7 "rmse" 8 "modelse" 9 "ciwidth" 10 "relerror" 11 "cover" 12 "power"
      - label values _perfmeascodeorder perfl
      - label variable _perfmeascodeorder "performance measure"
      - if "`sevars'" == "N/A" local sevars
      = if "var2" == "N/A" local sevars
      - if `dgmcreated' local dgmvar
      = if 0 local dgmvar
      - foreach onedgmvar in `dgmvar' {c -(}
      = foreach onedgmvar in theta rho pc k {c -(}
      - summ `onedgmvar' `if', meanonly
      = summ theta , meanonly
      - if r(min)<r(max) local newdgmvar `newdgmvar' `onedgmvar'
      = if r(min)<r(max) local newdgmvar  theta
      - else if !mi("`debug'") di as error "Ignoring non-varying dgmvar: `onedgmvar'"
      = else if !mi("") di as error "Ignoring non-varying dgmvar: theta"
      - {c )-}
      - summ `onedgmvar' `if', meanonly
      = summ rho , meanonly
      - if r(min)<r(max) local newdgmvar `newdgmvar' `onedgmvar'
      = if r(min)<r(max) local newdgmvar theta rho
      - else if !mi("`debug'") di as error "Ignoring non-varying dgmvar: `onedgmvar'"
      = else if !mi("") di as error "Ignoring non-varying dgmvar: rho"
      - {c )-}
      - summ `onedgmvar' `if', meanonly
      = summ pc , meanonly
      - if r(min)<r(max) local newdgmvar `newdgmvar' `onedgmvar'
      = if r(min)<r(max) local newdgmvar theta rho pc
      - else if !mi("`debug'") di as error "Ignoring non-varying dgmvar: `onedgmvar'"
      = else if !mi("") di as error "Ignoring non-varying dgmvar: pc"
      - {c )-}
      - summ `onedgmvar' `if', meanonly
      = summ k , meanonly
      - if r(min)<r(max) local newdgmvar `newdgmvar' `onedgmvar'
      = if r(min)<r(max) local newdgmvar theta rho pc k
      - else if !mi("`debug'") di as error "Ignoring non-varying dgmvar: `onedgmvar'"
      = else if !mi("") di as error "Ignoring non-varying dgmvar: k"
      - {c )-}
      - local dgmvar `newdgmvar'
      = local dgmvar theta rho pc k
      - local myfactors _perfmeascodeorder `dgmvar' `target' `method'
      = local myfactors _perfmeascodeorder theta rho pc k  method
      - if !mi("`debug'") di as input "Factors to display: `myfactors'"
      = if !mi("") di as input "Factors to display: _perfmeascodeorder theta rho pc k  method"
      - tempvar group
      - foreach thing in dgmvar target method {c -(}
      - local n`thing'vars = wordcount("``thing''")
      = local ndgmvarvars = wordcount("theta rho pc k")
      - if !mi("`thing'") {c -(}
      = if !mi("dgmvar") {c -(}
      - egen `group' = group(``thing'')
      = egen __000003 = group(theta rho pc k)
      - qui levelsof `group'
      = qui levelsof __000003
      - local n`thing'levels = r(r)
      = local ndgmvarlevels = r(r)
      - {c )-}
      - else n`thing'levels = 1
      = else ndgmvarlevels = 1
      - if !mi("`debug'") di "`n`thing'levels' levels, `thing': `n`thing'vars' variables (``thing'')"
      = if !mi("") di "192 levels, dgmvar: 4 variables (theta rho pc k)"
      - drop `group'
      = drop __000003
      - {c )-}
      - local n`thing'vars = wordcount("``thing''")
      = local ntargetvars = wordcount("")
      - if !mi("`thing'") {c -(}
      = if !mi("target") {c -(}
      - egen `group' = group(``thing'')
      = egen __000003 = group()
      - qui levelsof `group'
      = qui levelsof __000003
      - local n`thing'levels = r(r)
      = local ntargetlevels = r(r)
      - {c )-}
      - else n`thing'levels = 1
      = else ntargetlevels = 1
      - if !mi("`debug'") di "`n`thing'levels' levels, `thing': `n`thing'vars' variables (``thing'')"
      = if !mi("") di "1 levels, target: 0 variables ()"
      - drop `group'
      = drop __000003
      - {c )-}
      - local n`thing'vars = wordcount("``thing''")
      = local nmethodvars = wordcount("method")
      - if !mi("`thing'") {c -(}
      = if !mi("method") {c -(}
      - egen `group' = group(``thing'')
      = egen __000003 = group(method)
      - qui levelsof `group'
      = qui levelsof __000003
      - local n`thing'levels = r(r)
      = local nmethodlevels = r(r)
      - {c )-}
      - else n`thing'levels = 1
      = else nmethodlevels = 1
      - if !mi("`debug'") di "`n`thing'levels' levels, `thing': `n`thing'vars' variables (``thing'')"
      = if !mi("") di "2 levels, method: 1 variables (method)"
      - drop `group'
      = drop __000003
      - {c )-}
      - if "`column'"=="" {c -(}
      = if ""=="" {c -(}
      - if `nmethodlevels'>1 local column `method'
      = if 2>1 local column method
      - else if `ntargetlevels'>1 local column `target'
      = else if 1>1 local column 
      - else local column : word 1 of `dgmvar'
      = else local column : word 1 of theta rho pc k
      - {c )-}
      - if !strpos("`column'","perfmeas") local row _perfmeascodeorder
      = if !strpos("method","perfmeas") local row _perfmeascodeorder
      - else di as error "siman table doesn't yet know how to format the table when perfmeas is in the columns"
      - local by : list myfactors - column
      - local by : list by - row
      - if wordcount("`by'")>4 {c -(}
      = if wordcount("theta rho pc k")>4 {c -(}
        di as error "There are too many factors to display. Consider using an if condition for your dgmvars."
        {c )-}
      - local tablecommand tabdisp `row' `column' `if', by(`by') c(`estvars' `sevars') stubwidth(20)
      = local tablecommand tabdisp _perfmeascodeorder method , by(theta rho pc k) c(exp var2) stubwidth(20)
      - if !mi("`debug'") {c -(}
      = if !mi("") {c -(}
        di "Table column: `column'"
        di "Table row: `row'"
        di "Table by: `by'"
        di "Table command: `tablecommand'"
        {c )-}
      - `tablecommand'
      = tabdisp _perfmeascodeorder method , by(theta rho pc k) c(exp var2) stubwidth(20)

{hline 21}{c TT}{hline 21}
theta categories,    {c |}
Selection, pc,       {c |}
Number of studies    {c |}
and performance      {c |}        method       
measure              {c |}        g2       peto
{hline 21}{c +}{hline 21}
0.5                  {c |}
no                   {c |}
10%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4643499  -.4813579
                     {txt}{c |}  {res}.0029602   .0017132
                     {txt}{c |} 
                mean {c |}  {res}.5356501   .5186421
                     {txt}{c |}  {res}.0029602   .0017132
                     {txt}{c |} 
               empse {c |}  {res}.0059204   .0034265
                     {txt}{c |}   {res}.002417   .0013989
                     {txt}{c |} 
             relprec {c |} {res}-66.50372           
                     {txt}{c |}  {res}27.92903           
                     {txt}{c |} 
                 mse {c |}  {res}.2156472   .2317142
                     {txt}{c |}  {res}.0027643   .0016502
                     {txt}{c |} 
                rmse {c |}  {res}.4643782    .481367
                     {txt}{c |}  {res}.0029763   .0017141
                     {txt}{c |} 
             modelse {c |}  {res}.2881733   .0402115
                     {txt}{c |}   {res}.067829   .0102882
                     {txt}{c |} 
             ciwidth {c |}  {res}1.045268   .1406393
                     {txt}{c |}  {res}.2472866   .0410959
                     {txt}{c |} 
            relerror {c |}  {res}4767.454   1073.546
                     {txt}{c |}  {res}2293.746   565.4091
                     {txt}{c |} 
               cover {c |}        {res}50          0
                     {txt}{c |}        {res}25          0
                     {txt}{c |} 
               power {c |}        {res}75        100
                     {txt}{c |}  {res}21.65063          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
no                   {c |}
10%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4572181  -.4780437
                     {txt}{c |}  {res}.0082138   .0029959
                     {txt}{c |} 
                mean {c |}  {res}.5427819   .5219563
                     {txt}{c |}  {res}.0082138   .0029959
                     {txt}{c |} 
               empse {c |}  {res}.0164276   .0059918
                     {txt}{c |}  {res}.0067065   .0024461
                     {txt}{c |} 
             relprec {c |} {res}-86.69646           
                     {txt}{c |}  {res}2.749275           
                     {txt}{c |} 
                 mse {c |}  {res}.2092508   .2285527
                     {txt}{c |}   {res}.007388   .0028528
                     {txt}{c |} 
                rmse {c |}  {res}.4574394   .4780719
                     {txt}{c |}  {res}.0080754   .0029837
                     {txt}{c |} 
             modelse {c |}  {res}.1150609   .0224768
                     {txt}{c |}  {res}.0274079   .0066036
                     {txt}{c |} 
             ciwidth {c |}  {res}.4108556   .0761369
                     {txt}{c |}  {res}.1074338   .0256002
                     {txt}{c |} 
            relerror {c |}  {res}600.4128   275.1263
                     {txt}{c |}  {res}331.0572   188.6784
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
no                   {c |}
10%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4647811  -.4826229
                     {txt}{c |}   {res}.004866   .0015395
                     {txt}{c |} 
                mean {c |}   {res}.535219   .5173771
                     {txt}{c |}   {res}.004866   .0015395
                     {txt}{c |} 
               empse {c |}  {res}.0097319   .0030789
                     {txt}{c |}   {res}.003973    .001257
                     {txt}{c |} 
             relprec {c |} {res}-89.99058           
                     {txt}{c |}  {res}4.138905           
                     {txt}{c |} 
                 mse {c |}  {res}.2160925   .2329319
                     {txt}{c |}  {res}.0044955   .0014817
                     {txt}{c |} 
                rmse {c |}  {res}.4648575   .4826302
                     {txt}{c |}  {res}.0048354    .001535
                     {txt}{c |} 
             modelse {c |}  {res}.0563642   .0105171
                     {txt}{c |}    {res}.01489   .0028175
                     {txt}{c |} 
             ciwidth {c |}  {res}.1958169   .0361623
                     {txt}{c |}  {res}.0590812   .0114295
                     {txt}{c |} 
            relerror {c |}  {res}479.1686   241.5811
                     {txt}{c |}  {res}281.6304   166.7936
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
no                   {c |}
20%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4734905  -.4841036
                     {txt}{c |}  {res}.0056954   .0022717
                     {txt}{c |} 
                mean {c |}  {res}.5265095   .5158964
                     {txt}{c |}  {res}.0056954   .0022717
                     {txt}{c |} 
               empse {c |}  {res}.0113907   .0045434
                     {txt}{c |}  {res}.0046503   .0018548
                     {txt}{c |} 
             relprec {c |} {res}-84.09026           
                     {txt}{c |}  {res}5.890756           
                     {txt}{c |} 
                 mse {c |}  {res}.2242905   .2343718
                     {txt}{c |}  {res}.0053848   .0021918
                     {txt}{c |} 
                rmse {c |}  {res}.4735932   .4841196
                     {txt}{c |}   {res}.005685   .0022637
                     {txt}{c |} 
             modelse {c |}  {res}.2251846   .0362474
                     {txt}{c |}  {res}.0601691   .0106679
                     {txt}{c |} 
             ciwidth {c |}  {res}.7906933   .1205843
                     {txt}{c |}  {res}.2265512   .0433906
                     {txt}{c |} 
            relerror {c |}  {res}1876.908   697.7986
                     {txt}{c |}  {res}964.5649   401.5102
                     {txt}{c |} 
               cover {c |}        {res}25          0
                     {txt}{c |}  {res}21.65063          0
                     {txt}{c |} 
               power {c |}        {res}75        100
                     {txt}{c |}  {res}21.65063          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
no                   {c |}
20%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}  {res}-.478941  -.4860802
                     {txt}{c |}  {res}.0050433   .0022495
                     {txt}{c |} 
                mean {c |}   {res}.521059   .5139198
                     {txt}{c |}  {res}.0050433   .0022495
                     {txt}{c |} 
               empse {c |}  {res}.0100865    .004499
                     {txt}{c |}  {res}.0041178   .0018367
                     {txt}{c |} 
             relprec {c |} {res}-80.10474           
                     {txt}{c |}  {res}6.108405           
                     {txt}{c |} 
                 mse {c |}  {res}.2294608   .2362892
                     {txt}{c |}  {res}.0048369   .0021858
                     {txt}{c |} 
                rmse {c |}  {res}.4790207   .4860959
                     {txt}{c |}  {res}.0050488   .0022483
                     {txt}{c |} 
             modelse {c |}  {res}.1020018   .0191011
                     {txt}{c |}  {res}.0333046   .0060572
                     {txt}{c |} 
             ciwidth {c |}   {res}.332958    .062111
                     {txt}{c |}  {res}.1278159   .0241417
                     {txt}{c |} 
            relerror {c |}  {res}911.2675   324.5622
                     {txt}{c |}  {res}528.6479   219.4738
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
no                   {c |}
20%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4780828  -.4858313
                     {txt}{c |}  {res}.0065649   .0022549
                     {txt}{c |} 
                mean {c |}  {res}.5219172   .5141687
                     {txt}{c |}  {res}.0065649   .0022549
                     {txt}{c |} 
               empse {c |}  {res}.0131297   .0045098
                     {txt}{c |}  {res}.0053602   .0018411
                     {txt}{c |} 
             relprec {c |} {res}-88.20206           
                     {txt}{c |}  {res}.8673306           
                     {txt}{c |} 
                 mse {c |}  {res}.2286925   .2360473
                     {txt}{c |}  {res}.0062171   .0021845
                     {txt}{c |} 
                rmse {c |}   {res}.478218   .4858469
                     {txt}{c |}  {res}.0065003   .0022482
                     {txt}{c |} 
             modelse {c |}   {res}.053505   .0099199
                     {txt}{c |}  {res}.0166102    .003185
                     {txt}{c |} 
             ciwidth {c |}  {res}.1753814   .0322689
                     {txt}{c |}  {res}.0664092    .012527
                     {txt}{c |} 
            relerror {c |}  {res}307.5102   119.9618
                     {txt}{c |}  {res}209.0016   114.2437
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
no                   {c |}
30%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4850892   -.487618
                     {txt}{c |}  {res}.0049631   .0032873
                     {txt}{c |} 
                mean {c |}  {res}.5149108    .512382
                     {txt}{c |}  {res}.0049631   .0032873
                     {txt}{c |} 
               empse {c |}  {res}.0099263   .0065745
                     {txt}{c |}  {res}.0040524    .002684
                     {txt}{c |} 
             relprec {c |} {res}-56.13089           
                     {txt}{c |}  {res}25.45527           
                     {txt}{c |} 
                 mse {c |}  {res}.2353854   .2378038
                     {txt}{c |}  {res}.0048122   .0032075
                     {txt}{c |} 
                rmse {c |}  {res}.4851654   .4876513
                     {txt}{c |}  {res}.0049594   .0032888
                     {txt}{c |} 
             modelse {c |}  {res}.2167648   .0357361
                     {txt}{c |}  {res}.0675997    .012368
                     {txt}{c |} 
             ciwidth {c |}  {res}.7260923   .1129449
                     {txt}{c |}  {res}.2548099   .0478423
                     {txt}{c |} 
            relerror {c |}  {res}2083.751    443.553
                     {txt}{c |}  {res}1121.865    290.914
                     {txt}{c |} 
               cover {c |}        {res}25          0
                     {txt}{c |}  {res}21.65063          0
                     {txt}{c |} 
               power {c |}        {res}75        100
                     {txt}{c |}  {res}21.65063          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
no                   {c |}
30%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4799979   -.487983
                     {txt}{c |}  {res}.0082179    .002586
                     {txt}{c |} 
                mean {c |}  {res}.5200021    .512017
                     {txt}{c |}  {res}.0082179    .002586
                     {txt}{c |} 
               empse {c |}  {res}.0164358    .005172
                     {txt}{c |}  {res}.0067099   .0021115
                     {txt}{c |} 
             relprec {c |} {res}-90.09777           
                     {txt}{c |}  {res}3.060024           
                     {txt}{c |} 
                 mse {c |}  {res}.2306006   .2381475
                     {txt}{c |}  {res}.0079096   .0025272
                     {txt}{c |} 
                rmse {c |}  {res}.4802089   .4880036
                     {txt}{c |}  {res}.0082356   .0025893
                     {txt}{c |} 
             modelse {c |}  {res}.1035415   .0194786
                     {txt}{c |}  {res}.0324109   .0062774
                     {txt}{c |} 
             ciwidth {c |}  {res}.3376598   .0619289
                     {txt}{c |}  {res}.1300262   .0257868
                     {txt}{c |} 
            relerror {c |}  {res}529.9752   276.6184
                     {txt}{c |}  {res}324.0854   195.8868
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
no                   {c |}
30%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4829315  -.4885505
                     {txt}{c |}  {res}.0045096   .0018006
                     {txt}{c |} 
                mean {c |}  {res}.5170685   .5114495
                     {txt}{c |}  {res}.0045096   .0018006
                     {txt}{c |} 
               empse {c |}  {res}.0090192   .0036013
                     {txt}{c |}  {res}.0036821   .0014702
                     {txt}{c |} 
             relprec {c |} {res}-84.05692           
                     {txt}{c |}  {res}2.129883           
                     {txt}{c |} 
                 mse {c |}  {res}.2332839   .2386913
                     {txt}{c |}  {res}.0043301   .0017547
                     {txt}{c |} 
                rmse {c |}  {res}.4829947   .4885605
                     {txt}{c |}  {res}.0044825   .0017958
                     {txt}{c |} 
             modelse {c |}  {res}.0580184   .0101801
                     {txt}{c |}  {res}.0182373    .003197
                     {txt}{c |} 
             ciwidth {c |}  {res}.1863911   .0326109
                     {txt}{c |}  {res}.0752369   .0132783
                     {txt}{c |} 
            relerror {c |}  {res}543.2752   182.6801
                     {txt}{c |}  {res}331.4424   145.5984
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
no                   {c |}
5%                   {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}  {res}-.424663  -.4754655
                     {txt}{c |}  {res}.0139085    .002777
                     {txt}{c |} 
                mean {c |}  {res}.5753371   .5245345
                     {txt}{c |}  {res}.0139085    .002777
                     {txt}{c |} 
               empse {c |}  {res}.0278169   .0055539
                     {txt}{c |}  {res}.0113562   .0022674
                     {txt}{c |} 
             relprec {c |} {res}-96.01358           
                     {txt}{c |}  {res}1.147575           
                     {txt}{c |} 
                 mse {c |}   {res}.180919   .2260906
                     {txt}{c |}  {res}.0116495   .0026388
                     {txt}{c |} 
                rmse {c |}  {res}.4253457   .4754898
                     {txt}{c |}  {res}.0136941   .0027748
                     {txt}{c |} 
             modelse {c |}  {res}.4230818   .0523039
                     {txt}{c |}  {res}.0588171   .0094402
                     {txt}{c |} 
             ciwidth {c |}  {res}1.611653    .194777
                     {txt}{c |}  {res}.2258558   .0369604
                     {txt}{c |} 
            relerror {c |}   {res}1420.95   841.7444
                     {txt}{c |}  {res}655.9393   420.3627
                     {txt}{c |} 
               cover {c |}       {res}100          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}         {res}0        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
no                   {c |}
5%                   {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4379249  -.4792095
                     {txt}{c |}  {res}.0018035   .0014731
                     {txt}{c |} 
                mean {c |}  {res}.5620751   .5207905
                     {txt}{c |}  {res}.0018035   .0014731
                     {txt}{c |} 
               empse {c |}  {res}.0036069   .0029463
                     {txt}{c |}  {res}.0014725   .0012028
                     {txt}{c |} 
             relprec {c |} {res}-33.27687           
                     {txt}{c |}  {res}62.39728           
                     {txt}{c |} 
                 mse {c |}   {res}.191788   .2296482
                     {txt}{c |}  {res}.0015807   .0014107
                     {txt}{c |} 
                rmse {c |}   {res}.437936   .4792163
                     {txt}{c |}  {res}.0018047   .0014719
                     {txt}{c |} 
             modelse {c |}  {res}.1462832   .0271276
                     {txt}{c |}  {res}.0214373   .0053222
                     {txt}{c |} 
             ciwidth {c |}  {res}.5555515   .0997849
                     {txt}{c |}  {res}.0820015   .0212198
                     {txt}{c |} 
            relerror {c |}  {res}3955.638   820.7433
                     {txt}{c |}   {res}1759.15   417.0448
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
no                   {c |}
5%                   {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4344948  -.4781458
                     {txt}{c |}  {res}.0026277   .0010144
                     {txt}{c |} 
                mean {c |}  {res}.5655052   .5218542
                     {txt}{c |}  {res}.0026277   .0010144
                     {txt}{c |} 
               empse {c |}  {res}.0052555   .0020288
                     {txt}{c |}  {res}.0021455   .0008282
                     {txt}{c |} 
             relprec {c |} {res}-85.09778           
                     {txt}{c |}  {res}10.37664           
                     {txt}{c |} 
                 mse {c |}  {res}.1888064   .2286265
                     {txt}{c |}  {res}.0022783   .0009703
                     {txt}{c |} 
                rmse {c |}  {res}.4345186   .4781491
                     {txt}{c |}  {res}.0026216   .0010147
                     {txt}{c |} 
             modelse {c |}  {res}.0651409    .013638
                     {txt}{c |}  {res}.0102975    .003057
                     {txt}{c |} 
             ciwidth {c |}  {res}.2467077    .049505
                     {txt}{c |}  {res}.0380247   .0116511
                     {txt}{c |} 
            relerror {c |}  {res}1139.487    572.226
                     {txt}{c |}  {res}542.6298   313.0813
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
weak                 {c |}
10%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4760354  -.5957175
                     {txt}{c |}  {res}.0022257   .0024809
                     {txt}{c |} 
                mean {c |}  {res}.5239646   .4042824
                     {txt}{c |}  {res}.0022257   .0024809
                     {txt}{c |} 
               empse {c |}  {res}.0044514   .0049619
                     {txt}{c |}  {res}.0018173   .0020257
                     {txt}{c |} 
             relprec {c |}  {res}24.24931           
                     {txt}{c |}  {res}98.83461           
                     {txt}{c |} 
                 mse {c |}  {res}.2266246   .3548979
                     {txt}{c |}  {res}.0021104   .0029522
                     {txt}{c |} 
                rmse {c |}   {res}.476051    .595733
                     {txt}{c |}  {res}.0022166   .0024778
                     {txt}{c |} 
             modelse {c |}  {res}.2037728   .0388266
                     {txt}{c |}  {res}.0469526   .0090676
                     {txt}{c |} 
             ciwidth {c |}  {res}.7402756   .1388847
                     {txt}{c |}  {res}.1732367     .03594
                     {txt}{c |} 
            relerror {c |}  {res}4477.718   682.5007
                     {txt}{c |}  {res}2145.961   368.0313
                     {txt}{c |} 
               cover {c |}        {res}25          0
                     {txt}{c |}  {res}21.65063          0
                     {txt}{c |} 
               power {c |}        {res}75        100
                     {txt}{c |}  {res}21.65063          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
weak                 {c |}
10%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4776012  -.5898465
                     {txt}{c |}  {res}.0047255   .0026699
                     {txt}{c |} 
                mean {c |}  {res}.5223988   .4101535
                     {txt}{c |}  {res}.0047255   .0026699
                     {txt}{c |} 
               empse {c |}   {res}.009451   .0053397
                     {txt}{c |}  {res}.0038583   .0021799
                     {txt}{c |} 
             relprec {c |}  {res}-68.0782           
                     {txt}{c |}  {res}32.30524           
                     {txt}{c |} 
                 mse {c |}  {res}.2281699   .3479402
                     {txt}{c |}  {res}.0044796   .0031438
                     {txt}{c |} 
                rmse {c |}  {res}.4776713   .5898646
                     {txt}{c |}   {res}.004689   .0026648
                     {txt}{c |} 
             modelse {c |}  {res}.0885834   .0206246
                     {txt}{c |}   {res}.026152   .0053245
                     {txt}{c |} 
             ciwidth {c |}  {res}.2985837   .0723617
                     {txt}{c |}  {res}.1023454    .020817
                     {txt}{c |} 
            relerror {c |}  {res}837.2932   286.2479
                     {txt}{c |}  {res}472.2177   186.5678
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
weak                 {c |}
10%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4782957  -.5860621
                     {txt}{c |}  {res}.0078181   .0022046
                     {txt}{c |} 
                mean {c |}  {res}.5217043    .413938
                     {txt}{c |}  {res}.0078181   .0022046
                     {txt}{c |} 
               empse {c |}  {res}.0156362   .0044092
                     {txt}{c |}  {res}.0063834      .0018
                     {txt}{c |} 
             relprec {c |} {res}-92.04847           
                     {txt}{c |}  {res}9.168727           
                     {txt}{c |} 
                 mse {c |}  {res}.2289502   .3434833
                     {txt}{c |}  {res}.0074616   .0025787
                     {txt}{c |} 
                rmse {c |}  {res}.4784874   .5860745
                     {txt}{c |}  {res}.0077971      .0022
                     {txt}{c |} 
             modelse {c |}  {res}.0517927   .0112648
                     {txt}{c |}   {res}.017829    .003062
                     {txt}{c |} 
             ciwidth {c |}  {res}.1652108   .0392306
                     {txt}{c |}  {res}.0681275   .0117022
                     {txt}{c |} 
            relerror {c |}  {res}231.2371    155.487
                     {txt}{c |}  {res}176.8835   125.3072
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
weak                 {c |}
20%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4883158  -.5601118
                     {txt}{c |}   {res}.001881   .0016745
                     {txt}{c |} 
                mean {c |}  {res}.5116842   .4398882
                     {txt}{c |}   {res}.001881   .0016745
                     {txt}{c |} 
               empse {c |}  {res}.0037621   .0033489
                     {txt}{c |}  {res}.0015359   .0013672
                     {txt}{c |} 
             relprec {c |} {res}-20.75805           
                     {txt}{c |}  {res}71.58934           
                     {txt}{c |} 
                 mse {c |}  {res}.2384629   .3137336
                     {txt}{c |}  {res}.0018345   .0018736
                     {txt}{c |} 
                rmse {c |}  {res}.4883266   .5601193
                     {txt}{c |}  {res}.0018784   .0016725
                     {txt}{c |} 
             modelse {c |}  {res}.1866656   .0347377
                     {txt}{c |}   {res}.051531   .0099342
                     {txt}{c |} 
             ciwidth {c |}  {res}.6369234   .1170299
                     {txt}{c |}  {res}.2079555   .0401916
                     {txt}{c |} 
            relerror {c |}  {res}4861.799   937.2855
                     {txt}{c |}  {res}2445.297   517.0329
                     {txt}{c |} 
               cover {c |}        {res}25          0
                     {txt}{c |}  {res}21.65063          0
                     {txt}{c |} 
               power {c |}        {res}75        100
                     {txt}{c |}  {res}21.65063          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
weak                 {c |}
20%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4837807  -.5559196
                     {txt}{c |}  {res}.0044277   .0014168
                     {txt}{c |} 
                mean {c |}  {res}.5162193   .4440804
                     {txt}{c |}  {res}.0044277   .0014169
                     {txt}{c |} 
               empse {c |}  {res}.0088555   .0028337
                     {txt}{c |}  {res}.0036152   .0011569
                     {txt}{c |} 
             relprec {c |}  {res}-89.7604           
                     {txt}{c |}  {res}9.275205           
                     {txt}{c |} 
                 mse {c |}  {res}.2341026   .3090526
                     {txt}{c |}  {res}.0042614   .0015766
                     {txt}{c |} 
                rmse {c |}  {res}.4838414    .555925
                     {txt}{c |}  {res}.0044037    .001418
                     {txt}{c |} 
             modelse {c |}  {res}.0984313   .0198988
                     {txt}{c |}  {res}.0340505   .0062441
                     {txt}{c |} 
             ciwidth {c |}  {res}.3106786   .0650999
                     {txt}{c |}  {res}.1321035   .0248079
                     {txt}{c |} 
            relerror {c |}  {res}1011.528   602.2193
                     {txt}{c |}   {res}594.782   361.5808
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
weak                 {c |}
20%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4796865  -.5522388
                     {txt}{c |}  {res}.0059188    .002268
                     {txt}{c |} 
                mean {c |}  {res}.5203135   .4477612
                     {txt}{c |}  {res}.0059188    .002268
                     {txt}{c |} 
               empse {c |}  {res}.0118376    .004536
                     {txt}{c |}  {res}.0048327   .0018518
                     {txt}{c |} 
             relprec {c |} {res}-85.31667           
                     {txt}{c |}  {res}16.56104           
                     {txt}{c |} 
                 mse {c |}  {res}.2302042   .3049831
                     {txt}{c |}  {res}.0056823   .0025032
                     {txt}{c |} 
                rmse {c |}   {res}.479796   .5522528
                     {txt}{c |}  {res}.0059216   .0022664
                     {txt}{c |} 
             modelse {c |}  {res}.0543897   .0105118
                     {txt}{c |}  {res}.0187806   .0031116
                     {txt}{c |} 
             ciwidth {c |}  {res}.1692117   .0347868
                     {txt}{c |}  {res}.0748848   .0127512
                     {txt}{c |} 
            relerror {c |}  {res}359.4668   131.7415
                     {txt}{c |}  {res}245.6735   116.8606
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
weak                 {c |}
30%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4854645  -.5452206
                     {txt}{c |}  {res}.0055431   .0024779
                     {txt}{c |} 
                mean {c |}  {res}.5145355   .4547794
                     {txt}{c |}  {res}.0055431   .0024779
                     {txt}{c |} 
               empse {c |}  {res}.0110862   .0049559
                     {txt}{c |}  {res}.0045259   .0020232
                     {txt}{c |} 
             relprec {c |} {res}-80.01618           
                     {txt}{c |}  {res}21.18231           
                     {txt}{c |} 
                 mse {c |}  {res}.2357679   .2972839
                     {txt}{c |}  {res}.0053861    .002696
                     {txt}{c |} 
                rmse {c |}  {res}.4855594   .5452374
                     {txt}{c |}  {res}.0055463   .0024723
                     {txt}{c |} 
             modelse {c |}  {res}.2020677   .0341552
                     {txt}{c |}  {res}.0678787   .0107238
                     {txt}{c |} 
             ciwidth {c |}  {res}.6495634   .1116553
                     {txt}{c |}  {res}.2617092   .0426559
                     {txt}{c |} 
            relerror {c |}  {res}1722.698   589.1853
                     {txt}{c |}  {res}963.6353   354.9439
                     {txt}{c |} 
               cover {c |}        {res}25          0
                     {txt}{c |}  {res}21.65063          0
                     {txt}{c |} 
               power {c |}        {res}75        100
                     {txt}{c |}  {res}21.65063          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
weak                 {c |}
30%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4844402  -.5421999
                     {txt}{c |}  {res}.0029889   .0016028
                     {txt}{c |} 
                mean {c |}  {res}.5155598   .4578002
                     {txt}{c |}  {res}.0029889   .0016028
                     {txt}{c |} 
               empse {c |}  {res}.0059777   .0032056
                     {txt}{c |}  {res}.0024404   .0013087
                     {txt}{c |} 
             relprec {c |} {res}-71.24261           
                     {txt}{c |}  {res}32.95933           
                     {txt}{c |} 
                 mse {c |}  {res}.2347091   .2939883
                     {txt}{c |}  {res}.0029099   .0017386
                     {txt}{c |} 
                rmse {c |}  {res}.4844679   .5422069
                     {txt}{c |}  {res}.0030032   .0016032
                     {txt}{c |} 
             modelse {c |}  {res}.0911266   .0182899
                     {txt}{c |}  {res}.0281893   .0055193
                     {txt}{c |} 
             ciwidth {c |}  {res}.2947716   .0596394
                     {txt}{c |}  {res}.1164881   .0229733
                     {txt}{c |} 
            relerror {c |}  {res}1424.433   470.5573
                     {txt}{c |}  {res}780.8304   289.6563
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
weak                 {c |}
30%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4790042  -.5406324
                     {txt}{c |}  {res}.0057535   .0022588
                     {txt}{c |} 
                mean {c |}  {res}.5209958   .4593676
                     {txt}{c |}  {res}.0057535   .0022588
                     {txt}{c |} 
               empse {c |}  {res}.0115071   .0045176
                     {txt}{c |}  {res}.0046977   .0018443
                     {txt}{c |} 
             relprec {c |} {res}-84.58691           
                     {txt}{c |}  {res}14.66304           
                     {txt}{c |} 
                 mse {c |}  {res}.2295444   .2922987
                     {txt}{c |}  {res}.0055168    .002436
                     {txt}{c |} 
                rmse {c |}  {res}.4791079   .5406466
                     {txt}{c |}  {res}.0057574   .0022529
                     {txt}{c |} 
             modelse {c |}   {res}.055779   .0099526
                     {txt}{c |}  {res}.0178438   .0030013
                     {txt}{c |} 
             ciwidth {c |}  {res}.1757505   .0324562
                     {txt}{c |}  {res}.0750987   .0124985
                     {txt}{c |} 
            relerror {c |}   {res}384.737   120.3057
                     {txt}{c |}  {res}251.4118   111.8156
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
weak                 {c |}
5%                   {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4602343   -.645303
                     {txt}{c |}  {res}.0034419   .0030538
                     {txt}{c |} 
                mean {c |}  {res}.5397657    .354697
                     {txt}{c |}  {res}.0034419   .0030538
                     {txt}{c |} 
               empse {c |}  {res}.0068837   .0061076
                     {txt}{c |}  {res}.0028103   .0024934
                     {txt}{c |} 
             relprec {c |} {res}-21.27834           
                     {txt}{c |}  {res}88.50758           
                     {txt}{c |} 
                 mse {c |}  {res}.2118512   .4164439
                     {txt}{c |}  {res}.0031581   .0039341
                     {txt}{c |} 
                rmse {c |}   {res}.460273   .6453246
                     {txt}{c |}  {res}.0034307   .0030482
                     {txt}{c |} 
             modelse {c |}  {res}.2585549   .0469239
                     {txt}{c |}  {res}.0291902   .0072545
                     {txt}{c |} 
             ciwidth {c |}  {res}.9964558   .1773579
                     {txt}{c |}  {res}.1069139   .0281509
                     {txt}{c |} 
            relerror {c |}  {res}3656.024   668.2849
                     {txt}{c |}  {res}1590.944   335.3882
                     {txt}{c |} 
               cover {c |}        {res}50          0
                     {txt}{c |}        {res}25          0
                     {txt}{c |} 
               power {c |}        {res}75        100
                     {txt}{c |}  {res}21.65063          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
weak                 {c |}
5%                   {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4556693  -.6380908
                     {txt}{c |}  {res}.0068427   .0026766
                     {txt}{c |} 
                mean {c |}  {res}.5443307   .3619091
                     {txt}{c |}  {res}.0068427   .0026766
                     {txt}{c |} 
               empse {c |}  {res}.0136855   .0053531
                     {txt}{c |}  {res}.0055871   .0021854
                     {txt}{c |} 
             relprec {c |} {res}-84.69987           
                     {txt}{c |}  {res}11.08132           
                     {txt}{c |} 
                 mse {c |}   {res}.207775   .4071815
                     {txt}{c |}   {res}.006158   .0034078
                     {txt}{c |} 
                rmse {c |}  {res}.4558234   .6381077
                     {txt}{c |}  {res}.0067548   .0026702
                     {txt}{c |} 
             modelse {c |}  {res}.0925105   .0257412
                     {txt}{c |}  {res}.0174914   .0040901
                     {txt}{c |} 
             ciwidth {c |}  {res}.3435351   .0969385
                     {txt}{c |}  {res}.0670509   .0161704
                     {txt}{c |} 
            relerror {c |}  {res}575.9766   380.8628
                     {txt}{c |}  {res}304.1264   210.6562
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
weak                 {c |}
5%                   {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4581563  -.6349556
                     {txt}{c |}   {res}.005762   .0025771
                     {txt}{c |} 
                mean {c |}  {res}.5418437   .3650444
                     {txt}{c |}   {res}.005762   .0025771
                     {txt}{c |} 
               empse {c |}  {res}.0115239   .0051541
                     {txt}{c |}  {res}.0047046   .0021042
                     {txt}{c |} 
             relprec {c |} {res}-79.99625           
                     {txt}{c |}  {res}.9075928           
                     {txt}{c |} 
                 mse {c |}  {res}.2100068   .4031885
                     {txt}{c |}  {res}.0052704   .0032756
                     {txt}{c |} 
                rmse {c |}  {res}.4582649   .6349713
                     {txt}{c |}  {res}.0057504   .0025793
                     {txt}{c |} 
             modelse {c |}  {res}.0491616   .0142908
                     {txt}{c |}   {res}.012751   .0030536
                     {txt}{c |} 
             ciwidth {c |}  {res}.1741708   .0523353
                     {txt}{c |}  {res}.0476155   .0115342
                     {txt}{c |} 
            relerror {c |}  {res}326.6046   177.2673
                     {txt}{c |}  {res}206.3367   127.7608
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
moderate             {c |}
10%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4929633  -.6274161
                     {txt}{c |}   {res}.005833   .0027373
                     {txt}{c |} 
                mean {c |}  {res}.5070367   .3725839
                     {txt}{c |}   {res}.005833   .0027373
                     {txt}{c |} 
               empse {c |}  {res}.0116659   .0054746
                     {txt}{c |}  {res}.0047626    .002235
                     {txt}{c |} 
             relprec {c |} {res}-77.97754           
                     {txt}{c |}  {res}21.46514           
                     {txt}{c |} 
                 mse {c |}  {res}.2431149   .3936735
                     {txt}{c |}  {res}.0057093   .0034329
                     {txt}{c |} 
                rmse {c |}  {res}.4930668    .627434
                     {txt}{c |}  {res}.0057895   .0027357
                     {txt}{c |} 
             modelse {c |}  {res}.1766589   .0400239
                     {txt}{c |}  {res}.0444314   .0090211
                     {txt}{c |} 
             ciwidth {c |}   {res}.620731   .1451032
                     {txt}{c |}   {res}.177234   .0344472
                     {txt}{c |} 
            relerror {c |}  {res}1414.316   631.0848
                     {txt}{c |}  {res}726.1201   340.9305
                     {txt}{c |} 
               cover {c |}        {res}25          0
                     {txt}{c |}  {res}21.65063          0
                     {txt}{c |} 
               power {c |}        {res}75        100
                     {txt}{c |}  {res}21.65063          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
moderate             {c |}
10%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4921265  -.6203096
                     {txt}{c |}  {res}.0063073   .0020008
                     {txt}{c |} 
                mean {c |}  {res}.5078735   .3796904
                     {txt}{c |}  {res}.0063073   .0020008
                     {txt}{c |} 
               empse {c |}  {res}.0126146   .0040015
                     {txt}{c |}  {res}.0051499   .0016336
                     {txt}{c |} 
             relprec {c |} {res}-89.93745           
                     {txt}{c |}  {res}6.971973           
                     {txt}{c |} 
                 mse {c |}  {res}.2423079    .384796
                     {txt}{c |}  {res}.0061302    .002483
                     {txt}{c |} 
                rmse {c |}  {res}.4922478   .6203192
                     {txt}{c |}  {res}.0062268   .0020014
                     {txt}{c |} 
             modelse {c |}  {res}.0768717    .021488
                     {txt}{c |}  {res}.0245032   .0052584
                     {txt}{c |} 
             ciwidth {c |}  {res}.2516439   .0766431
                     {txt}{c |}  {res}.0957012   .0201723
                     {txt}{c |} 
            relerror {c |}  {res}509.3863   436.9923
                     {txt}{c |}  {res}315.6312    255.595
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
moderate             {c |}
10%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4926615  -.6168349
                     {txt}{c |}  {res}.0085658   .0016399
                     {txt}{c |} 
                mean {c |}  {res}.5073385   .3831651
                     {txt}{c |}  {res}.0085658   .0016399
                     {txt}{c |} 
               empse {c |}  {res}.0171317   .0032797
                     {txt}{c |}   {res}.006994   .0013389
                     {txt}{c |} 
             relprec {c |} {res}-96.33501           
                     {txt}{c |}  {res}2.271046           
                     {txt}{c |} 
                 mse {c |}  {res}.2429354   .3804934
                     {txt}{c |}  {res}.0083091   .0020244
                     {txt}{c |} 
                rmse {c |}  {res}.4928848   .6168415
                     {txt}{c |}  {res}.0084291   .0016409
                     {txt}{c |} 
             modelse {c |}   {res}.042207   .0114622
                     {txt}{c |}  {res}.0143076   .0028999
                     {txt}{c |} 
             ciwidth {c |}  {res}.1341859   .0403542
                     {txt}{c |}   {res}.055879   .0114068
                     {txt}{c |} 
            relerror {c |}  {res}146.3684   249.4882
                     {txt}{c |}  {res}130.7327   167.8537
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
moderate             {c |}
20%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4864031  -.5809035
                     {txt}{c |}  {res}.0049251   .0026367
                     {txt}{c |} 
                mean {c |}  {res}.5135969   .4190966
                     {txt}{c |}  {res}.0049251   .0026367
                     {txt}{c |} 
               empse {c |}  {res}.0098503   .0052734
                     {txt}{c |}  {res}.0040214   .0021529
                     {txt}{c |} 
             relprec {c |} {res}-71.33942           
                     {txt}{c |}  {res}30.54529           
                     {txt}{c |} 
                 mse {c |}  {res}.2366607   .3374697
                     {txt}{c |}   {res}.004785   .0030688
                     {txt}{c |} 
                rmse {c |}  {res}.4864779   .5809214
                     {txt}{c |}  {res}.0049181   .0026414
                     {txt}{c |} 
             modelse {c |}  {res}.1723101   .0348389
                     {txt}{c |}  {res}.0478192   .0098623
                     {txt}{c |} 
             ciwidth {c |}  {res}.5848827   .1183807
                     {txt}{c |}  {res}.1950521   .0393121
                     {txt}{c |} 
            relerror {c |}  {res}1649.292   560.6537
                     {txt}{c |}   {res}863.525   328.2078
                     {txt}{c |} 
               cover {c |}        {res}25          0
                     {txt}{c |}  {res}21.65063          0
                     {txt}{c |} 
               power {c |}        {res}75        100
                     {txt}{c |}  {res}21.65063          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
moderate             {c |}
20%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4847491  -.5761355
                     {txt}{c |}  {res}.0049559   .0018101
                     {txt}{c |} 
                mean {c |}  {res}.5152509   .4238645
                     {txt}{c |}  {res}.0049559   .0018101
                     {txt}{c |} 
               empse {c |}  {res}.0099118   .0036202
                     {txt}{c |}  {res}.0040465   .0014779
                     {txt}{c |} 
             relprec {c |} {res}-86.66023           
                     {txt}{c |}  {res}6.232362           
                     {txt}{c |} 
                 mse {c |}  {res}.2350553   .3319419
                     {txt}{c |}  {res}.0047809   .0020908
                     {txt}{c |} 
                rmse {c |}  {res}.4848251    .576144
                     {txt}{c |}  {res}.0049306   .0018145
                     {txt}{c |} 
             modelse {c |}   {res}.092609   .0189118
                     {txt}{c |}  {res}.0312179   .0055635
                     {txt}{c |} 
             ciwidth {c |}  {res}.2904748   .0633653
                     {txt}{c |}  {res}.1257093   .0222149
                     {txt}{c |} 
            relerror {c |}  {res}834.3297   422.4018
                     {txt}{c |}  {res}494.6641   262.8727
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
moderate             {c |}
20%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4825303  -.5730578
                     {txt}{c |}    {res}.00708   .0016799
                     {txt}{c |} 
                mean {c |}  {res}.5174696   .4269423
                     {txt}{c |}    {res}.00708   .0016799
                     {txt}{c |} 
               empse {c |}  {res}.0141599   .0033598
                     {txt}{c |}  {res}.0057808   .0013716
                     {txt}{c |} 
             relprec {c |} {res}-94.36992           
                     {txt}{c |}  {res}6.141575           
                     {txt}{c |} 
                 mse {c |}  {res}.2329859   .3284037
                     {txt}{c |}  {res}.0068104    .001926
                     {txt}{c |} 
                rmse {c |}  {res}.4826861   .5730652
                     {txt}{c |}  {res}.0070547   .0016804
                     {txt}{c |} 
             modelse {c |}   {res}.048394   .0097767
                     {txt}{c |}  {res}.0146405   .0027885
                     {txt}{c |} 
             ciwidth {c |}  {res}.1538552   .0328292
                     {txt}{c |}  {res}.0640706   .0114161
                     {txt}{c |} 
            relerror {c |}  {res}241.7672   190.9881
                     {txt}{c |}  {res}173.6598   144.9147
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
moderate             {c |}
30%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4806031  -.5619662
                     {txt}{c |}  {res}.0052151   .0025259
                     {txt}{c |} 
                mean {c |}  {res}.5193969   .4380339
                     {txt}{c |}  {res}.0052151   .0025259
                     {txt}{c |} 
               empse {c |}  {res}.0104302   .0050518
                     {txt}{c |}  {res}.0042581   .0020624
                     {txt}{c |} 
             relprec {c |} {res}-76.54108           
                     {txt}{c |}  {res}25.88902           
                     {txt}{c |} 
                 mse {c |}   {res}.231061   .3158251
                     {txt}{c |}  {res}.0050496   .0028345
                     {txt}{c |} 
                rmse {c |}   {res}.480688   .5619832
                     {txt}{c |}  {res}.0052525   .0025219
                     {txt}{c |} 
             modelse {c |}  {res}.1926346   .0351223
                     {txt}{c |}  {res}.0605231   .0112644
                     {txt}{c |} 
             ciwidth {c |}  {res}.6201231   .1140522
                     {txt}{c |}  {res}.2487598   .0445233
                     {txt}{c |} 
            relerror {c |}  {res}1746.895   595.2428
                     {txt}{c |}  {res}951.4279   360.9427
                     {txt}{c |} 
               cover {c |}        {res}25          0
                     {txt}{c |}  {res}21.65063          0
                     {txt}{c |} 
               power {c |}        {res}75        100
                     {txt}{c |}  {res}21.65063          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
moderate             {c |}
30%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4786374  -.5595371
                     {txt}{c |}  {res}.0069993   .0021053
                     {txt}{c |} 
                mean {c |}  {res}.5213627   .4404629
                     {txt}{c |}  {res}.0069993   .0021053
                     {txt}{c |} 
               empse {c |}  {res}.0139986   .0042105
                     {txt}{c |}  {res}.0057149   .0017189
                     {txt}{c |} 
             relprec {c |} {res}-90.95304           
                     {txt}{c |}  {res}9.540112           
                     {txt}{c |} 
                 mse {c |}  {res}.2292407   .3130951
                     {txt}{c |}  {res}.0067046   .0023522
                     {txt}{c |} 
                rmse {c |}  {res}.4787909    .559549
                     {txt}{c |}  {res}.0070016   .0021019
                     {txt}{c |} 
             modelse {c |}  {res}.0910548    .018744
                     {txt}{c |}  {res}.0297647   .0055046
                     {txt}{c |} 
             ciwidth {c |}  {res}.2863628   .0617611
                     {txt}{c |}  {res}.1230098   .0229793
                     {txt}{c |} 
            relerror {c |}  {res}550.4557   345.1689
                     {txt}{c |}   {res}340.184    223.877
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
moderate             {c |}
30%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4787755  -.5562698
                     {txt}{c |}  {res}.0062807   .0018965
                     {txt}{c |} 
                mean {c |}  {res}.5212245   .4437301
                     {txt}{c |}  {res}.0062807   .0018965
                     {txt}{c |} 
               empse {c |}  {res}.0125614    .003793
                     {txt}{c |}  {res}.0051282   .0015485
                     {txt}{c |} 
             relprec {c |} {res}-90.88229           
                     {txt}{c |}  {res}10.19127           
                     {txt}{c |} 
                 mse {c |}  {res}.2293443   .3094469
                     {txt}{c |}  {res}.0060115    .002111
                     {txt}{c |} 
                rmse {c |}   {res}.478899   .5562795
                     {txt}{c |}  {res}.0062764   .0018975
                     {txt}{c |} 
             modelse {c |}  {res}.0520811   .0097344
                     {txt}{c |}  {res}.0181035   .0029926
                     {txt}{c |} 
             ciwidth {c |}  {res}.1596085   .0315382
                     {txt}{c |}  {res}.0734938   .0124016
                     {txt}{c |} 
            relerror {c |}  {res}314.6113   156.6427
                     {txt}{c |}  {res}222.3084   131.1582
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
moderate             {c |}
5%                   {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4925407  -.6843244
                     {txt}{c |}  {res}.0012277   .0035919
                     {txt}{c |} 
                mean {c |}  {res}.5074593   .3156756
                     {txt}{c |}  {res}.0012277   .0035919
                     {txt}{c |} 
               empse {c |}  {res}.0024553   .0071839
                     {txt}{c |}  {res}.0010024   .0029328
                     {txt}{c |} 
             relprec {c |}  {res}756.0602           
                     {txt}{c |}  {res}953.0593           
                     {txt}{c |} 
                 mse {c |}  {res}.2426008   .4683385
                     {txt}{c |}  {res}.0012101   .0049074
                     {txt}{c |} 
                rmse {c |}  {res}.4925452   .6843526
                     {txt}{c |}  {res}.0012285   .0035854
                     {txt}{c |} 
             modelse {c |}  {res}.5094141   .0502198
                     {txt}{c |}  {res}.2252059   .0080854
                     {txt}{c |} 
             ciwidth {c |}  {res}1.457806    .189243
                     {txt}{c |}   {res}.787883   .0313059
                     {txt}{c |} 
            relerror {c |}  {res}20647.47   599.0645
                     {txt}{c |}  {res}12484.88    306.783
                     {txt}{c |} 
               cover {c |}        {res}25          0
                     {txt}{c |}  {res}21.65063          0
                     {txt}{c |} 
               power {c |}        {res}75        100
                     {txt}{c |}  {res}21.65063          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
moderate             {c |}
5%                   {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4937834  -.6778726
                     {txt}{c |}   {res}.003892   .0025177
                     {txt}{c |} 
                mean {c |}  {res}.5062166   .3221274
                     {txt}{c |}   {res}.003892   .0025176
                     {txt}{c |} 
               empse {c |}  {res}.0077839   .0050353
                     {txt}{c |}  {res}.0031778   .0020556
                     {txt}{c |} 
             relprec {c |} {res}-58.15431           
                     {txt}{c |}  {res}2.639348           
                     {txt}{c |} 
                 mse {c |}  {res}.2438675   .4595302
                     {txt}{c |}  {res}.0038526   .0034111
                     {txt}{c |} 
                rmse {c |}  {res}.4938294   .6778866
                     {txt}{c |}  {res}.0039007    .002516
                     {txt}{c |} 
             modelse {c |}  {res}.0848377   .0256495
                     {txt}{c |}  {res}.0208705   .0047689
                     {txt}{c |} 
             ciwidth {c |}  {res}.3022701   .0956176
                     {txt}{c |}  {res}.0800571   .0179486
                     {txt}{c |} 
            relerror {c |}  {res}989.9084    409.396
                     {txt}{c |}   {res}519.493   228.5108
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
moderate             {c |}
5%                   {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4892971  -.6732162
                     {txt}{c |}  {res}.0051559   .0023345
                     {txt}{c |} 
                mean {c |}  {res}.5107028   .3267838
                     {txt}{c |}  {res}.0051559   .0023345
                     {txt}{c |} 
               empse {c |}  {res}.0103119   .0046691
                     {txt}{c |}  {res}.0042098   .0019061
                     {txt}{c |} 
             relprec {c |} {res}-79.49858           
                     {txt}{c |}  {res}2.746812           
                     {txt}{c |} 
                 mse {c |}  {res}.2394914   .4532364
                     {txt}{c |}   {res}.005067   .0031409
                     {txt}{c |} 
                rmse {c |}  {res}.4893786   .6732283
                     {txt}{c |}  {res}.0051769   .0023327
                     {txt}{c |} 
             modelse {c |}  {res}.0408154   .0139722
                     {txt}{c |}  {res}.0111884   .0020063
                     {txt}{c |} 
             ciwidth {c |}  {res}.1419521     .05292
                     {txt}{c |}  {res}.0426126   .0081493
                     {txt}{c |} 
            relerror {c |}    {res}295.81   199.2515
                     {txt}{c |}   {res}194.636   129.5056
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
strong               {c |}
10%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.5110092  -.6540691
                     {txt}{c |}  {res}.0047823   .0017148
                     {txt}{c |} 
                mean {c |}  {res}.4889908   .3459309
                     {txt}{c |}  {res}.0047823   .0017148
                     {txt}{c |} 
               empse {c |}  {res}.0095646   .0034296
                     {txt}{c |}  {res}.0039047   .0014001
                     {txt}{c |} 
             relprec {c |} {res}-87.14228           
                     {txt}{c |}  {res}13.25403           
                     {txt}{c |} 
                 mse {c |}   {res}.261199   .4278151
                     {txt}{c |}  {res}.0048679    .002242
                     {txt}{c |} 
                rmse {c |}  {res}.5110763   .6540758
                     {txt}{c |}  {res}.0047624   .0017139
                     {txt}{c |} 
             modelse {c |}  {res}.2163471   .0401654
                     {txt}{c |}   {res}.088137   .0094106
                     {txt}{c |} 
             ciwidth {c |}  {res}.6335455   .1443901
                     {txt}{c |}  {res}.3254917   .0362428
                     {txt}{c |} 
            relerror {c |}   {res}2161.96   1071.128
                     {txt}{c |}  {res}1304.566   551.2537
                     {txt}{c |} 
               cover {c |}        {res}25          0
                     {txt}{c |}  {res}21.65063          0
                     {txt}{c |} 
               power {c |}        {res}75        100
                     {txt}{c |}  {res}21.65063          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
strong               {c |}
10%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.5068632   -.645451
                     {txt}{c |}  {res}.0051832   .0017377
                     {txt}{c |} 
                mean {c |}  {res}.4931367    .354549
                     {txt}{c |}  {res}.0051832   .0017377
                     {txt}{c |} 
               empse {c |}  {res}.0103665   .0034754
                     {txt}{c |}  {res}.0042321   .0014188
                     {txt}{c |} 
             relprec {c |} {res}-88.76039           
                     {txt}{c |}  {res}10.69627           
                     {txt}{c |} 
                 mse {c |}   {res}.256991   .4166161
                     {txt}{c |}  {res}.0052608    .002244
                     {txt}{c |} 
                rmse {c |}  {res}.5069427    .645458
                     {txt}{c |}  {res}.0051888   .0017383
                     {txt}{c |} 
             modelse {c |}  {res}.0662814   .0208152
                     {txt}{c |}  {res}.0225841   .0045742
                     {txt}{c |} 
             ciwidth {c |}  {res}.2086855   .0751632
                     {txt}{c |}  {res}.0893605   .0183311
                     {txt}{c |} 
            relerror {c |}   {res}539.382   498.9266
                     {txt}{c |}  {res}339.9951   277.6842
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
strong               {c |}
10%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.5100375  -.6413911
                     {txt}{c |}  {res}.0076818   .0012253
                     {txt}{c |} 
                mean {c |}  {res}.4899625   .3586089
                     {txt}{c |}  {res}.0076818   .0012253
                     {txt}{c |} 
               empse {c |}  {res}.0153636   .0024506
                     {txt}{c |}  {res}.0062722   .0010005
                     {txt}{c |} 
             relprec {c |}  {res}-97.4557           
                     {txt}{c |}  {res}1.726894           
                     {txt}{c |} 
                 mse {c |}  {res}.2603152    .411387
                     {txt}{c |}  {res}.0077267   .0015715
                     {txt}{c |} 
                rmse {c |}   {res}.510211   .6413946
                     {txt}{c |}  {res}.0075721    .001225
                     {txt}{c |} 
             modelse {c |}  {res}.0404089   .0116525
                     {txt}{c |}  {res}.0150797   .0030075
                     {txt}{c |} 
             ciwidth {c |}  {res}.1224195   .0412974
                     {txt}{c |}  {res}.0580344   .0112678
                     {txt}{c |} 
            relerror {c |}  {res}163.0162   375.4873
                     {txt}{c |}  {res}145.4763   229.6567
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
strong               {c |}
20%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4943407  -.6027567
                     {txt}{c |}  {res}.0083902   .0025153
                     {txt}{c |} 
                mean {c |}  {res}.5056593   .3972432
                     {txt}{c |}  {res}.0083902   .0025153
                     {txt}{c |} 
               empse {c |}  {res}.0167803   .0050305
                     {txt}{c |}  {res}.0068505   .0020537
                     {txt}{c |} 
             relprec {c |} {res}-91.01277           
                     {txt}{c |}  {res}10.28503           
                     {txt}{c |} 
                 mse {c |}  {res}.2445839   .3633347
                     {txt}{c |}  {res}.0082953   .0030227
                     {txt}{c |} 
                rmse {c |}  {res}.4945542   .6027725
                     {txt}{c |}  {res}.0083867   .0025074
                     {txt}{c |} 
             modelse {c |}  {res}.1719741   .0348284
                     {txt}{c |}  {res}.0559756   .0093835
                     {txt}{c |} 
             ciwidth {c |}  {res}.5490242   .1197184
                     {txt}{c |}  {res}.2258455   .0378879
                     {txt}{c |} 
            relerror {c |}  {res}924.8554   592.3402
                     {txt}{c |}  {res}535.0978   338.6487
                     {txt}{c |} 
               cover {c |}        {res}25          0
                     {txt}{c |}  {res}21.65063          0
                     {txt}{c |} 
               power {c |}        {res}75        100
                     {txt}{c |}  {res}21.65063          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
strong               {c |}
20%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4867315  -.5946037
                     {txt}{c |}  {res}.0073706   .0017068
                     {txt}{c |} 
                mean {c |}  {res}.5132685   .4053964
                     {txt}{c |}  {res}.0073706   .0017068
                     {txt}{c |} 
               empse {c |}  {res}.0147412   .0034136
                     {txt}{c |}   {res}.006018   .0013936
                     {txt}{c |} 
             relprec {c |} {res}-94.63757           
                     {txt}{c |}  {res}5.465208           
                     {txt}{c |} 
                 mse {c |}  {res}.2370705   .3535622
                     {txt}{c |}  {res}.0071134   .0020282
                     {txt}{c |} 
                rmse {c |}  {res}.4868989    .594611
                     {txt}{c |}  {res}.0073048   .0017055
                     {txt}{c |} 
             modelse {c |}  {res}.0850099   .0189379
                     {txt}{c |}  {res}.0290809   .0057619
                     {txt}{c |} 
             ciwidth {c |}   {res}.261276   .0627849
                     {txt}{c |}  {res}.1194135   .0228687
                     {txt}{c |} 
            relerror {c |}   {res}476.684   454.7793
                     {txt}{c |}  {res}307.1575   282.4678
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
strong               {c |}
20%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4878126  -.5925548
                     {txt}{c |}  {res}.0101622   .0015251
                     {txt}{c |} 
                mean {c |}  {res}.5121874   .4074452
                     {txt}{c |}  {res}.0101622   .0015251
                     {txt}{c |} 
               empse {c |}  {res}.0203243   .0030501
                     {txt}{c |}  {res}.0082974   .0012452
                     {txt}{c |} 
             relprec {c |} {res}-97.74785           
                     {txt}{c |}  {res}2.591141           
                     {txt}{c |} 
                 mse {c |}  {res}.2382709   .3511282
                     {txt}{c |}  {res}.0098509   .0018042
                     {txt}{c |} 
                rmse {c |}    {res}.48813   .5925607
                     {txt}{c |}  {res}.0100904   .0015224
                     {txt}{c |} 
             modelse {c |}   {res}.046503   .0101697
                     {txt}{c |}  {res}.0159041   .0029281
                     {txt}{c |} 
             ciwidth {c |}  {res}.1435795   .0342331
                     {txt}{c |}  {res}.0648435   .0117937
                     {txt}{c |} 
            relerror {c |}  {res}128.8047   233.4216
                     {txt}{c |}  {res}121.8548   166.5658
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
strong               {c |}
30%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4872657  -.5815987
                     {txt}{c |}  {res}.0094856   .0014659
                     {txt}{c |} 
                mean {c |}  {res}.5127343   .4184013
                     {txt}{c |}  {res}.0094856   .0014659
                     {txt}{c |} 
               empse {c |}  {res}.0189713   .0029318
                     {txt}{c |}   {res}.007745   .0011969
                     {txt}{c |} 
             relprec {c |} {res}-97.61179           
                     {txt}{c |}  {res}2.196291           
                     {txt}{c |} 
                 mse {c |}  {res}.2376978   .3382635
                     {txt}{c |}  {res}.0090763   .0017042
                     {txt}{c |} 
                rmse {c |}  {res}.4875426   .5816042
                     {txt}{c |}  {res}.0093083    .001465
                     {txt}{c |} 
             modelse {c |}  {res}.1817789   .0332653
                     {txt}{c |}   {res}.057721   .0103297
                     {txt}{c |} 
             ciwidth {c |}  {res}.5816606   .1093639
                     {txt}{c |}  {res}.2376362   .0410004
                     {txt}{c |} 
            relerror {c |}  {res}858.1791    1034.64
                     {txt}{c |}   {res}495.569   581.9857
                     {txt}{c |} 
               cover {c |}        {res}25          0
                     {txt}{c |}  {res}21.65063          0
                     {txt}{c |} 
               power {c |}        {res}75        100
                     {txt}{c |}  {res}21.65063          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
strong               {c |}
30%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4825913  -.5761374
                     {txt}{c |}  {res}.0091077   .0016066
                     {txt}{c |} 
                mean {c |}  {res}.5174087   .4238626
                     {txt}{c |}  {res}.0091077   .0016066
                     {txt}{c |} 
               empse {c |}  {res}.0182154   .0032132
                     {txt}{c |}  {res}.0074364   .0013118
                     {txt}{c |} 
             relprec {c |} {res}-96.88831           
                     {txt}{c |}  {res}3.022238           
                     {txt}{c |} 
                 mse {c |}  {res}.2331432   .3319421
                     {txt}{c |}  {res}.0086969   .0018518
                     {txt}{c |} 
                rmse {c |}   {res}.482849   .5761441
                     {txt}{c |}  {res}.0090058   .0016071
                     {txt}{c |} 
             modelse {c |}  {res}.0904489   .0197885
                     {txt}{c |}  {res}.0327222   .0067065
                     {txt}{c |} 
             ciwidth {c |}  {res}.2733912   .0629509
                     {txt}{c |}  {res}.1303397   .0261676
                     {txt}{c |} 
            relerror {c |}  {res}396.5508   515.8514
                     {txt}{c |}  {res}270.8582   326.7646
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
strong               {c |}
30%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.4800228  -.5726527
                     {txt}{c |}   {res}.008474   .0015871
                     {txt}{c |} 
                mean {c |}  {res}.5199772   .4273473
                     {txt}{c |}   {res}.008474   .0015871
                     {txt}{c |} 
               empse {c |}   {res}.016948   .0031741
                     {txt}{c |}   {res}.006919   .0012958
                     {txt}{c |} 
             relprec {c |} {res}-96.49234           
                     {txt}{c |}   {res}3.50753           
                     {txt}{c |} 
                 mse {c |}  {res}.2306373   .3279387
                     {txt}{c |}   {res}.008057   .0018185
                     {txt}{c |} 
                rmse {c |}  {res}.4802471   .5726593
                     {txt}{c |}  {res}.0083884   .0015878
                     {txt}{c |} 
             modelse {c |}  {res}.0518558   .0104381
                     {txt}{c |}  {res}.0185565   .0032165
                     {txt}{c |} 
             ciwidth {c |}  {res}.1572248   .0340683
                     {txt}{c |}  {res}.0743853   .0130834
                     {txt}{c |} 
            relerror {c |}  {res}205.9702   228.8481
                     {txt}{c |}  {res}166.1059    168.202
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
strong               {c |}
5%                   {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.5493135  -.7166597
                     {txt}{c |}  {res}.0006823   .0019751
                     {txt}{c |} 
                mean {c |}  {res}.4506865   .2833404
                     {txt}{c |}  {res}.0006823    .001975
                     {txt}{c |} 
               empse {c |}  {res}.0013646   .0039501
                     {txt}{c |}  {res}.0005571   .0016126
                     {txt}{c |} 
             relprec {c |}  {res}737.8892           
                     {txt}{c |}  {res}925.4865           
                     {txt}{c |} 
                 mse {c |}  {res}.3017467   .5136127
                     {txt}{c |}  {res}.0007487   .0028248
                     {txt}{c |} 
                rmse {c |}  {res}.5493148   .7166678
                     {txt}{c |}  {res}.0006815   .0019708
                     {txt}{c |} 
             modelse {c |}  {res}.1791779     .04819
                     {txt}{c |}  {res}.0453483   .0082655
                     {txt}{c |} 
             ciwidth {c |}  {res}.6280221   .1804697
                     {txt}{c |}  {res}.1815709   .0322201
                     {txt}{c |} 
            relerror {c |}  {res}13030.15   1119.969
                     {txt}{c |}  {res}6306.868   540.2216
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}        {res}75        100
                     {txt}{c |}  {res}21.65063          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
strong               {c |}
5%                   {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.5327445  -.7097985
                     {txt}{c |}  {res}.0024078   .0014303
                     {txt}{c |} 
                mean {c |}  {res}.4672555   .2902015
                     {txt}{c |}  {res}.0024078   .0014303
                     {txt}{c |} 
               empse {c |}  {res}.0048157   .0028606
                     {txt}{c |}   {res}.001966   .0011678
                     {txt}{c |} 
             relprec {c |} {res}-64.71449           
                     {txt}{c |}  {res}13.98717           
                     {txt}{c |} 
                 mse {c |}  {res}.2838341     .50382
                     {txt}{c |}    {res}.00257   .0020287
                     {txt}{c |} 
                rmse {c |}  {res}.5327608   .7098028
                     {txt}{c |}   {res}.002412   .0014291
                     {txt}{c |} 
             modelse {c |}  {res}.0681493   .0257777
                     {txt}{c |}  {res}.0176175   .0039681
                     {txt}{c |} 
             ciwidth {c |}  {res}.2370643   .0972189
                     {txt}{c |}  {res}.0710971   .0159053
                     {txt}{c |} 
            relerror {c |}   {res}1315.15   801.1296
                     {txt}{c |}  {res}683.8209   393.1678
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.5                  {c |}
strong               {c |}
5%                   {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-.5266696  -.7035869
                     {txt}{c |}  {res}.0013512   .0011961
                     {txt}{c |} 
                mean {c |}  {res}.4733304   .2964131
                     {txt}{c |}  {res}.0013512   .0011961
                     {txt}{c |} 
               empse {c |}  {res}.0027024   .0023921
                     {txt}{c |}  {res}.0011032   .0009766
                     {txt}{c |} 
             relprec {c |} {res}-21.64354           
                     {txt}{c |}  {res}88.99332           
                     {txt}{c |} 
                 mse {c |}  {res}.2773864   .4950388
                     {txt}{c |}  {res}.0014197   .0016829
                     {txt}{c |} 
                rmse {c |}  {res}.5266748   .7035899
                     {txt}{c |}  {res}.0013478    .001196
                     {txt}{c |} 
             modelse {c |}  {res}.0332405   .0136236
                     {txt}{c |}  {res}.0098563   .0018771
                     {txt}{c |} 
             ciwidth {c |}  {res}.1124259   .0518442
                     {txt}{c |}  {res}.0380287    .007396
                     {txt}{c |} 
            relerror {c |}  {res}1130.048   469.5199
                     {txt}{c |}  {res}620.6414   245.3907
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
no                   {c |}
10%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.307797  -1.326471
                     {txt}{c |}  {res}.0061806   .0023825
                     {txt}{c |} 
                mean {c |}  {res}.6922027   .6735292
                     {txt}{c |}  {res}.0061806   .0023824
                     {txt}{c |} 
               empse {c |}  {res}.0123613   .0047649
                     {txt}{c |}  {res}.0050465   .0019453
                     {txt}{c |} 
             relprec {c |} {res}-85.14133           
                     {txt}{c |}  {res}5.271999           
                     {txt}{c |} 
                 mse {c |}  {res}1.710448   1.759542
                     {txt}{c |}   {res}.016132   .0063099
                     {txt}{c |} 
                rmse {c |}  {res}1.307841   1.326477
                     {txt}{c |}  {res}.0061674   .0023784
                     {txt}{c |} 
             modelse {c |}  {res}.2479154   .0437844
                     {txt}{c |}   {res}.046929   .0120664
                     {txt}{c |} 
             ciwidth {c |}  {res}.9215121   .1514742
                     {txt}{c |}  {res}.1781677   .0465942
                     {txt}{c |} 
            relerror {c |}  {res}1905.579   818.8957
                     {txt}{c |}  {res}902.5084   452.6111
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
no                   {c |}
10%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.302571  -1.322404
                     {txt}{c |}  {res}.0055271   .0022077
                     {txt}{c |} 
                mean {c |}  {res}.6974287   .6775963
                     {txt}{c |}  {res}.0055271   .0022077
                     {txt}{c |} 
               empse {c |}  {res}.0110543   .0044154
                     {txt}{c |}  {res}.0045129   .0018026
                     {txt}{c |} 
             relprec {c |} {res}-84.04581           
                     {txt}{c |}  {res}8.772404           
                     {txt}{c |} 
                 mse {c |}  {res}1.696784   1.748766
                     {txt}{c |}  {res}.0144467   .0058406
                     {txt}{c |} 
                rmse {c |}  {res}1.302606   1.322409
                     {txt}{c |}  {res}.0055453   .0022083
                     {txt}{c |} 
             modelse {c |}  {res}.1068292   .0221106
                     {txt}{c |}  {res}.0261798   .0060535
                     {txt}{c |} 
             ciwidth {c |}   {res}.377535   .0755357
                     {txt}{c |}  {res}.1046095   .0245383
                     {txt}{c |} 
            relerror {c |}  {res}866.4037   400.7629
                     {txt}{c |}  {res}460.1567   246.1514
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
no                   {c |}
10%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.306469  -1.323747
                     {txt}{c |}   {res}.008333   .0032677
                     {txt}{c |} 
                mean {c |}   {res}.693531   .6762527
                     {txt}{c |}   {res}.008333   .0032677
                     {txt}{c |} 
               empse {c |}   {res}.016666   .0065354
                     {txt}{c |}  {res}.0068039   .0026681
                     {txt}{c |} 
             relprec {c |} {res}-84.62257           
                     {txt}{c |}  {res}4.676066           
                     {txt}{c |} 
                 mse {c |}  {res}1.707069   1.752339
                     {txt}{c |}  {res}.0217064   .0086491
                     {txt}{c |} 
                rmse {c |}  {res}1.306549   1.323759
                     {txt}{c |}  {res}.0083068   .0032669
                     {txt}{c |} 
             modelse {c |}  {res}.0590987   .0123849
                     {txt}{c |}  {res}.0170337    .003545
                     {txt}{c |} 
             ciwidth {c |}  {res}.2021544   .0422321
                     {txt}{c |}  {res}.0653227   .0138247
                     {txt}{c |} 
            relerror {c |}  {res}254.6067   89.50529
                     {txt}{c |}  {res}177.2112   94.48643
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
no                   {c |}
20%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.316856  -1.326636
                     {txt}{c |}  {res}.0067318   .0011335
                     {txt}{c |} 
                mean {c |}  {res}.6831438   .6733639
                     {txt}{c |}  {res}.0067318   .0011335
                     {txt}{c |} 
               empse {c |}  {res}.0134635    .002267
                     {txt}{c |}  {res}.0054965   .0009255
                     {txt}{c |} 
             relprec {c |} {res}-97.16468           
                     {txt}{c |}  {res}1.874522           
                     {txt}{c |} 
                 mse {c |}  {res}1.734246   1.759967
                     {txt}{c |}  {res}.0177334   .0030054
                     {txt}{c |} 
                rmse {c |}  {res}1.316908   1.326638
                     {txt}{c |}   {res}.006733   .0011327
                     {txt}{c |} 
             modelse {c |}  {res}.2029015   .0367222
                     {txt}{c |}   {res}.049292   .0106939
                     {txt}{c |} 
             ciwidth {c |}  {res}.7250236    .121389
                     {txt}{c |}  {res}.1888007   .0446684
                     {txt}{c |} 
            relerror {c |}  {res}1407.047   1519.828
                     {txt}{c |}  {res}715.9418    812.293
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
no                   {c |}
20%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.319055  -1.325349
                     {txt}{c |}  {res}.0061702   .0029695
                     {txt}{c |} 
                mean {c |}  {res}.6809454   .6746511
                     {txt}{c |}  {res}.0061702   .0029695
                     {txt}{c |} 
               empse {c |}  {res}.0123405    .005939
                     {txt}{c |}   {res}.005038   .0024246
                     {txt}{c |} 
             relprec {c |}  {res}-76.8384           
                     {txt}{c |}  {res}4.028794           
                     {txt}{c |} 
                 mse {c |}  {res}1.740019   1.756576
                     {txt}{c |}  {res}.0162219   .0078552
                     {txt}{c |} 
                rmse {c |}  {res}1.319098   1.325359
                     {txt}{c |}  {res}.0061488   .0029634
                     {txt}{c |} 
             modelse {c |}  {res}.1065517   .0214565
                     {txt}{c |}  {res}.0345528   .0071007
                     {txt}{c |} 
             ciwidth {c |}  {res}.3490144   .0685812
                     {txt}{c |}  {res}.1324654   .0281116
                     {txt}{c |} 
            relerror {c |}  {res}763.4329   261.2799
                     {txt}{c |}  {res}450.1671   189.8642
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
no                   {c |}
20%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.316775  -1.326936
                     {txt}{c |}  {res}.0051833   .0009191
                     {txt}{c |} 
                mean {c |}  {res}.6832246   .6730638
                     {txt}{c |}  {res}.0051833    .000919
                     {txt}{c |} 
               empse {c |}  {res}.0103665   .0018381
                     {txt}{c |}  {res}.0042321   .0007504
                     {txt}{c |} 
             relprec {c |} {res}-96.85615           
                     {txt}{c |}  {res}2.059907           
                     {txt}{c |} 
                 mse {c |}  {res}1.733978   1.760762
                     {txt}{c |}  {res}.0136203     .00244
                     {txt}{c |} 
                rmse {c |}  {res}1.316806   1.326937
                     {txt}{c |}  {res}.0051717   .0009194
                     {txt}{c |} 
             modelse {c |}  {res}.0578394   .0114723
                     {txt}{c |}  {res}.0191014   .0039036
                     {txt}{c |} 
             ciwidth {c |}  {res}.1840238   .0362487
                     {txt}{c |}  {res}.0764635   .0153666
                     {txt}{c |} 
            relerror {c |}  {res}457.9447   524.1498
                     {txt}{c |}  {res}292.9773   331.7083
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
no                   {c |}
30%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.318063  -1.325043
                     {txt}{c |}  {res}.0050072   .0025058
                     {txt}{c |} 
                mean {c |}  {res}.6819367   .6749571
                     {txt}{c |}  {res}.0050073   .0025058
                     {txt}{c |} 
               empse {c |}  {res}.0100145   .0050116
                     {txt}{c |}  {res}.0040884    .002046
                     {txt}{c |} 
             relprec {c |} {res}-74.95676           
                     {txt}{c |}  {res}28.91136           
                     {txt}{c |} 
                 mse {c |}  {res}1.737366   1.755758
                     {txt}{c |}  {res}.0131716    .006633
                     {txt}{c |} 
                rmse {c |}  {res}1.318092    1.32505
                     {txt}{c |}  {res}.0049965   .0025029
                     {txt}{c |} 
             modelse {c |}  {res}.2062464   .0358453
                     {txt}{c |}  {res}.0571641   .0118599
                     {txt}{c |} 
             ciwidth {c |}  {res}.7016128   .1151908
                     {txt}{c |}  {res}.2319229   .0464559
                     {txt}{c |} 
            relerror {c |}   {res}1959.47   615.2475
                     {txt}{c |}  {res}1016.232    375.854
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
no                   {c |}
30%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}  {res}-1.32307  -1.327968
                     {txt}{c |}  {res}.0070301   .0029846
                     {txt}{c |} 
                mean {c |}  {res}.6769298   .6720319
                     {txt}{c |}  {res}.0070301   .0029845
                     {txt}{c |} 
               empse {c |}  {res}.0140602   .0059691
                     {txt}{c |}  {res}.0057401   .0024369
                     {txt}{c |} 
             relprec {c |} {res}-81.97682           
                     {txt}{c |}  {res}4.860895           
                     {txt}{c |} 
                 mse {c |}  {res}1.750663   1.763526
                     {txt}{c |}  {res}.0185684   .0079131
                     {txt}{c |} 
                rmse {c |}  {res}1.323126   1.327978
                     {txt}{c |}  {res}.0070168   .0029794
                     {txt}{c |} 
             modelse {c |}  {res}.0989404   .0187521
                     {txt}{c |}  {res}.0317989   .0056693
                     {txt}{c |} 
             ciwidth {c |}  {res}.3208171   .0610473
                     {txt}{c |}  {res}.1258247   .0236394
                     {txt}{c |} 
            relerror {c |}  {res}603.6905   214.1532
                     {txt}{c |}  {res}365.6218   159.5918
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
no                   {c |}
30%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.316539  -1.326821
                     {txt}{c |}  {res}.0069543   .0021496
                     {txt}{c |} 
                mean {c |}   {res}.683461   .6731789
                     {txt}{c |}  {res}.0069543   .0021497
                     {txt}{c |} 
               empse {c |}  {res}.0139085   .0042993
                     {txt}{c |}  {res}.0056781   .0017552
                     {txt}{c |} 
             relprec {c |} {res}-90.44487           
                     {txt}{c |}  {res}2.071074           
                     {txt}{c |} 
                 mse {c |}   {res}1.73342   1.760468
                     {txt}{c |}  {res}.0182657   .0057039
                     {txt}{c |} 
                rmse {c |}  {res}1.316594   1.326826
                     {txt}{c |}  {res}.0069367   .0021495
                     {txt}{c |} 
             modelse {c |}   {res}.054184   .0098025
                     {txt}{c |}  {res}.0173822   .0028971
                     {txt}{c |} 
             ciwidth {c |}  {res}.1741174    .031822
                     {txt}{c |}  {res}.0702275   .0124346
                     {txt}{c |} 
            relerror {c |}  {res}289.5738   128.0024
                     {txt}{c |}  {res}202.2708   114.9132
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
no                   {c |}
5%                   {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.279253  -1.319123
                     {txt}{c |}  {res}.0061127   .0041479
                     {txt}{c |} 
                mean {c |}  {res}.7207466   .6808766
                     {txt}{c |}  {res}.0061127   .0041479
                     {txt}{c |} 
               empse {c |}  {res}.0122255   .0082957
                     {txt}{c |}   {res}.004991   .0033867
                     {txt}{c |} 
             relprec {c |}  {res}-53.9557           
                     {txt}{c |}  {res}21.27531           
                     {txt}{c |} 
                 mse {c |}  {res}1.636601   1.740138
                     {txt}{c |}  {res}.0156377   .0109565
                     {txt}{c |} 
                rmse {c |}  {res}1.279297   1.319143
                     {txt}{c |}  {res}.0061118   .0041529
                     {txt}{c |} 
             modelse {c |}  {res}.3731805   .0522249
                     {txt}{c |}  {res}.0368577   .0095296
                     {txt}{c |} 
             ciwidth {c |}  {res}1.439011   .1930556
                     {txt}{c |}  {res}.1518228   .0393233
                     {txt}{c |} 
            relerror {c |}  {res}2952.477   529.5402
                     {txt}{c |}  {res}1282.119   281.5128
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}        {res}50        100
                     {txt}{c |}        {res}25          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
no                   {c |}
5%                   {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.290381  -1.324175
                     {txt}{c |}  {res}.0059598   .0014897
                     {txt}{c |} 
                mean {c |}  {res}.7096192    .675825
                     {txt}{c |}  {res}.0059598   .0014897
                     {txt}{c |} 
               empse {c |}  {res}.0119195   .0029794
                     {txt}{c |}  {res}.0048661   .0012163
                     {txt}{c |} 
             relprec {c |} {res}-93.75204           
                     {txt}{c |}   {res}3.11511           
                     {txt}{c |} 
                 mse {c |}  {res}1.665189   1.753446
                     {txt}{c |}  {res}.0154087   .0039448
                     {txt}{c |} 
                rmse {c |}  {res}1.290422   1.324178
                     {txt}{c |}  {res}.0059704   .0014895
                     {txt}{c |} 
             modelse {c |}   {res}.133325   .0265711
                     {txt}{c |}    {res}.01898   .0059097
                     {txt}{c |} 
             ciwidth {c |}  {res}.5060368    .096347
                     {txt}{c |}  {res}.0754172   .0228463
                     {txt}{c |} 
            relerror {c |}  {res}1018.544   791.8282
                     {txt}{c |}  {res}483.6106   414.6121
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
no                   {c |}
5%                   {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.295571  -1.324551
                     {txt}{c |}  {res}.0022705    .001978
                     {txt}{c |} 
                mean {c |}  {res}.7044287   .6754493
                     {txt}{c |}  {res}.0022705    .001978
                     {txt}{c |} 
               empse {c |}  {res}.0045411   .0039559
                     {txt}{c |}  {res}.0018539    .001615
                     {txt}{c |} 
             relprec {c |} {res}-24.10975           
                     {txt}{c |}  {res}44.99243           
                     {txt}{c |} 
                 mse {c |}   {res}1.67852   1.754447
                     {txt}{c |}   {res}.005883   .0052393
                     {txt}{c |} 
                rmse {c |}  {res}1.295577   1.324555
                     {txt}{c |}  {res}.0022704   .0019778
                     {txt}{c |} 
             modelse {c |}   {res}.065235    .014763
                     {txt}{c |}  {res}.0120662   .0038266
                     {txt}{c |} 
             ciwidth {c |}  {res}.2419886   .0522729
                     {txt}{c |}  {res}.0477229    .014335
                     {txt}{c |} 
            relerror {c |}  {res}1336.557   273.1853
                     {txt}{c |}  {res}643.8573   180.4663
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
weak                 {c |}
10%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.322612  -1.464344
                     {txt}{c |}  {res}.0083422   .0005186
                     {txt}{c |} 
                mean {c |}   {res}.677388   .5356563
                     {txt}{c |}  {res}.0083422   .0005186
                     {txt}{c |} 
               empse {c |}  {res}.0166844   .0010373
                     {txt}{c |}  {res}.0068114   .0004235
                     {txt}{c |} 
             relprec {c |} {res}-99.61349           
                     {txt}{c |}  {res}.3820528           
                     {txt}{c |} 
                 mse {c |}  {res}1.749511   2.144303
                     {txt}{c |}  {res}.0219401   .0015185
                     {txt}{c |} 
                rmse {c |}  {res}1.322691   1.464344
                     {txt}{c |}  {res}.0082937   .0005185
                     {txt}{c |} 
             modelse {c |}  {res}.2052136   .0419986
                     {txt}{c |}  {res}.0467231    .010948
                     {txt}{c |} 
             ciwidth {c |}  {res}.7384339   .1471875
                     {txt}{c |}  {res}.1842202   .0425806
                     {txt}{c |} 
            relerror {c |}   {res}1129.97   3948.948
                     {txt}{c |}  {res}574.9432   1961.204
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
weak                 {c |}
10%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}  {res}-1.31763  -1.458816
                     {txt}{c |}  {res}.0084582   .0021574
                     {txt}{c |} 
                mean {c |}  {res}.6823696   .5411837
                     {txt}{c |}  {res}.0084582   .0021574
                     {txt}{c |} 
               empse {c |}  {res}.0169165   .0043148
                     {txt}{c |}  {res}.0069061   .0017615
                     {txt}{c |} 
             relprec {c |}  {res}-93.4942           
                     {txt}{c |}   {res}6.58717           
                     {txt}{c |} 
                 mse {c |}  {res}1.736364   2.128159
                     {txt}{c |}  {res}.0222355   .0062952
                     {txt}{c |} 
                rmse {c |}  {res}1.317712   1.458821
                     {txt}{c |}  {res}.0084372   .0021576
                     {txt}{c |} 
             modelse {c |}  {res}.0880991   .0221883
                     {txt}{c |}  {res}.0256517   .0056539
                     {txt}{c |} 
             ciwidth {c |}  {res}.2976506   .0778027
                     {txt}{c |}  {res}.1011028   .0224475
                     {txt}{c |} 
            relerror {c |}  {res}420.7889   414.2383
                     {txt}{c |}  {res}261.1463   247.4742
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
weak                 {c |}
10%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}  {res}-1.31851  -1.453566
                     {txt}{c |}  {res}.0096718   .0020515
                     {txt}{c |} 
                mean {c |}  {res}.6814897   .5464345
                     {txt}{c |}  {res}.0096718   .0020515
                     {txt}{c |} 
               empse {c |}  {res}.0193437    .004103
                     {txt}{c |}   {res}.007897    .001675
                     {txt}{c |} 
             relprec {c |} {res}-95.50088           
                     {txt}{c |}  {res}3.804135           
                     {txt}{c |} 
                 mse {c |}   {res}1.73875   2.112865
                     {txt}{c |}   {res}.025379    .005966
                     {txt}{c |} 
                rmse {c |}  {res}1.318617    1.45357
                     {txt}{c |}  {res}.0096233   .0020522
                     {txt}{c |} 
             modelse {c |}  {res}.0490649   .0120648
                     {txt}{c |}  {res}.0157494   .0031783
                     {txt}{c |} 
             ciwidth {c |}  {res}.1588838   .0418979
                     {txt}{c |}  {res}.0625755   .0126653
                     {txt}{c |} 
            relerror {c |}   {res}153.648   194.0483
                     {txt}{c |}  {res}131.7267   142.8676
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
weak                 {c |}
20%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.310477  -1.412313
                     {txt}{c |}  {res}.0122318   .0056929
                     {txt}{c |} 
                mean {c |}  {res}.6895231   .5876865
                     {txt}{c |}  {res}.0122318   .0056928
                     {txt}{c |} 
               empse {c |}  {res}.0244637   .0113857
                     {txt}{c |}  {res}.0099872   .0046482
                     {txt}{c |} 
             relprec {c |} {res}-78.33913           
                     {txt}{c |}  {res}14.54391           
                     {txt}{c |} 
                 mse {c |}  {res}1.717799   1.994727
                     {txt}{c |}  {res}.0318443   .0160381
                     {txt}{c |} 
                rmse {c |}  {res}1.310648   1.412348
                     {txt}{c |}  {res}.0121483   .0056778
                     {txt}{c |} 
             modelse {c |}  {res}.1969158   .0347647
                     {txt}{c |}   {res}.058857    .009508
                     {txt}{c |} 
             ciwidth {c |}  {res}.6633276   .1179521
                     {txt}{c |}  {res}.2279029   .0394048
                     {txt}{c |} 
            relerror {c |}  {res}704.9316   205.3367
                     {txt}{c |}  {res}407.2703     150.04
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
weak                 {c |}
20%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.321604  -1.413733
                     {txt}{c |}  {res}.0079814   .0018621
                     {txt}{c |} 
                mean {c |}  {res}.6783956   .5862665
                     {txt}{c |}  {res}.0079814   .0018621
                     {txt}{c |} 
               empse {c |}  {res}.0159629   .0037243
                     {txt}{c |}  {res}.0065168   .0015204
                     {txt}{c |} 
             relprec {c |} {res}-94.55674           
                     {txt}{c |}  {res}6.167929           
                     {txt}{c |} 
                 mse {c |}  {res}1.746829   1.998653
                     {txt}{c |}   {res}.021077   .0052607
                     {txt}{c |} 
                rmse {c |}  {res}1.321677   1.413737
                     {txt}{c |}  {res}.0079736   .0018606
                     {txt}{c |} 
             modelse {c |}  {res}.0936435   .0197906
                     {txt}{c |}  {res}.0301273    .005863
                     {txt}{c |} 
             ciwidth {c |}  {res}.3014613   .0658218
                     {txt}{c |}  {res}.1209211   .0237049
                     {txt}{c |} 
            relerror {c |}  {res}486.6329   431.3952
                     {txt}{c |}  {res}304.9206   268.0417
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
weak                 {c |}
20%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.318235  -1.411376
                     {txt}{c |}   {res}.007356   .0014086
                     {txt}{c |} 
                mean {c |}  {res}.6817653   .5886245
                     {txt}{c |}   {res}.007356   .0014086
                     {txt}{c |} 
               empse {c |}  {res}.0147121   .0028171
                     {txt}{c |}  {res}.0060062   .0011501
                     {txt}{c |} 
             relprec {c |}  {res}-96.3334           
                     {txt}{c |}    {res}4.1837           
                     {txt}{c |} 
                 mse {c |}  {res}1.737905   1.991987
                     {txt}{c |}  {res}.0193248    .003974
                     {txt}{c |} 
                rmse {c |}  {res}1.318296   1.411378
                     {txt}{c |}  {res}.0073295   .0014078
                     {txt}{c |} 
             modelse {c |}  {res}.0502628   .0103889
                     {txt}{c |}  {res}.0156012   .0030028
                     {txt}{c |} 
             ciwidth {c |}  {res}.1609793   .0343871
                     {txt}{c |}  {res}.0655876   .0125955
                     {txt}{c |} 
            relerror {c |}  {res}241.6439   268.7767
                     {txt}{c |}  {res}175.2105   184.4658
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
weak                 {c |}
30%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.319415  -1.400135
                     {txt}{c |}   {res}.003471   .0017714
                     {txt}{c |} 
                mean {c |}  {res}.6805848   .5998653
                     {txt}{c |}   {res}.003471   .0017713
                     {txt}{c |} 
               empse {c |}   {res}.006942   .0035427
                     {txt}{c |}   {res}.002834   .0014463
                     {txt}{c |} 
             relprec {c |} {res}-73.95628           
                     {txt}{c |}  {res}29.04837           
                     {txt}{c |} 
                 mse {c |}  {res}1.740893   1.960387
                     {txt}{c |}  {res}.0091705   .0049638
                     {txt}{c |} 
                rmse {c |}  {res}1.319429   1.400138
                     {txt}{c |}  {res}.0034752   .0017726
                     {txt}{c |} 
             modelse {c |}  {res}.1902515   .0381192
                     {txt}{c |}  {res}.0529474   .0124794
                     {txt}{c |} 
             ciwidth {c |}  {res}.6449639   .1222514
                     {txt}{c |}  {res}.2161774   .0496062
                     {txt}{c |} 
            relerror {c |}  {res}2640.603   975.9955
                     {txt}{c |}  {res}1354.087   563.0686
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
weak                 {c |}
30%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.313372  -1.393573
                     {txt}{c |}  {res}.0071191   .0028635
                     {txt}{c |} 
                mean {c |}  {res}.6866285    .606427
                     {txt}{c |}  {res}.0071191   .0028635
                     {txt}{c |} 
               empse {c |}  {res}.0142382   .0057271
                     {txt}{c |}  {res}.0058127   .0023381
                     {txt}{c |} 
             relprec {c |} {res}-83.82087           
                     {txt}{c |}  {res}15.97923           
                     {txt}{c |} 
                 mse {c |}  {res}1.725097    1.94207
                     {txt}{c |}  {res}.0186937   .0079681
                     {txt}{c |} 
                rmse {c |}  {res}1.313429   1.393582
                     {txt}{c |}  {res}.0071164   .0028589
                     {txt}{c |} 
             modelse {c |}  {res}.0996363   .0194843
                     {txt}{c |}  {res}.0335268   .0059973
                     {txt}{c |} 
             ciwidth {c |}  {res}.3121196   .0629693
                     {txt}{c |}  {res}.1355534   .0249555
                     {txt}{c |} 
            relerror {c |}  {res}599.7835   240.2149
                     {txt}{c |}  {res}370.2202   173.9453
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
weak                 {c |}
30%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.314858  -1.392893
                     {txt}{c |}  {res}.0083999   .0025808
                     {txt}{c |} 
                mean {c |}   {res}.685142   .6071069
                     {txt}{c |}  {res}.0083999   .0025808
                     {txt}{c |} 
               empse {c |}  {res}.0167997   .0051615
                     {txt}{c |}  {res}.0068585   .0021072
                     {txt}{c |} 
             relprec {c |} {res}-90.56036           
                     {txt}{c |}  {res}10.57175           
                     {txt}{c |} 
                 mse {c |}  {res}1.729063   1.940171
                     {txt}{c |}  {res}.0220894   .0071813
                     {txt}{c |} 
                rmse {c |}  {res}1.314938     1.3929
                     {txt}{c |}  {res}.0083994   .0025778
                     {txt}{c |} 
             modelse {c |}  {res}.0568864   .0106986
                     {txt}{c |}  {res}.0196416   .0033009
                     {txt}{c |} 
             ciwidth {c |}  {res}.1751235   .0343321
                     {txt}{c |}  {res}.0797008   .0139056
                     {txt}{c |} 
            relerror {c |}   {res}238.615   107.2758
                     {txt}{c |}  {res}181.0509   106.0678
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
weak                 {c |}
5%                   {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.303792  -1.535749
                     {txt}{c |}   {res}.008946   .0027332
                     {txt}{c |} 
                mean {c |}  {res}.6962081   .4642507
                     {txt}{c |}  {res}.0089459   .0027332
                     {txt}{c |} 
               empse {c |}  {res}.0178919   .0054665
                     {txt}{c |}  {res}.0073043   .0022317
                     {txt}{c |} 
             relprec {c |}  {res}-90.6652           
                     {txt}{c |}  {res}8.262432           
                     {txt}{c |} 
                 mse {c |}  {res}1.700114   2.358548
                     {txt}{c |}  {res}.0233494   .0084083
                     {txt}{c |} 
                rmse {c |}  {res}1.303884   1.535757
                     {txt}{c |}  {res}.0089538   .0027375
                     {txt}{c |} 
             modelse {c |}   {res}.264235   .0566576
                     {txt}{c |}  {res}.0507181   .0097482
                     {txt}{c |} 
             ciwidth {c |}  {res}.9770745   .2124183
                     {txt}{c |}  {res}.1984695   .0374349
                     {txt}{c |} 
            relerror {c |}  {res}1376.842   936.4527
                     {txt}{c |}  {res}666.2324   459.1726
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}        {res}75        100
                     {txt}{c |}  {res}21.65063          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
weak                 {c |}
5%                   {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}  {res}-1.31017  -1.523499
                     {txt}{c |}  {res}.0113827   .0015594
                     {txt}{c |} 
                mean {c |}  {res}.6898302   .4765011
                     {txt}{c |}  {res}.0113827   .0015594
                     {txt}{c |} 
               empse {c |}  {res}.0227653   .0031187
                     {txt}{c |}  {res}.0092939   .0012732
                     {txt}{c |} 
             relprec {c |} {res}-98.12322           
                     {txt}{c |}  {res}.9531453           
                     {txt}{c |} 
                 mse {c |}  {res}1.716933   2.321056
                     {txt}{c |}  {res}.0297173   .0047528
                     {txt}{c |} 
                rmse {c |}  {res}1.310318   1.523501
                     {txt}{c |}  {res}.0113397   .0015598
                     {txt}{c |} 
             modelse {c |}  {res}.0922674   .0289736
                     {txt}{c |}  {res}.0203551   .0053527
                     {txt}{c |} 
             ciwidth {c |}  {res}.3367786    .107508
                     {txt}{c |}   {res}.076144   .0211437
                     {txt}{c |} 
            relerror {c |}  {res}305.2984   829.0139
                     {txt}{c |}  {res}188.0757   416.2946
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
weak                 {c |}
5%                   {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.304921  -1.517664
                     {txt}{c |}  {res}.0120814   .0029386
                     {txt}{c |} 
                mean {c |}  {res}.6950794   .4823362
                     {txt}{c |}  {res}.0120814   .0029386
                     {txt}{c |} 
               empse {c |}  {res}.0241628   .0058772
                     {txt}{c |}  {res}.0098644   .0023993
                     {txt}{c |} 
             relprec {c |}  {res}-94.0838           
                     {txt}{c |}  {res}4.376205           
                     {txt}{c |} 
                 mse {c |}  {res}1.703256   2.303329
                     {txt}{c |}  {res}.0313152   .0089115
                     {txt}{c |} 
                rmse {c |}  {res}1.305088   1.517672
                     {txt}{c |}  {res}.0119973   .0029359
                     {txt}{c |} 
             modelse {c |}  {res}.0485861   .0153613
                     {txt}{c |}  {res}.0132449   .0032243
                     {txt}{c |} 
             ciwidth {c |}  {res}.1682704   .0563872
                     {txt}{c |}  {res}.0515032   .0121976
                     {txt}{c |} 
            relerror {c |}  {res}101.0779   161.3717
                     {txt}{c |}  {res}98.70888   119.9817
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
moderate             {c |}
10%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.335768  -1.505411
                     {txt}{c |}  {res}.0076055   .0027565
                     {txt}{c |} 
                mean {c |}  {res}.6642321   .4945886
                     {txt}{c |}  {res}.0076055   .0027565
                     {txt}{c |} 
               empse {c |}   {res}.015211   .0055131
                     {txt}{c |}  {res}.0062099   .0022507
                     {txt}{c |} 
             relprec {c |} {res}-86.86378           
                     {txt}{c |}  {res}10.14754           
                     {txt}{c |} 
                 mse {c |}  {res}1.784449   2.266286
                     {txt}{c |}  {res}.0202265   .0083008
                     {txt}{c |} 
                rmse {c |}  {res}1.335833   1.505419
                     {txt}{c |}  {res}.0075707    .002757
                     {txt}{c |} 
             modelse {c |}  {res}.1885087   .0442928
                     {txt}{c |}  {res}.0504411   .0104258
                     {txt}{c |} 
             ciwidth {c |}   {res}.647211   .1581195
                     {txt}{c |}  {res}.2058729   .0414077
                     {txt}{c |} 
            relerror {c |}  {res}1139.291   703.4161
                     {txt}{c |}  {res}604.9285   378.6058
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
moderate             {c |}
10%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.330543  -1.497439
                     {txt}{c |}  {res}.0107511   .0019617
                     {txt}{c |} 
                mean {c |}  {res}.6694567   .5025613
                     {txt}{c |}  {res}.0107511   .0019617
                     {txt}{c |} 
               empse {c |}  {res}.0215022   .0039234
                     {txt}{c |}  {res}.0087783   .0016017
                     {txt}{c |} 
             relprec {c |}  {res}-96.6707           
                     {txt}{c |}  {res}2.976892           
                     {txt}{c |} 
                 mse {c |}  {res}1.770692   2.242334
                     {txt}{c |}  {res}.0284992   .0058785
                     {txt}{c |} 
                rmse {c |}  {res}1.330674   1.497442
                     {txt}{c |}  {res}.0107086   .0019628
                     {txt}{c |} 
             modelse {c |}  {res}.0829451   .0230318
                     {txt}{c |}  {res}.0277289   .0057904
                     {txt}{c |} 
             ciwidth {c |}  {res}.2657962   .0809301
                     {txt}{c |}  {res}.1081166   .0231036
                     {txt}{c |} 
            relerror {c |}  {res}285.7509     487.04
                     {txt}{c |}  {res}203.5457   281.4571
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
moderate             {c |}
10%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.330167   -1.49135
                     {txt}{c |}  {res}.0128763   .0014059
                     {txt}{c |} 
                mean {c |}  {res}.6698326   .5086501
                     {txt}{c |}  {res}.0128763   .0014059
                     {txt}{c |} 
               empse {c |}  {res}.0257527   .0028117
                     {txt}{c |}  {res}.0105135   .0011479
                     {txt}{c |} 
             relprec {c |} {res}-98.80792           
                     {txt}{c |}  {res}1.183004           
                     {txt}{c |} 
                 mse {c |}  {res}1.769843    2.22413
                     {txt}{c |}  {res}.0339292   .0041912
                     {txt}{c |} 
                rmse {c |}  {res}1.330354   1.491352
                     {txt}{c |}   {res}.012752   .0014052
                     {txt}{c |} 
             modelse {c |}  {res}.0481117   .0124866
                     {txt}{c |}  {res}.0173689   .0035273
                     {txt}{c |} 
             ciwidth {c |}  {res}.1486677    .043034
                     {txt}{c |}   {res}.066997   .0134642
                     {txt}{c |} 
            relerror {c |}  {res}86.82227   344.0904
                     {txt}{c |}  {res}101.8131   220.4699
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
moderate             {c |}
20%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.323576  -1.445715
                     {txt}{c |}  {res}.0085734   .0018728
                     {txt}{c |} 
                mean {c |}  {res}.6764238   .5542854
                     {txt}{c |}  {res}.0085734   .0018728
                     {txt}{c |} 
               empse {c |}  {res}.0171469   .0037455
                     {txt}{c |}  {res}.0070002   .0015291
                     {txt}{c |} 
             relprec {c |} {res}-95.22855           
                     {txt}{c |}  {res}2.380916           
                     {txt}{c |} 
                 mse {c |}  {res}1.752074   2.090101
                     {txt}{c |}  {res}.0226032    .005412
                     {txt}{c |} 
                rmse {c |}  {res}1.323659   1.445718
                     {txt}{c |}  {res}.0085382   .0018717
                     {txt}{c |} 
             modelse {c |}  {res}.1859418   .0375717
                     {txt}{c |}    {res}.05602   .0113586
                     {txt}{c |} 
             ciwidth {c |}  {res}.6112735   .1249312
                     {txt}{c |}  {res}.2292078   .0450298
                     {txt}{c |} 
            relerror {c |}  {res}984.4075   903.1146
                     {txt}{c |}  {res}550.2068   509.5806
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
moderate             {c |}
20%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.318332  -1.438148
                     {txt}{c |}  {res}.0078557   .0016633
                     {txt}{c |} 
                mean {c |}  {res}.6816677   .5618522
                     {txt}{c |}  {res}.0078557   .0016633
                     {txt}{c |} 
               empse {c |}  {res}.0157114   .0033265
                     {txt}{c |}  {res}.0064141    .001358
                     {txt}{c |} 
             relprec {c |}  {res}-95.5172           
                     {txt}{c |}  {res}4.457277           
                     {txt}{c |} 
                 mse {c |}  {res}1.738185   2.068277
                     {txt}{c |}  {res}.0206071   .0047828
                     {txt}{c |} 
                rmse {c |}  {res}1.318403   1.438151
                     {txt}{c |}  {res}.0078152   .0016628
                     {txt}{c |} 
             modelse {c |}  {res}.0893045   .0203915
                     {txt}{c |}  {res}.0291582   .0058147
                     {txt}{c |} 
             ciwidth {c |}  {res}.2834974   .0682768
                     {txt}{c |}  {res}.1185696   .0239972
                     {txt}{c |} 
            relerror {c |}  {res}468.4061   512.9991
                     {txt}{c |}   {res}297.136   305.2585
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
moderate             {c |}
20%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.315917  -1.434783
                     {txt}{c |}   {res}.009949   .0022675
                     {txt}{c |} 
                mean {c |}  {res}.6840832   .5652167
                     {txt}{c |}  {res}.0099491   .0022675
                     {txt}{c |} 
               empse {c |}  {res}.0198981    .004535
                     {txt}{c |}  {res}.0081234   .0018514
                     {txt}{c |} 
             relprec {c |} {res}-94.80573           
                     {txt}{c |}  {res}5.906548           
                     {txt}{c |} 
                 mse {c |}  {res}1.731934   2.058619
                     {txt}{c |}  {res}.0260458   .0065065
                     {txt}{c |} 
                rmse {c |}   {res}1.31603   1.434789
                     {txt}{c |}  {res}.0098956   .0022674
                     {txt}{c |} 
             modelse {c |}  {res}.0541092   .0112849
                     {txt}{c |}  {res}.0189874    .003536
                     {txt}{c |} 
             ciwidth {c |}  {res}.1656535   .0368925
                     {txt}{c |}  {res}.0764791   .0140922
                     {txt}{c |} 
            relerror {c |}  {res}171.9314   148.8423
                     {txt}{c |}  {res}146.3899   128.0632
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
moderate             {c |}
30%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.319614  -1.422726
                     {txt}{c |}  {res}.0073946    .001668
                     {txt}{c |} 
                mean {c |}  {res}.6803856    .577274
                     {txt}{c |}  {res}.0073946    .001668
                     {txt}{c |} 
               empse {c |}  {res}.0147891   .0033361
                     {txt}{c |}  {res}.0060376   .0013619
                     {txt}{c |} 
             relprec {c |}  {res}-94.9116           
                     {txt}{c |}  {res}4.441133           
                     {txt}{c |} 
                 mse {c |}  {res}1.741546   2.024158
                     {txt}{c |}  {res}.0194968   .0047506
                     {txt}{c |} 
                rmse {c |}  {res}1.319677   1.422729
                     {txt}{c |}   {res}.007387   .0016695
                     {txt}{c |} 
             modelse {c |}  {res}.1956813   .0360864
                     {txt}{c |}  {res}.0611328   .0107791
                     {txt}{c |} 
             ciwidth {c |}  {res}.6325325   .1181885
                     {txt}{c |}  {res}.2505187    .044875
                     {txt}{c |} 
            relerror {c |}  {res}1223.142   981.7075
                     {txt}{c |}  {res}680.1862   547.1885
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
moderate             {c |}
30%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.311115  -1.415575
                     {txt}{c |}   {res}.008456   .0021711
                     {txt}{c |} 
                mean {c |}  {res}.6888851   .5844252
                     {txt}{c |}   {res}.008456   .0021711
                     {txt}{c |} 
               empse {c |}   {res}.016912   .0043422
                     {txt}{c |}  {res}.0069043   .0017727
                     {txt}{c |} 
             relprec {c |} {res}-93.40773           
                     {txt}{c |}  {res}6.654604           
                     {txt}{c |} 
                 mse {c |}  {res}1.719237   2.003866
                     {txt}{c |}  {res}.0221285   .0061479
                     {txt}{c |} 
                rmse {c |}  {res}1.311197    1.41558
                     {txt}{c |}  {res}.0084383   .0021715
                     {txt}{c |} 
             modelse {c |}  {res}.0941064   .0199547
                     {txt}{c |}  {res}.0308587   .0060608
                     {txt}{c |} 
             ciwidth {c |}  {res}.2951816   .0648619
                     {txt}{c |}  {res}.1277339   .0252418
                     {txt}{c |} 
            relerror {c |}  {res}456.4487   359.5502
                     {txt}{c |}  {res}291.3761   233.8366
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
moderate             {c |}
30%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.313955  -1.413535
                     {txt}{c |}  {res}.0097463   .0014303
                     {txt}{c |} 
                mean {c |}  {res}.6860448   .5864645
                     {txt}{c |}  {res}.0097463   .0014303
                     {txt}{c |} 
               empse {c |}  {res}.0194925   .0028607
                     {txt}{c |}  {res}.0079578   .0011679
                     {txt}{c |} 
             relprec {c |} {res}-97.84624           
                     {txt}{c |}  {res}2.017239           
                     {txt}{c |} 
                 mse {c |}  {res}1.726763   1.998089
                     {txt}{c |}  {res}.0254873   .0040442
                     {txt}{c |} 
                rmse {c |}  {res}1.314064   1.413538
                     {txt}{c |}  {res}.0096979   .0014305
                     {txt}{c |} 
             modelse {c |}  {res}.0529183   .0108453
                     {txt}{c |}  {res}.0182776   .0033571
                     {txt}{c |} 
             ciwidth {c |}  {res}.1627363    .035092
                     {txt}{c |}  {res}.0742664    .013855
                     {txt}{c |} 
            relerror {c |}  {res}171.4798   279.1183
                     {txt}{c |}  {res}145.1751   194.2343
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
moderate             {c |}
5%                   {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.337845  -1.584004
                     {txt}{c |}  {res}.0064772   .0027025
                     {txt}{c |} 
                mean {c |}  {res}.6621546   .4159955
                     {txt}{c |}  {res}.0064772   .0027025
                     {txt}{c |} 
               empse {c |}  {res}.0129544   .0054051
                     {txt}{c |}  {res}.0052886   .0022066
                     {txt}{c |} 
             relprec {c |} {res}-82.59091           
                     {txt}{c |}  {res}8.982574           
                     {txt}{c |} 
                 mse {c |}  {res}1.789956   2.509092
                     {txt}{c |}   {res}.017339   .0085618
                     {txt}{c |} 
                rmse {c |}  {res}1.337892   1.584011
                     {txt}{c |}    {res}.00648   .0027026
                     {txt}{c |} 
             modelse {c |}  {res}.2028341   .0543078
                     {txt}{c |}  {res}.0411289   .0087037
                     {txt}{c |} 
             ciwidth {c |}  {res}.7420592   .2045152
                     {txt}{c |}  {res}.1648479   .0341202
                     {txt}{c |} 
            relerror {c |}  {res}1465.761   904.7514
                     {txt}{c |}  {res}713.7239    440.663
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
moderate             {c |}
5%                   {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.334315  -1.574284
                     {txt}{c |}  {res}.0092651   .0029027
                     {txt}{c |} 
                mean {c |}  {res}.6656853    .425716
                     {txt}{c |}  {res}.0092651   .0029027
                     {txt}{c |} 
               empse {c |}  {res}.0185302   .0058054
                     {txt}{c |}  {res}.0075649     .00237
                     {txt}{c |} 
             relprec {c |} {res}-90.18477           
                     {txt}{c |}  {res}7.050734           
                     {txt}{c |} 
                 mse {c |}  {res}1.780653   2.478395
                     {txt}{c |}  {res}.0246864   .0091398
                     {txt}{c |} 
                rmse {c |}  {res}1.334411   1.574292
                     {txt}{c |}  {res}.0092499   .0029028
                     {txt}{c |} 
             modelse {c |}  {res}.0789515    .030026
                     {txt}{c |}   {res}.020798   .0054573
                     {txt}{c |} 
             ciwidth {c |}  {res}.2745824   .1119543
                     {txt}{c |}  {res}.0824316    .020972
                     {txt}{c |} 
            relerror {c |}  {res}326.0701   417.2115
                     {txt}{c |}  {res}207.0108   231.1311
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
moderate             {c |}
5%                   {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.332132  -1.567755
                     {txt}{c |}  {res}.0112369    .003054
                     {txt}{c |} 
                mean {c |}  {res}.6678677   .4322456
                     {txt}{c |}  {res}.0112369    .003054
                     {txt}{c |} 
               empse {c |}  {res}.0224739    .006108
                     {txt}{c |}  {res}.0091749   .0024936
                     {txt}{c |} 
             relprec {c |} {res}-92.61353           
                     {txt}{c |}  {res}5.861673           
                     {txt}{c |} 
                 mse {c |}  {res}1.774955   2.457882
                     {txt}{c |}  {res}.0297777   .0095639
                     {txt}{c |} 
                rmse {c |}  {res}1.332274   1.567763
                     {txt}{c |}  {res}.0111755   .0030502
                     {txt}{c |} 
             modelse {c |}    {res}.03942   .0161334
                     {txt}{c |}  {res}.0114021   .0033872
                     {txt}{c |} 
             ciwidth {c |}  {res}.1342517   .0591517
                     {txt}{c |}  {res}.0441738   .0129176
                     {txt}{c |} 
            relerror {c |}  {res}75.40361   164.1372
                     {txt}{c |}  {res}87.75974   121.2576
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
strong               {c |}
10%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.346992  -1.540549
                     {txt}{c |}  {res}.0096389   .0025089
                     {txt}{c |} 
                mean {c |}  {res}.6530082    .459451
                     {txt}{c |}  {res}.0096389   .0025089
                     {txt}{c |} 
               empse {c |}  {res}.0192778   .0050178
                     {txt}{c |}  {res}.0078701   .0020485
                     {txt}{c |} 
             relprec {c |} {res}-93.22506           
                     {txt}{c |}  {res}6.928863           
                     {txt}{c |} 
                 mse {c |}  {res}1.814666    2.37331
                     {txt}{c |}  {res}.0259019   .0077218
                     {txt}{c |} 
                rmse {c |}  {res}1.347095   1.540555
                     {txt}{c |}   {res}.009614   .0025062
                     {txt}{c |} 
             modelse {c |}  {res}.1750659   .0433741
                     {txt}{c |}  {res}.0601997   .0105609
                     {txt}{c |} 
             ciwidth {c |}  {res}.5573696   .1546803
                     {txt}{c |}  {res}.2311367   .0407513
                     {txt}{c |} 
            relerror {c |}  {res}808.1226   764.4124
                     {txt}{c |}  {res}484.7303   410.8925
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
strong               {c |}
10%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}  {res}-1.34503  -1.530939
                     {txt}{c |}  {res}.0124883   .0017897
                     {txt}{c |} 
                mean {c |}    {res}.65497   .4690607
                     {txt}{c |}  {res}.0124883   .0017897
                     {txt}{c |} 
               empse {c |}  {res}.0249767   .0035793
                     {txt}{c |}  {res}.0101967   .0014612
                     {txt}{c |} 
             relprec {c |} {res}-97.94634           
                     {txt}{c |}  {res}1.010798           
                     {txt}{c |} 
                 mse {c |}  {res}1.809573   2.343785
                     {txt}{c |}  {res}.0333731   .0054798
                     {txt}{c |} 
                rmse {c |}  {res}1.345204   1.530942
                     {txt}{c |}  {res}.0124045   .0017897
                     {txt}{c |} 
             modelse {c |}  {res}.0772049   .0241389
                     {txt}{c |}  {res}.0279108   .0065876
                     {txt}{c |} 
             ciwidth {c |}  {res}.2378946   .0838675
                     {txt}{c |}  {res}.1080058   .0252963
                     {txt}{c |} 
            relerror {c |}  {res}209.1082   574.4029
                     {txt}{c |}  {res}168.5592    331.175
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
strong               {c |}
10%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.342437  -1.524728
                     {txt}{c |}  {res}.0137875    .001306
                     {txt}{c |} 
                mean {c |}  {res}.6575634   .4752722
                     {txt}{c |}  {res}.0137875   .0013061
                     {txt}{c |} 
               empse {c |}  {res}.0275751   .0026121
                     {txt}{c |}  {res}.0112575   .0010664
                     {txt}{c |} 
             relprec {c |} {res}-99.10267           
                     {txt}{c |}  {res}.4297986           
                     {txt}{c |} 
                 mse {c |}  {res}1.802706     2.3248
                     {txt}{c |}  {res}.0366819   .0039839
                     {txt}{c |} 
                rmse {c |}  {res}1.342649   1.524729
                     {txt}{c |}  {res}.0136603   .0013064
                     {txt}{c |} 
             modelse {c |}  {res}.0428798   .0130068
                     {txt}{c |}  {res}.0149205   .0033311
                     {txt}{c |} 
             ciwidth {c |}  {res}.1324771    .045428
                     {txt}{c |}   {res}.059729   .0133646
                     {txt}{c |} 
            relerror {c |}  {res}55.50212   397.9401
                     {txt}{c |}  {res}83.41412   239.9713
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
strong               {c |}
20%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.326409  -1.473115
                     {txt}{c |}  {res}.0121115   .0038339
                     {txt}{c |} 
                mean {c |}  {res}.6735908   .5268852
                     {txt}{c |}  {res}.0121115   .0038339
                     {txt}{c |} 
               empse {c |}  {res}.0242229   .0076677
                     {txt}{c |}   {res}.009889   .0031303
                     {txt}{c |} 
             relprec {c |} {res}-89.97971           
                     {txt}{c |}  {res}11.46337           
                     {txt}{c |} 
                 mse {c |}  {res}1.759802   2.170111
                     {txt}{c |}  {res}.0319175    .011273
                     {txt}{c |} 
                rmse {c |}  {res}1.326575    1.47313
                     {txt}{c |}    {res}.01203   .0038262
                     {txt}{c |} 
             modelse {c |}  {res}.1810259   .0375184
                     {txt}{c |}  {res}.0533854    .011893
                     {txt}{c |} 
             ciwidth {c |}  {res}.5877746   .1238078
                     {txt}{c |}  {res}.2295394   .0458298
                     {txt}{c |} 
            relerror {c |}  {res}647.3322    389.303
                     {txt}{c |}  {res}376.3733   252.9036
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
strong               {c |}
20%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.320677  -1.464485
                     {txt}{c |}  {res}.0129522   .0021427
                     {txt}{c |} 
                mean {c |}  {res}.6793229   .5355146
                     {txt}{c |}  {res}.0129522   .0021427
                     {txt}{c |} 
               empse {c |}  {res}.0259045   .0042853
                     {txt}{c |}  {res}.0105755   .0017495
                     {txt}{c |} 
             relprec {c |} {res}-97.26339           
                     {txt}{c |}  {res}3.038562           
                     {txt}{c |} 
                 mse {c |}  {res}1.744691   2.144731
                     {txt}{c |}  {res}.0339575   .0062694
                     {txt}{c |} 
                rmse {c |}  {res}1.320868    1.46449
                     {txt}{c |}  {res}.0128543   .0021405
                     {txt}{c |} 
             modelse {c |}  {res}.0869733   .0215078
                     {txt}{c |}  {res}.0293229   .0068415
                     {txt}{c |} 
             ciwidth {c |}  {res}.2697357   .0708565
                     {txt}{c |}  {res}.1203816   .0263777
                     {txt}{c |} 
            relerror {c |}  {res}235.7462   401.8961
                     {txt}{c |}  {res}177.7665   259.7524
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
strong               {c |}
20%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.321249  -1.461507
                     {txt}{c |}  {res}.0146235   .0007733
                     {txt}{c |} 
                mean {c |}  {res}.6787515   .5384933
                     {txt}{c |}  {res}.0146235   .0007733
                     {txt}{c |} 
               empse {c |}   {res}.029247   .0015466
                     {txt}{c |}    {res}.01194   .0006314
                     {txt}{c |} 
             relprec {c |} {res}-99.72036           
                     {txt}{c |}   {res}.220433           
                     {txt}{c |} 
                 mse {c |}  {res}1.746339   2.136003
                     {txt}{c |}  {res}.0382599   .0022607
                     {txt}{c |} 
                rmse {c |}  {res}1.321491   1.461507
                     {txt}{c |}   {res}.014476   .0007734
                     {txt}{c |} 
             modelse {c |}  {res}.0509225   .0105073
                     {txt}{c |}  {res}.0186498   .0032334
                     {txt}{c |} 
             ciwidth {c |}  {res}.1535463   .0346648
                     {txt}{c |}  {res}.0736405   .0128425
                     {txt}{c |} 
            relerror {c |}  {res}74.11227   579.3782
                     {txt}{c |}  {res}95.49196   347.3232
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
strong               {c |}
30%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.317039   -1.44319
                     {txt}{c |}  {res}.0110862   .0033553
                     {txt}{c |} 
                mean {c |}   {res}.682961   .5568095
                     {txt}{c |}  {res}.0110861   .0033553
                     {txt}{c |} 
               empse {c |}  {res}.0221723   .0067105
                     {txt}{c |}  {res}.0090518   .0027396
                     {txt}{c |} 
             relprec {c |} {res}-90.84008           
                     {txt}{c |}   {res}9.98138           
                     {txt}{c |} 
                 mse {c |}   {res}1.73496   2.082833
                     {txt}{c |}  {res}.0290313   .0096704
                     {txt}{c |} 
                rmse {c |}  {res}1.317179   1.443202
                     {txt}{c |}  {res}.0110203   .0033503
                     {txt}{c |} 
             modelse {c |}  {res}.1788421   .0365641
                     {txt}{c |}  {res}.0591189   .0116468
                     {txt}{c |} 
             ciwidth {c |}  {res}.5603464   .1186898
                     {txt}{c |}  {res}.2432284    .046389
                     {txt}{c |} 
            relerror {c |}  {res}706.6017   444.8767
                     {txt}{c |}  {res}423.7076   282.1435
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
strong               {c |}
30%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.308761  -1.436584
                     {txt}{c |}   {res}.013178   .0029443
                     {txt}{c |} 
                mean {c |}  {res}.6912392   .5634166
                     {txt}{c |}   {res}.013178   .0029443
                     {txt}{c |} 
               empse {c |}   {res}.026356   .0058885
                     {txt}{c |}  {res}.0107598    .002404
                     {txt}{c |} 
             relprec {c |} {res}-95.00821           
                     {txt}{c |}  {res}5.718401           
                     {txt}{c |} 
                 mse {c |}  {res}1.713376   2.063798
                     {txt}{c |}  {res}.0344282   .0084461
                     {txt}{c |} 
                rmse {c |}   {res}1.30896   1.436592
                     {txt}{c |}   {res}.013151   .0029396
                     {txt}{c |} 
             modelse {c |}  {res}.0972982   .0192351
                     {txt}{c |}  {res}.0337942   .0056557
                     {txt}{c |} 
             ciwidth {c |}  {res}.2979257   .0632561
                     {txt}{c |}  {res}.1374866   .0236913
                     {txt}{c |} 
            relerror {c |}  {res}269.1688   226.6522
                     {txt}{c |}  {res}197.8765   164.3427
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
strong               {c |}
30%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.312228  -1.433862
                     {txt}{c |}  {res}.0145424   .0015023
                     {txt}{c |} 
                mean {c |}  {res}.6877719   .5661381
                     {txt}{c |}  {res}.0145424   .0015023
                     {txt}{c |} 
               empse {c |}  {res}.0290849   .0030047
                     {txt}{c |}  {res}.0118739   .0012267
                     {txt}{c |} 
             relprec {c |} {res}-98.93276           
                     {txt}{c |}  {res}1.225645           
                     {txt}{c |} 
                 mse {c |}  {res}1.722577   2.055967
                     {txt}{c |}  {res}.0378943   .0043039
                     {txt}{c |} 
                rmse {c |}   {res}1.31247   1.433864
                     {txt}{c |}  {res}.0144363   .0015008
                     {txt}{c |} 
             modelse {c |}  {res}.0568311   .0109436
                     {txt}{c |}  {res}.0210723   .0034231
                     {txt}{c |} 
             ciwidth {c |}  {res}.1698593   .0353147
                     {txt}{c |}  {res}.0832185   .0140609
                     {txt}{c |} 
            relerror {c |}  {res}95.39731   264.2189
                     {txt}{c |}  {res}107.7614   187.3184
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
strong               {c |}
5%                   {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.387593  -1.629363
                     {txt}{c |}  {res}.0037779   .0024111
                     {txt}{c |} 
                mean {c |}  {res}.6124072   .3706375
                     {txt}{c |}  {res}.0037779   .0024111
                     {txt}{c |} 
               empse {c |}  {res}.0075557   .0048223
                     {txt}{c |}  {res}.0030846   .0019687
                     {txt}{c |} 
             relprec {c |} {res}-59.26667           
                     {txt}{c |}  {res}46.95397           
                     {txt}{c |} 
                 mse {c |}  {res}1.925457    2.65484
                     {txt}{c |}  {res}.0104936   .0078567
                     {txt}{c |} 
                rmse {c |}  {res}1.387608   1.629368
                     {txt}{c |}  {res}.0037812    .002411
                     {txt}{c |} 
             modelse {c |}  {res}.1468192   .0573192
                     {txt}{c |}  {res}.0367409    .010234
                     {txt}{c |} 
             ciwidth {c |}  {res}.5195262   .2135077
                     {txt}{c |}  {res}.1429643   .0404094
                     {txt}{c |} 
            relerror {c |}  {res}1843.153   1088.637
                     {txt}{c |}  {res}930.4634   529.6375
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
strong               {c |}
5%                   {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.371233   -1.61694
                     {txt}{c |}  {res}.0046516    .001737
                     {txt}{c |} 
                mean {c |}  {res}.6287673   .3830604
                     {txt}{c |}  {res}.0046515    .001737
                     {txt}{c |} 
               empse {c |}  {res}.0093031    .003474
                     {txt}{c |}   {res}.003798   .0014183
                     {txt}{c |} 
             relprec {c |} {res}-86.05521           
                     {txt}{c |}  {res}6.199282           
                     {txt}{c |} 
                 mse {c |}  {res}1.880344   2.614503
                     {txt}{c |}  {res}.0127709   .0056189
                     {txt}{c |} 
                rmse {c |}  {res}1.371256   1.616942
                     {txt}{c |}  {res}.0046567   .0017375
                     {txt}{c |} 
             modelse {c |}  {res}.0657162   .0305793
                     {txt}{c |}  {res}.0222947   .0060669
                     {txt}{c |} 
             ciwidth {c |}  {res}.2124721   .1132536
                     {txt}{c |}  {res}.0840928   .0226723
                     {txt}{c |} 
            relerror {c |}   {res}606.392   780.2272
                     {txt}{c |}  {res}374.9622   399.5388
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.67                 {c |}
strong               {c |}
5%                   {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-1.367252  -1.609501
                     {txt}{c |}  {res}.0096495   .0014294
                     {txt}{c |} 
                mean {c |}  {res}.6327477   .3904988
                     {txt}{c |}  {res}.0096494   .0014294
                     {txt}{c |} 
               empse {c |}  {res}.0192989   .0028587
                     {txt}{c |}  {res}.0078787   .0011671
                     {txt}{c |} 
             relprec {c |} {res}-97.80582           
                     {txt}{c |}  {res}1.754967           
                     {txt}{c |} 
                 mse {c |}  {res}1.869658     2.5905
                     {txt}{c |}  {res}.0264679   .0046047
                     {txt}{c |} 
                rmse {c |}  {res}1.367355   1.609503
                     {txt}{c |}  {res}.0096785   .0014305
                     {txt}{c |} 
             modelse {c |}  {res}.0351889   .0164918
                     {txt}{c |}  {res}.0123342   .0030054
                     {txt}{c |} 
             ciwidth {c |}  {res}.1124393   .0614735
                     {txt}{c |}  {res}.0461312   .0115501
                     {txt}{c |} 
            relerror {c |}  {res}82.33624   476.8992
                     {txt}{c |}  {res}98.11111   257.9176
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
no                   {c |}
10%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.232929  -2.245385
                     {txt}{c |}  {res}.0051654   .0024822
                     {txt}{c |} 
                mean {c |}  {res}.7670715   .7546154
                     {txt}{c |}  {res}.0051654   .0024822
                     {txt}{c |} 
               empse {c |}  {res}.0103308   .0049643
                     {txt}{c |}  {res}.0042175   .0020267
                     {txt}{c |} 
             relprec {c |} {res}-76.90845           
                     {txt}{c |}  {res}22.37316           
                     {txt}{c |} 
                 mse {c |}   {res}4.98605   5.041771
                     {txt}{c |}  {res}.0230188   .0111565
                     {txt}{c |} 
                rmse {c |}  {res}2.232946   2.245389
                     {txt}{c |}  {res}.0051544   .0024843
                     {txt}{c |} 
             modelse {c |}  {res}.2535026   .0437996
                     {txt}{c |}  {res}.0586608   .0116367
                     {txt}{c |} 
             ciwidth {c |}  {res}.9181318   .1507977
                     {txt}{c |}  {res}.2194671   .0473919
                     {txt}{c |} 
            relerror {c |}  {res}2353.863   782.2903
                     {txt}{c |}  {res}1151.521   429.7516
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
no                   {c |}
10%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.231122  -2.246655
                     {txt}{c |}   {res}.003995   .0007711
                     {txt}{c |} 
                mean {c |}  {res}.7688783   .7533455
                     {txt}{c |}   {res}.003995   .0007711
                     {txt}{c |} 
               empse {c |}    {res}.00799   .0015422
                     {txt}{c |}  {res}.0032619   .0006296
                     {txt}{c |} 
             relprec {c |} {res}-96.27428           
                     {txt}{c |}  {res}4.195987           
                     {txt}{c |} 
                 mse {c |}  {res}4.977952   5.047458
                     {txt}{c |}  {res}.0178101   .0034654
                     {txt}{c |} 
                rmse {c |}  {res}2.231133   2.246655
                     {txt}{c |}  {res}.0039913   .0007712
                     {txt}{c |} 
             modelse {c |}  {res}.1063039   .0226614
                     {txt}{c |}  {res}.0278328   .0062992
                     {txt}{c |} 
             ciwidth {c |}  {res}.3734632   .0773049
                     {txt}{c |}  {res}.1067196   .0252648
                     {txt}{c |} 
            relerror {c |}  {res}1230.458   1369.379
                     {txt}{c |}  {res}645.2625   725.7207
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
no                   {c |}
10%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.230956  -2.243401
                     {txt}{c |}  {res}.0025895    .001471
                     {txt}{c |} 
                mean {c |}  {res}.7690443    .756599
                     {txt}{c |}  {res}.0025895   .0014709
                     {txt}{c |} 
               empse {c |}   {res}.005179   .0029419
                     {txt}{c |}  {res}.0021143    .001201
                     {txt}{c |} 
             relprec {c |} {res}-67.73344           
                     {txt}{c |}  {res}7.441112           
                     {txt}{c |} 
                 mse {c |}  {res}4.977183   5.032855
                     {txt}{c |}  {res}.0115604   .0065997
                     {txt}{c |} 
                rmse {c |}   {res}2.23096   2.243402
                     {txt}{c |}  {res}.0025909   .0014709
                     {txt}{c |} 
             modelse {c |}  {res}.0567928   .0115897
                     {txt}{c |}  {res}.0172679   .0033985
                     {txt}{c |} 
             ciwidth {c |}  {res}.1907738   .0392245
                     {txt}{c |}  {res}.0662485   .0132339
                     {txt}{c |} 
            relerror {c |}  {res}996.5975   293.9595
                     {txt}{c |}  {res}558.2039   198.0221
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
no                   {c |}
20%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.234753  -2.245992
                     {txt}{c |}  {res}.0033831    .002718
                     {txt}{c |} 
                mean {c |}  {res}.7652475   .7540081
                     {txt}{c |}  {res}.0033831    .002718
                     {txt}{c |} 
               empse {c |}  {res}.0067662    .005436
                     {txt}{c |}  {res}.0027623   .0022192
                     {txt}{c |} 
             relprec {c |} {res}-35.45534           
                     {txt}{c |}   {res}52.0661           
                     {txt}{c |} 
                 mse {c |}  {res}4.994153   5.044502
                     {txt}{c |}  {res}.0151306   .0121961
                     {txt}{c |} 
                rmse {c |}   {res}2.23476   2.245997
                     {txt}{c |}  {res}.0033853   .0027151
                     {txt}{c |} 
             modelse {c |}  {res}.2193014   .0379675
                     {txt}{c |}  {res}.0647024   .0115331
                     {txt}{c |} 
             ciwidth {c |}  {res}.7508261   .1254342
                     {txt}{c |}   {res}.241696   .0462479
                     {txt}{c |} 
            relerror {c |}  {res}3141.107    598.448
                     {txt}{c |}  {res}1632.548   355.4116
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
no                   {c |}
20%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}  {res}-2.23736  -2.245711
                     {txt}{c |}  {res}.0021565   .0015276
                     {txt}{c |} 
                mean {c |}  {res}.7626403   .7542891
                     {txt}{c |}  {res}.0021564   .0015276
                     {txt}{c |} 
               empse {c |}  {res}.0043129   .0030552
                     {txt}{c |}  {res}.0017607   .0012473
                     {txt}{c |} 
             relprec {c |} {res}-49.81994           
                     {txt}{c |}  {res}6.349419           
                     {txt}{c |} 
                 mse {c |}  {res}5.005793   5.043224
                     {txt}{c |}  {res}.0096569   .0068643
                     {txt}{c |} 
                rmse {c |}  {res}2.237363   2.245713
                     {txt}{c |}  {res}.0021581   .0015283
                     {txt}{c |} 
             modelse {c |}  {res}.1013801   .0197967
                     {txt}{c |}  {res}.0332946   .0060674
                     {txt}{c |} 
             ciwidth {c |}  {res}.3286685    .064613
                     {txt}{c |}  {res}.1289781   .0248136
                     {txt}{c |} 
            relerror {c |}   {res}2250.63   547.9741
                     {txt}{c |}   {res}1231.61   330.7852
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
no                   {c |}
20%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.240013  -2.247705
                     {txt}{c |}  {res}.0025425   .0009066
                     {txt}{c |} 
                mean {c |}  {res}.7599871   .7522954
                     {txt}{c |}  {res}.0025424   .0009067
                     {txt}{c |} 
               empse {c |}  {res}.0050849   .0018134
                     {txt}{c |}  {res}.0020759   .0007403
                     {txt}{c |} 
             relprec {c |} {res}-87.28247           
                     {txt}{c |}  {res}5.054417           
                     {txt}{c |} 
                 mse {c |}  {res}5.017677   5.052178
                     {txt}{c |}  {res}.0113886   .0040755
                     {txt}{c |} 
                rmse {c |}  {res}2.240017   2.247705
                     {txt}{c |}  {res}.0025421   .0009066
                     {txt}{c |} 
             modelse {c |}  {res}.0553165   .0108301
                     {txt}{c |}  {res}.0176913   .0034171
                     {txt}{c |} 
             ciwidth {c |}  {res}.1774258   .0350146
                     {txt}{c |}  {res}.0719682   .0138592
                     {txt}{c |} 
            relerror {c |}  {res}987.8627   497.2395
                     {txt}{c |}  {res}564.1707    308.154
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
no                   {c |}
30%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.238239  -2.242858
                     {txt}{c |}  {res}.0035051   .0025372
                     {txt}{c |} 
                mean {c |}  {res}.7617615   .7571423
                     {txt}{c |}  {res}.0035051   .0025371
                     {txt}{c |} 
               empse {c |}  {res}.0070103   .0050743
                     {txt}{c |}  {res}.0028619   .0020716
                     {txt}{c |} 
             relprec {c |} {res}-47.60596           
                     {txt}{c |}  {res}53.16092           
                     {txt}{c |} 
                 mse {c |}  {res}5.009748    5.03043
                     {txt}{c |}  {res}.0156884    .011376
                     {txt}{c |} 
                rmse {c |}  {res}2.238247   2.242862
                     {txt}{c |}  {res}.0035046   .0025361
                     {txt}{c |} 
             modelse {c |}  {res}.1973581   .0358592
                     {txt}{c |}  {res}.0551595   .0114372
                     {txt}{c |} 
             ciwidth {c |}  {res}.6699032   .1155153
                     {txt}{c |}  {res}.2234071   .0462415
                     {txt}{c |} 
            relerror {c |}  {res}2715.273   606.6835
                     {txt}{c |}  {res}1392.867   366.1102
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
no                   {c |}
30%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.241478    -2.2468
                     {txt}{c |}  {res}.0024975   .0006771
                     {txt}{c |} 
                mean {c |}  {res}.7585217   .7531995
                     {txt}{c |}  {res}.0024975   .0006771
                     {txt}{c |} 
               empse {c |}   {res}.004995   .0013543
                     {txt}{c |}  {res}.0020392   .0005529
                     {txt}{c |} 
             relprec {c |} {res}-92.64895           
                     {txt}{c |}  {res}3.368405           
                     {txt}{c |} 
                 mse {c |}  {res}5.024244   5.048114
                     {txt}{c |}  {res}.0111854   .0030425
                     {txt}{c |} 
                rmse {c |}  {res}2.241482   2.246801
                     {txt}{c |}  {res}.0024951   .0006771
                     {txt}{c |} 
             modelse {c |}  {res}.1008408   .0200108
                     {txt}{c |}  {res}.0328516   .0064567
                     {txt}{c |} 
             ciwidth {c |}  {res}.3219757   .0638779
                     {txt}{c |}  {res}.1323942   .0262844
                     {txt}{c |} 
            relerror {c |}  {res}1918.817    1377.58
                     {txt}{c |}  {res}1054.428   768.8784
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
no                   {c |}
30%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}   {res}-2.2421  -2.247514
                     {txt}{c |}   {res}.003669     .00129
                     {txt}{c |} 
                mean {c |}  {res}.7579004   .7524861
                     {txt}{c |}  {res}.0036689     .00129
                     {txt}{c |} 
               empse {c |}  {res}.0073379     .00258
                     {txt}{c |}  {res}.0029957   .0010533
                     {txt}{c |} 
             relprec {c |} {res}-87.63787           
                     {txt}{c |}  {res}7.886221           
                     {txt}{c |} 
                 mse {c |}  {res}5.027051   5.051323
                     {txt}{c |}  {res}.0164408   .0058001
                     {txt}{c |} 
                rmse {c |}  {res}2.242109   2.247515
                     {txt}{c |}  {res}.0036664   .0012903
                     {txt}{c |} 
             modelse {c |}  {res}.0582359   .0108591
                     {txt}{c |}  {res}.0197129   .0035503
                     {txt}{c |} 
             ciwidth {c |}  {res}.1831336   .0344561
                     {txt}{c |}  {res}.0786852   .0144305
                     {txt}{c |} 
            relerror {c |}  {res}693.6357   320.8985
                     {txt}{c |}  {res}420.8884   220.1428
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
no                   {c |}
5%                   {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.214927  -2.242032
                     {txt}{c |}  {res}.0068736   .0020908
                     {txt}{c |} 
                mean {c |}  {res}.7850732   .7579681
                     {txt}{c |}  {res}.0068735   .0020908
                     {txt}{c |} 
               empse {c |}  {res}.0137471   .0041817
                     {txt}{c |}  {res}.0056122   .0017072
                     {txt}{c |} 
             relprec {c |} {res}-90.74712           
                     {txt}{c |}  {res}7.072717           
                     {txt}{c |} 
                 mse {c |}  {res}4.906043    5.02672
                     {txt}{c |}  {res}.0303811   .0093776
                     {txt}{c |} 
                rmse {c |}  {res}2.214959   2.242035
                     {txt}{c |}  {res}.0068582   .0020913
                     {txt}{c |} 
             modelse {c |}  {res}.3704284   .0557929
                     {txt}{c |}  {res}.0583126    .011881
                     {txt}{c |} 
             ciwidth {c |}  {res}1.404071    .203663
                     {txt}{c |}  {res}.2137287   .0460177
                     {txt}{c |} 
            relerror {c |}    {res}2594.6   1234.229
                     {txt}{c |}  {res}1179.015   614.3454
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}        {res}75        100
                     {txt}{c |}  {res}21.65063          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
no                   {c |}
5%                   {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.219182  -2.243489
                     {txt}{c |}  {res}.0064163   .0022797
                     {txt}{c |} 
                mean {c |}  {res}.7808182   .7565112
                     {txt}{c |}  {res}.0064163   .0022797
                     {txt}{c |} 
               empse {c |}  {res}.0128326   .0045593
                     {txt}{c |}  {res}.0052389   .0018613
                     {txt}{c |} 
             relprec {c |}  {res}-87.3767           
                     {txt}{c |}  {res}2.406091           
                     {txt}{c |} 
                 mse {c |}  {res}4.924891   5.033257
                     {txt}{c |}  {res}.0284402   .0102263
                     {txt}{c |} 
                rmse {c |}  {res}2.219209   2.243492
                     {txt}{c |}  {res}.0064077   .0022791
                     {txt}{c |} 
             modelse {c |}  {res}.1296627   .0291581
                     {txt}{c |}  {res}.0218461   .0068076
                     {txt}{c |} 
             ciwidth {c |}  {res}.4873208   .1038655
                     {txt}{c |}  {res}.0833773   .0275435
                     {txt}{c |} 
            relerror {c |}   {res}910.416   539.5263
                     {txt}{c |}  {res}446.2488   300.7654
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
no                   {c |}
5%                   {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.218931  -2.242794
                     {txt}{c |}  {res}.0034149   .0008912
                     {txt}{c |} 
                mean {c |}  {res}.7810687   .7572058
                     {txt}{c |}   {res}.003415   .0008913
                     {txt}{c |} 
               empse {c |}  {res}.0068299   .0017825
                     {txt}{c |}  {res}.0027883   .0007277
                     {txt}{c |} 
             relprec {c |} {res}-93.18855           
                     {txt}{c |}  {res}7.330318           
                     {txt}{c |} 
                 mse {c |}  {res}4.923691   5.030128
                     {txt}{c |}  {res}.0151496   .0039989
                     {txt}{c |} 
                rmse {c |}  {res}2.218939   2.242795
                     {txt}{c |}  {res}.0034137   .0008915
                     {txt}{c |} 
             modelse {c |}  {res}.0613097   .0148142
                     {txt}{c |}  {res}.0120983   .0035124
                     {txt}{c |} 
             ciwidth {c |}  {res}.2264171    .053142
                     {txt}{c |}  {res}.0465244    .013517
                     {txt}{c |} 
            relerror {c |}  {res}797.6638    731.082
                     {txt}{c |}  {res}407.0353   392.3577
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
weak                 {c |}
10%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.248282  -2.399629
                     {txt}{c |}  {res}.0086557   .0034221
                     {txt}{c |} 
                mean {c |}  {res}.7517182   .6003708
                     {txt}{c |}  {res}.0086557   .0034221
                     {txt}{c |} 
               empse {c |}  {res}.0173114   .0068441
                     {txt}{c |}  {res}.0070674   .0027941
                     {txt}{c |} 
             relprec {c |} {res}-84.36952           
                     {txt}{c |}   {res}17.9218           
                     {txt}{c |} 
                 mse {c |}  {res}5.054996   5.758255
                     {txt}{c |}  {res}.0388471   .0164004
                     {txt}{c |} 
                rmse {c |}  {res}2.248332   2.399637
                     {txt}{c |}  {res}.0086391   .0034173
                     {txt}{c |} 
             modelse {c |}  {res}.2068946   .0452893
                     {txt}{c |}  {res}.0510383   .0123212
                     {txt}{c |} 
             ciwidth {c |}  {res}.7409815   .1575303
                     {txt}{c |}  {res}.1903389    .047263
                     {txt}{c |} 
            relerror {c |}  {res}1095.132   561.7225
                     {txt}{c |}  {res}570.0683   324.6362
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
weak                 {c |}
10%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.238935  -2.388066
                     {txt}{c |}  {res}.0095935   .0026686
                     {txt}{c |} 
                mean {c |}  {res}.7610644   .6119337
                     {txt}{c |}  {res}.0095935   .0026687
                     {txt}{c |} 
               empse {c |}   {res}.019187   .0053373
                     {txt}{c |}  {res}.0078331   .0021789
                     {txt}{c |} 
             relprec {c |} {res}-92.26198           
                     {txt}{c |}  {res}7.433784           
                     {txt}{c |} 
                 mse {c |}  {res}5.013109   5.702882
                     {txt}{c |}  {res}.0428016   .0127463
                     {txt}{c |} 
                rmse {c |}  {res}2.238997   2.388071
                     {txt}{c |}  {res}.0095582   .0026687
                     {txt}{c |} 
             modelse {c |}  {res}.0929661   .0237444
                     {txt}{c |}   {res}.029234   .0068496
                     {txt}{c |} 
             ciwidth {c |}  {res}.3065841   .0809073
                     {txt}{c |}  {res}.1137372   .0265656
                     {txt}{c |} 
            relerror {c |}  {res}384.5258    344.875
                     {txt}{c |}   {res}249.684   222.3856
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
weak                 {c |}
10%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.237282  -2.383771
                     {txt}{c |}  {res}.0122407   .0023669
                     {txt}{c |} 
                mean {c |}   {res}.762718   .6162288
                     {txt}{c |}  {res}.0122407   .0023669
                     {txt}{c |} 
               empse {c |}  {res}.0244815   .0047338
                     {txt}{c |}  {res}.0099945   .0019326
                     {txt}{c |} 
             relprec {c |} {res}-96.26109           
                     {txt}{c |}  {res}4.223072           
                     {txt}{c |} 
                 mse {c |}   {res}5.00588   5.682382
                     {txt}{c |}  {res}.0545046   .0112769
                     {txt}{c |} 
                rmse {c |}  {res}2.237382   2.383775
                     {txt}{c |}  {res}.0121804   .0023653
                     {txt}{c |} 
             modelse {c |}  {res}.0498932   .0125197
                     {txt}{c |}  {res}.0161877   .0035506
                     {txt}{c |} 
             ciwidth {c |}   {res}.161802   .0427236
                     {txt}{c |}  {res}.0634316   .0139424
                     {txt}{c |} 
            relerror {c |}  {res}103.7995   164.4738
                     {txt}{c |}  {res}106.2757   131.4665
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
weak                 {c |}
20%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}  {res}-2.24159  -2.344385
                     {txt}{c |}  {res}.0092378   .0021701
                     {txt}{c |} 
                mean {c |}  {res}.7584102   .6556148
                     {txt}{c |}  {res}.0092377   .0021701
                     {txt}{c |} 
               empse {c |}  {res}.0184755   .0043403
                     {txt}{c |}  {res}.0075426   .0017719
                     {txt}{c |} 
             relprec {c |} {res}-94.48119           
                     {txt}{c |}  {res}4.928472           
                     {txt}{c |} 
                 mse {c |}  {res}5.024981   5.496156
                     {txt}{c |}  {res}.0413114   .0101784
                     {txt}{c |} 
                rmse {c |}  {res}2.241647   2.344388
                     {txt}{c |}  {res}.0092145   .0021708
                     {txt}{c |} 
             modelse {c |}  {res}.2000194    .039085
                     {txt}{c |}  {res}.0587903   .0117769
                     {txt}{c |} 
             ciwidth {c |}  {res}.6708274   .1288654
                     {txt}{c |}  {res}.2343382   .0478438
                     {txt}{c |} 
            relerror {c |}  {res}982.6222   800.5168
                     {txt}{c |}  {res}544.6111   456.9242
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
weak                 {c |}
20%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.243223  -2.341583
                     {txt}{c |}  {res}.0102291   .0016383
                     {txt}{c |} 
                mean {c |}  {res}.7567774   .6584167
                     {txt}{c |}  {res}.0102291   .0016383
                     {txt}{c |} 
               empse {c |}  {res}.0204581   .0032767
                     {txt}{c |}   {res}.008352   .0013377
                     {txt}{c |} 
             relprec {c |} {res}-97.43475           
                     {txt}{c |}  {res}2.950839           
                     {txt}{c |} 
                 mse {c |}  {res}5.032362    5.48302
                     {txt}{c |}   {res}.045774   .0076714
                     {txt}{c |} 
                rmse {c |}  {res}2.243293   2.341585
                     {txt}{c |}  {res}.0102024   .0016381
                     {txt}{c |} 
             modelse {c |}  {res}.0997346    .022578
                     {txt}{c |}   {res}.032046   .0070692
                     {txt}{c |} 
             ciwidth {c |}  {res}.3195392   .0732013
                     {txt}{c |}  {res}.1300493   .0287203
                     {txt}{c |} 
            relerror {c |}  {res}387.5062    589.057
                     {txt}{c |}  {res}253.2726   354.5128
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
weak                 {c |}
20%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.232298  -2.335013
                     {txt}{c |}  {res}.0084814    .002012
                     {txt}{c |} 
                mean {c |}  {res}.7677021   .6649874
                     {txt}{c |}  {res}.0084814    .002012
                     {txt}{c |} 
               empse {c |}  {res}.0169627   .0040239
                     {txt}{c |}   {res}.006925   .0016428
                     {txt}{c |} 
             relprec {c |} {res}-94.37259           
                     {txt}{c |}  {res}6.497476           
                     {txt}{c |} 
                 mse {c |}   {res}4.98337   5.452296
                     {txt}{c |}  {res}.0378551    .009392
                     {txt}{c |} 
                rmse {c |}  {res}2.232346   2.335015
                     {txt}{c |}  {res}.0084788   .0020111
                     {txt}{c |} 
             modelse {c |}  {res}.0547305   .0114955
                     {txt}{c |}  {res}.0187957   .0038235
                     {txt}{c |} 
             ciwidth {c |}  {res}.1708952   .0368276
                     {txt}{c |}  {res}.0748824   .0149918
                     {txt}{c |} 
            relerror {c |}  {res}222.6521   185.6783
                     {txt}{c |}  {res}172.1298   150.4343
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
weak                 {c |}
30%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.240288   -2.32569
                     {txt}{c |}  {res}.0069784   .0011123
                     {txt}{c |} 
                mean {c |}  {res}.7597117     .67431
                     {txt}{c |}  {res}.0069783   .0011122
                     {txt}{c |} 
               empse {c |}  {res}.0139567   .0022245
                     {txt}{c |}  {res}.0056978   .0009081
                     {txt}{c |} 
             relprec {c |} {res}-97.45966           
                     {txt}{c |}  {res}2.848079           
                     {txt}{c |} 
                 mse {c |}  {res}5.019038   5.408837
                     {txt}{c |}  {res}.0311948   .0051731
                     {txt}{c |} 
                rmse {c |}  {res}2.240321   2.325691
                     {txt}{c |}  {res}.0069621   .0011122
                     {txt}{c |} 
             modelse {c |}  {res}.2041017   .0380224
                     {txt}{c |}  {res}.0603386    .012115
                     {txt}{c |} 
             ciwidth {c |}  {res}.6768402   .1221532
                     {txt}{c |}  {res}.2462989   .0493054
                     {txt}{c |} 
            relerror {c |}  {res}1362.396   1609.276
                     {txt}{c |}  {res}737.1172    885.183
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
weak                 {c |}
30%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.235368  -2.321266
                     {txt}{c |}  {res}.0074865   .0014906
                     {txt}{c |} 
                mean {c |}  {res}.7646317   .6787337
                     {txt}{c |}  {res}.0074866   .0014906
                     {txt}{c |} 
               empse {c |}  {res}.0149731   .0029812
                     {txt}{c |}  {res}.0061128   .0012171
                     {txt}{c |} 
             relprec {c |} {res}-96.03567           
                     {txt}{c |}  {res}4.299961           
                     {txt}{c |} 
                 mse {c |}  {res}4.997039   5.388284
                     {txt}{c |}  {res}.0334358   .0069205
                     {txt}{c |} 
                rmse {c |}  {res}2.235406   2.321268
                     {txt}{c |}  {res}.0074787   .0014907
                     {txt}{c |} 
             modelse {c |}  {res}.0908626   .0185175
                     {txt}{c |}  {res}.0292322   .0056455
                     {txt}{c |} 
             ciwidth {c |}   {res}.289776   .0604339
                     {txt}{c |}  {res}.1195694    .023214
                     {txt}{c |} 
            relerror {c |}  {res}506.8379   521.1338
                     {txt}{c |}   {res}315.421   316.4833
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
weak                 {c |}
30%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.233274   -2.31738
                     {txt}{c |}   {res}.007493   .0014249
                     {txt}{c |} 
                mean {c |}  {res}.7667262   .6826202
                     {txt}{c |}   {res}.007493   .0014249
                     {txt}{c |} 
               empse {c |}  {res}.0149859   .0028498
                     {txt}{c |}   {res}.006118   .0011634
                     {txt}{c |} 
             relprec {c |} {res}-96.38381           
                     {txt}{c |}  {res}3.861875           
                     {txt}{c |} 
                 mse {c |}   {res}4.98768   5.370255
                     {txt}{c |}  {res}.0333912    .006603
                     {txt}{c |} 
                rmse {c |}  {res}2.233312   2.317381
                     {txt}{c |}  {res}.0074757   .0014247
                     {txt}{c |} 
             modelse {c |}    {res}.05234   .0100443
                     {txt}{c |}  {res}.0168617   .0030517
                     {txt}{c |} 
             ciwidth {c |}  {res}.1656556   .0326528
                     {txt}{c |}   {res}.069887    .012702
                     {txt}{c |} 
            relerror {c |}  {res}249.2612   252.4608
                     {txt}{c |}  {res}181.6333   179.3667
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
weak                 {c |}
5%                   {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.226623  -2.470659
                     {txt}{c |}   {res}.004482   .0041815
                     {txt}{c |} 
                mean {c |}  {res}.7733774   .5293407
                     {txt}{c |}   {res}.004482   .0041815
                     {txt}{c |} 
               empse {c |}   {res}.008964    .008363
                     {txt}{c |}  {res}.0036595   .0034142
                     {txt}{c |} 
             relprec {c |} {res}-12.95799           
                     {txt}{c |}  {res}76.19517           
                     {txt}{c |} 
                 mse {c |}  {res}4.957909    6.10421
                     {txt}{c |}  {res}.0199244   .0206585
                     {txt}{c |} 
                rmse {c |}  {res}2.226636    2.47067
                     {txt}{c |}  {res}.0044741   .0041807
                     {txt}{c |} 
             modelse {c |}  {res}.2488987   .0570822
                     {txt}{c |}  {res}.0376741   .0106074
                     {txt}{c |} 
             ciwidth {c |}  {res}.9419717   .2113285
                     {txt}{c |}  {res}.1467558    .042458
                     {txt}{c |} 
            relerror {c |}  {res}2676.661   582.5536
                     {txt}{c |}  {res}1208.972   306.1601
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
weak                 {c |}
5%                   {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.231151  -2.461983
                     {txt}{c |}  {res}.0117968   .0030571
                     {txt}{c |} 
                mean {c |}  {res}.7688493   .5380166
                     {txt}{c |}  {res}.0117968   .0030571
                     {txt}{c |} 
               empse {c |}  {res}.0235936   .0061141
                     {txt}{c |}  {res}.0096321   .0024961
                     {txt}{c |} 
             relprec {c |}  {res}-93.2845           
                     {txt}{c |}  {res}5.051341           
                     {txt}{c |} 
                 mse {c |}  {res}4.978451    6.06139
                     {txt}{c |}  {res}.0524367   .0150377
                     {txt}{c |} 
                rmse {c |}  {res}2.231244   2.461989
                     {txt}{c |}  {res}.0117506    .003054
                     {txt}{c |} 
             modelse {c |}  {res}.0951379    .031122
                     {txt}{c |}  {res}.0245243   .0064895
                     {txt}{c |} 
             ciwidth {c |}  {res}.3363164   .1138644
                     {txt}{c |}  {res}.0930426   .0252847
                     {txt}{c |} 
            relerror {c |}  {res}303.2354   409.0186
                     {txt}{c |}  {res}194.6901   233.3433
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
weak                 {c |}
5%                   {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.228713  -2.455407
                     {txt}{c |}  {res}.0158392   .0016359
                     {txt}{c |} 
                mean {c |}  {res}.7712873   .5445932
                     {txt}{c |}  {res}.0158392    .001636
                     {txt}{c |} 
               empse {c |}  {res}.0316784   .0032719
                     {txt}{c |}  {res}.0129327   .0013358
                     {txt}{c |} 
             relprec {c |}  {res}-98.9332           
                     {txt}{c |}  {res}.5258248           
                     {txt}{c |} 
                 mse {c |}  {res}4.967913    6.02903
                     {txt}{c |}  {res}.0702844   .0080322
                     {txt}{c |} 
                rmse {c |}  {res}2.228882   2.455408
                     {txt}{c |}  {res}.0157667   .0016356
                     {txt}{c |} 
             modelse {c |}  {res}.0487938   .0162591
                     {txt}{c |}  {res}.0130966   .0035159
                     {txt}{c |} 
             ciwidth {c |}  {res}.1693696   .0592094
                     {txt}{c |}  {res}.0513076    .013618
                     {txt}{c |} 
            relerror {c |}  {res}54.02834   396.9267
                     {txt}{c |}  {res}75.25497   229.5705
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
moderate             {c |}
10%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.247947  -2.440362
                     {txt}{c |}  {res}.0105104   .0029538
                     {txt}{c |} 
                mean {c |}  {res}.7520528   .5596382
                     {txt}{c |}  {res}.0105104   .0029537
                     {txt}{c |} 
               empse {c |}  {res}.0210209   .0059075
                     {txt}{c |}  {res}.0085817   .0024117
                     {txt}{c |} 
             relprec {c |}  {res}-92.1023           
                     {txt}{c |}  {res}9.107986           
                     {txt}{c |} 
                 mse {c |}  {res}5.053598   5.955392
                     {txt}{c |}  {res}.0471207   .0144017
                     {txt}{c |} 
                rmse {c |}  {res}2.248021   2.440367
                     {txt}{c |}  {res}.0104805   .0029507
                     {txt}{c |} 
             modelse {c |}  {res}.1792902   .0446331
                     {txt}{c |}  {res}.0486365   .0123823
                     {txt}{c |} 
             ciwidth {c |}  {res}.6177602   .1547781
                     {txt}{c |}  {res}.1934829   .0470963
                     {txt}{c |} 
            relerror {c |}  {res}752.9158   655.5372
                     {txt}{c |}  {res}418.0638   372.9253
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
moderate             {c |}
10%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.249758  -2.430328
                     {txt}{c |}   {res}.012098   .0017425
                     {txt}{c |} 
                mean {c |}  {res}.7502415   .5696718
                     {txt}{c |}   {res}.012098   .0017426
                     {txt}{c |} 
               empse {c |}   {res}.024196   .0034851
                     {txt}{c |}   {res}.009878   .0014228
                     {txt}{c |} 
             relprec {c |} {res}-97.92536           
                     {txt}{c |}  {res}.8443724           
                     {txt}{c |} 
                 mse {c |}  {res}5.061852   5.906505
                     {txt}{c |}  {res}.0542704   .0084745
                     {txt}{c |} 
                rmse {c |}  {res}2.249856    2.43033
                     {txt}{c |}  {res}.0120609   .0017435
                     {txt}{c |} 
             modelse {c |}  {res}.0821843   .0241382
                     {txt}{c |}  {res}.0264152   .0065804
                     {txt}{c |} 
             ciwidth {c |}  {res}.2679447   .0834341
                     {txt}{c |}   {res}.103264   .0257664
                     {txt}{c |} 
            relerror {c |}    {res}239.66   592.6118
                     {txt}{c |}  {res}176.4839   340.0038
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
moderate             {c |}
10%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.245427   -2.42547
                     {txt}{c |}  {res}.0146995   .0021324
                     {txt}{c |} 
                mean {c |}  {res}.7545733   .5745297
                     {txt}{c |}  {res}.0146994   .0021324
                     {txt}{c |} 
               empse {c |}  {res}.0293989   .0042648
                     {txt}{c |}   {res}.012002   .0017411
                     {txt}{c |} 
             relprec {c |} {res}-97.89561           
                     {txt}{c |}  {res}1.359108           
                     {txt}{c |} 
                 mse {c |}  {res}5.042589    5.88292
                     {txt}{c |}  {res}.0655882   .0103461
                     {txt}{c |} 
                rmse {c |}  {res}2.245571   2.425473
                     {txt}{c |}  {res}.0146039   .0021328
                     {txt}{c |} 
             modelse {c |}  {res}.0490827   .0137354
                     {txt}{c |}  {res}.0174778   .0040088
                     {txt}{c |} 
             ciwidth {c |}  {res}.1519178   .0466462
                     {txt}{c |}   {res}.068164    .015525
                     {txt}{c |} 
            relerror {c |}   {res}66.9544   222.0686
                     {txt}{c |}  {res}90.44347   161.6288
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
moderate             {c |}
20%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.239079  -2.374092
                     {txt}{c |}  {res}.0111316   .0033454
                     {txt}{c |} 
                mean {c |}  {res}.7609205    .625908
                     {txt}{c |}  {res}.0111316   .0033454
                     {txt}{c |} 
               empse {c |}  {res}.0222633   .0066908
                     {txt}{c |}  {res}.0090889   .0027315
                     {txt}{c |} 
             relprec {c |} {res}-90.96819           
                     {txt}{c |}  {res}10.42588           
                     {txt}{c |} 
                 mse {c |}  {res}5.013849   5.636346
                     {txt}{c |}  {res}.0496955   .0158624
                     {txt}{c |} 
                rmse {c |}  {res}2.239162   2.374099
                     {txt}{c |}  {res}.0110969   .0033407
                     {txt}{c |} 
             modelse {c |}  {res}.1830333   .0379972
                     {txt}{c |}  {res}.0520726   .0118631
                     {txt}{c |} 
             ciwidth {c |}  {res}.6150562   .1245927
                     {txt}{c |}  {res}.2132912   .0471229
                     {txt}{c |} 
            relerror {c |}  {res}722.1309   467.9049
                     {txt}{c |}  {res}409.0924   291.8729
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
moderate             {c |}
20%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.241221  -2.368948
                     {txt}{c |}  {res}.0114628   .0017511
                     {txt}{c |} 
                mean {c |}  {res}.7587786   .6310526
                     {txt}{c |}  {res}.0114628   .0017511
                     {txt}{c |} 
               empse {c |}  {res}.0229256   .0035022
                     {txt}{c |}  {res}.0093593   .0014298
                     {txt}{c |} 
             relprec {c |} {res}-97.66633           
                     {txt}{c |}  {res}2.162933           
                     {txt}{c |} 
                 mse {c |}  {res}5.023468   5.611921
                     {txt}{c |}  {res}.0511461    .008295
                     {txt}{c |} 
                rmse {c |}  {res}2.241309   2.368949
                     {txt}{c |}  {res}.0114099   .0017508
                     {txt}{c |} 
             modelse {c |}  {res}.0983059    .021309
                     {txt}{c |}  {res}.0322554   .0064112
                     {txt}{c |} 
             ciwidth {c |}  {res}.3088367   .0700873
                     {txt}{c |}  {res}.1330614    .026236
                     {txt}{c |} 
            relerror {c |}  {res}328.8042    508.447
                     {txt}{c |}  {res}224.5905   308.5669
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
moderate             {c |}
20%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.231988   -2.36334
                     {txt}{c |}    {res}.01146   .0022229
                     {txt}{c |} 
                mean {c |}  {res}.7680123   .6366599
                     {txt}{c |}    {res}.01146   .0022229
                     {txt}{c |} 
               empse {c |}    {res}.02292   .0044459
                     {txt}{c |}   {res}.009357    .001815
                     {txt}{c |} 
             relprec {c |}  {res}-96.2374           
                     {txt}{c |}  {res}4.339787           
                     {txt}{c |} 
                 mse {c |}  {res}4.982163   5.585392
                     {txt}{c |}  {res}.0510222   .0104981
                     {txt}{c |} 
                rmse {c |}  {res}2.232076   2.363343
                     {txt}{c |}  {res}.0114293    .002221
                     {txt}{c |} 
             modelse {c |}  {res}.0520443   .0112812
                     {txt}{c |}  {res}.0171688   .0033129
                     {txt}{c |} 
             ciwidth {c |}  {res}.1624168    .037412
                     {txt}{c |}  {res}.0712759   .0136121
                     {txt}{c |} 
            relerror {c |}  {res}127.0694   153.7439
                     {txt}{c |}  {res}119.1828   127.6068
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
moderate             {c |}
30%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.230862  -2.346169
                     {txt}{c |}  {res}.0056264   .0051033
                     {txt}{c |} 
                mean {c |}  {res}.7691385   .6538303
                     {txt}{c |}  {res}.0056264   .0051033
                     {txt}{c |} 
               empse {c |}  {res}.0112528   .0102066
                     {txt}{c |}  {res}.0045939   .0041668
                     {txt}{c |} 
             relprec {c |} {res}-17.73015           
                     {txt}{c |}  {res}86.12239           
                     {txt}{c |} 
                 mse {c |}  {res}4.976838    5.50459
                     {txt}{c |}  {res}.0250436   .0239208
                     {txt}{c |} 
                rmse {c |}  {res}2.230883   2.346186
                     {txt}{c |}  {res}.0056129   .0050978
                     {txt}{c |} 
             modelse {c |}  {res}.1917354   .0376865
                     {txt}{c |}  {res}.0614847   .0125889
                     {txt}{c |} 
             ciwidth {c |}  {res}.6221689   .1206373
                     {txt}{c |}  {res}.2434419   .0492282
                     {txt}{c |} 
            relerror {c |}   {res}1603.89   269.2361
                     {txt}{c |}   {res}884.545   194.7703
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
moderate             {c |}
30%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.237885  -2.345692
                     {txt}{c |}  {res}.0137902   .0011885
                     {txt}{c |} 
                mean {c |}  {res}.7621155   .6543077
                     {txt}{c |}  {res}.0137902   .0011886
                     {txt}{c |} 
               empse {c |}  {res}.0275804   .0023771
                     {txt}{c |}  {res}.0112597   .0009704
                     {txt}{c |} 
             relprec {c |} {res}-99.25716           
                     {txt}{c |}  {res}.8419302           
                     {txt}{c |} 
                 mse {c |}  {res}5.008698   5.502276
                     {txt}{c |}  {res}.0615233   .0055746
                     {txt}{c |} 
                rmse {c |}  {res}2.238012   2.345693
                     {txt}{c |}  {res}.0137451   .0011883
                     {txt}{c |} 
             modelse {c |}  {res}.1015461   .0205413
                     {txt}{c |}  {res}.0369787   .0067518
                     {txt}{c |} 
             ciwidth {c |}  {res}.3090735   .0656902
                     {txt}{c |}  {res}.1448218   .0268845
                     {txt}{c |} 
            relerror {c |}  {res}268.1819   764.1324
                     {txt}{c |}  {res}201.4184   452.9123
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
moderate             {c |}
30%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.231634  -2.342683
                     {txt}{c |}  {res}.0111877   .0009688
                     {txt}{c |} 
                mean {c |}  {res}.7683662    .657317
                     {txt}{c |}  {res}.0111877   .0009688
                     {txt}{c |} 
               empse {c |}  {res}.0223754   .0019376
                     {txt}{c |}  {res}.0091347    .000791
                     {txt}{c |} 
             relprec {c |} {res}-99.25011           
                     {txt}{c |}  {res}.6014416           
                     {txt}{c |} 
                 mse {c |}  {res}4.980565   5.488166
                     {txt}{c |}  {res}.0496999   .0045395
                     {txt}{c |} 
                rmse {c |}  {res}2.231718   2.342684
                     {txt}{c |}  {res}.0111349   .0009689
                     {txt}{c |} 
             modelse {c |}  {res}.0555604   .0103571
                     {txt}{c |}  {res}.0203584   .0033656
                     {txt}{c |} 
             ciwidth {c |}  {res}.1684244   .0332054
                     {txt}{c |}  {res}.0797222   .0134867
                     {txt}{c |} 
            relerror {c |}  {res}148.3101   434.5256
                     {txt}{c |}  {res}136.2158   278.9109
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
moderate             {c |}
5%                   {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.263521  -2.530488
                     {txt}{c |}   {res}.011056   .0028382
                     {txt}{c |} 
                mean {c |}  {res}.7364794    .469512
                     {txt}{c |}   {res}.011056   .0028382
                     {txt}{c |} 
               empse {c |}   {res}.022112   .0056765
                     {txt}{c |}  {res}.0090272   .0023174
                     {txt}{c |} 
             relprec {c |} {res}-93.40976           
                     {txt}{c |}  {res}3.460395           
                     {txt}{c |} 
                 mse {c |}  {res}5.123892   6.403394
                     {txt}{c |}  {res}.0500835   .0143599
                     {txt}{c |} 
                rmse {c |}  {res}2.263602   2.530493
                     {txt}{c |}  {res}.0110628   .0028374
                     {txt}{c |} 
             modelse {c |}  {res}.1936832    .056726
                     {txt}{c |}   {res}.044045    .010098
                     {txt}{c |} 
             ciwidth {c |}  {res}.7013735   .2116791
                     {txt}{c |}  {res}.1678261    .039314
                     {txt}{c |} 
            relerror {c |}   {res}775.921   899.3198
                     {txt}{c |}  {res}409.3286   445.0682
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
moderate             {c |}
5%                   {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.253247  -2.519275
                     {txt}{c |}  {res}.0082502   .0033181
                     {txt}{c |} 
                mean {c |}  {res}.7467527   .4807248
                     {txt}{c |}  {res}.0082502   .0033181
                     {txt}{c |} 
               empse {c |}  {res}.0165003   .0066362
                     {txt}{c |}  {res}.0067362   .0027092
                     {txt}{c |} 
             relprec {c |} {res}-83.82445           
                     {txt}{c |}  {res}12.54653           
                     {txt}{c |} 
                 mse {c |}  {res}5.077327    6.34678
                     {txt}{c |}  {res}.0370665   .0167052
                     {txt}{c |} 
                rmse {c |}  {res}2.253293   2.519282
                     {txt}{c |}   {res}.008225   .0033155
                     {txt}{c |} 
             modelse {c |}  {res}.0799625   .0309887
                     {txt}{c |}  {res}.0242534   .0054548
                     {txt}{c |} 
             ciwidth {c |}  {res}.2727838   .1158399
                     {txt}{c |}  {res}.0891405   .0211099
                     {txt}{c |} 
            relerror {c |}  {res}384.6117   366.9613
                     {txt}{c |}  {res}246.4685   207.6021
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
moderate             {c |}
5%                   {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.256226  -2.511199
                     {txt}{c |}  {res}.0160305   .0019544
                     {txt}{c |} 
                mean {c |}  {res}.7437745   .4888015
                     {txt}{c |}  {res}.0160305   .0019545
                     {txt}{c |} 
               empse {c |}  {res}.0320609   .0039089
                     {txt}{c |}  {res}.0130888   .0015958
                     {txt}{c |} 
             relprec {c |} {res}-98.51351           
                     {txt}{c |}  {res}.3771211           
                     {txt}{c |} 
                 mse {c |}  {res}5.091324   6.306129
                     {txt}{c |}  {res}.0721236   .0098188
                     {txt}{c |} 
                rmse {c |}  {res}2.256396   2.511201
                     {txt}{c |}   {res}.015982    .001955
                     {txt}{c |} 
             modelse {c |}  {res}.0430395   .0166033
                     {txt}{c |}  {res}.0145918   .0034356
                     {txt}{c |} 
             ciwidth {c |}  {res}.1406338   .0610424
                     {txt}{c |}  {res}.0538076   .0130349
                     {txt}{c |} 
            relerror {c |}  {res}34.24273   324.7548
                     {txt}{c |}  {res}71.23856   194.4076
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
strong               {c |}
10%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.268098  -2.481844
                     {txt}{c |}  {res}.0121745   .0016024
                     {txt}{c |} 
                mean {c |}  {res}.7319016   .5181559
                     {txt}{c |}  {res}.0121745   .0016023
                     {txt}{c |} 
               empse {c |}  {res}.0243489   .0032047
                     {txt}{c |}  {res}.0099404   .0013083
                     {txt}{c |} 
             relprec {c |} {res}-98.26775           
                     {txt}{c |}  {res}.8631083           
                     {txt}{c |} 
                 mse {c |}  {res}5.144715   6.159558
                     {txt}{c |}  {res}.0550501   .0079586
                     {txt}{c |} 
                rmse {c |}  {res}2.268196   2.481846
                     {txt}{c |}  {res}.0121352   .0016034
                     {txt}{c |} 
             modelse {c |}  {res}.1668207   .0460362
                     {txt}{c |}  {res}.0560354   .0127637
                     {txt}{c |} 
             ciwidth {c |}  {res}.5289817   .1594029
                     {txt}{c |}  {res}.2219582     .04884
                     {txt}{c |} 
            relerror {c |}  {res}585.1259   1336.529
                     {txt}{c |}  {res}362.2086   708.9174
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
strong               {c |}
10%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.258989  -2.468607
                     {txt}{c |}  {res}.0131977   .0015061
                     {txt}{c |} 
                mean {c |}  {res}.7410106   .5313929
                     {txt}{c |}  {res}.0131977   .0015062
                     {txt}{c |} 
               empse {c |}  {res}.0263955   .0030123
                     {txt}{c |}  {res}.0107759   .0012298
                     {txt}{c |} 
             relprec {c |} {res}-98.69759           
                     {txt}{c |}  {res}.7677642           
                     {txt}{c |} 
                 mse {c |}  {res}5.103556   6.094028
                     {txt}{c |}  {res}.0593399   .0074361
                     {txt}{c |} 
                rmse {c |}  {res}2.259105   2.468608
                     {txt}{c |}  {res}.0131335   .0015061
                     {txt}{c |} 
             modelse {c |}  {res}.0733307   .0245739
                     {txt}{c |}  {res}.0233373   .0062494
                     {txt}{c |} 
             ciwidth {c |}  {res}.2321319   .0862147
                     {txt}{c |}  {res}.0978825   .0248063
                     {txt}{c |} 
            relerror {c |}  {res}177.8156   715.7731
                     {txt}{c |}  {res}143.8076     392.37
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
strong               {c |}
10%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.264643  -2.464252
                     {txt}{c |}  {res}.0192464   .0004797
                     {txt}{c |} 
                mean {c |}  {res}.7353569    .535748
                     {txt}{c |}  {res}.0192464   .0004797
                     {txt}{c |} 
               empse {c |}  {res}.0384927   .0009594
                     {txt}{c |}  {res}.0157146   .0003917
                     {txt}{c |} 
             relprec {c |} {res}-99.93787           
                     {txt}{c |}  {res}.0670696           
                     {txt}{c |} 
                 mse {c |}   {res}5.12972   6.072538
                     {txt}{c |}  {res}.0865795   .0023644
                     {txt}{c |} 
                rmse {c |}  {res}2.264889   2.464252
                     {txt}{c |}  {res}.0191134   .0004797
                     {txt}{c |} 
             modelse {c |}  {res}.0463007   .0127932
                     {txt}{c |}  {res}.0175126   .0033925
                     {txt}{c |} 
             ciwidth {c |}  {res}.1385413   .0446978
                     {txt}{c |}  {res}.0676928    .013127
                     {txt}{c |} 
            relerror {c |}  {res}20.28435    1233.44
                     {txt}{c |}  {res}66.94223   649.1387
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
strong               {c |}
20%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.240554  -2.404206
                     {txt}{c |}   {res}.014336   .0020096
                     {txt}{c |} 
                mean {c |}  {res}.7594461   .5957942
                     {txt}{c |}   {res}.014336   .0020096
                     {txt}{c |} 
               empse {c |}   {res}.028672   .0040192
                     {txt}{c |}  {res}.0117053   .0016408
                     {txt}{c |} 
             relprec {c |} {res}-98.03501           
                     {txt}{c |}  {res}.9958162           
                     {txt}{c |} 
                 mse {c |}  {res}5.020699   5.780218
                     {txt}{c |}  {res}.0640175   .0096635
                     {txt}{c |} 
                rmse {c |}  {res}2.240691   2.404208
                     {txt}{c |}  {res}.0142852   .0020097
                     {txt}{c |} 
             modelse {c |}  {res}.2691713   .0385966
                     {txt}{c |}  {res}.0730656   .0117077
                     {txt}{c |} 
             ciwidth {c |}  {res}.8751388   .1280297
                     {txt}{c |}  {res}.3403114   .0465435
                     {txt}{c |} 
            relerror {c |}  {res}838.7941   860.3087
                     {txt}{c |}  {res}460.2484   488.4178
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}        {res}75        100
                     {txt}{c |}  {res}21.65063          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
strong               {c |}
20%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.238555  -2.396704
                     {txt}{c |}  {res}.0168086   .0010253
                     {txt}{c |} 
                mean {c |}  {res}.7614448   .6032964
                     {txt}{c |}  {res}.0168086   .0010253
                     {txt}{c |} 
               empse {c |}  {res}.0336172   .0020505
                     {txt}{c |}  {res}.0137242   .0008371
                     {txt}{c |} 
             relprec {c |} {res}-99.62795           
                     {txt}{c |}  {res}.2950498           
                     {txt}{c |} 
                 mse {c |}  {res}5.011977   5.744191
                     {txt}{c |}  {res}.0747749   .0049137
                     {txt}{c |} 
                rmse {c |}  {res}2.238744   2.396704
                     {txt}{c |}  {res}.0167002   .0010251
                     {txt}{c |} 
             modelse {c |}  {res}.0879152   .0215534
                     {txt}{c |}  {res}.0325083   .0067594
                     {txt}{c |} 
             ciwidth {c |}  {res}.2657961   .0708753
                     {txt}{c |}  {res}.1266443   .0265509
                     {txt}{c |} 
            relerror {c |}  {res}161.5187   951.1265
                     {txt}{c |}   {res}144.048   541.1198
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
strong               {c |}
20%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.234794  -2.389558
                     {txt}{c |}  {res}.0162109   .0020158
                     {txt}{c |} 
                mean {c |}  {res}.7652063   .6104419
                     {txt}{c |}  {res}.0162109   .0020158
                     {txt}{c |} 
               empse {c |}  {res}.0324219   .0040316
                     {txt}{c |}  {res}.0132362   .0016459
                     {txt}{c |} 
             relprec {c |} {res}-98.45374           
                     {txt}{c |}  {res}1.547347           
                     {txt}{c |} 
                 mse {c |}  {res}4.995091       5.71
                     {txt}{c |}  {res}.0719666   .0096336
                     {txt}{c |} 
                rmse {c |}   {res}2.23497   2.389561
                     {txt}{c |}  {res}.0161001   .0020158
                     {txt}{c |} 
             modelse {c |}  {res}.0481477     .01109
                     {txt}{c |}  {res}.0163226   .0032964
                     {txt}{c |} 
             ciwidth {c |}  {res}.1476338   .0365085
                     {txt}{c |}  {res}.0678856   .0136252
                     {txt}{c |} 
            relerror {c |}  {res}48.50386   175.0756
                     {txt}{c |}  {res}78.80434   138.9115
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
strong               {c |}
30%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.229048   -2.37057
                     {txt}{c |}  {res}.0130975   .0026068
                     {txt}{c |} 
                mean {c |}   {res}.770952   .6294295
                     {txt}{c |}  {res}.0130975   .0026067
                     {txt}{c |} 
               empse {c |}  {res}.0261951   .0052135
                     {txt}{c |}  {res}.0106941   .0021284
                     {txt}{c |} 
             relprec {c |} {res}-96.03892           
                     {txt}{c |}  {res}3.926656           
                     {txt}{c |} 
                 mse {c |}   {res}4.96917   5.619625
                     {txt}{c |}  {res}.0581277   .0123579
                     {txt}{c |} 
                rmse {c |}  {res}2.229163   2.370575
                     {txt}{c |}   {res}.013038   .0026065
                     {txt}{c |} 
             modelse {c |}  {res}.1890869   .0382586
                     {txt}{c |}  {res}.0588242   .0120909
                     {txt}{c |} 
             ciwidth {c |}   {res}.602132   .1233863
                     {txt}{c |}  {res}.2495496   .0492175
                     {txt}{c |} 
            relerror {c |}  {res}621.8417   633.8414
                     {txt}{c |}  {res}370.5007   378.8658
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
strong               {c |}
30%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.235387  -2.367372
                     {txt}{c |}   {res}.015648   .0016501
                     {txt}{c |} 
                mean {c |}  {res}.7646129   .6326286
                     {txt}{c |}   {res}.015648   .0016501
                     {txt}{c |} 
               empse {c |}  {res}.0312959   .0033002
                     {txt}{c |}  {res}.0127765   .0013473
                     {txt}{c |} 
             relprec {c |} {res}-98.88798           
                     {txt}{c |}  {res}1.186471           
                     {txt}{c |} 
                 mse {c |}   {res}4.99769   5.604456
                     {txt}{c |}  {res}.0694843    .007812
                     {txt}{c |} 
                rmse {c |}  {res}2.235551   2.367373
                     {txt}{c |}  {res}.0155407   .0016499
                     {txt}{c |} 
             modelse {c |}  {res}.0947592   .0205786
                     {txt}{c |}  {res}.0345381   .0066619
                     {txt}{c |} 
             ciwidth {c |}  {res}.2845808   .0662984
                     {txt}{c |}  {res}.1378262   .0265306
                     {txt}{c |} 
            relerror {c |}  {res}202.7844   523.5502
                     {txt}{c |}  {res}165.7076   324.8846
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
strong               {c |}
30%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.230681  -2.363108
                     {txt}{c |}  {res}.0167315   .0011557
                     {txt}{c |} 
                mean {c |}  {res}.7693194   .6368921
                     {txt}{c |}  {res}.0167315   .0011557
                     {txt}{c |} 
               empse {c |}  {res}.0334629   .0023115
                     {txt}{c |}  {res}.0136612   .0009436
                     {txt}{c |} 
             relprec {c |} {res}-99.52287           
                     {txt}{c |}   {res}.517504           
                     {txt}{c |} 
                 mse {c |}  {res}4.976776   5.584283
                     {txt}{c |}  {res}.0742146   .0054621
                     {txt}{c |} 
                rmse {c |}  {res}2.230869   2.363109
                     {txt}{c |}  {res}.0166336   .0011557
                     {txt}{c |} 
             modelse {c |}  {res}.0528477   .0107621
                     {txt}{c |}  {res}.0186089    .003323
                     {txt}{c |} 
             ciwidth {c |}  {res}.1609973   .0347105
                     {txt}{c |}  {res}.0752659   .0138433
                     {txt}{c |} 
            relerror {c |}  {res}57.92916   365.6007
                     {txt}{c |}   {res}85.1438   238.3228
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
strong               {c |}
5%                   {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.300397  -2.582924
                     {txt}{c |}  {res}.0072999   .0023149
                     {txt}{c |} 
                mean {c |}   {res}.699603   .4170755
                     {txt}{c |}  {res}.0072999   .0023149
                     {txt}{c |} 
               empse {c |}  {res}.0145998   .0046298
                     {txt}{c |}  {res}.0059603   .0018901
                     {txt}{c |} 
             relprec {c |} {res}-89.94375           
                     {txt}{c |}  {res}9.537528           
                     {txt}{c |} 
                 mse {c |}  {res}5.291986   6.671515
                     {txt}{c |}  {res}.0336494   .0119659
                     {txt}{c |} 
                rmse {c |}  {res}2.300432   2.582928
                     {txt}{c |}  {res}.0073137   .0023163
                     {txt}{c |} 
             modelse {c |}  {res}.1502858   .0567089
                     {txt}{c |}  {res}.0356272   .0096178
                     {txt}{c |} 
             ciwidth {c |}  {res}.5246882   .2131887
                     {txt}{c |}  {res}.1546528   .0363574
                     {txt}{c |} 
            relerror {c |}  {res}929.3703   1124.861
                     {txt}{c |}  {res}485.9518   541.4806
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
strong               {c |}
5%                   {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}  {res}-2.29162  -2.568453
                     {txt}{c |}  {res}.0091314   .0016841
                     {txt}{c |} 
                mean {c |}  {res}.7083798   .4315469
                     {txt}{c |}  {res}.0091314   .0016841
                     {txt}{c |} 
               empse {c |}  {res}.0182629   .0033682
                     {txt}{c |}  {res}.0074558   .0013751
                     {txt}{c |} 
             relprec {c |} {res}-96.59853           
                     {txt}{c |}  {res}.8556727           
                     {txt}{c |} 
                 mse {c |}  {res}5.251773    6.59696
                     {txt}{c |}  {res}.0418123   .0086506
                     {txt}{c |} 
                rmse {c |}  {res}2.291675   2.568455
                     {txt}{c |}  {res}.0091226    .001684
                     {txt}{c |} 
             modelse {c |}  {res}.0649395   .0309577
                     {txt}{c |}  {res}.0197365   .0050791
                     {txt}{c |} 
             ciwidth {c |}  {res}.2165726   .1161859
                     {txt}{c |}  {res}.0772358   .0202252
                     {txt}{c |} 
            relerror {c |}  {res}255.5815   819.1077
                     {txt}{c |}   {res}180.975   404.3914
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
0.75                 {c |}
strong               {c |}
5%                   {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.290514  -2.558377
                     {txt}{c |}  {res}.0120249   .0016146
                     {txt}{c |} 
                mean {c |}  {res}.7094861   .4416232
                     {txt}{c |}   {res}.012025   .0016146
                     {txt}{c |} 
               empse {c |}  {res}.0240499   .0032291
                     {txt}{c |}  {res}.0098183   .0013183
                     {txt}{c |} 
             relprec {c |} {res}-98.19724           
                     {txt}{c |}  {res}.9550193           
                     {txt}{c |} 
                 mse {c |}  {res}5.246888     6.5453
                     {txt}{c |}  {res}.0550315   .0082599
                     {txt}{c |} 
                rmse {c |}  {res}2.290609   2.558378
                     {txt}{c |}  {res}.0120124   .0016143
                     {txt}{c |} 
             modelse {c |}  {res}.0345181   .0164738
                     {txt}{c |}   {res}.011636   .0032096
                     {txt}{c |} 
             ciwidth {c |}  {res}.1109245   .0609825
                     {txt}{c |}  {res}.0447369   .0122638
                     {txt}{c |} 
            relerror {c |}   {res}43.5271   410.1663
                     {txt}{c |}  {res}75.98835   230.7769
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
no                   {c |}
10%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.994629  -3.000415
                     {txt}{c |}  {res}.0107607   .0024163
                     {txt}{c |} 
                mean {c |}   {res}1.00537   .9995849
                     {txt}{c |}  {res}.0107607   .0024163
                     {txt}{c |} 
               empse {c |}  {res}.0215214   .0048326
                     {txt}{c |}  {res}.0087861   .0019729
                     {txt}{c |} 
             relprec {c |}  {res}-94.9577           
                     {txt}{c |}  {res}1.778369           
                     {txt}{c |} 
                 mse {c |}  {res}8.968153   9.002508
                     {txt}{c |}  {res}.0643855   .0145049
                     {txt}{c |} 
                rmse {c |}  {res}2.994688   3.000418
                     {txt}{c |}    {res}.01075   .0024172
                     {txt}{c |} 
             modelse {c |}  {res}.2421722   .0414158
                     {txt}{c |}  {res}.0480895   .0112672
                     {txt}{c |} 
             ciwidth {c |}   {res}.892921   .1431747
                     {txt}{c |}  {res}.1860628   .0441871
                     {txt}{c |} 
            relerror {c |}  {res}1025.265   757.0016
                     {txt}{c |}  {res}510.8491   420.4366
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
no                   {c |}
10%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.999596  -3.004155
                     {txt}{c |}  {res}.0048037   .0025184
                     {txt}{c |} 
                mean {c |}  {res}1.000404    .995845
                     {txt}{c |}  {res}.0048037   .0025184
                     {txt}{c |} 
               empse {c |}  {res}.0096073   .0050367
                     {txt}{c |}  {res}.0039222   .0020562
                     {txt}{c |} 
             relprec {c |} {res}-72.51518           
                     {txt}{c |}  {res}12.77721           
                     {txt}{c |} 
                 mse {c |}  {res}8.997645   9.024967
                     {txt}{c |}  {res}.0288269   .0151302
                     {txt}{c |} 
                rmse {c |}  {res}2.999608   3.004158
                     {txt}{c |}  {res}.0048051   .0025182
                     {txt}{c |} 
             modelse {c |}   {res}.106096   .0235689
                     {txt}{c |}  {res}.0285546   .0067384
                     {txt}{c |} 
             ciwidth {c |}  {res}.3659646    .079486
                     {txt}{c |}  {res}.1140662   .0271883
                     {txt}{c |} 
            relerror {c |}  {res}1004.322   367.9398
                     {txt}{c |}  {res}539.9927   233.2227
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
no                   {c |}
10%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.001429  -3.002868
                     {txt}{c |}  {res}.0029755   .0018082
                     {txt}{c |} 
                mean {c |}  {res}.9985707   .9971318
                     {txt}{c |}  {res}.0029755   .0018083
                     {txt}{c |} 
               empse {c |}   {res}.005951   .0036165
                     {txt}{c |}  {res}.0024295   .0014764
                     {txt}{c |} 
             relprec {c |} {res}-63.06834           
                     {txt}{c |}  {res}17.24566           
                     {txt}{c |} 
                 mse {c |}  {res}9.008605   9.017227
                     {txt}{c |}  {res}.0178744   .0108653
                     {txt}{c |} 
                rmse {c |}  {res}3.001434    3.00287
                     {txt}{c |}  {res}.0029776   .0018092
                     {txt}{c |} 
             modelse {c |}  {res}.0566618   .0127495
                     {txt}{c |}  {res}.0178627   .0040426
                     {txt}{c |} 
             ciwidth {c |}  {res}.1877714   .0419249
                     {txt}{c |}  {res}.0684955   .0157058
                     {txt}{c |} 
            relerror {c |}  {res}852.1346   252.5341
                     {txt}{c |}  {res}491.1111   182.2316
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
no                   {c |}
20%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.004084  -2.997569
                     {txt}{c |}  {res}.0070999   .0024528
                     {txt}{c |} 
                mean {c |}  {res}.9959156   1.002431
                     {txt}{c |}  {res}.0070999   .0024528
                     {txt}{c |} 
               empse {c |}  {res}.0141997   .0049057
                     {txt}{c |}   {res}.005797   .0020027
                     {txt}{c |} 
             relprec {c |} {res}-88.06451           
                     {txt}{c |}   {res}8.01641           
                     {txt}{c |} 
                 mse {c |}  {res}9.024674   8.985439
                     {txt}{c |}  {res}.0427269   .0147119
                     {txt}{c |} 
                rmse {c |}   {res}3.00411   2.997572
                     {txt}{c |}  {res}.0071114    .002454
                     {txt}{c |} 
             modelse {c |}  {res}.2140353   .0390979
                     {txt}{c |}  {res}.0551516   .0117329
                     {txt}{c |} 
             ciwidth {c |}   {res}.736421   .1280434
                     {txt}{c |}  {res}.2320991   .0486273
                     {txt}{c |} 
            relerror {c |}  {res}1407.322   696.9924
                     {txt}{c |}  {res}727.6839    403.817
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
no                   {c |}
20%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}  {res}-3.00392  -3.001103
                     {txt}{c |}  {res}.0032317   .0012501
                     {txt}{c |} 
                mean {c |}  {res}.9960799   .9988972
                     {txt}{c |}  {res}.0032316   .0012501
                     {txt}{c |} 
               empse {c |}  {res}.0064633   .0025003
                     {txt}{c |}  {res}.0026386   .0010207
                     {txt}{c |} 
             relprec {c |} {res}-85.03541           
                     {txt}{c |}  {res}15.22686           
                     {txt}{c |} 
                 mse {c |}  {res}9.023567   9.006622
                     {txt}{c |}  {res}.0194275   .0075015
                     {txt}{c |} 
                rmse {c |}  {res}3.003925   3.001103
                     {txt}{c |}  {res}.0032337   .0012498
                     {txt}{c |} 
             modelse {c |}  {res}.1031317   .0214876
                     {txt}{c |}  {res}.0325016    .007132
                     {txt}{c |} 
             ciwidth {c |}  {res}.3364792   .0681684
                     {txt}{c |}   {res}.129377   .0285641
                     {txt}{c |} 
            relerror {c |}  {res}1495.663   759.4174
                     {txt}{c |}  {res}822.9415   452.1808
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
no                   {c |}
20%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.997728  -2.998016
                     {txt}{c |}  {res}.0012267   .0015055
                     {txt}{c |} 
                mean {c |}  {res}1.002272   1.001984
                     {txt}{c |}  {res}.0012267   .0015055
                     {txt}{c |} 
               empse {c |}  {res}.0024534    .003011
                     {txt}{c |}  {res}.0010016   .0012292
                     {txt}{c |} 
             relprec {c |}   {res}50.6257           
                     {txt}{c |}  {res}128.9535           
                     {txt}{c |} 
                 mse {c |}   {res}8.98638   8.988107
                     {txt}{c |}  {res}.0073528   .0090313
                     {txt}{c |} 
                rmse {c |}  {res}2.997729   2.998017
                     {txt}{c |}  {res}.0012264   .0015062
                     {txt}{c |} 
             modelse {c |}  {res}.0544083    .010824
                     {txt}{c |}   {res}.017141   .0034164
                     {txt}{c |} 
             ciwidth {c |}  {res}.1756828   .0350355
                     {txt}{c |}  {res}.0698153   .0138174
                     {txt}{c |} 
            relerror {c |}    {res}2117.7   259.4811
                     {txt}{c |}  {res}1143.609   185.5035
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
no                   {c |}
30%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.995962  -3.002784
                     {txt}{c |}   {res}.002032    .001401
                     {txt}{c |} 
                mean {c |}  {res}1.004038   .9972164
                     {txt}{c |}   {res}.002032    .001401
                     {txt}{c |} 
               empse {c |}   {res}.004064   .0028021
                     {txt}{c |}  {res}.0016591   .0011439
                     {txt}{c |} 
             relprec {c |} {res}-52.46042           
                     {txt}{c |}  {res}29.10073           
                     {txt}{c |} 
                 mse {c |}  {res}8.975802   9.016716
                     {txt}{c |}  {res}.0121744   .0084117
                     {txt}{c |} 
                rmse {c |}  {res}2.995964   3.002785
                     {txt}{c |}  {res}.0020318   .0014006
                     {txt}{c |} 
             modelse {c |}  {res}.1989145   .0370215
                     {txt}{c |}   {res}.058273   .0113647
                     {txt}{c |} 
             ciwidth {c |}  {res}.6645258   .1199757
                     {txt}{c |}  {res}.2355033   .0471384
                     {txt}{c |} 
            relerror {c |}  {res}4794.593   1221.223
                     {txt}{c |}   {res}2459.45   674.8608
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
no                   {c |}
30%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.998585  -2.997779
                     {txt}{c |}  {res}.0035577   .0009639
                     {txt}{c |} 
                mean {c |}  {res}1.001415   1.002221
                     {txt}{c |}  {res}.0035577   .0009638
                     {txt}{c |} 
               empse {c |}  {res}.0071153   .0019277
                     {txt}{c |}  {res}.0029048    .000787
                     {txt}{c |} 
             relprec {c |} {res}-92.66032           
                     {txt}{c |}  {res}8.084519           
                     {txt}{c |} 
                 mse {c |}  {res}8.991548   8.986681
                     {txt}{c |}  {res}.0213593   .0057789
                     {txt}{c |} 
                rmse {c |}  {res}2.998591   2.997779
                     {txt}{c |}  {res}.0035615   .0009639
                     {txt}{c |} 
             modelse {c |}   {res}.100923   .0205725
                     {txt}{c |}  {res}.0321059   .0063967
                     {txt}{c |} 
             ciwidth {c |}  {res}.3255629   .0659865
                     {txt}{c |}  {res}.1297649   .0267646
                     {txt}{c |} 
            relerror {c |}  {res}1318.385   967.2159
                     {txt}{c |}  {res}734.1004   547.6682
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
no                   {c |}
30%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.001679  -3.002001
                     {txt}{c |}  {res}.0030035   .0020055
                     {txt}{c |} 
                mean {c |}  {res}.9983205   .9979988
                     {txt}{c |}  {res}.0030035   .0020055
                     {txt}{c |} 
               empse {c |}  {res}.0060069   .0040109
                     {txt}{c |}  {res}.0024523   .0016375
                     {txt}{c |} 
             relprec {c |} {res}-55.41545           
                     {txt}{c |}  {res}18.05508           
                     {txt}{c |} 
                 mse {c |}  {res}9.010107   9.012023
                     {txt}{c |}  {res}.0180474   .0120448
                     {txt}{c |} 
                rmse {c |}  {res}3.001684   3.002003
                     {txt}{c |}  {res}.0030062   .0020061
                     {txt}{c |} 
             modelse {c |}    {res}.05665   .0107755
                     {txt}{c |}  {res}.0180184     .00331
                     {txt}{c |} 
             ciwidth {c |}  {res}.1799254   .0345227
                     {txt}{c |}  {res}.0751427   .0140514
                     {txt}{c |} 
            relerror {c |}  {res}843.0776   168.6531
                     {txt}{c |}  {res}488.0664   137.2567
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
no                   {c |}
5%                   {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.995999  -2.996582
                     {txt}{c |}  {res}.0066571   .0021117
                     {txt}{c |} 
                mean {c |}  {res}1.004001   1.003418
                     {txt}{c |}  {res}.0066571   .0021116
                     {txt}{c |} 
               empse {c |}  {res}.0133142   .0042233
                     {txt}{c |}  {res}.0054355   .0017241
                     {txt}{c |} 
             relprec {c |} {res}-89.93832           
                     {txt}{c |}  {res}11.59137           
                     {txt}{c |} 
                 mse {c |}  {res}8.976141   8.979514
                     {txt}{c |}  {res}.0398092   .0126485
                     {txt}{c |} 
                rmse {c |}  {res}2.996021   2.996584
                     {txt}{c |}  {res}.0066437   .0021105
                     {txt}{c |} 
             modelse {c |}   {res}.375147   .0558619
                     {txt}{c |}  {res}.0660034   .0133558
                     {txt}{c |} 
             ciwidth {c |}  {res}1.398901   .2014245
                     {txt}{c |}  {res}.2617833   .0495918
                     {txt}{c |} 
            relerror {c |}  {res}2717.646   1222.712
                     {txt}{c |}  {res}1252.575   625.7819
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}        {res}75        100
                     {txt}{c |}  {res}21.65063          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
no                   {c |}
5%                   {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.000171  -3.001427
                     {txt}{c |}  {res}.0059851    .001714
                     {txt}{c |} 
                mean {c |}  {res}.9998292   .9985731
                     {txt}{c |}  {res}.0059851    .001714
                     {txt}{c |} 
               empse {c |}  {res}.0119702    .003428
                     {txt}{c |}  {res}.0048868   .0013995
                     {txt}{c |} 
             relprec {c |} {res}-91.79893           
                     {txt}{c |}  {res}8.834344           
                     {txt}{c |} 
                 mse {c |}  {res}9.001132   9.008573
                     {txt}{c |}  {res}.0359127    .010293
                     {txt}{c |} 
                rmse {c |}  {res}3.000189   3.001428
                     {txt}{c |}  {res}.0059851   .0017147
                     {txt}{c |} 
             modelse {c |}  {res}.1294078   .0280365
                     {txt}{c |}  {res}.0296744   .0069377
                     {txt}{c |} 
             ciwidth {c |}  {res}.4700532   .0995876
                     {txt}{c |}  {res}.1101093   .0268365
                     {txt}{c |} 
            relerror {c |}  {res}981.0789   717.8735
                     {txt}{c |}  {res}506.2052   390.4427
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
no                   {c |}
5%                   {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.002478  -3.000446
                     {txt}{c |}  {res}.0055087   .0027096
                     {txt}{c |} 
                mean {c |}  {res}.9975224   .9995539
                     {txt}{c |}  {res}.0055087   .0027096
                     {txt}{c |} 
               empse {c |}  {res}.0110174   .0054192
                     {txt}{c |}  {res}.0044979   .0022124
                     {txt}{c |} 
             relprec {c |} {res}-75.80594           
                     {txt}{c |}   {res}6.59418           
                     {txt}{c |} 
                 mse {c |}  {res}9.014963   9.002699
                     {txt}{c |}     {res}.0331   .0162685
                     {txt}{c |} 
                rmse {c |}  {res}3.002493    3.00045
                     {txt}{c |}  {res}.0055121    .002711
                     {txt}{c |} 
             modelse {c |}  {res}.0610684   .0148134
                     {txt}{c |}  {res}.0140867   .0037074
                     {txt}{c |} 
             ciwidth {c |}  {res}.2203732    .052078
                     {txt}{c |}  {res}.0539762   .0148293
                     {txt}{c |} 
            relerror {c |}  {res}454.2888   173.3508
                     {txt}{c |}  {res}259.9112   130.8956
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
weak                 {c |}
10%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.002171  -3.185722
                     {txt}{c |}  {res}.0113746   .0036406
                     {txt}{c |} 
                mean {c |}  {res}.9978294   .8142775
                     {txt}{c |}  {res}.0113746   .0036406
                     {txt}{c |} 
               empse {c |}  {res}.0227493   .0072813
                     {txt}{c |}  {res}.0092873   .0029726
                     {txt}{c |} 
             relprec {c |} {res}-89.75569           
                     {txt}{c |}  {res}11.34393           
                     {txt}{c |} 
                 mse {c |}  {res}9.013416   10.14887
                     {txt}{c |}  {res}.0682447   .0231819
                     {txt}{c |} 
                rmse {c |}  {res}3.002235   3.185729
                     {txt}{c |}  {res}.0113657   .0036384
                     {txt}{c |} 
             modelse {c |}  {res}.2162988   .0428486
                     {txt}{c |}  {res}.0566251   .0110896
                     {txt}{c |} 
             ciwidth {c |}  {res}.7611277   .1487827
                     {txt}{c |}   {res}.215699   .0450018
                     {txt}{c |} 
            relerror {c |}  {res}850.7948   488.4752
                     {txt}{c |}  {res}461.1122   284.4526
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
weak                 {c |}
10%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.011764  -3.177345
                     {txt}{c |}  {res}.0188567   .0032035
                     {txt}{c |} 
                mean {c |}  {res}.9882358    .822655
                     {txt}{c |}  {res}.0188567   .0032035
                     {txt}{c |} 
               empse {c |}  {res}.0377134    .006407
                     {txt}{c |}  {res}.0153964   .0026156
                     {txt}{c |} 
             relprec {c |} {res}-97.11387           
                     {txt}{c |}  {res}3.131787           
                     {txt}{c |} 
                 mse {c |}  {res}9.071791   10.09555
                     {txt}{c |}  {res}.1129921    .020349
                     {txt}{c |} 
                rmse {c |}  {res}3.011941    3.17735
                     {txt}{c |}  {res}.0187574   .0032022
                     {txt}{c |} 
             modelse {c |}   {res}.097671    .024852
                     {txt}{c |}  {res}.0291003   .0071237
                     {txt}{c |} 
             ciwidth {c |}  {res}.3261842   .0839856
                     {txt}{c |}  {res}.1157413   .0284998
                     {txt}{c |} 
            relerror {c |}  {res}158.9825   287.8905
                     {txt}{c |}  {res}130.8915    193.492
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
weak                 {c |}
10%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.011817  -3.175154
                     {txt}{c |}  {res}.0175251   .0008869
                     {txt}{c |} 
                mean {c |}  {res}.9881829   .8248463
                     {txt}{c |}  {res}.0175252   .0008868
                     {txt}{c |} 
               empse {c |}  {res}.0350503   .0017736
                     {txt}{c |}  {res}.0143092   .0007241
                     {txt}{c |} 
             relprec {c |} {res}-99.74394           
                     {txt}{c |}  {res}.2699602           
                     {txt}{c |} 
                 mse {c |}  {res}9.071964    10.0816
                     {txt}{c |}  {res}.1049955   .0056315
                     {txt}{c |} 
                rmse {c |}   {res}3.01197   3.175154
                     {txt}{c |}  {res}.0174297   .0008868
                     {txt}{c |} 
             modelse {c |}  {res}.0519357   .0124402
                     {txt}{c |}  {res}.0171293   .0036051
                     {txt}{c |} 
             ciwidth {c |}  {res}.1657637   .0418438
                     {txt}{c |}  {res}.0682373   .0144577
                     {txt}{c |} 
            relerror {c |}  {res}48.17482   601.3959
                     {txt}{c |}  {res}77.76654   351.1513
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
weak                 {c |}
20%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.016521  -3.128675
                     {txt}{c |}  {res}.0186222   .0044846
                     {txt}{c |} 
                mean {c |}  {res}.9834788   .8713255
                     {txt}{c |}  {res}.0186222   .0044846
                     {txt}{c |} 
               empse {c |}  {res}.0372445   .0089692
                     {txt}{c |}   {res}.015205   .0036616
                     {txt}{c |} 
             relprec {c |} {res}-94.20065           
                     {txt}{c |}  {res}4.884838           
                     {txt}{c |} 
                 mse {c |}  {res}9.100441   9.788665
                     {txt}{c |}  {res}.1125876   .0280402
                     {txt}{c |} 
                rmse {c |}  {res}3.016694   3.128684
                     {txt}{c |}  {res}.0186608   .0044812
                     {txt}{c |} 
             modelse {c |}  {res}.1802296   .0395827
                     {txt}{c |}  {res}.0470029     .01218
                     {txt}{c |} 
             ciwidth {c |}  {res}.6210147   .1304894
                     {txt}{c |}  {res}.1944775   .0484684
                     {txt}{c |} 
            relerror {c |}  {res}383.9095   341.3202
                     {txt}{c |}  {res}234.4243   225.6145
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
weak                 {c |}
20%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.002004   -3.11986
                     {txt}{c |}  {res}.0166096   .0029594
                     {txt}{c |} 
                mean {c |}  {res}.9979962   .8801398
                     {txt}{c |}  {res}.0166095   .0029594
                     {txt}{c |} 
               empse {c |}  {res}.0332191   .0059188
                     {txt}{c |}  {res}.0135616   .0024163
                     {txt}{c |} 
             relprec {c |} {res}-96.82542           
                     {txt}{c |}  {res}2.802452           
                     {txt}{c |} 
                 mse {c |}  {res}9.012855   9.733554
                     {txt}{c |}  {res}.0994591   .0184826
                     {txt}{c |} 
                rmse {c |}  {res}3.002142   3.119864
                     {txt}{c |}  {res}.0165647   .0029621
                     {txt}{c |} 
             modelse {c |}  {res}.0978404    .021443
                     {txt}{c |}  {res}.0324783   .0068928
                     {txt}{c |} 
             ciwidth {c |}  {res}.3114152    .069356
                     {txt}{c |}  {res}.1292462   .0274167
                     {txt}{c |} 
            relerror {c |}  {res}194.5306    262.289
                     {txt}{c |}  {res}154.9743   188.2491
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
weak                 {c |}
20%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.999089  -3.113776
                     {txt}{c |}  {res}.0184658   .0005924
                     {txt}{c |} 
                mean {c |}  {res}1.000911   .8862236
                     {txt}{c |}  {res}.0184657   .0005925
                     {txt}{c |} 
               empse {c |}  {res}.0369315   .0011849
                     {txt}{c |}  {res}.0150772   .0004837
                     {txt}{c |} 
             relprec {c |} {res}-99.89706           
                     {txt}{c |}  {res}.0934398           
                     {txt}{c |} 
                 mse {c |}   {res}8.99556   9.695605
                     {txt}{c |}  {res}.1102767   .0036903
                     {txt}{c |} 
                rmse {c |}   {res}2.99926   3.113777
                     {txt}{c |}   {res}.018384   .0005926
                     {txt}{c |} 
             modelse {c |}  {res}.0565692   .0114432
                     {txt}{c |}  {res}.0185239   .0034159
                     {txt}{c |} 
             ciwidth {c |}  {res}.1770706   .0372703
                     {txt}{c |}  {res}.0770667   .0144111
                     {txt}{c |} 
            relerror {c |}  {res}53.17329   865.7305
                     {txt}{c |}  {res}80.16296     488.41
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
weak                 {c |}
30%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.983202  -3.095103
                     {txt}{c |}  {res}.0045645   .0016494
                     {txt}{c |} 
                mean {c |}  {res}1.016798   .9048972
                     {txt}{c |}  {res}.0045645   .0016495
                     {txt}{c |} 
               empse {c |}   {res}.009129   .0032989
                     {txt}{c |}  {res}.0037269   .0013468
                     {txt}{c |} 
             relprec {c |} {res}-86.94123           
                     {txt}{c |}  {res}5.838502           
                     {txt}{c |} 
                 mse {c |}  {res}8.899555    9.57967
                     {txt}{c |}  {res}.0272139   .0102103
                     {txt}{c |} 
                rmse {c |}  {res}2.983212   3.095104
                     {txt}{c |}  {res}.0045612   .0016494
                     {txt}{c |} 
             modelse {c |}  {res}.2077336   .0368625
                     {txt}{c |}    {res}.06949   .0121195
                     {txt}{c |} 
             ciwidth {c |}  {res}.6616659   .1172561
                     {txt}{c |}  {res}.2740338   .0487537
                     {txt}{c |} 
            relerror {c |}   {res}2175.53   1017.402
                     {txt}{c |}  {res}1201.012   585.7144
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
weak                 {c |}
30%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.987766  -3.091867
                     {txt}{c |}  {res}.0085424    .001212
                     {txt}{c |} 
                mean {c |}  {res}1.012234   .9081327
                     {txt}{c |}  {res}.0085424    .001212
                     {txt}{c |} 
               empse {c |}  {res}.0170849    .002424
                     {txt}{c |}  {res}.0069749   .0009896
                     {txt}{c |} 
             relprec {c |} {res}-97.98694           
                     {txt}{c |}  {res}2.157763           
                     {txt}{c |} 
                 mse {c |}  {res}8.926965   9.559648
                     {txt}{c |}  {res}.0509349   .0074947
                     {txt}{c |} 
                rmse {c |}  {res}2.987803   3.091868
                     {txt}{c |}  {res}.0085238    .001212
                     {txt}{c |} 
             modelse {c |}  {res}.1056835   .0211574
                     {txt}{c |}  {res}.0377315   .0073387
                     {txt}{c |} 
             ciwidth {c |}  {res}.3262131    .066393
                     {txt}{c |}  {res}.1474291   .0286954
                     {txt}{c |} 
            relerror {c |}   {res}518.579    772.815
                     {txt}{c |}    {res}335.48   467.5712
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
weak                 {c |}
30%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.990165  -3.089739
                     {txt}{c |}  {res}.0117867   .0010523
                     {txt}{c |} 
                mean {c |}  {res}1.009835   .9102612
                     {txt}{c |}  {res}.0117867   .0010523
                     {txt}{c |} 
               empse {c |}  {res}.0235734   .0021047
                     {txt}{c |}  {res}.0096238   .0008592
                     {txt}{c |} 
             relprec {c |} {res}-99.20287           
                     {txt}{c |}  {res}.9136202           
                     {txt}{c |} 
                 mse {c |}  {res}8.941505    9.54649
                     {txt}{c |}    {res}.07024   .0065013
                     {txt}{c |} 
                rmse {c |}  {res}2.990235   3.089739
                     {txt}{c |}  {res}.0117449   .0010521
                     {txt}{c |} 
             modelse {c |}  {res}.0567712   .0104045
                     {txt}{c |}  {res}.0194426   .0032103
                     {txt}{c |} 
             ciwidth {c |}  {res}.1757557   .0335169
                     {txt}{c |}  {res}.0788112   .0134166
                     {txt}{c |} 
            relerror {c |}  {res}140.8273   394.3477
                     {txt}{c |}  {res}128.3306   252.9738
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
weak                 {c |}
5%                   {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.010471  -3.285554
                     {txt}{c |}  {res}.0105235   .0018183
                     {txt}{c |} 
                mean {c |}  {res}.9895291   .7144461
                     {txt}{c |}  {res}.0105235   .0018183
                     {txt}{c |} 
               empse {c |}  {res}.0210471   .0036365
                     {txt}{c |}  {res}.0085924   .0014846
                     {txt}{c |} 
             relprec {c |} {res}-97.01466           
                     {txt}{c |}  {res}3.109226           
                     {txt}{c |} 
                 mse {c |}  {res}9.063267   10.79487
                     {txt}{c |}  {res}.0633137   .0119427
                     {txt}{c |} 
                rmse {c |}  {res}3.010526   3.285555
                     {txt}{c |}  {res}.0105154   .0018175
                     {txt}{c |} 
             modelse {c |}  {res}.2692498   .0560182
                     {txt}{c |}  {res}.0435068   .0108873
                     {txt}{c |} 
             ciwidth {c |}  {res}1.002455   .2068822
                     {txt}{c |}  {res}.1906457   .0424988
                     {txt}{c |} 
            relerror {c |}  {res}1179.276   1440.426
                     {txt}{c |}  {res}561.6827   696.5033
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
weak                 {c |}
5%                   {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}  {res}-3.00299  -3.270803
                     {txt}{c |}  {res}.0151019   .0036735
                     {txt}{c |} 
                mean {c |}  {res}.9970105   .7291971
                     {txt}{c |}  {res}.0151019   .0036735
                     {txt}{c |} 
               empse {c |}  {res}.0302038   .0073469
                     {txt}{c |}  {res}.0123306   .0029994
                     {txt}{c |} 
             relprec {c |} {res}-94.08316           
                     {txt}{c |}  {res}5.818403           
                     {txt}{c |} 
                 mse {c |}  {res}9.018631   10.69819
                     {txt}{c |}  {res}.0904242   .0240191
                     {txt}{c |} 
                rmse {c |}  {res}3.003103   3.270809
                     {txt}{c |}  {res}.0150551   .0036717
                     {txt}{c |} 
             modelse {c |}  {res}.0935427   .0299216
                     {txt}{c |}  {res}.0240808   .0068683
                     {txt}{c |} 
             ciwidth {c |}   {res}.333334   .1074957
                     {txt}{c |}  {res}.0882104   .0270908
                     {txt}{c |} 
            relerror {c |}  {res}209.7056   307.2667
                     {txt}{c |}   {res}149.475   190.7453
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
weak                 {c |}
5%                   {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.002946  -3.261291
                     {txt}{c |}  {res}.0247665   .0009058
                     {txt}{c |} 
                mean {c |}  {res}.9970539   .7387089
                     {txt}{c |}  {res}.0247665   .0009058
                     {txt}{c |} 
               empse {c |}  {res}.0495329   .0018117
                     {txt}{c |}  {res}.0202217   .0007396
                     {txt}{c |} 
             relprec {c |} {res}-99.86623           
                     {txt}{c |}  {res}.1461072           
                     {txt}{c |} 
                 mse {c |}  {res}9.019526   10.63602
                     {txt}{c |}  {res}.1480178   .0059068
                     {txt}{c |} 
                rmse {c |}  {res}3.003253   3.261292
                     {txt}{c |}  {res}.0246429   .0009056
                     {txt}{c |} 
             modelse {c |}  {res}.0492283   .0154199
                     {txt}{c |}  {res}.0149099   .0036561
                     {txt}{c |} 
             ciwidth {c |}   {res}.166078   .0549715
                     {txt}{c |}  {res}.0567336   .0145112
                     {txt}{c |} 
            relerror {c |} {res}-.6149561   751.1427
                     {txt}{c |}  {res}50.52024   401.8306
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
moderate             {c |}
10%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.013647  -3.245251
                     {txt}{c |}  {res}.0192346   .0025051
                     {txt}{c |} 
                mean {c |}  {res}.9863533   .7547489
                     {txt}{c |}  {res}.0192346   .0025051
                     {txt}{c |} 
               empse {c |}  {res}.0384692   .0050102
                     {txt}{c |}   {res}.015705   .0020454
                     {txt}{c |} 
             relprec {c |} {res}-98.30376           
                     {txt}{c |}  {res}1.241953           
                     {txt}{c |} 
                 mse {c |}  {res}9.083177   10.53167
                     {txt}{c |}  {res}.1156927   .0162573
                     {txt}{c |} 
                rmse {c |}  {res}3.013831   3.245254
                     {txt}{c |}  {res}.0191936   .0025048
                     {txt}{c |} 
             modelse {c |}  {res}.1991622   .0430642
                     {txt}{c |}  {res}.0567076   .0114689
                     {txt}{c |} 
             ciwidth {c |}   {res}.684238   .1497061
                     {txt}{c |}  {res}.2170356   .0450349
                     {txt}{c |} 
            relerror {c |}  {res}417.7188   759.5272
                     {txt}{c |}  {res}257.6858   418.9638
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
moderate             {c |}
10%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.012673  -3.231163
                     {txt}{c |}  {res}.0211378   .0019764
                     {txt}{c |} 
                mean {c |}  {res}.9873266   .7688366
                     {txt}{c |}  {res}.0211378   .0019764
                     {txt}{c |} 
               empse {c |}  {res}.0422756   .0039528
                     {txt}{c |}  {res}.0172589   .0016137
                     {txt}{c |} 
             relprec {c |} {res}-99.12576           
                     {txt}{c |}  {res}.9982012           
                     {txt}{c |} 
                 mse {c |}  {res}9.077541   10.44043
                     {txt}{c |}  {res}.1269732    .012772
                     {txt}{c |} 
                rmse {c |}  {res}3.012896   3.231165
                     {txt}{c |}  {res}.0210716   .0019764
                     {txt}{c |} 
             modelse {c |}  {res}.0931048   .0245827
                     {txt}{c |}  {res}.0316004   .0065105
                     {txt}{c |} 
             ciwidth {c |}  {res}.2943301   .0850485
                     {txt}{c |}  {res}.1245907   .0261565
                     {txt}{c |} 
            relerror {c |}  {res}120.2329   521.9039
                     {txt}{c |}  {res}116.9235   302.6359
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
moderate             {c |}
10%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.005552  -3.223433
                     {txt}{c |}  {res}.0231768   .0010593
                     {txt}{c |} 
                mean {c |}  {res}.9944479   .7765676
                     {txt}{c |}  {res}.0231768   .0010593
                     {txt}{c |} 
               empse {c |}  {res}.0463536   .0021186
                     {txt}{c |}  {res}.0189238   .0008649
                     {txt}{c |} 
             relprec {c |} {res}-99.79111           
                     {txt}{c |}  {res}.2352488           
                     {txt}{c |} 
                 mse {c |}  {res}9.034955   10.39052
                     {txt}{c |}  {res}.1383441   .0068276
                     {txt}{c |} 
                rmse {c |}   {res}3.00582   3.223433
                     {txt}{c |}  {res}.0230127   .0010591
                     {txt}{c |} 
             modelse {c |}  {res}.0475072   .0130503
                     {txt}{c |}  {res}.0144329   .0036431
                     {txt}{c |} 
             ciwidth {c |}  {res}.1536722   .0444604
                     {txt}{c |}  {res}.0607305   .0146086
                     {txt}{c |} 
            relerror {c |}  {res}2.488824   515.9968
                     {txt}{c |}  {res}52.15495   304.6516
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
moderate             {c |}
20%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.994348  -3.160841
                     {txt}{c |}  {res}.0149806   .0021303
                     {txt}{c |} 
                mean {c |}  {res}1.005652   .8391588
                     {txt}{c |}  {res}.0149806   .0021303
                     {txt}{c |} 
               empse {c |}  {res}.0299612   .0042605
                     {txt}{c |}  {res}.0122316   .0017394
                     {txt}{c |} 
             relprec {c |} {res}-97.97787           
                     {txt}{c |}  {res}1.516738           
                     {txt}{c |} 
                 mse {c |}  {res}8.966794   9.990931
                     {txt}{c |}  {res}.0894451    .013473
                     {txt}{c |} 
                rmse {c |}  {res}2.994461   3.160843
                     {txt}{c |}  {res}.0149351   .0021312
                     {txt}{c |} 
             modelse {c |}   {res}.187592   .0420298
                     {txt}{c |}  {res}.0564975   .0138461
                     {txt}{c |} 
             ciwidth {c |}   {res}.618624   .1355498
                     {txt}{c |}  {res}.2295209   .0540679
                     {txt}{c |} 
            relerror {c |}  {res}526.1154   886.4888
                     {txt}{c |}  {res}317.6395   517.5025
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
moderate             {c |}
20%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.997223   -3.15397
                     {txt}{c |}  {res}.0190882   .0023353
                     {txt}{c |} 
                mean {c |}  {res}1.002777   .8460299
                     {txt}{c |}  {res}.0190882   .0023353
                     {txt}{c |} 
               empse {c |}  {res}.0381763   .0046706
                     {txt}{c |}  {res}.0155854   .0019068
                     {txt}{c |} 
             relprec {c |} {res}-98.50321           
                     {txt}{c |}  {res}1.390364           
                     {txt}{c |} 
                 mse {c |}  {res}8.984439   9.947544
                     {txt}{c |}  {res}.1137546   .0147334
                     {txt}{c |} 
                rmse {c |}  {res}2.997405   3.153973
                     {txt}{c |}  {res}.0189755   .0023357
                     {txt}{c |} 
             modelse {c |}   {res}.097242    .021175
                     {txt}{c |}    {res}.03118   .0062922
                     {txt}{c |} 
             ciwidth {c |}  {res}.3076822    .069706
                     {txt}{c |}  {res}.1299118    .026018
                     {txt}{c |} 
            relerror {c |}  {res}154.7182   353.3655
                     {txt}{c |}  {res}132.2277   228.9239
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
moderate             {c |}
20%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}  {res}-2.99038  -3.145649
                     {txt}{c |}  {res}.0201023   .0013029
                     {txt}{c |} 
                mean {c |}   {res}1.00962   .8543508
                     {txt}{c |}  {res}.0201023   .0013029
                     {txt}{c |} 
               empse {c |}  {res}.0402046   .0026057
                     {txt}{c |}  {res}.0164135   .0010638
                     {txt}{c |} 
             relprec {c |} {res}-99.57995           
                     {txt}{c |}    {res}.48484           
                     {txt}{c |} 
                 mse {c |}  {res}8.943585   9.895114
                     {txt}{c |}  {res}.1195476   .0081981
                     {txt}{c |} 
                rmse {c |}  {res}2.990583    3.14565
                     {txt}{c |}  {res}.0199873   .0013031
                     {txt}{c |} 
             modelse {c |}  {res}.0541601   .0115309
                     {txt}{c |}  {res}.0187616    .003718
                     {txt}{c |} 
             ciwidth {c |}  {res}.1662756   .0371517
                     {txt}{c |}  {res}.0762129    .014864
                     {txt}{c |} 
            relerror {c |}  {res}34.71102   342.5213
                     {txt}{c |}  {res}72.12598   230.2102
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
moderate             {c |}
30%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.992055   -3.13024
                     {txt}{c |}  {res}.0161362   .0036257
                     {txt}{c |} 
                mean {c |}  {res}1.007944   .8697602
                     {txt}{c |}  {res}.0161362   .0036257
                     {txt}{c |} 
               empse {c |}  {res}.0322724   .0072514
                     {txt}{c |}  {res}.0131752   .0029604
                     {txt}{c |} 
             relprec {c |} {res}-94.95135           
                     {txt}{c |}  {res}5.778615           
                     {txt}{c |} 
                 mse {c |}  {res}8.953177   9.798441
                     {txt}{c |}  {res}.0962242   .0227092
                     {txt}{c |} 
                rmse {c |}  {res}2.992186   3.130246
                     {txt}{c |}  {res}.0160792   .0036274
                     {txt}{c |} 
             modelse {c |}  {res}.1882711   .0362397
                     {txt}{c |}  {res}.0608961   .0117768
                     {txt}{c |} 
             ciwidth {c |}  {res}.6057262   .1165248
                     {txt}{c |}  {res}.2434155   .0469116
                     {txt}{c |} 
            relerror {c |}  {res}483.3807   399.7638
                     {txt}{c |}  {res}303.8546   260.7752
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
moderate             {c |}
30%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.998073  -3.126206
                     {txt}{c |}  {res}.0208639   .0022687
                     {txt}{c |} 
                mean {c |}  {res}1.001927   .8737941
                     {txt}{c |}  {res}.0208638   .0022687
                     {txt}{c |} 
               empse {c |}  {res}.0417277   .0045374
                     {txt}{c |}  {res}.0170353   .0018524
                     {txt}{c |} 
             relprec {c |} {res}-98.81758           
                     {txt}{c |}  {res}1.160905           
                     {txt}{c |} 
                 mse {c |}  {res}8.989747   9.773179
                     {txt}{c |}  {res}.1245137   .0141946
                     {txt}{c |} 
                rmse {c |}  {res}2.998291   3.126208
                     {txt}{c |}  {res}.0207641   .0022703
                     {txt}{c |} 
             modelse {c |}   {res}.107357   .0218804
                     {txt}{c |}   {res}.036377   .0073862
                     {txt}{c |} 
             ciwidth {c |}   {res}.331822   .0690343
                     {txt}{c |}   {res}.149436   .0293865
                     {txt}{c |} 
            relerror {c |}  {res}157.2799   382.2202
                     {txt}{c |}  {res}136.4991   255.4505
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
moderate             {c |}
30%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.989707  -3.120793
                     {txt}{c |}  {res}.0191421   .0011073
                     {txt}{c |} 
                mean {c |}  {res}1.010293   .8792073
                     {txt}{c |}  {res}.0191421   .0011073
                     {txt}{c |} 
               empse {c |}  {res}.0382842   .0022146
                     {txt}{c |}  {res}.0156295   .0009041
                     {txt}{c |} 
             relprec {c |} {res}-99.66537           
                     {txt}{c |}  {res}.3575001           
                     {txt}{c |} 
                 mse {c |}  {res}8.939445   9.739351
                     {txt}{c |}  {res}.1137826   .0069138
                     {txt}{c |} 
                rmse {c |}   {res}2.98989   3.120793
                     {txt}{c |}  {res}.0190279   .0011077
                     {txt}{c |} 
             modelse {c |}  {res}.0557976   .0110427
                     {txt}{c |}  {res}.0197655   .0036034
                     {txt}{c |} 
             ciwidth {c |}  {res}.1690926   .0351261
                     {txt}{c |}  {res}.0800984   .0146048
                     {txt}{c |} 
            relerror {c |}   {res}45.7458   398.6262
                     {txt}{c |}  {res}78.77679   260.6002
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
moderate             {c |}
5%                   {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}  {res}-3.02962  -3.359543
                     {txt}{c |}  {res}.0217692   .0020539
                     {txt}{c |} 
                mean {c |}  {res}.9703802   .6404569
                     {txt}{c |}  {res}.0217692   .0020539
                     {txt}{c |} 
               empse {c |}  {res}.0435385   .0041078
                     {txt}{c |}  {res}.0177745    .001677
                     {txt}{c |} 
             relprec {c |} {res}-99.10982           
                     {txt}{c |}  {res}1.016195           
                     {txt}{c |} 
                 mse {c |}  {res}9.180017   11.28654
                     {txt}{c |}  {res}.1318678   .0137953
                     {txt}{c |} 
                rmse {c |}  {res}3.029854   3.359545
                     {txt}{c |}  {res}.0217614   .0020531
                     {txt}{c |} 
             modelse {c |}  {res}.2160787    .056705
                     {txt}{c |}   {res}.050939   .0101472
                     {txt}{c |} 
             ciwidth {c |}  {res}.7689282   .2110763
                     {txt}{c |}  {res}.2050854   .0402286
                     {txt}{c |} 
            relerror {c |}  {res}396.2936   1280.409
                     {txt}{c |}  {res}233.9652   615.3102
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
moderate             {c |}
5%                   {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.019276  -3.337311
                     {txt}{c |}  {res}.0166041   .0031311
                     {txt}{c |} 
                mean {c |}  {res}.9807236   .6626894
                     {txt}{c |}  {res}.0166041   .0031311
                     {txt}{c |} 
               empse {c |}  {res}.0332082   .0062622
                     {txt}{c |}  {res}.0135572   .0025565
                     {txt}{c |} 
             relprec {c |} {res}-96.44401           
                     {txt}{c |}  {res}3.210464           
                     {txt}{c |} 
                 mse {c |}  {res}9.116858   11.13767
                     {txt}{c |}  {res}.0999277   .0208991
                     {txt}{c |} 
                rmse {c |}  {res}3.019413   3.337315
                     {txt}{c |}  {res}.0165475   .0031311
                     {txt}{c |} 
             modelse {c |}  {res}.0810475    .031998
                     {txt}{c |}  {res}.0236804   .0075622
                     {txt}{c |} 
             ciwidth {c |}  {res}.2752458   .1152771
                     {txt}{c |}  {res}.0916031   .0285414
                     {txt}{c |} 
            relerror {c |}   {res}144.059    410.972
                     {txt}{c |}  {res}122.5251   241.0358
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
moderate             {c |}
5%                   {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.019835  -3.330678
                     {txt}{c |}  {res}.0246767    .001249
                     {txt}{c |} 
                mean {c |}  {res}.9801647   .6693217
                     {txt}{c |}  {res}.0246767    .001249
                     {txt}{c |} 
               empse {c |}  {res}.0493534   .0024981
                     {txt}{c |}  {res}.0201484   .0010198
                     {txt}{c |} 
             relprec {c |}  {res}-99.7438           
                     {txt}{c |}  {res}.2349471           
                     {txt}{c |} 
                 mse {c |}  {res}9.121232   11.09342
                     {txt}{c |}  {res}.1482841   .0083175
                     {txt}{c |} 
                rmse {c |}  {res}3.020138   3.330679
                     {txt}{c |}  {res}.0245492   .0012486
                     {txt}{c |} 
             modelse {c |}   {res}.041329   .0154644
                     {txt}{c |}   {res}.012266   .0030005
                     {txt}{c |} 
             ciwidth {c |}  {res}.1386518   .0569307
                     {txt}{c |}  {res}.0483799   .0120223
                     {txt}{c |} 
            relerror {c |} {res}-16.25904   519.0473
                     {txt}{c |}  {res}42.26636   279.8158
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
strong               {c |}
10%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.024464  -3.296904
                     {txt}{c |}  {res}.0267434   .0012912
                     {txt}{c |} 
                mean {c |}  {res}.9755358   .7030959
                     {txt}{c |}  {res}.0267434   .0012912
                     {txt}{c |} 
               empse {c |}  {res}.0534869   .0025824
                     {txt}{c |}  {res}.0218359   .0010542
                     {txt}{c |} 
             relprec {c |}  {res}-99.7669           
                     {txt}{c |}  {res}.2668916           
                     {txt}{c |} 
                 mse {c |}  {res}9.149529   10.86958
                     {txt}{c |}  {res}.1607575   .0085117
                     {txt}{c |} 
                rmse {c |}  {res}3.024819   3.296905
                     {txt}{c |}  {res}.0265731   .0012909
                     {txt}{c |} 
             modelse {c |}  {res}.1653311   .0437024
                     {txt}{c |}  {res}.0479314    .011154
                     {txt}{c |} 
             ciwidth {c |}  {res}.5514243   .1525832
                     {txt}{c |}  {res}.1965931   .0449652
                     {txt}{c |} 
            relerror {c |}  {res}209.1058   1592.343
                     {txt}{c |}  {res}154.7739    814.801
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
strong               {c |}
10%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.018974  -3.281265
                     {txt}{c |}   {res}.027235   .0019939
                     {txt}{c |} 
                mean {c |}  {res}.9810258   .7187353
                     {txt}{c |}   {res}.027235   .0019939
                     {txt}{c |} 
               empse {c |}  {res}.0544701   .0039879
                     {txt}{c |}  {res}.0222373    .001628
                     {txt}{c |} 
             relprec {c |}   {res}-99.464           
                     {txt}{c |}  {res}.1884941           
                     {txt}{c |} 
                 mse {c |}   {res}9.11643   10.76671
                     {txt}{c |}  {res}.1635254    .013084
                     {txt}{c |} 
                rmse {c |}  {res}3.019343   3.281266
                     {txt}{c |}  {res}.0270796   .0019937
                     {txt}{c |} 
             modelse {c |}  {res}.0816414   .0253914
                     {txt}{c |}  {res}.0285212   .0067858
                     {txt}{c |} 
             ciwidth {c |}  {res}.2527478   .0876857
                     {txt}{c |}  {res}.1133385   .0271901
                     {txt}{c |} 
            relerror {c |}  {res}49.88311    536.713
                     {txt}{c |}  {res}80.53485   310.6791
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
strong               {c |}
10%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.015851  -3.269592
                     {txt}{c |}  {res}.0290547   .0016741
                     {txt}{c |} 
                mean {c |}  {res}.9841494   .7304083
                     {txt}{c |}  {res}.0290547   .0016741
                     {txt}{c |} 
               empse {c |}  {res}.0581093   .0033482
                     {txt}{c |}   {res}.023723   .0013669
                     {txt}{c |} 
             relprec {c |} {res}-99.66801           
                     {txt}{c |}  {res}.2414329           
                     {txt}{c |} 
                 mse {c |}  {res}9.097887   10.69024
                     {txt}{c |}  {res}.1738248   .0109481
                     {txt}{c |} 
                rmse {c |}   {res}3.01627   3.269593
                     {txt}{c |}  {res}.0288145   .0016742
                     {txt}{c |} 
             modelse {c |}  {res}.0452265   .0126236
                     {txt}{c |}  {res}.0164742   .0032776
                     {txt}{c |} 
             ciwidth {c |}  {res}.1372846   .0440728
                     {txt}{c |}  {res}.0647631   .0129898
                     {txt}{c |} 
            relerror {c |} {res}-22.16997   277.0297
                     {txt}{c |}  {res}42.58317   182.4133
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
strong               {c |}
20%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.998842  -3.200364
                     {txt}{c |}  {res}.0212808    .001765
                     {txt}{c |} 
                mean {c |}  {res}1.001158    .799636
                     {txt}{c |}  {res}.0212808   .0017651
                     {txt}{c |} 
               empse {c |}  {res}.0425617   .0035301
                     {txt}{c |}  {res}.0173757   .0014412
                     {txt}{c |} 
             relprec {c |} {res}-99.31207           
                     {txt}{c |}  {res}.7033059           
                     {txt}{c |} 
                 mse {c |}   {res}8.99441   10.24234
                     {txt}{c |}  {res}.1268968   .0112958
                     {txt}{c |} 
                rmse {c |}  {res}2.999068   3.200366
                     {txt}{c |}   {res}.021156   .0017648
                     {txt}{c |} 
             modelse {c |}  {res}.1856197   .0398768
                     {txt}{c |}  {res}.0644858   .0125081
                     {txt}{c |} 
             ciwidth {c |}  {res}.5807846   .1313308
                     {txt}{c |}  {res}.2530576   .0489433
                     {txt}{c |} 
            relerror {c |}  {res}336.1193   1029.608
                     {txt}{c |}  {res}233.7856   581.5615
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
strong               {c |}
20%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}  {res}-2.99646  -3.189072
                     {txt}{c |}  {res}.0266249    .002001
                     {txt}{c |} 
                mean {c |}   {res}1.00354    .810928
                     {txt}{c |}  {res}.0266249    .002001
                     {txt}{c |} 
               empse {c |}  {res}.0532498    .004002
                     {txt}{c |}  {res}.0217392   .0016338
                     {txt}{c |} 
             relprec {c |} {res}-99.43518           
                     {txt}{c |}  {res}.5400288           
                     {txt}{c |} 
                 mse {c |}  {res}8.980902   10.17019
                     {txt}{c |}  {res}.1582831   .0127676
                     {txt}{c |} 
                rmse {c |}  {res}2.996815   3.189074
                     {txt}{c |}  {res}.0264086   .0020018
                     {txt}{c |} 
             modelse {c |}  {res}.0961886   .0229117
                     {txt}{c |}  {res}.0350634   .0074339
                     {txt}{c |} 
             ciwidth {c |}  {res}.2886312   .0740076
                     {txt}{c |}  {res}.1400722   .0293776
                     {txt}{c |} 
            relerror {c |}  {res}80.63647   472.5113
                     {txt}{c |}  {res}98.86395   298.5526
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
strong               {c |}
20%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |}   {res}-2.9924  -3.182039
                     {txt}{c |}  {res}.0263996   .0010592
                     {txt}{c |} 
                mean {c |}    {res}1.0076   .8179612
                     {txt}{c |}  {res}.0263996   .0010592
                     {txt}{c |} 
               empse {c |}  {res}.0527993   .0021184
                     {txt}{c |}  {res}.0215552   .0008648
                     {txt}{c |} 
             relprec {c |} {res}-99.83903           
                     {txt}{c |}  {res}.1843968           
                     {txt}{c |} 
                 mse {c |}  {res}8.956549   10.12537
                     {txt}{c |}  {res}.1566153   .0067411
                     {txt}{c |} 
                rmse {c |}  {res}2.992749   3.182039
                     {txt}{c |}  {res}.0261658   .0010592
                     {txt}{c |} 
             modelse {c |}  {res}.0517259   .0111297
                     {txt}{c |}  {res}.0176217   .0034377
                     {txt}{c |} 
             ciwidth {c |}  {res}.1589052   .0364236
                     {txt}{c |}   {res}.072713   .0138649
                     {txt}{c |} 
            relerror {c |} {res}-2.032892    425.387
                     {txt}{c |}  {res}52.09108   268.9604
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
strong               {c |}
30%                  {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.981823  -3.158879
                     {txt}{c |}  {res}.0240243    .002951
                     {txt}{c |} 
                mean {c |}  {res}1.018177   .8411211
                     {txt}{c |}  {res}.0240243    .002951
                     {txt}{c |} 
               empse {c |}  {res}.0480487   .0059019
                     {txt}{c |}  {res}.0196158   .0024094
                     {txt}{c |} 
             relprec {c |} {res}-98.49123           
                     {txt}{c |}  {res}1.736069           
                     {txt}{c |} 
                 mse {c |}  {res}8.892998   9.978542
                     {txt}{c |}  {res}.1422989   .0186319
                     {txt}{c |} 
                rmse {c |}  {res}2.982113   3.158883
                     {txt}{c |}  {res}.0238587   .0029491
                     {txt}{c |} 
             modelse {c |}  {res}.1850137   .0368031
                     {txt}{c |}  {res}.0607879   .0116517
                     {txt}{c |} 
             ciwidth {c |}  {res}.5829769    .119041
                     {txt}{c |}  {res}.2490727   .0470525
                     {txt}{c |} 
            relerror {c |}  {res}285.0548   523.5792
                     {txt}{c |}  {res}201.7841   322.1549
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
strong               {c |}
30%                  {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.986196  -3.152813
                     {txt}{c |}   {res}.025138   .0019745
                     {txt}{c |} 
                mean {c |}  {res}1.013804   .8471864
                     {txt}{c |}   {res}.025138   .0019745
                     {txt}{c |} 
               empse {c |}  {res}.0502761    .003949
                     {txt}{c |}  {res}.0205251   .0016122
                     {txt}{c |} 
             relprec {c |} {res}-99.38306           
                     {txt}{c |}  {res}.6653993           
                     {txt}{c |} 
                 mse {c |}  {res}8.919262   9.940245
                     {txt}{c |}  {res}.1491544   .0124486
                     {txt}{c |} 
                rmse {c |}  {res}2.986513   3.152815
                     {txt}{c |}  {res}.0249713   .0019742
                     {txt}{c |} 
             modelse {c |}  {res}.0942634   .0214232
                     {txt}{c |}  {res}.0318399   .0069724
                     {txt}{c |} 
             ciwidth {c |}  {res}.2908737   .0683361
                     {txt}{c |}  {res}.1315637   .0281802
                     {txt}{c |} 
            relerror {c |}  {res}87.49152   442.5022
                     {txt}{c |}  {res}99.34555   283.2417
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
strong               {c |}
30%                  {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-2.974632  -3.145827
                     {txt}{c |}  {res}.0235786   .0006123
                     {txt}{c |} 
                mean {c |}  {res}1.025368   .8541731
                     {txt}{c |}  {res}.0235786   .0006123
                     {txt}{c |} 
               empse {c |}  {res}.0471573   .0012245
                     {txt}{c |}  {res}.0192519   .0004999
                     {txt}{c |} 
             relprec {c |} {res}-99.93257           
                     {txt}{c |}  {res}.0776704           
                     {txt}{c |} 
                 mse {c |}  {res}8.850104   9.896228
                     {txt}{c |}  {res}.1392111   .0038518
                     {txt}{c |} 
                rmse {c |}  {res}2.974912   3.145827
                     {txt}{c |}  {res}.0233975   .0006122
                     {txt}{c |} 
             modelse {c |}  {res}.0542291   .0106914
                     {txt}{c |}   {res}.017852   .0034144
                     {txt}{c |} 
             ciwidth {c |}  {res}.1675152   .0342909
                     {txt}{c |}  {res}.0755565    .013911
                     {txt}{c |} 
            relerror {c |}  {res}14.99617   773.1219
                     {txt}{c |}  {res}60.30848   452.5578
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
strong               {c |}
5%                   {c |}
5                    {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.055623  -3.425369
                     {txt}{c |}  {res}.0090367   .0020396
                     {txt}{c |} 
                mean {c |}  {res}.9443774   .5746312
                     {txt}{c |}  {res}.0090367   .0020396
                     {txt}{c |} 
               empse {c |}  {res}.0180734   .0040792
                     {txt}{c |}  {res}.0073784   .0016653
                     {txt}{c |} 
             relprec {c |} {res}-94.90593           
                     {txt}{c |}  {res}2.318606           
                     {txt}{c |} 
                 mse {c |}  {res}9.337074   11.73316
                     {txt}{c |}  {res}.0551901   .0139787
                     {txt}{c |} 
                rmse {c |}  {res}3.055663   3.425371
                     {txt}{c |}  {res}.0090308   .0020405
                     {txt}{c |} 
             modelse {c |}  {res}.1790653   .0602618
                     {txt}{c |}   {res}.057403   .0118695
                     {txt}{c |} 
             ciwidth {c |}  {res}.5928993    .222629
                     {txt}{c |}  {res}.2169228   .0455963
                     {txt}{c |} 
            relerror {c |}  {res}890.7672   1377.303
                     {txt}{c |}  {res}514.2757   669.6309
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
strong               {c |}
5%                   {c |}
10                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.047292  -3.402767
                     {txt}{c |}  {res}.0183362   .0022123
                     {txt}{c |} 
                mean {c |}   {res}.952708   .5972326
                     {txt}{c |}  {res}.0183362   .0022123
                     {txt}{c |} 
               empse {c |}  {res}.0366724   .0044246
                     {txt}{c |}  {res}.0149714   .0018063
                     {txt}{c |} 
             relprec {c |} {res}-98.54431           
                     {txt}{c |}  {res}1.163754           
                     {txt}{c |} 
                 mse {c |}  {res}9.286997   11.57884
                     {txt}{c |}   {res}.111732   .0150575
                     {txt}{c |} 
                rmse {c |}  {res}3.047457    3.40277
                     {txt}{c |}   {res}.018332   .0022125
                     {txt}{c |} 
             modelse {c |}  {res}.0692517   .0327663
                     {txt}{c |}  {res}.0237089   .0075706
                     {txt}{c |} 
             ciwidth {c |}  {res}.2218089   .1188665
                     {txt}{c |}  {res}.0903551    .028095
                     {txt}{c |} 
            relerror {c |}  {res}88.83873   640.5505
                     {txt}{c |}  {res}100.6133    347.389
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c +}{hline 21}
1                    {c |}
strong               {c |}
5%                   {c |}
20                   {c |}
               bsims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
              sesims {c |}         {res}4          4
                     {txt}{c |}          {res}           
                     {txt}{c |} 
                bias {c |} {res}-3.055875  -3.393809
                     {txt}{c |}  {res}.0253625   .0005315
                     {txt}{c |} 
                mean {c |}  {res}.9441248   .6061915
                     {txt}{c |}  {res}.0253625   .0005315
                     {txt}{c |} 
               empse {c |}   {res}.050725   .0010631
                     {txt}{c |}  {res}.0207084    .000434
                     {txt}{c |} 
             relprec {c |} {res}-99.95608           
                     {txt}{c |}  {res}.0120086           
                     {txt}{c |} 
                 mse {c |}  {res}9.340303   11.51794
                     {txt}{c |}   {res}.154739   .0036078
                     {txt}{c |} 
                rmse {c |}  {res}3.056191   3.393809
                     {txt}{c |}  {res}.0253157   .0005315
                     {txt}{c |} 
             modelse {c |}  {res}.0405742   .0179861
                     {txt}{c |}  {res}.0146685   .0038237
                     {txt}{c |} 
             ciwidth {c |}  {res}.1256555   .0656661
                     {txt}{c |}  {res}.0562936    .014819
                     {txt}{c |} 
            relerror {c |} {res}-20.01143   1591.872
                     {txt}{c |}  {res}43.61881   778.7429
                     {txt}{c |} 
               cover {c |}         {res}0          0
                     {txt}{c |}         {res}0          0
                     {txt}{c |} 
               power {c |}       {res}100        100
                     {txt}{c |}         {res}0          0
{txt}{hline 21}{c BT}{hline 21}
      - cap assert missing(`sevars')
      = cap assert missing(var2)
      - if _rc {c -(}
      - di "{c -(}it: NOTE: Where there are 2 entries in the table, {c )-}"
{it: NOTE: Where there are 2 entries in the table, }
      - di "{c -(}it: the first entry is the performance measure and {c )-}"
{it: the first entry is the performance measure and }
      - di "{c -(}it: the second entry is its Monte Carlo error.{c )-}"
{it: the second entry is its Monte Carlo error.}
      - {c )-}
      - restore
      {hline 74} end siman_table {hline}
    - if _rc {c -(}
      di as text "siman analyse has run successfully, but presenting the results using siman table has failed"
      exit _rc
      {c )-}
    - {c )-}

{com}. 
. siman lollyplot if k==5, xtitle("test x-title") name("lollyplot_test7", replace)
{txt}Performance measures not specified: defaulting to bias empse cover
        - set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("exp") & mi("var2") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist exp var2   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist exp var2    theta
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number theta
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 3==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
          else if `nformat'==1 & `nmethod'!=0 {c -(}
          if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
          if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
          if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
          if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
          if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
          if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
          if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
          else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
          local numberdgms: word count `dgm'
          if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
          qui tab `method'
          local nmethodlabels = `r(r)'
          qui levels `method', local(mlevels)
          qui tokenize `"`mlevels'"'
          cap quietly label drop `method'
          local labelchange = 0
          forvalues m = 1/`nmethodlabels' {c -(}
          if substr("``m''",strlen("``m''"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          else {c -(}
          local metlabel`m' = "``m''"
          if `m'==1 local metlist `metlabel`m''
          else if `m'>=2 local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          if `labelchange'==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
          local valmethod = "`metlist'"
          forvalues i=1/`nmethod' {c -(}
          local m`i' = "``i''"
          {c )-}
          local string = 0
          capture confirm numeric variable `method'
          if _rc local string = 1
          if `string' == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
          else if `string' == 1 & "`methodlabels'" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
          else if "`methodlabels'" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          forvalues i=1/`nummethod' {c -(}
          char _dta[siman_m`i'] `i'
          if `i'==1 local siman_method `i'
          else if `i'>=2 local siman_method `siman_method' `i'
          {c )-}
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          char _dta[siman_df] `df'
          char _dta[siman_ci] `ci'
          char _dta[siman_p] `p'
          char _dta[siman_true] `true'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`df'"!="" char _dta[siman_dfvars] `df'
          if "`ci'"!="" char _dta[siman_civars] `ci'
          if "`p'"!="" char _dta[siman_pvars] `p'
          if "`true'"!="" char _dta[siman_truevars] `true'
          char _dta[siman_method] "`siman_valmethod'"
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          else if `nformat'==1 & `nmethod'==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
          {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if "longlong"!="" {c -(}
        - if `nformat'==3 {c -(}
        = if 3==3 {c -(}
        - if `methodlabels' == 1 local valmethod "`metlist'"
        = if 0 == 1 local valmethod ""
        - qui tokenize "`valmethod'"
        = qui tokenize ""
        - if `nmethod'!=0 {c -(}
        = if 2!=0 {c -(}
        - forvalues v=1/`nummethod' {c -(}
        = forvalues v=1/2 {c -(}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("",strlen(""),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("",strlen(""),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - {c )-}
        - local string = 0
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/2 {c -(}
        - qui capture confirm number `m`i''
        = qui capture confirm number peto
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - qui capture confirm number `m`i''
        = qui capture confirm number g2
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - if "`estchange'" == "1" local estimateunderscore = "`estvars'"
        = if "0" == "1" local estimateunderscore = "exp"
        - if "`sechange'" == "1" local seunderscore = "`sevars'"
        = if "0" == "1" local seunderscore = "var2"
        - if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
        = if ("0" != "1" & "0" != "1") local optionlist exp var2   
        - if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
        = if ("0" == "1" & "0" != "1") local optionlist  var2   
        - if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
        = if ("0" != "1" & "0" == "1") local optionlist exp    
        - if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
        = if ("0" == "1" & "0" == "1") local optionlist     
        - local optionlistreshape `optionlist'
        = local optionlistreshape exp var2
        - local exclude "`true'"
        = local exclude "theta"
        - local optionlistreshape: list optionlistreshape - exclude
        - local methodname: char _dta[ReS_j]
        - if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
        = if mi("mcse") | "mcse" == "_j" | "mcse" == "mcse" local methodname "method"
        - if "`methodlables'" == "1" local methodreshape "`methodvalues'"
        = if "" == "1" local methodreshape ""
        - else local methodreshape "`valmethod'"
        = else local methodreshape ""
        - if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
        = if "stub" == "stub" | 0 == 1 {c -(}
        - local trueindgm = strpos("`dgm'","`true'")
        = local trueindgm = strpos("theta rho pc k","theta")
        - if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
        = if 1 == 0 local optionlistreshape exp var2 theta
        - else local optionlistreshape `optionlist'
        = else local optionlistreshape exp var2
        - if `truenumber' == 1 local optionlistreshape `optionlist'
        = if 0 == 1 local optionlistreshape exp var2
        - if "`ntruestub'" == "0" local optionlistreshape `optionlist'
        = if "0" == "0" local optionlistreshape exp var2
        - if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = if 1 == 0 & 0<=1 & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 0<=1 & 2!=0 {c -(}
        - qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
        = qui reshape long "exp var2", i(v1 theta rho pc k ) j(method "") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "long"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "long"=="wide" | "long"=="long" {c -(}
          - DoNew `*'
          = DoNew long exp var2 , i(v1 theta rho pc k ) j(method  ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        = else if 0>1 & 0!=. & 2==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
        - else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 0 & 0>1 & 0!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
        - else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 0>1 & 0!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
        - {c )-}
        - else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
        = else if "stub" == "variable" & 0 == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
        - foreach u of var * {c -(}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("v1",strlen("v1"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("theta",strlen("theta"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("rho",strlen("rho"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("pc",strlen("pc"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("k",strlen("k"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("method",strlen("method"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("exp",strlen("exp"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("var2",strlen("var2"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("_perfmeascode",strlen("_perfmeascode"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("_dataset",strlen("_dataset"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - char _dta[siman_format] "format 1: long-long"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "long"
        - char _dta[siman_nformat] 1
        - if `nmethod'!=0 char _dta[siman_method] "`methodname'"
        = if 2!=0 char _dta[siman_method] "method"
        - if `nmethod'!=0 char _dta[siman_nmethod] 1
        = if 2!=0 char _dta[siman_nmethod] 1
        - char _dta[siman_descriptiontype] "variable"
        - char _dta[siman_truedescriptiontype] "variable"
        - char _dta[siman_cidescriptiontype] "variables"
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] exp
        - char _dta[siman_se] `se'
        = char _dta[siman_se] var2
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "exp"!="" char _dta[siman_estvars] exp
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "var2"!="" char _dta[siman_sevars] var2
        - if "`simananalyserun'"=="1" {c -(}
        = if "1"=="1" {c -(}
        - preserve
        - qui tempfile sortperf
        - qui drop if `rep'<0
        = qui drop if v1<0
        - qui save `sortperf'
        = qui save C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000003.tmp
        - restore
        - qui drop if `rep'>0
        = qui drop if v1>0
        - if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
        = if 0!= 1 qui gsort -v1 theta rho pc k  method
          {hline 74} begin gsort {hline}
          - if _caller() >= 12 {c -(}
          - local vv : di "version " string(_caller()) ":"
          - {c )-}
          - tempname myr
          - _return hold `myr'
          = _return hold __000000
          - version 6.0, missing
          - parse `"`*'"', parse(" +-,")
          = parse `"-v1 theta rho pc k method"', parse(" +-,")
          - local noryet 1
          - local i 1
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"-"'!="" & `"-"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"-"'=="-" | `"-"'=="+" {c -(}
          - local sign `"`1'"'
          = local sign `"-"'
          - mac shift
          - if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
          = if `"v1"'=="," | `"v1"'=="" {c -(} error 198 {c )-}
          - {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev v1
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 1 & `"-"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign1 `"-"'
          - local names `"`names' `1'"'
          = local names `" v1"'
          - local i=`i'+1
          = local i=1+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"theta"'!="" & `"theta"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"theta"'=="-" | `"theta"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev theta
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign2 `"+"'
          - local names `"`names' `1'"'
          = local names `" v1 theta"'
          - local i=`i'+1
          = local i=2+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"rho"'!="" & `"rho"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"rho"'=="-" | `"rho"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev rho
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign3 `"+"'
          - local names `"`names' `1'"'
          = local names `" v1 theta rho"'
          - local i=`i'+1
          = local i=3+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"pc"'!="" & `"pc"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"pc"'=="-" | `"pc"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev pc
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign4 `"+"'
          - local names `"`names' `1'"'
          = local names `" v1 theta rho pc"'
          - local i=`i'+1
          = local i=4+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"k"'!="" & `"k"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"k"'=="-" | `"k"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev k
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign5 `"+"'
          - local names `"`names' `1'"'
          = local names `" v1 theta rho pc k"'
          - local i=`i'+1
          = local i=5+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"method"'!="" & `"method"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"method"'=="-" | `"method"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev method
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign6 `"+"'
          - local names `"`names' `1'"'
          = local names `" v1 theta rho pc k method"'
          - local i=`i'+1
          = local i=6+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `""'!="" & `""'!="," {c -(}
            if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
            else local sign "+"
            unabbrev `1'
            if `noryet' & `"`sign'"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
            else {c -(}
            local noryet 0
            local sign`i' `"`sign'"'
            local names `"`names' `1'"'
            local i=`i'+1
            {c )-}
            mac shift
            {c )-}
          - if `"`part1'"'=="" & `"`names'"'=="" {c -(}
          = if `""'=="" & `" v1 theta rho pc k method"'=="" {c -(}
            di in red "varlist required"
            exit 100
            {c )-}
          - local options "Generate(string) Mfirst"
          - parse `"`*'"'
          = parse `""'
          - if `"`generat'"'!="" {c -(}
          = if `""'!="" {c -(}
            confirm new var `generat'
            {c )-}
          - parse `"`names'"', parse(" ")
          = parse `" v1 theta rho pc k method"', parse(" ")
          - local i 1
          - while `"``i''"'!="" {c -(}
          = while `"v1"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort v1
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000001 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by v1: replace __000001=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000001= 0 - sum(__000001)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type v1
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("float",1,3) != "str" {c -(}
          - if "`sign`i''" == "-" {c -(}
          = if "-" == "-" {c -(}
          - tempvar nn
          - qui gen long `nn' = .
          = qui gen long __000002 = .
          - qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
          = qui by v1: replace __000002 = 1 if _n==1 & v1>=.
          - qui sum `nn' if ``i''>=., meanonly
          = qui sum __000002 if v1>=., meanonly
          - local nsum = `r(sum)'
          = local nsum = 0
          - qui replace `nn' = sum(`nn') if ``i''>=.
          = qui replace __000002 = sum(__000002) if v1>=.
          - qui replace `n' = `nsum' - `nn' if ``i''>=.
          = qui replace __000001 = 0 - __000002 if v1>=.
          - {c )-}
          - else {c -(}
            qui replace `n'=``i'' if ``i''>=.
            {c )-}
          - {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000001"'
          - quietly compress `n'
          = quietly compress __000001
          - local i=`i'+1
          = local i=1+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"theta"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort theta
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000003 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by theta: replace __000003=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000003= 0 + sum(__000003)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type theta
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("float",1,3) != "str" {c -(}
          - if "`sign`i''" == "-" {c -(}
          = if "+" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
          - else {c -(}
          - qui replace `n'=``i'' if ``i''>=.
          = qui replace __000003=theta if theta>=.
          - {c )-}
          - {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000001 __000003"'
          - quietly compress `n'
          = quietly compress __000003
          - local i=`i'+1
          = local i=2+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"rho"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort rho
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000004 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by rho: replace __000004=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000004= 0 + sum(__000004)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type rho
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("float",1,3) != "str" {c -(}
          - if "`sign`i''" == "-" {c -(}
          = if "+" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
          - else {c -(}
          - qui replace `n'=``i'' if ``i''>=.
          = qui replace __000004=rho if rho>=.
          - {c )-}
          - {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000001 __000003 __000004"'
          - quietly compress `n'
          = quietly compress __000004
          - local i=`i'+1
          = local i=3+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"pc"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort pc
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000005 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by pc: replace __000005=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000005= 0 + sum(__000005)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type pc
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("byte",1,3) != "str" {c -(}
          - if "`sign`i''" == "-" {c -(}
          = if "+" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
          - else {c -(}
          - qui replace `n'=``i'' if ``i''>=.
          = qui replace __000005=pc if pc>=.
          - {c )-}
          - {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000001 __000003 __000004 __000005"'
          - quietly compress `n'
          = quietly compress __000005
          - local i=`i'+1
          = local i=4+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"k"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort k
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000006 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by k: replace __000006=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000006= 0 + sum(__000006)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type k
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("byte",1,3) != "str" {c -(}
          - if "`sign`i''" == "-" {c -(}
          = if "+" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
          - else {c -(}
          - qui replace `n'=``i'' if ``i''>=.
          = qui replace __000006=k if k>=.
          - {c )-}
          - {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000001 __000003 __000004 __000005 __000006"'
          - quietly compress `n'
          = quietly compress __000006
          - local i=`i'+1
          = local i=5+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"method"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort method
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000007 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by method: replace __000007=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000007= 0 + sum(__000007)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type method
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("str4",1,3) != "str" {c -(}
            if "`sign`i''" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
            else {c -(}
            qui replace `n'=``i'' if ``i''>=.
            {c )-}
            {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000001 __000003 __000004 __000005 __000006 __000007"'
          - quietly compress `n'
          = quietly compress __000007
          - local i=`i'+1
          = local i=6+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `""'!="" {c -(}
            `vv' sort ``i''
            tempvar n
            quietly gen long `n' = .
            quietly by ``i'': replace `n'=1 if _n==1
            quietly replace `n'= 0 `sign`i'' sum(`n')
            if `"`mfirst'"' == "" {c -(}
            local typ : type ``i''
            if bsubstr("`typ'",1,3) != "str" {c -(}
            if "`sign`i''" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
            else {c -(}
            qui replace `n'=``i'' if ``i''>=.
            {c )-}
            {c )-}
            {c )-}
            local tvars `"`tvars' `n'"'
            quietly compress `n'
            local i=`i'+1
            {c )-}
          - `vv' sort `part1' `tvars'
          = version 15: sort   __000001 __000003 __000004 __000005 __000006 __000007
          - if `"`generat'"'!="" {c -(}
          = if `""'!="" {c -(}
            tempvar mark
            qui by `part1' `tvars': gen `c(obs_t)' `mark' = 1 if _n==1
            qui replace `mark' = sum(`mark')
            qui compress `mark'
            `vv' sort `mark'
            rename `mark' `generat'
            {c )-}
          - _return restore `myr'
          = _return restore __000000
          {hline 76} end gsort {hline}
        - else qui gsort -`rep' `dgm' `target'
        = else qui gsort -v1 theta rho pc k 
        - qui append using `sortperf'
        = qui append using C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000003.tmp
          {hline 73} begin append {hline}
          - version 11
          - if (_caller() < 11) {c -(}
            local version : di "version " string(_caller()) ":"
            `version' _append `0'
            exit
            {c )-}
          - syntax [anything(everything)] [, GENerate(name) * ]
          - gettoken using filenames : anything
          - if (`"`using'"' != "using") {c -(}
          = if (`"using"' != "using") {c -(}
            di as err "using required"
            exit 100
            {c )-}
          - if (`"`filenames'"' == "") {c -(}
          = if (`" C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000003.tmp"' == "") {c -(}
            di as err "invalid file specification"
            exit 198
            {c )-}
          - foreach filename of local filenames {c -(}
          - capture quietly describe using `"`filename'"'
          = capture quietly describe using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000003.tmp"'
          - if (_rc) {c -(}
            di as err `"file `filename' not found"'
            exit 601
            {c )-}
          - {c )-}
          - if ("`generate'" != "") {c -(}
          = if ("" != "") {c -(}
            confirm new var `generate'
            local filenum 0
            gen byte `generate' = `filenum'
            local ++filenum
            local filenumpos = _N + 1
            {c )-}
          - foreach filename of local filenames {c -(}
          - capture noisily _append using `"`filename'"', `options'
          = capture noisily _append using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000003.tmp"', 
          - if _rc {c -(}
            if ("`generate'" != "") {c -(}
            capture quietly drop if `generate' > 0
            capture quietly drop `generate'
            {c )-}
            exit _rc
            {c )-}
          - if ("`generate'" != "") {c -(}
          = if ("" != "") {c -(}
            quietly replace `generate' = `filenum' in `filenumpos'/L
            local ++filenum
            local filenumpos = _N + 1
            {c )-}
          - {c )-}
          {hline 75} end append {hline}
        - {c )-}
        - if mi("`describe") siman_describe
        - {c )-}
        - {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 simananalyserun ifanalyse estchange sechange metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] ""
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 simananalyserun ifanalyse estchange sechange metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
{res}{txt}Drawing graph...
{err}WARNING: graph will have 64 columns of panels: consider using if option as detailed in {help siman lollyplot}
{res}{txt}
{com}. * without -if k==5- you get "too many sersets" error
. 
. siman nestloop mean, dgmorder(-theta rho -pc -k) ylabel(0.2 0.5 1) ytitle("Odds ratio") name("nestloop_test7", replace)
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("exp") & mi("var2") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist exp var2   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist exp var2    theta
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number theta
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 3==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
          else if `nformat'==1 & `nmethod'!=0 {c -(}
          if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
          if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
          if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
          if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
          if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
          if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
          if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
          else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
          local numberdgms: word count `dgm'
          if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
          qui tab `method'
          local nmethodlabels = `r(r)'
          qui levels `method', local(mlevels)
          qui tokenize `"`mlevels'"'
          cap quietly label drop `method'
          local labelchange = 0
          forvalues m = 1/`nmethodlabels' {c -(}
          if substr("``m''",strlen("``m''"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          else {c -(}
          local metlabel`m' = "``m''"
          if `m'==1 local metlist `metlabel`m''
          else if `m'>=2 local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
          if `labelchange'==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
          local valmethod = "`metlist'"
          forvalues i=1/`nmethod' {c -(}
          local m`i' = "``i''"
          {c )-}
          local string = 0
          capture confirm numeric variable `method'
          if _rc local string = 1
          if `string' == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
          else if `string' == 1 & "`methodlabels'" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
          else if "`methodlabels'" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          forvalues i=1/`nummethod' {c -(}
          char _dta[siman_m`i'] `i'
          if `i'==1 local siman_method `i'
          else if `i'>=2 local siman_method `siman_method' `i'
          {c )-}
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          char _dta[siman_df] `df'
          char _dta[siman_ci] `ci'
          char _dta[siman_p] `p'
          char _dta[siman_true] `true'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`df'"!="" char _dta[siman_dfvars] `df'
          if "`ci'"!="" char _dta[siman_civars] `ci'
          if "`p'"!="" char _dta[siman_pvars] `p'
          if "`true'"!="" char _dta[siman_truevars] `true'
          char _dta[siman_method] "`siman_valmethod'"
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          else if `nformat'==1 & `nmethod'==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
          {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if "longlong"!="" {c -(}
        - if `nformat'==3 {c -(}
        = if 3==3 {c -(}
        - if `methodlabels' == 1 local valmethod "`metlist'"
        = if 0 == 1 local valmethod ""
        - qui tokenize "`valmethod'"
        = qui tokenize ""
        - if `nmethod'!=0 {c -(}
        = if 2!=0 {c -(}
        - forvalues v=1/`nummethod' {c -(}
        = forvalues v=1/2 {c -(}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("",strlen(""),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - if substr("``v''",strlen("``v''"),1)=="_" {c -(}
        = if substr("",strlen(""),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
        - {c )-}
        - {c )-}
        - local string = 0
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/2 {c -(}
        - qui capture confirm number `m`i''
        = qui capture confirm number peto
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - qui capture confirm number `m`i''
        = qui capture confirm number g2
        - if _rc {c -(}
        - local string = 1
        - {c )-}
        - {c )-}
        - if "`estchange'" == "1" local estimateunderscore = "`estvars'"
        = if "0" == "1" local estimateunderscore = "exp"
        - if "`sechange'" == "1" local seunderscore = "`sevars'"
        = if "0" == "1" local seunderscore = "var2"
        - if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
        = if ("0" != "1" & "0" != "1") local optionlist exp var2   
        - if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
        = if ("0" == "1" & "0" != "1") local optionlist  var2   
        - if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
        = if ("0" != "1" & "0" == "1") local optionlist exp    
        - if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
        = if ("0" == "1" & "0" == "1") local optionlist     
        - local optionlistreshape `optionlist'
        = local optionlistreshape exp var2
        - local exclude "`true'"
        = local exclude "theta"
        - local optionlistreshape: list optionlistreshape - exclude
        - local methodname: char _dta[ReS_j]
        - if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
        = if mi("mcse") | "mcse" == "_j" | "mcse" == "mcse" local methodname "method"
        - if "`methodlables'" == "1" local methodreshape "`methodvalues'"
        = if "" == "1" local methodreshape ""
        - else local methodreshape "`valmethod'"
        = else local methodreshape ""
        - if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
        = if "stub" == "stub" | 0 == 1 {c -(}
        - local trueindgm = strpos("`dgm'","`true'")
        = local trueindgm = strpos("theta rho pc k","theta")
        - if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
        = if 1 == 0 local optionlistreshape exp var2 theta
        - else local optionlistreshape `optionlist'
        = else local optionlistreshape exp var2
        - if `truenumber' == 1 local optionlistreshape `optionlist'
        = if 0 == 1 local optionlistreshape exp var2
        - if "`ntruestub'" == "0" local optionlistreshape `optionlist'
        = if "0" == "0" local optionlistreshape exp var2
        - if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = if 1 == 0 & 0<=1 & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
        - else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 0<=1 & 2!=0 {c -(}
        - qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
        = qui reshape long "exp var2", i(v1 theta rho pc k ) j(method "") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "long"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "long"=="wide" | "long"=="long" {c -(}
          - DoNew `*'
          = DoNew long exp var2 , i(v1 theta rho pc k ) j(method  ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
        = else if 0>1 & 0!=. & 2==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
        - else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 0 & 0>1 & 0!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
        - else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
        = else if 1 == 1 & 0>1 & 0!=. & 2!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
        - {c )-}
        - else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
        = else if "stub" == "variable" & 0 == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
        - foreach u of var * {c -(}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("v1",strlen("v1"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("theta",strlen("theta"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("rho",strlen("rho"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("pc",strlen("pc"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("k",strlen("k"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("method",strlen("method"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("exp",strlen("exp"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("var2",strlen("var2"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("_perfmeascode",strlen("_perfmeascode"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
        = if substr("_dataset",strlen("_dataset"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
        - {c )-}
        - char _dta[siman_format] "format 1: long-long"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "long"
        - char _dta[siman_nformat] 1
        - if `nmethod'!=0 char _dta[siman_method] "`methodname'"
        = if 2!=0 char _dta[siman_method] "method"
        - if `nmethod'!=0 char _dta[siman_nmethod] 1
        = if 2!=0 char _dta[siman_nmethod] 1
        - char _dta[siman_descriptiontype] "variable"
        - char _dta[siman_truedescriptiontype] "variable"
        - char _dta[siman_cidescriptiontype] "variables"
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] exp
        - char _dta[siman_se] `se'
        = char _dta[siman_se] var2
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "exp"!="" char _dta[siman_estvars] exp
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "var2"!="" char _dta[siman_sevars] var2
        - if "`simananalyserun'"=="1" {c -(}
        = if "1"=="1" {c -(}
        - preserve
        - qui tempfile sortperf
        - qui drop if `rep'<0
        = qui drop if v1<0
        - qui save `sortperf'
        = qui save C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000003.tmp
        - restore
        - qui drop if `rep'>0
        = qui drop if v1>0
        - if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
        = if 0!= 1 qui gsort -v1 theta rho pc k  method
          {hline 74} begin gsort {hline}
          - if _caller() >= 12 {c -(}
          - local vv : di "version " string(_caller()) ":"
          - {c )-}
          - tempname myr
          - _return hold `myr'
          = _return hold __000000
          - version 6.0, missing
          - parse `"`*'"', parse(" +-,")
          = parse `"-v1 theta rho pc k method"', parse(" +-,")
          - local noryet 1
          - local i 1
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"-"'!="" & `"-"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"-"'=="-" | `"-"'=="+" {c -(}
          - local sign `"`1'"'
          = local sign `"-"'
          - mac shift
          - if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
          = if `"v1"'=="," | `"v1"'=="" {c -(} error 198 {c )-}
          - {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev v1
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 1 & `"-"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign1 `"-"'
          - local names `"`names' `1'"'
          = local names `" v1"'
          - local i=`i'+1
          = local i=1+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"theta"'!="" & `"theta"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"theta"'=="-" | `"theta"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev theta
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign2 `"+"'
          - local names `"`names' `1'"'
          = local names `" v1 theta"'
          - local i=`i'+1
          = local i=2+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"rho"'!="" & `"rho"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"rho"'=="-" | `"rho"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev rho
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign3 `"+"'
          - local names `"`names' `1'"'
          = local names `" v1 theta rho"'
          - local i=`i'+1
          = local i=3+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"pc"'!="" & `"pc"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"pc"'=="-" | `"pc"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev pc
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign4 `"+"'
          - local names `"`names' `1'"'
          = local names `" v1 theta rho pc"'
          - local i=`i'+1
          = local i=4+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"k"'!="" & `"k"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"k"'=="-" | `"k"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev k
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign5 `"+"'
          - local names `"`names' `1'"'
          = local names `" v1 theta rho pc k"'
          - local i=`i'+1
          = local i=5+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `"method"'!="" & `"method"'!="," {c -(}
          - if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
          = if `"method"'=="-" | `"method"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
          - else local sign "+"
          - unabbrev `1'
          = unabbrev method
          - if `noryet' & `"`sign'"'=="+" {c -(}
          = if 0 & `"+"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
          - else {c -(}
          - local noryet 0
          - local sign`i' `"`sign'"'
          = local sign6 `"+"'
          - local names `"`names' `1'"'
          = local names `" v1 theta rho pc k method"'
          - local i=`i'+1
          = local i=6+1
          - {c )-}
          - mac shift
          - {c )-}
          - while `"`1'"'!="" & `"`1'"'!="," {c -(}
          = while `""'!="" & `""'!="," {c -(}
            if `"`1'"'=="-" | `"`1'"'=="+" {c -(}
            local sign `"`1'"'
            mac shift
            if `"`1'"'=="," | `"`1'"'=="" {c -(} error 198 {c )-}
            {c )-}
            else local sign "+"
            unabbrev `1'
            if `noryet' & `"`sign'"'=="+" {c -(}
            local part1 `"`part1' `s(varlist)'"'
            {c )-}
            else {c -(}
            local noryet 0
            local sign`i' `"`sign'"'
            local names `"`names' `1'"'
            local i=`i'+1
            {c )-}
            mac shift
            {c )-}
          - if `"`part1'"'=="" & `"`names'"'=="" {c -(}
          = if `""'=="" & `" v1 theta rho pc k method"'=="" {c -(}
            di in red "varlist required"
            exit 100
            {c )-}
          - local options "Generate(string) Mfirst"
          - parse `"`*'"'
          = parse `""'
          - if `"`generat'"'!="" {c -(}
          = if `""'!="" {c -(}
            confirm new var `generat'
            {c )-}
          - parse `"`names'"', parse(" ")
          = parse `" v1 theta rho pc k method"', parse(" ")
          - local i 1
          - while `"``i''"'!="" {c -(}
          = while `"v1"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort v1
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000001 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by v1: replace __000001=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000001= 0 - sum(__000001)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type v1
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("float",1,3) != "str" {c -(}
          - if "`sign`i''" == "-" {c -(}
          = if "-" == "-" {c -(}
          - tempvar nn
          - qui gen long `nn' = .
          = qui gen long __000002 = .
          - qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
          = qui by v1: replace __000002 = 1 if _n==1 & v1>=.
          - qui sum `nn' if ``i''>=., meanonly
          = qui sum __000002 if v1>=., meanonly
          - local nsum = `r(sum)'
          = local nsum = 0
          - qui replace `nn' = sum(`nn') if ``i''>=.
          = qui replace __000002 = sum(__000002) if v1>=.
          - qui replace `n' = `nsum' - `nn' if ``i''>=.
          = qui replace __000001 = 0 - __000002 if v1>=.
          - {c )-}
          - else {c -(}
            qui replace `n'=``i'' if ``i''>=.
            {c )-}
          - {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000001"'
          - quietly compress `n'
          = quietly compress __000001
          - local i=`i'+1
          = local i=1+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"theta"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort theta
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000003 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by theta: replace __000003=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000003= 0 + sum(__000003)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type theta
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("float",1,3) != "str" {c -(}
          - if "`sign`i''" == "-" {c -(}
          = if "+" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
          - else {c -(}
          - qui replace `n'=``i'' if ``i''>=.
          = qui replace __000003=theta if theta>=.
          - {c )-}
          - {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000001 __000003"'
          - quietly compress `n'
          = quietly compress __000003
          - local i=`i'+1
          = local i=2+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"rho"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort rho
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000004 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by rho: replace __000004=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000004= 0 + sum(__000004)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type rho
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("float",1,3) != "str" {c -(}
          - if "`sign`i''" == "-" {c -(}
          = if "+" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
          - else {c -(}
          - qui replace `n'=``i'' if ``i''>=.
          = qui replace __000004=rho if rho>=.
          - {c )-}
          - {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000001 __000003 __000004"'
          - quietly compress `n'
          = quietly compress __000004
          - local i=`i'+1
          = local i=3+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"pc"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort pc
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000005 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by pc: replace __000005=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000005= 0 + sum(__000005)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type pc
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("byte",1,3) != "str" {c -(}
          - if "`sign`i''" == "-" {c -(}
          = if "+" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
          - else {c -(}
          - qui replace `n'=``i'' if ``i''>=.
          = qui replace __000005=pc if pc>=.
          - {c )-}
          - {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000001 __000003 __000004 __000005"'
          - quietly compress `n'
          = quietly compress __000005
          - local i=`i'+1
          = local i=4+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"k"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort k
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000006 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by k: replace __000006=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000006= 0 + sum(__000006)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type k
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("byte",1,3) != "str" {c -(}
          - if "`sign`i''" == "-" {c -(}
          = if "+" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
          - else {c -(}
          - qui replace `n'=``i'' if ``i''>=.
          = qui replace __000006=k if k>=.
          - {c )-}
          - {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000001 __000003 __000004 __000005 __000006"'
          - quietly compress `n'
          = quietly compress __000006
          - local i=`i'+1
          = local i=5+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `"method"'!="" {c -(}
          - `vv' sort ``i''
          = version 15: sort method
          - tempvar n
          - quietly gen long `n' = .
          = quietly gen long __000007 = .
          - quietly by ``i'': replace `n'=1 if _n==1
          = quietly by method: replace __000007=1 if _n==1
          - quietly replace `n'= 0 `sign`i'' sum(`n')
          = quietly replace __000007= 0 + sum(__000007)
          - if `"`mfirst'"' == "" {c -(}
          = if `""' == "" {c -(}
          - local typ : type ``i''
          = local typ : type method
          - if bsubstr("`typ'",1,3) != "str" {c -(}
          = if bsubstr("str4",1,3) != "str" {c -(}
            if "`sign`i''" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
            else {c -(}
            qui replace `n'=``i'' if ``i''>=.
            {c )-}
            {c )-}
          - {c )-}
          - local tvars `"`tvars' `n'"'
          = local tvars `" __000001 __000003 __000004 __000005 __000006 __000007"'
          - quietly compress `n'
          = quietly compress __000007
          - local i=`i'+1
          = local i=6+1
          - {c )-}
          - while `"``i''"'!="" {c -(}
          = while `""'!="" {c -(}
            `vv' sort ``i''
            tempvar n
            quietly gen long `n' = .
            quietly by ``i'': replace `n'=1 if _n==1
            quietly replace `n'= 0 `sign`i'' sum(`n')
            if `"`mfirst'"' == "" {c -(}
            local typ : type ``i''
            if bsubstr("`typ'",1,3) != "str" {c -(}
            if "`sign`i''" == "-" {c -(}
            tempvar nn
            qui gen long `nn' = .
            qui by ``i'': replace `nn' = 1 if _n==1 & ``i''>=.
            qui sum `nn' if ``i''>=., meanonly
            local nsum = `r(sum)'
            qui replace `nn' = sum(`nn') if ``i''>=.
            qui replace `n' = `nsum' - `nn' if ``i''>=.
            {c )-}
            else {c -(}
            qui replace `n'=``i'' if ``i''>=.
            {c )-}
            {c )-}
            {c )-}
            local tvars `"`tvars' `n'"'
            quietly compress `n'
            local i=`i'+1
            {c )-}
          - `vv' sort `part1' `tvars'
          = version 15: sort   __000001 __000003 __000004 __000005 __000006 __000007
          - if `"`generat'"'!="" {c -(}
          = if `""'!="" {c -(}
            tempvar mark
            qui by `part1' `tvars': gen `c(obs_t)' `mark' = 1 if _n==1
            qui replace `mark' = sum(`mark')
            qui compress `mark'
            `vv' sort `mark'
            rename `mark' `generat'
            {c )-}
          - _return restore `myr'
          = _return restore __000000
          {hline 76} end gsort {hline}
        - else qui gsort -`rep' `dgm' `target'
        = else qui gsort -v1 theta rho pc k 
        - qui append using `sortperf'
        = qui append using C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000003.tmp
          {hline 73} begin append {hline}
          - version 11
          - if (_caller() < 11) {c -(}
            local version : di "version " string(_caller()) ":"
            `version' _append `0'
            exit
            {c )-}
          - syntax [anything(everything)] [, GENerate(name) * ]
          - gettoken using filenames : anything
          - if (`"`using'"' != "using") {c -(}
          = if (`"using"' != "using") {c -(}
            di as err "using required"
            exit 100
            {c )-}
          - if (`"`filenames'"' == "") {c -(}
          = if (`" C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000003.tmp"' == "") {c -(}
            di as err "invalid file specification"
            exit 198
            {c )-}
          - foreach filename of local filenames {c -(}
          - capture quietly describe using `"`filename'"'
          = capture quietly describe using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000003.tmp"'
          - if (_rc) {c -(}
            di as err `"file `filename' not found"'
            exit 601
            {c )-}
          - {c )-}
          - if ("`generate'" != "") {c -(}
          = if ("" != "") {c -(}
            confirm new var `generate'
            local filenum 0
            gen byte `generate' = `filenum'
            local ++filenum
            local filenumpos = _N + 1
            {c )-}
          - foreach filename of local filenames {c -(}
          - capture noisily _append using `"`filename'"', `options'
          = capture noisily _append using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_3bf0_000003.tmp"', 
          - if _rc {c -(}
            if ("`generate'" != "") {c -(}
            capture quietly drop if `generate' > 0
            capture quietly drop `generate'
            {c )-}
            exit _rc
            {c )-}
          - if ("`generate'" != "") {c -(}
          = if ("" != "") {c -(}
            quietly replace `generate' = `filenum' in `filenumpos'/L
            local ++filenum
            local filenumpos = _N + 1
            {c )-}
          - {c )-}
          {hline 75} end append {hline}
        - {c )-}
        - if mi("`describe") siman_describe
        - {c )-}
        - {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 simananalyserun ifanalyse estchange sechange metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] ""
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 simananalyserun ifanalyse estchange sechange metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
{res}{txt}Drawing graph...
{res}{txt}
{com}. 
. if ${c -(}detail{c )-} == 1 {c -(}
. 
. * Testing warning messages correspond to the number of panels/graphs that will be printed
. 
. clear all
{res}{com}. prog drop _all
. use data\extendedtestdata_postfile.dta, clear
. 
. * remove non-integer values
. gen betatrue=beta
. foreach var in beta pmiss {c -(}
{txt}  2{com}.         gen `var'char = strofreal(`var')
{txt}  3{com}.         drop `var'
{txt}  4{com}.         sencode `var'char, gen(`var')
{txt}  5{com}.         drop `var'char
{txt}  6{com}. {c )-}
{res}{com}. order beta pmiss
. 
. * create a string dgm var as well for testing
. gen betastring = "0"
. replace betastring = "0.25" if beta == 2
{txt}variable {bf}betastring{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str4{sf}
{txt}(36,000 real changes made)
{com}. replace betastring = "0.5" if beta == 3
{txt}(36,000 real changes made)
{com}. drop beta
. rename betastring beta
{res}{com}. 
. siman_setup, rep(rep) dgm(beta pmiss mech) method(method) target(estimand) est(b) se(se) true(betatrue)
{res}  {txt}variable {bf}beta{sf} was {bf}{res}long{sf}{txt} now {bf}{res}byte{sf}
{txt}  (324,000 bytes saved)
{err}Warning: variable beta, which appears in dgm(), was stored as a string. It has been
encoded as numeric so that subsequent siman commands will work. If you require a
different order, encode beta as numeric before running -siman setup-.
{res}  {txt}variable {bf}mech{sf} was {bf}{res}long{sf}{txt} now {bf}{res}byte{sf}
{txt}  (324,000 bytes saved)
{err}Warning: variable mech, which appears in dgm(), was stored as a string. It has been
encoded as numeric so that subsequent siman commands will work. If you require a
different order, encode mech as numeric before running -siman setup-.

{txt}{col 20}SUMMARY OF DATA
_____________________________________________________

The siman format is:{res}{col 35}format 1: long-long
{txt}The format for targets is:{res}{col 35}long
{txt}The format for methods is:{res}{col 35}long
{txt}The number of targets is:{res}{col 35}3
{txt}The target values are:{res}{col 35}effect mean0 mean1

{txt}The number of methods is:{res}{col 35}3
{txt}The method values are:{res}{col 35}CCA MeanImp Noadj

Data generating mechanism (dgm)
{txt}The total number of dgms is: {res}{col 35}12
{txt}The dgm variables (# levels): {res}{col 35}beta (3) pmiss (2) mech (2) 

Estimates are contained in the dataset

{txt}The estimates variable is:{res}{col 35}b
{txt}The se variable is:{res}{col 35}se
{txt}The df variable is:{res}{col 35}N/A
{txt}The ci variables are:{res}{col 35}N/A
{txt}The p variable is:{res}{col 35}N/A
{txt}The true variable is:{res}{col 35}betatrue
{txt}_____________________________________________________
{com}. 
. * scatter
. siman scatter
{txt}working.....
{err}{it: WARNING: 108 panels will be created, consider using 'if' or 'by' options as detailed in {help siman_scatter:siman scatter}}
{res}{com}. siman scatter if method == "CCA"
{txt}working.....
{err}{it: WARNING: 36 panels will be created, consider using 'if' or 'by' options as detailed in {help siman_scatter:siman scatter}}
{res}{com}. siman scatter if estimand == "effect"
{txt}working.....
{err}{it: WARNING: 36 panels will be created, consider using 'if' or 'by' options as detailed in {help siman_scatter:siman scatter}}
{res}{com}. siman scatter if mech =="MCAR": mech
{txt}working.....
{err}{it: WARNING: 54 panels will be created, consider using 'if' or 'by' options as detailed in {help siman_scatter:siman scatter}}
{res}{com}. 
. siman scatter, by(pmiss)
{txt}working.....
{res}{com}. siman scatter, by(estimand)
{txt}working.....
{res}{com}. siman scatter, by(method)
{txt}working.....
{res}{com}. 
. * swarm, requires 2 methods
. siman swarm
{res}{txt}working.....
{err}{it: WARNING: 36 panels will be created, consider using 'if' or 'by' options as detailed in {help siman_swarm:siman swarm}}
{com}. siman swarm if (method == "CCA" | method == "MeanImp")
{res}{txt}working.....
{err}{it: WARNING: 36 panels will be created, consider using 'if' or 'by' options as detailed in {help siman_swarm:siman swarm}}
{com}. siman swarm if estimand == "effect"
{res}{txt}working.....
{com}. siman swarm if mech =="MCAR": mech
{res}{txt}working.....
{err}{it: WARNING: 18 panels will be created, consider using 'if' or 'by' options as detailed in {help siman_swarm:siman swarm}}
{com}. 
. siman swarm, by(pmiss)
{res}{txt}working.....
{com}. siman swarm, by(estimand)
{res}{txt}working.....
{com}. 
. * blandaltman
. siman blandaltman
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("b") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist b se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist b se    betatrue
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number betatrue
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("b",strlen("b"),1)=="_" local estimate = substr("b", 1, index("b","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("betatrue",strlen("betatrue"),1)=="_" local true = substr("betatrue", 1, index("betatrue","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" local optionlist b se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist b se    betatrue
        - local numberdgms: word count `dgm'
        = local numberdgms: word count beta pmiss mech
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 3!=1 local optionlist b se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 3
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 1 {c -(}
          - capture assert `varlist' == int(`varlist') if `touse'
          = capture assert method == int(method) if __000003
          - if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
          - tempname Vals
          - qui tab `varlist' if `touse', `missing' matrow(`Vals')
          = qui tab method if __000003,  matrow(__000004)
          - local nvals = r(r)
          - forval i = 1 / `nvals' {c -(}
          = forval i = 1 / 3 {c -(}
          - local val = `Vals'[`i',1]
          = local val = __000004[1,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 1 < 3 local vals "1 "
          - else local vals "`vals'`val'"
          = else local vals "1 1"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[2,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 2 < 3 local vals "1 2 "
          - else local vals "`vals'`val'"
          = else local vals "1 2 2"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[3,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 3 < 3 local vals "1 2 3 "
          - else local vals "`vals'`val'"
          = else local vals "1 2 3"
          - {c )-}
          - {c )-}
          - else {c -(}
            tempvar select counter
            bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
            generate `counter' = sum(`select') * (`select' == 1)
            sort `counter'
            qui count if `counter' == 0
            local j = 1 + r(N)
            local nvals = _N
            if "`clean'" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
            else {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
            else local vals `"`vals'`"`=`varlist'[`i']'"'"'
            {c )-}
            {c )-}
            {c )-}
          - di as txt `"`vals'"'
          = di as txt `"1 2 3"'
          - return local levels `"`vals'"'
          = return local levels `"1 2 3"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"1 2 3"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"1 2 3"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/3 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("1",strlen("1"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "1"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist 1
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist 1 1
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("2",strlen("2"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "2"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist 2
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist 1 2
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("3",strlen("3"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel3 = "3"
        - if `m'==1 local metlist `metlabel`m''
        = if 3==1 local metlist 3
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 3>=2 local metlist 1 2 3
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "1 2 3"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "1"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 0 == 0 {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        = qui reshape wide "b se", i(rep beta pmiss mech "estimand") j(method "1 2 3")
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide b se , i(rep beta pmiss mech estimand ) j(method 1 2 3 )
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 0 == 1 & "0" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/3 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m3] 3
        - if `i'==1 local siman_method `i'
        = if 3==1 local siman_method 3
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 3>=2 local siman_method 1 2 3
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] b
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] betatrue
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "b"!="" char _dta[siman_estvars] b
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if "betatrue"!="" char _dta[siman_truevars] betatrue
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "multiple"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "multiple"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "1 2 3"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
working....
{err}{it: WARNING: 36 graphs will be created, consider using 'if' option as detailed in {help siman_blandaltman:siman blandaltman}}
{res}{com}. siman blandaltman if estimand == "effect"
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("b") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist b se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist b se    betatrue
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number betatrue
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("b",strlen("b"),1)=="_" local estimate = substr("b", 1, index("b","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("betatrue",strlen("betatrue"),1)=="_" local true = substr("betatrue", 1, index("betatrue","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" local optionlist b se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist b se    betatrue
        - local numberdgms: word count `dgm'
        = local numberdgms: word count beta pmiss mech
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 3!=1 local optionlist b se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 3
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 1 {c -(}
          - capture assert `varlist' == int(`varlist') if `touse'
          = capture assert method == int(method) if __000003
          - if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
          - tempname Vals
          - qui tab `varlist' if `touse', `missing' matrow(`Vals')
          = qui tab method if __000003,  matrow(__000004)
          - local nvals = r(r)
          - forval i = 1 / `nvals' {c -(}
          = forval i = 1 / 3 {c -(}
          - local val = `Vals'[`i',1]
          = local val = __000004[1,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 1 < 3 local vals "1 "
          - else local vals "`vals'`val'"
          = else local vals "1 1"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[2,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 2 < 3 local vals "1 2 "
          - else local vals "`vals'`val'"
          = else local vals "1 2 2"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[3,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 3 < 3 local vals "1 2 3 "
          - else local vals "`vals'`val'"
          = else local vals "1 2 3"
          - {c )-}
          - {c )-}
          - else {c -(}
            tempvar select counter
            bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
            generate `counter' = sum(`select') * (`select' == 1)
            sort `counter'
            qui count if `counter' == 0
            local j = 1 + r(N)
            local nvals = _N
            if "`clean'" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
            else {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
            else local vals `"`vals'`"`=`varlist'[`i']'"'"'
            {c )-}
            {c )-}
            {c )-}
          - di as txt `"`vals'"'
          = di as txt `"1 2 3"'
          - return local levels `"`vals'"'
          = return local levels `"1 2 3"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"1 2 3"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"1 2 3"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/3 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("1",strlen("1"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "1"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist 1
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist 1 1
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("2",strlen("2"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "2"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist 2
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist 1 2
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("3",strlen("3"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel3 = "3"
        - if `m'==1 local metlist `metlabel`m''
        = if 3==1 local metlist 3
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 3>=2 local metlist 1 2 3
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "1 2 3"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "1"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 0 == 0 {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        = qui reshape wide "b se", i(rep beta pmiss mech "estimand") j(method "1 2 3")
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide b se , i(rep beta pmiss mech estimand ) j(method 1 2 3 )
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 0 == 1 & "0" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/3 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m3] 3
        - if `i'==1 local siman_method `i'
        = if 3==1 local siman_method 3
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 3>=2 local siman_method 1 2 3
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] b
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] betatrue
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "b"!="" char _dta[siman_estvars] b
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if "betatrue"!="" char _dta[siman_truevars] betatrue
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "multiple"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "multiple"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "1 2 3"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
working....
{res}{com}. siman blandaltman if mech =="MCAR": mech
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("b") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist b se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist b se    betatrue
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number betatrue
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("b",strlen("b"),1)=="_" local estimate = substr("b", 1, index("b","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("betatrue",strlen("betatrue"),1)=="_" local true = substr("betatrue", 1, index("betatrue","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" local optionlist b se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist b se    betatrue
        - local numberdgms: word count `dgm'
        = local numberdgms: word count beta pmiss mech
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 3!=1 local optionlist b se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 3
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 1 {c -(}
          - capture assert `varlist' == int(`varlist') if `touse'
          = capture assert method == int(method) if __000003
          - if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
          - tempname Vals
          - qui tab `varlist' if `touse', `missing' matrow(`Vals')
          = qui tab method if __000003,  matrow(__000004)
          - local nvals = r(r)
          - forval i = 1 / `nvals' {c -(}
          = forval i = 1 / 3 {c -(}
          - local val = `Vals'[`i',1]
          = local val = __000004[1,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 1 < 3 local vals "1 "
          - else local vals "`vals'`val'"
          = else local vals "1 1"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[2,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 2 < 3 local vals "1 2 "
          - else local vals "`vals'`val'"
          = else local vals "1 2 2"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[3,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 3 < 3 local vals "1 2 3 "
          - else local vals "`vals'`val'"
          = else local vals "1 2 3"
          - {c )-}
          - {c )-}
          - else {c -(}
            tempvar select counter
            bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
            generate `counter' = sum(`select') * (`select' == 1)
            sort `counter'
            qui count if `counter' == 0
            local j = 1 + r(N)
            local nvals = _N
            if "`clean'" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
            else {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
            else local vals `"`vals'`"`=`varlist'[`i']'"'"'
            {c )-}
            {c )-}
            {c )-}
          - di as txt `"`vals'"'
          = di as txt `"1 2 3"'
          - return local levels `"`vals'"'
          = return local levels `"1 2 3"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"1 2 3"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"1 2 3"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/3 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("1",strlen("1"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "1"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist 1
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist 1 1
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("2",strlen("2"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "2"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist 2
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist 1 2
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("3",strlen("3"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel3 = "3"
        - if `m'==1 local metlist `metlabel`m''
        = if 3==1 local metlist 3
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 3>=2 local metlist 1 2 3
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "1 2 3"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "1"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 0 == 0 {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        = qui reshape wide "b se", i(rep beta pmiss mech "estimand") j(method "1 2 3")
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide b se , i(rep beta pmiss mech estimand ) j(method 1 2 3 )
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 0 == 1 & "0" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/3 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m3] 3
        - if `i'==1 local siman_method `i'
        = if 3==1 local siman_method 3
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 3>=2 local siman_method 1 2 3
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] b
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] betatrue
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "b"!="" char _dta[siman_estvars] b
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if "betatrue"!="" char _dta[siman_truevars] betatrue
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "multiple"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "multiple"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "1 2 3"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
working....
{err}{it: WARNING: 18 graphs will be created, consider using 'if' option as detailed in {help siman_blandaltman:siman blandaltman}}
{res}{com}. 
. siman blandaltman, by(pmiss)
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("b") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist b se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist b se    betatrue
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number betatrue
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("b",strlen("b"),1)=="_" local estimate = substr("b", 1, index("b","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("betatrue",strlen("betatrue"),1)=="_" local true = substr("betatrue", 1, index("betatrue","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" local optionlist b se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist b se    betatrue
        - local numberdgms: word count `dgm'
        = local numberdgms: word count beta pmiss mech
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 3!=1 local optionlist b se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 3
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 1 {c -(}
          - capture assert `varlist' == int(`varlist') if `touse'
          = capture assert method == int(method) if __000003
          - if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
          - tempname Vals
          - qui tab `varlist' if `touse', `missing' matrow(`Vals')
          = qui tab method if __000003,  matrow(__000004)
          - local nvals = r(r)
          - forval i = 1 / `nvals' {c -(}
          = forval i = 1 / 3 {c -(}
          - local val = `Vals'[`i',1]
          = local val = __000004[1,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 1 < 3 local vals "1 "
          - else local vals "`vals'`val'"
          = else local vals "1 1"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[2,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 2 < 3 local vals "1 2 "
          - else local vals "`vals'`val'"
          = else local vals "1 2 2"
          - {c )-}
          - local val = `Vals'[`i',1]
          = local val = __000004[3,1]
          - if `i' < `nvals' local vals "`vals'`val'`sep'"
          = if 3 < 3 local vals "1 2 3 "
          - else local vals "`vals'`val'"
          = else local vals "1 2 3"
          - {c )-}
          - {c )-}
          - else {c -(}
            tempvar select counter
            bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
            generate `counter' = sum(`select') * (`select' == 1)
            sort `counter'
            qui count if `counter' == 0
            local j = 1 + r(N)
            local nvals = _N
            if "`clean'" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
            else {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
            else local vals `"`vals'`"`=`varlist'[`i']'"'"'
            {c )-}
            {c )-}
            {c )-}
          - di as txt `"`vals'"'
          = di as txt `"1 2 3"'
          - return local levels `"`vals'"'
          = return local levels `"1 2 3"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"1 2 3"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"1 2 3"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/3 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("1",strlen("1"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "1"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist 1
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist 1 1
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("2",strlen("2"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "2"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist 2
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist 1 2
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("3",strlen("3"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel3 = "3"
        - if `m'==1 local metlist `metlabel`m''
        = if 3==1 local metlist 3
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 3>=2 local metlist 1 2 3
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "1 2 3"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "1"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 0 == 0 {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
        = qui reshape wide "b se", i(rep beta pmiss mech "estimand") j(method "1 2 3")
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide b se , i(rep beta pmiss mech estimand ) j(method 1 2 3 )
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 0 == 1 & "0" != "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
          {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/3 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m3] 3
        - if `i'==1 local siman_method `i'
        = if 3==1 local siman_method 3
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 3>=2 local siman_method 1 2 3
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] b
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] betatrue
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "b"!="" char _dta[siman_estvars] b
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if "betatrue"!="" char _dta[siman_truevars] betatrue
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "multiple"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "multiple"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "1 2 3"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
working....
{res}{com}. 
. siman blandaltman, methlist(Noadj MeanImp)
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("b") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist b se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist b se    betatrue
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number betatrue
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("b",strlen("b"),1)=="_" local estimate = substr("b", 1, index("b","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("betatrue",strlen("betatrue"),1)=="_" local true = substr("betatrue", 1, index("betatrue","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" local optionlist b se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist b se    betatrue
        - local numberdgms: word count `dgm'
        = local numberdgms: word count beta pmiss mech
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 3!=1 local optionlist b se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 2
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 0 {c -(}
            capture assert `varlist' == int(`varlist') if `touse'
            if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
            tempname Vals
            qui tab `varlist' if `touse', `missing' matrow(`Vals')
            local nvals = r(r)
            forval i = 1 / `nvals' {c -(}
            local val = `Vals'[`i',1]
            if `i' < `nvals' local vals "`vals'`val'`sep'"
            else local vals "`vals'`val'"
            {c )-}
            {c )-}
          - else {c -(}
          - tempvar select counter
          - bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
          = bysort __000004 method : gen byte __000005 = (_n == 1) * __000004
          - generate `counter' = sum(`select') * (`select' == 1)
          = generate __000006 = sum(__000005) * (__000005 == 1)
          - sort `counter'
          = sort __000006
          - qui count if `counter' == 0
          = qui count if __000006 == 0
          - local j = 1 + r(N)
          - local nvals = _N
          - if "`clean'" != "" {c -(}
          = if "" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
          - else {c -(}
          - forval i = `j' / `nvals' {c -(}
          = forval i = 71999 / 72000 {c -(}
          - if `i' < `nvals' {c -(}
          = if 71999 < 72000 {c -(}
          - local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
          = local vals `"`"MeanImp"' "'
          - {c )-}
          - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
          = else local vals `"`"MeanImp"' `"MeanImp"'"'
          - {c )-}
          - if `i' < `nvals' {c -(}
          = if 72000 < 72000 {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
          - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
          = else local vals `"`"MeanImp"' `"Noadj"'"'
          - {c )-}
          - {c )-}
          - {c )-}
          - di as txt `"`vals'"'
          = di as txt `"`"MeanImp"' `"Noadj"'"'
          - return local levels `"`vals'"'
          = return local levels `"`"MeanImp"' `"Noadj"'"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"`"MeanImp"' `"Noadj"'"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"`"MeanImp"' `"Noadj"'"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/2 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("MeanImp",strlen("MeanImp"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "MeanImp"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist MeanImp
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist MeanImp MeanImp
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("Noadj",strlen("Noadj"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "Noadj"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist Noadj
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist MeanImp Noadj
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "MeanImp Noadj"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "MeanImp"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 1 == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 1 == 1 & "0" != "1" {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
        = qui reshape wide "b se", i(rep beta pmiss mech "estimand") j(method "MeanImp Noadj") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide b se , i(rep beta pmiss mech estimand ) j(method MeanImp Noadj ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/3 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m3] 3
        - if `i'==1 local siman_method `i'
        = if 3==1 local siman_method 3
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 3>=2 local siman_method 1 2 3
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] b
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] betatrue
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "b"!="" char _dta[siman_estvars] b
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if "betatrue"!="" char _dta[siman_truevars] betatrue
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "multiple"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "multiple"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "MeanImp Noadj"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
working....
{err}{it: WARNING: 36 graphs will be created, consider using 'if' option as detailed in {help siman_blandaltman:siman blandaltman}}
{res}{com}. 
. * comparemethodsscatter
. siman comparemethodsscatter
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("b") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist b se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist b se    betatrue
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number betatrue
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("b",strlen("b"),1)=="_" local estimate = substr("b", 1, index("b","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("betatrue",strlen("betatrue"),1)=="_" local true = substr("betatrue", 1, index("betatrue","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" local optionlist b se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist b se    betatrue
        - local numberdgms: word count `dgm'
        = local numberdgms: word count beta pmiss mech
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 3!=1 local optionlist b se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 3
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 0 {c -(}
            capture assert `varlist' == int(`varlist') if `touse'
            if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
            tempname Vals
            qui tab `varlist' if `touse', `missing' matrow(`Vals')
            local nvals = r(r)
            forval i = 1 / `nvals' {c -(}
            local val = `Vals'[`i',1]
            if `i' < `nvals' local vals "`vals'`val'`sep'"
            else local vals "`vals'`val'"
            {c )-}
            {c )-}
          - else {c -(}
          - tempvar select counter
          - bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
          = bysort __000003 method : gen byte __000004 = (_n == 1) * __000003
          - generate `counter' = sum(`select') * (`select' == 1)
          = generate __000005 = sum(__000004) * (__000004 == 1)
          - sort `counter'
          = sort __000005
          - qui count if `counter' == 0
          = qui count if __000005 == 0
          - local j = 1 + r(N)
          - local nvals = _N
          - if "`clean'" != "" {c -(}
          = if "" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
          - else {c -(}
          - forval i = `j' / `nvals' {c -(}
          = forval i = 107998 / 108000 {c -(}
          - if `i' < `nvals' {c -(}
          = if 107998 < 108000 {c -(}
          - local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
          = local vals `"`"CCA"' "'
          - {c )-}
          - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
          = else local vals `"`"CCA"' `"CCA"'"'
          - {c )-}
          - if `i' < `nvals' {c -(}
          = if 107999 < 108000 {c -(}
          - local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
          = local vals `"`"CCA"' `"MeanImp"' "'
          - {c )-}
          - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
          = else local vals `"`"CCA"' `"MeanImp"' `"MeanImp"'"'
          - {c )-}
          - if `i' < `nvals' {c -(}
          = if 108000 < 108000 {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
          - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
          = else local vals `"`"CCA"' `"MeanImp"' `"Noadj"'"'
          - {c )-}
          - {c )-}
          - {c )-}
          - di as txt `"`vals'"'
          = di as txt `"`"CCA"' `"MeanImp"' `"Noadj"'"'
          - return local levels `"`vals'"'
          = return local levels `"`"CCA"' `"MeanImp"' `"Noadj"'"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"`"CCA"' `"MeanImp"' `"Noadj"'"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"`"CCA"' `"MeanImp"' `"Noadj"'"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/3 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("CCA",strlen("CCA"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "CCA"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist CCA
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist CCA CCA
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("MeanImp",strlen("MeanImp"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "MeanImp"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist MeanImp
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist CCA MeanImp
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("Noadj",strlen("Noadj"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel3 = "Noadj"
        - if `m'==1 local metlist `metlabel`m''
        = if 3==1 local metlist Noadj
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 3>=2 local metlist CCA MeanImp Noadj
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "CCA MeanImp Noadj"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "CCA"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 1 == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 1 == 1 & "0" != "1" {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
        = qui reshape wide "b se", i(rep beta pmiss mech "estimand") j(method "CCA MeanImp Noadj") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide b se , i(rep beta pmiss mech estimand ) j(method CCA MeanImp Noadj ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/3 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m3] 3
        - if `i'==1 local siman_method `i'
        = if 3==1 local siman_method 3
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 3>=2 local siman_method 1 2 3
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] b
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] betatrue
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "b"!="" char _dta[siman_estvars] b
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if "betatrue"!="" char _dta[siman_truevars] betatrue
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "multiple"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "multiple"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "CCA MeanImp Noadj"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
Working.....
{err}{it: WARNING: 36 graphs will be created, consider using 'if' option as detailed in {help              siman_comparemethodsscatter:siman comparemethodsscatter}}
{res}{com}. siman comparemethodsscatter if estimand == "effect"
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("b") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist b se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist b se    betatrue
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number betatrue
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("b",strlen("b"),1)=="_" local estimate = substr("b", 1, index("b","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("betatrue",strlen("betatrue"),1)=="_" local true = substr("betatrue", 1, index("betatrue","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" local optionlist b se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist b se    betatrue
        - local numberdgms: word count `dgm'
        = local numberdgms: word count beta pmiss mech
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 3!=1 local optionlist b se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 3
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 0 {c -(}
            capture assert `varlist' == int(`varlist') if `touse'
            if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
            tempname Vals
            qui tab `varlist' if `touse', `missing' matrow(`Vals')
            local nvals = r(r)
            forval i = 1 / `nvals' {c -(}
            local val = `Vals'[`i',1]
            if `i' < `nvals' local vals "`vals'`val'`sep'"
            else local vals "`vals'`val'"
            {c )-}
            {c )-}
          - else {c -(}
          - tempvar select counter
          - bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
          = bysort __000003 method : gen byte __000004 = (_n == 1) * __000003
          - generate `counter' = sum(`select') * (`select' == 1)
          = generate __000005 = sum(__000004) * (__000004 == 1)
          - sort `counter'
          = sort __000005
          - qui count if `counter' == 0
          = qui count if __000005 == 0
          - local j = 1 + r(N)
          - local nvals = _N
          - if "`clean'" != "" {c -(}
          = if "" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
          - else {c -(}
          - forval i = `j' / `nvals' {c -(}
          = forval i = 35998 / 36000 {c -(}
          - if `i' < `nvals' {c -(}
          = if 35998 < 36000 {c -(}
          - local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
          = local vals `"`"CCA"' "'
          - {c )-}
          - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
          = else local vals `"`"CCA"' `"CCA"'"'
          - {c )-}
          - if `i' < `nvals' {c -(}
          = if 35999 < 36000 {c -(}
          - local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
          = local vals `"`"CCA"' `"MeanImp"' "'
          - {c )-}
          - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
          = else local vals `"`"CCA"' `"MeanImp"' `"MeanImp"'"'
          - {c )-}
          - if `i' < `nvals' {c -(}
          = if 36000 < 36000 {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
          - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
          = else local vals `"`"CCA"' `"MeanImp"' `"Noadj"'"'
          - {c )-}
          - {c )-}
          - {c )-}
          - di as txt `"`vals'"'
          = di as txt `"`"CCA"' `"MeanImp"' `"Noadj"'"'
          - return local levels `"`vals'"'
          = return local levels `"`"CCA"' `"MeanImp"' `"Noadj"'"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"`"CCA"' `"MeanImp"' `"Noadj"'"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"`"CCA"' `"MeanImp"' `"Noadj"'"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/3 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("CCA",strlen("CCA"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "CCA"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist CCA
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist CCA CCA
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("MeanImp",strlen("MeanImp"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "MeanImp"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist MeanImp
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist CCA MeanImp
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("Noadj",strlen("Noadj"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel3 = "Noadj"
        - if `m'==1 local metlist `metlabel`m''
        = if 3==1 local metlist Noadj
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 3>=2 local metlist CCA MeanImp Noadj
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "CCA MeanImp Noadj"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "CCA"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 1 == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 1 == 1 & "0" != "1" {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
        = qui reshape wide "b se", i(rep beta pmiss mech "estimand") j(method "CCA MeanImp Noadj") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide b se , i(rep beta pmiss mech estimand ) j(method CCA MeanImp Noadj ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/3 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m3] 3
        - if `i'==1 local siman_method `i'
        = if 3==1 local siman_method 3
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 3>=2 local siman_method 1 2 3
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] b
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] betatrue
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "b"!="" char _dta[siman_estvars] b
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if "betatrue"!="" char _dta[siman_truevars] betatrue
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "multiple"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "multiple"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "CCA MeanImp Noadj"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
Working.....
{res}{com}. siman comparemethodsscatter if mech =="MCAR": mech
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("b") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist b se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist b se    betatrue
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number betatrue
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("b",strlen("b"),1)=="_" local estimate = substr("b", 1, index("b","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("betatrue",strlen("betatrue"),1)=="_" local true = substr("betatrue", 1, index("betatrue","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" local optionlist b se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist b se    betatrue
        - local numberdgms: word count `dgm'
        = local numberdgms: word count beta pmiss mech
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 3!=1 local optionlist b se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 3
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 0 {c -(}
            capture assert `varlist' == int(`varlist') if `touse'
            if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
            tempname Vals
            qui tab `varlist' if `touse', `missing' matrow(`Vals')
            local nvals = r(r)
            forval i = 1 / `nvals' {c -(}
            local val = `Vals'[`i',1]
            if `i' < `nvals' local vals "`vals'`val'`sep'"
            else local vals "`vals'`val'"
            {c )-}
            {c )-}
          - else {c -(}
          - tempvar select counter
          - bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
          = bysort __000003 method : gen byte __000004 = (_n == 1) * __000003
          - generate `counter' = sum(`select') * (`select' == 1)
          = generate __000005 = sum(__000004) * (__000004 == 1)
          - sort `counter'
          = sort __000005
          - qui count if `counter' == 0
          = qui count if __000005 == 0
          - local j = 1 + r(N)
          - local nvals = _N
          - if "`clean'" != "" {c -(}
          = if "" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
          - else {c -(}
          - forval i = `j' / `nvals' {c -(}
          = forval i = 53998 / 54000 {c -(}
          - if `i' < `nvals' {c -(}
          = if 53998 < 54000 {c -(}
          - local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
          = local vals `"`"CCA"' "'
          - {c )-}
          - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
          = else local vals `"`"CCA"' `"CCA"'"'
          - {c )-}
          - if `i' < `nvals' {c -(}
          = if 53999 < 54000 {c -(}
          - local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
          = local vals `"`"CCA"' `"MeanImp"' "'
          - {c )-}
          - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
          = else local vals `"`"CCA"' `"MeanImp"' `"MeanImp"'"'
          - {c )-}
          - if `i' < `nvals' {c -(}
          = if 54000 < 54000 {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
          - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
          = else local vals `"`"CCA"' `"MeanImp"' `"Noadj"'"'
          - {c )-}
          - {c )-}
          - {c )-}
          - di as txt `"`vals'"'
          = di as txt `"`"CCA"' `"MeanImp"' `"Noadj"'"'
          - return local levels `"`vals'"'
          = return local levels `"`"CCA"' `"MeanImp"' `"Noadj"'"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"`"CCA"' `"MeanImp"' `"Noadj"'"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"`"CCA"' `"MeanImp"' `"Noadj"'"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/3 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("CCA",strlen("CCA"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "CCA"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist CCA
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist CCA CCA
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("MeanImp",strlen("MeanImp"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "MeanImp"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist MeanImp
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist CCA MeanImp
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("Noadj",strlen("Noadj"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel3 = "Noadj"
        - if `m'==1 local metlist `metlabel`m''
        = if 3==1 local metlist Noadj
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 3>=2 local metlist CCA MeanImp Noadj
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "CCA MeanImp Noadj"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "CCA"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 1 == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 1 == 1 & "0" != "1" {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
        = qui reshape wide "b se", i(rep beta pmiss mech "estimand") j(method "CCA MeanImp Noadj") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide b se , i(rep beta pmiss mech estimand ) j(method CCA MeanImp Noadj ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/3 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m3] 3
        - if `i'==1 local siman_method `i'
        = if 3==1 local siman_method 3
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 3>=2 local siman_method 1 2 3
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] b
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] betatrue
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "b"!="" char _dta[siman_estvars] b
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if "betatrue"!="" char _dta[siman_truevars] betatrue
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "multiple"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "multiple"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "CCA MeanImp Noadj"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
Working.....
{err}{it: WARNING: 18 graphs will be created, consider using 'if' option as detailed in {help              siman_comparemethodsscatter:siman comparemethodsscatter}}
{res}{com}. 
. siman comparemethodsscatter, methlist(Noadj MeanImp)
        {txt}- set tracedepth 1
        - if mi("`estimate'") & mi("`se'") {c -(}
        = if mi("b") & mi("se") {c -(}
          di as error "siman reshape requires either estimate or se, otherwise nothing to reshape"
          exit 498
          {c )-}
        - if "`ntruevalue'"=="single" | "`ntruestub'" != "1" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" | "0" != "1" local optionlist b se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist b se    betatrue
        - local truenumber = 0
        - cap confirm number `true'
        = cap confirm number betatrue
        - if !_rc local truenumber = 1
        - if `dgmcreated' == 1 {c -(}
        = if 0 == 1 {c -(}
          cap confirm variable dgm
          if _rc {c -(}
          qui gen dgm = 1
          local dgm dgm
          local ndgm = 1
          {c )-}
          {c )-}
        - if "`methodlabels'" == "1" & `nformat'==1 {c -(}
        = if "0" == "1" & 1==1 {c -(}
          qui cap labelsof `method'
          if !_rc local methodvalues `r(values)'
          else qui cap levelsof `method'
          if !_rc local methodvalues `r(levels)'
          {c )-}
        - if "`longwide'"!="" {c -(}
        = if "longwide"!="" {c -(}
        - if `nformat'==2 {c -(}
        = if 1==2 {c -(}
          if "`order'" == "method" {c -(}
          forvalues j = 1/`nmethod' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`m`j'' = "`option'`m`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`m`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`m`j'''
          {c )-}
          {c )-}
          {c )-}
          else if "`order'" == "target" {c -(}
          forvalues j = 1/`ntarget' {c -(}
          foreach option in `optionlist' {c -(}
          local `option'stubreshape`t`j'' = "`option'`t`j''"
          if `j'==1 local `option'stubreshapelist ``option'stubreshape`t`j'''
          else if `j'>=2 local `option'stubreshapelist ``option'stubreshapelist' ``option'stubreshape`t`j'''
          {c )-}
          {c )-}
          {c )-}
          if ("`ntruevalue'"=="single" & `truenumber' == 0) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist'", i(`rep' `dgm' `true') j(`j') string
          {c )-}
          else if ("`ntruevalue'"=="multiple" | `truenumber' == 1) {c -(}
          qui reshape long "``estimate'stubreshapelist' ``se'stubreshapelist' ``df'stubreshapelist' ``lci'stubreshapelist' ``uci'stubreshapelist' ``p'stubreshapelist' ``true'stubreshapelist'", i(`rep' `dgm') j(`j') string
          {c )-}
          if "`order'" == "method" {c -(}
          if !mi("``true'stubreshapelist'") {c -(}
          forvalues j = 1/`nmethod' {c -(}
          qui tokenize ``true'stubreshapelist'
          if `j'==1 qui rename ``j'' `true'
          else qui drop ``j''
          {c )-}
          {c )-}
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_ntruestub] 0
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          if `nformat'==2 & "`order'" == "method" {c -(}
          capture confirm variable target
          if _rc {c -(}
          rename _j target
          local target = "target"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the target variable 'target', but that name already exists in your dataset.  Please rename your variable target as something else."
          exit 498
          {c )-}
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "`target'"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'==1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if mi("`describe") siman_describe
          {c )-}
          if `nformat'==2 & "`order'" == "target" {c -(}
          capture confirm variable method
          if _rc {c -(}
          rename _j method
          local method = "method"
          {c )-}
          else {c -(}
          di as error "siman would like to rename the method variable 'method', but that name already exists in your dataset.  Please rename your variable method as something else."
          exit 498
          {c )-}
          qui reshape long "`optionlist'", i(`rep' `dgm' `method') j(target) string
          qui reshape wide "`optionlist'", i(`rep' `dgm' target) j(`method' "`valmethod'") string
          local c 1
          foreach j in `valmethod' {c -(}
          if `c'==1 {c -(}
          cap confirm variable `true'`j'
          if !_rc {c -(}
          qui rename `true'`j' `true'
          {c )-}
          local c = `c' + 1
          {c )-}
          else cap qui drop `true'`j'
          {c )-}
          local truedescriptiontype "variable"
          char _dta[siman_truedescriptiontype] "variable"
          local ntruestub 0
          char _dta[siman_format] "format 3: long-wide"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "wide"
          char _dta[siman_nformat] 3
          char _dta[siman_target] "target"
          if `ntarget'!=0 char _dta[siman_ntarget] 1
          char _dta[siman_descriptiontype] "stub"
          char _dta[siman_order]: method
          if ("`ntruevalue'"=="single" | `ntruestub'== 0) char _dta[siman_truedescriptiontype] "variable"
          if "`ntruevalue'"=="multiple" & `ntruestub'== 1 char _dta[siman_truedescriptiontype] "stub"
          char _dta[siman_cidescriptiontype] "stubs"
          if "`truevaluecreated'" == "1" {c -(}
          local truevars `trueuser'
          char _dta[siman_[siman_truevars] "`trueuser'"
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - else if `nformat'==1 & `nmethod'!=0 {c -(}
        = else if 1==1 & 1!=0 {c -(}
        - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
        = if substr("b",strlen("b"),1)=="_" local estimate = substr("b", 1, index("b","_") - 1)
        - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
        = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
        - if substr("`df'",strlen("`df'"),1)=="_" local df = substr("`df'", 1, index("`df'","_") - 1)
        = if substr("",strlen(""),1)=="_" local df = substr("", 1, index("","_") - 1)
        - if substr("`ci'",strlen("`ci'"),1)=="_" local ci = substr("`ci'", 1, index("`ci'","_") - 1)
        = if substr("",strlen(""),1)=="_" local ci = substr("", 1, index("","_") - 1)
        - if substr("`p'",strlen("`p'"),1)=="_" local p = substr("`p'", 1, index("`p'","_") - 1)
        = if substr("",strlen(""),1)=="_" local p = substr("", 1, index("","_") - 1)
        - if substr("`true'",strlen("`true'"),1)=="_" local true = substr("`true'", 1, index("`true'","_") - 1)
        = if substr("betatrue",strlen("betatrue"),1)=="_" local true = substr("betatrue", 1, index("betatrue","_") - 1)
        - if "`ntruevalue'"=="single" local optionlist `estimate' `se' `df' `ci' `p'
        = if "multiple"=="single" local optionlist b se   
        - else if "`ntruevalue'"=="multiple" local optionlist `estimate' `se' `df' `ci' `p' `true'
        = else if "multiple"=="multiple" local optionlist b se    betatrue
        - local numberdgms: word count `dgm'
        = local numberdgms: word count beta pmiss mech
        - if `numberdgms'!=1 local optionlist `estimate' `se' `df' `ci' `p'
        = if 3!=1 local optionlist b se   
        - qui tab `method'
        = qui tab method
        - local nmethodlabels = `r(r)'
        = local nmethodlabels = 2
        - qui levels `method', local(mlevels)
        = qui levels method, local(mlevels)
          {hline 73} begin levels {hline}
          - version 8
          - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
          - if "`separate'" == "" local sep " "
          = if "" == "" local sep " "
          - else local sep "`separate'"
          = else local sep ""
          - if "`missing'" != "" local novarlist "novarlist"
          = if "" != "" local novarlist "novarlist"
          - marksample touse, strok `novarlist'
          = marksample touse, strok 
          - capture confirm numeric variable `varlist'
          = capture confirm numeric variable method
          - local isnum = _rc != 7
          - if `isnum' {c -(}
          = if 0 {c -(}
            capture assert `varlist' == int(`varlist') if `touse'
            if _rc {c -(}
            di as err "`varlist' contains non-integer values"
            exit 459
            {c )-}
            tempname Vals
            qui tab `varlist' if `touse', `missing' matrow(`Vals')
            local nvals = r(r)
            forval i = 1 / `nvals' {c -(}
            local val = `Vals'[`i',1]
            if `i' < `nvals' local vals "`vals'`val'`sep'"
            else local vals "`vals'`val'"
            {c )-}
            {c )-}
          - else {c -(}
          - tempvar select counter
          - bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
          = bysort __000004 method : gen byte __000005 = (_n == 1) * __000004
          - generate `counter' = sum(`select') * (`select' == 1)
          = generate __000006 = sum(__000005) * (__000005 == 1)
          - sort `counter'
          = sort __000006
          - qui count if `counter' == 0
          = qui count if __000006 == 0
          - local j = 1 + r(N)
          - local nvals = _N
          - if "`clean'" != "" {c -(}
          = if "" != "" {c -(}
            forval i = `j' / `nvals' {c -(}
            if `i' < `nvals' {c -(}
            local vals "`vals'`=`varlist'[`i']'`sep'"
            {c )-}
            else local vals "`vals'`=`varlist'[`i']'"
            {c )-}
            {c )-}
          - else {c -(}
          - forval i = `j' / `nvals' {c -(}
          = forval i = 71999 / 72000 {c -(}
          - if `i' < `nvals' {c -(}
          = if 71999 < 72000 {c -(}
          - local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
          = local vals `"`"MeanImp"' "'
          - {c )-}
          - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
          = else local vals `"`"MeanImp"' `"MeanImp"'"'
          - {c )-}
          - if `i' < `nvals' {c -(}
          = if 72000 < 72000 {c -(}
            local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
            {c )-}
          - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
          = else local vals `"`"MeanImp"' `"Noadj"'"'
          - {c )-}
          - {c )-}
          - {c )-}
          - di as txt `"`vals'"'
          = di as txt `"`"MeanImp"' `"Noadj"'"'
          - return local levels `"`vals'"'
          = return local levels `"`"MeanImp"' `"Noadj"'"'
          - if "`local'" != "" {c -(}
          = if "mlevels" != "" {c -(}
          - c_local `local' `"`vals'"'
          = c_local mlevels `"`"MeanImp"' `"Noadj"'"'
          - {c )-}
          {hline 75} end levels {hline}
        - qui tokenize `"`mlevels'"'
        = qui tokenize `"`"MeanImp"' `"Noadj"'"'
        - cap quietly label drop `method'
        = cap quietly label drop method
          {hline 74} begin label {hline}
          - version 10.0
          - local vv : display "version " string(_caller()) ", missing:"
          - gettoken val : 0
          - if (strpos("`val'", "val") > 0 ) {c -(}
          = if (strpos("drop", "val") > 0 ) {c -(}
            gettoken val 0 : 0
            syntax anything [, nofix]
            if "`fix'" != "" {c -(}
            local fix ", nofix"
            {c )-}
            gettoken var rest : anything
            while `"`rest'"' != "" {c -(}
            gettoken lab rest : rest
            local label "`lab'"
            {c )-}
            local vlist : list anything - lab
            if "`lab'" == "." {c -(}
            local lab ""
            {c )-}
            foreach var of varlist `vlist' {c -(}
            `vv' _label `val' `var' `lab' `fix'
            {c )-}
            {c )-}
          - else {c -(}
          - `vv' _label `macval(0)'
          = version 15, missing: _label drop method
            {c )-}
          {hline 76} end label {hline}
        - local labelchange = 0
        - forvalues m = 1/`nmethodlabels' {c -(}
        = forvalues m = 1/2 {c -(}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("MeanImp",strlen("MeanImp"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel1 = "MeanImp"
        - if `m'==1 local metlist `metlabel`m''
        = if 1==1 local metlist MeanImp
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 1>=2 local metlist MeanImp MeanImp
        - {c )-}
        - {c )-}
        - if substr("``m''",strlen("``m''"),1)=="_" {c -(}
        = if substr("Noadj",strlen("Noadj"),1)=="_" {c -(}
          local label`m' = substr("``m''", 1, index("``m''","_") - 1)
          local metlabel`m' = "``m''"
          local labelchange = 1
          if `m'==1 {c -(}
          local labelvalues `m' "`label`m''"
          local metlist `metlabel`m''
          {c )-}
          else if `m'>1 {c -(}
          local labelvalues `labelvalues' `m' "`label`m''"
          local metlist `metlist' `metlabel`m''
          {c )-}
          {c )-}
        - else {c -(}
        - local metlabel`m' = "``m''"
        = local metlabel2 = "Noadj"
        - if `m'==1 local metlist `metlabel`m''
        = if 2==1 local metlist Noadj
        - else if `m'>=2 local metlist `metlist' `metlabel`m''
        = else if 2>=2 local metlist MeanImp Noadj
        - {c )-}
        - {c )-}
        - if `labelchange'==1 {c -(}
        = if 0==1 {c -(}
          label define methodlab `labelvalues'
          label values `method' methodlab
          {c )-}
        - local valmethod = "`metlist'"
        = local valmethod = "MeanImp Noadj"
        - forvalues i=1/`nmethod' {c -(}
        = forvalues i=1/1 {c -(}
        - local m`i' = "``i''"
        = local m1 = "MeanImp"
        - {c )-}
        - local string = 0
        - capture confirm numeric variable `method'
        = capture confirm numeric variable method
        - if _rc local string = 1
        - if `string' == 0 {c -(}
        = if 1 == 0 {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'")
          {c )-}
        - else if `string' == 1 & "`methodlabels'" != "1" {c -(}
        = else if 1 == 1 & "0" != "1" {c -(}
        - qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`valmethod'") string
        = qui reshape wide "b se", i(rep beta pmiss mech "estimand") j(method "MeanImp Noadj") string
          {hline 72} begin reshape {hline}
          - u_mi_not_mi_set reshape other
          - if _caller() <= 10 {c -(}
            reshape_10 `0'
            exit
            {c )-}
          - if _caller() >= 12 {c -(}
          - global ReS_Call : di "version " string(_caller()) ":"
          - {c )-}
          - version 5.0, missing
          - if "`1'"=="clear" {c -(}
          = if "wide"=="clear" {c -(}
            char _dta[ReS_ver]
            char _dta[ReS_i]
            char _dta[ReS_j]
            char _dta[ReS_jv]
            char _dta[ReS_Xij]
            char _dta[Res_Xi]
            char _dta[ReS_atwl]
            char _dta[ReS_str]
            local xijn : char _dta[ReS_Xij_n]
            if "`xijn'" != "" {c -(}
            forvalues i = 1/`xijn' {c -(}
            char _dta[ReS_Xij_wide`i']
            char _dta[ReS_Xij_long`i']
            {c )-}
            char _dta[ReS_Xij_n]
            {c )-}
            exit
            {c )-}
          - if "`1'"=="wide" | "`1'"=="long" {c -(}
          = if "wide"=="wide" | "wide"=="long" {c -(}
          - DoNew `*'
          = DoNew wide b se , i(rep beta pmiss mech estimand ) j(method MeanImp Noadj ) string
          - exit
          {hline 74} end reshape {hline}
        - {c )-}
        - else if "`methodlabels'" == "1" {c -(}
        = else if "0" == "1" {c -(}
          qui reshape wide "`optionlist'", i(`rep' `dgm' "`target'") j(`method' "`methodvalues'")
          {c )-}
        - char _dta[siman_format] "format 3: long-wide"
        - char _dta[siman_targetformat] "long"
        - char _dta[siman_methodformat] "wide"
        - char _dta[siman_nformat] 3
        - forvalues i=1/`nummethod' {c -(}
        = forvalues i=1/3 {c -(}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m1] 1
        - if `i'==1 local siman_method `i'
        = if 1==1 local siman_method 1
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 1>=2 local siman_method 1 1
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m2] 2
        - if `i'==1 local siman_method `i'
        = if 2==1 local siman_method 2
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 2>=2 local siman_method 1 2
        - {c )-}
        - char _dta[siman_m`i'] `i'
        = char _dta[siman_m3] 3
        - if `i'==1 local siman_method `i'
        = if 3==1 local siman_method 3
        - else if `i'>=2 local siman_method `siman_method' `i'
        = else if 3>=2 local siman_method 1 2 3
        - {c )-}
        - char _dta[siman_estimate] `estimate'
        = char _dta[siman_estimate] b
        - char _dta[siman_se] `se'
        = char _dta[siman_se] se
        - char _dta[siman_df] `df'
        = char _dta[siman_df] 
        - char _dta[siman_ci] `ci'
        = char _dta[siman_ci] 
        - char _dta[siman_p] `p'
        = char _dta[siman_p] 
        - char _dta[siman_true] `true'
        = char _dta[siman_true] betatrue
        - if "`estimate'"!="" char _dta[siman_estvars] `estimate'
        = if "b"!="" char _dta[siman_estvars] b
        - if "`se'"!="" char _dta[siman_sevars] `se'
        = if "se"!="" char _dta[siman_sevars] se
        - if "`df'"!="" char _dta[siman_dfvars] `df'
        = if ""!="" char _dta[siman_dfvars] 
        - if "`ci'"!="" char _dta[siman_civars] `ci'
        = if ""!="" char _dta[siman_civars] 
        - if "`p'"!="" char _dta[siman_pvars] `p'
        = if ""!="" char _dta[siman_pvars] 
        - if "`true'"!="" char _dta[siman_truevars] `true'
        = if "betatrue"!="" char _dta[siman_truevars] betatrue
        - char _dta[siman_method] "`siman_valmethod'"
        = char _dta[siman_method] ""
        - char _dta[siman_descriptiontype] "stub"
        - if "`ntruevalue'"=="single" char _dta[siman_truedescriptiontype] "variable"
        = if "multiple"=="single" char _dta[siman_truedescriptiontype] "variable"
        - if "`ntruevalue'"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        = if "multiple"=="multiple" char _dta[siman_truedescriptiontype] "stub"
        - char _dta[siman_cidescriptiontype] "stubs"
        - if mi("`describe") siman_describe
        - {c )-}
        - else if `nformat'==1 & `nmethod'==0 {c -(}
        = else if 1==1 & 1==0 {c -(}
          di as error "Can not reshape targets to wide format"
          exit 498
          {c )-}
        - {c )-}
        - else
        - if "`longlong'"!="" {c -(}
        = if ""!="" {c -(}
          if `nformat'==3 {c -(}
          if `methodlabels' == 1 local valmethod "`metlist'"
          qui tokenize "`valmethod'"
          if `nmethod'!=0 {c -(}
          forvalues v=1/`nummethod' {c -(}
          if substr("``v''",strlen("``v''"),1)=="_" {c -(}
          local valmethod`v' = substr("``v''", 1, index("``v''","_") - 1)
          if `v'==1 local valmethod `valmethod`v''
          else if `v'>=2 local valmethod `valmethod' `valmethod`v''
          {c )-}
          {c )-}
          {c )-}
          local string = 0
          forvalues i=1/`nmethod' {c -(}
          qui capture confirm number `m`i''
          if _rc {c -(}
          local string = 1
          {c )-}
          {c )-}
          if "`estchange'" == "1" local estimateunderscore = "`estvars'"
          if "`sechange'" == "1" local seunderscore = "`sevars'"
          if ("`estchange'" != "1" & "`sechange'" != "1") local optionlist `estimate' `se' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" != "1") local optionlist `estimateunderscore' `se' `df' `ci' `p'
          if ("`estchange'" != "1" & "`sechange'" == "1") local optionlist `estimate' `seunderscore' `df' `ci' `p'
          if ("`estchange'" == "1" & "`sechange'" == "1") local optionlist `estimateunderscore' `seunderscore' `df' `ci' `p'
          local optionlistreshape `optionlist'
          local exclude "`true'"
          local optionlistreshape: list optionlistreshape - exclude
          local methodname: char _dta[ReS_j]
          if mi("`methodname'") | "`methodname'" == "_j" | "`methodname'" == "mcse" local methodname "method"
          if "`methodlables'" == "1" local methodreshape "`methodvalues'"
          else local methodreshape "`valmethod'"
          if "`truedescriptiontype'" == "stub" | `truenumber' == 1 {c -(}
          local trueindgm = strpos("`dgm'","`true'")
          if `trueindgm' == 0 local optionlistreshape `optionlist' `true'
          else local optionlistreshape `optionlist'
          if `truenumber' == 1 local optionlistreshape `optionlist'
          if "`ntruestub'" == "0" local optionlistreshape `optionlist'
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshaped'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target) j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          else if "`truedescriptiontype'" == "variable" & `truenumber' == 0 {c -(}
          if `string' == 0 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'<=1 & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `target' `true') j(`methodname' "`methodreshape'") string
          {c )-}
          else if `ntarget'>1 & `ntarget'!=. & `nmethod'==0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' `true') j(target "`valtarget'")
          {c )-}
          else if `string' == 0 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'")
          {c )-}
          else if `string' == 1 & `ntarget'>1 & `ntarget'!=. & `nmethod'!=0 {c -(}
          qui reshape long "`optionlistreshape'", i(`rep' `dgm' target `true') j(`methodname' "`methodreshape'") string
          {c )-}
          {c )-}
          foreach u of var * {c -(}
          if substr("`u'",strlen("`u'"),1)=="_" {c -(}
          local U = substr("`u'", 1, index("`u'","_") - 1)
          if "`U'" != "" {c -(}
          capture rename `u' `U'
          if _rc di as txt "problem with `u'"
          {c )-}
          {c )-}
          {c )-}
          char _dta[siman_format] "format 1: long-long"
          char _dta[siman_targetformat] "long"
          char _dta[siman_methodformat] "long"
          char _dta[siman_nformat] 1
          if `nmethod'!=0 char _dta[siman_method] "`methodname'"
          if `nmethod'!=0 char _dta[siman_nmethod] 1
          char _dta[siman_descriptiontype] "variable"
          char _dta[siman_truedescriptiontype] "variable"
          char _dta[siman_cidescriptiontype] "variables"
          char _dta[siman_estimate] `estimate'
          char _dta[siman_se] `se'
          if "`estimate'"!="" char _dta[siman_estvars] `estimate'
          if "`se'"!="" char _dta[siman_sevars] `se'
          if "`simananalyserun'"=="1" {c -(}
          preserve
          qui tempfile sortperf
          qui drop if `rep'<0
          qui save `sortperf'
          restore
          qui drop if `rep'>0
          if `methodcreated'!= 1 qui gsort -`rep' `dgm' `target' `method'
          else qui gsort -`rep' `dgm' `target'
          qui append using `sortperf'
          {c )-}
          if mi("`describe") siman_describe
          {c )-}
          {c )-}
        - local allthings `allthings' metlist
        = local allthings allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - char _dta[siman_metlist] "`metlist'"
        = char _dta[siman_metlist] "MeanImp Noadj"
        - char _dta[siman_allthings] `allthings'
        = char _dta[siman_allthings] allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated methodlabels methodvalues ntruestub descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 t1 metlist
        - if `dgmcreated' == 1 qui drop dgm
        = if 0 == 1 qui drop dgm
Working.....
{err}{it: WARNING: 36 graphs will be created, consider using 'if' option as detailed in {help              siman_comparemethodsscatter:siman comparemethodsscatter}}
{res}{com}. 
. * zipplot
. siman zipplot
{err}{it: WARNING: 3 graphs each of 36 panels will be created, consider using 'if' or 'by' options as detailed in {help siman_zipplot:siman zipplot}}
{txt}Drawing 3 graphs (1 per true value)...
{res}{com}. siman zipplot if method == "CCA" 
{txt}Drawing 3 graphs (1 per true value)...
{res}{com}. siman zipplot if estimand == "effect"
{txt}Drawing 3 graphs (1 per true value)...
{res}{com}. siman zipplot if mech =="MCAR": mech
{err}{it: WARNING: 3 graphs each of 18 panels will be created, consider using 'if' or 'by' options as detailed in {help siman_zipplot:siman zipplot}}
{txt}Drawing 3 graphs (1 per true value)...
{res}{com}. 
. siman zipplot, by(pmiss)
{txt}Drawing 3 graphs (1 per true value)...
{res}{com}. siman zipplot, by(method)
{txt}Drawing 3 graphs (1 per true value)...
{res}{com}. {c )-}
{txt}
{com}. 
. di as result "*** SIMAN GRAPHS HAVE PASSED ALL THESE TESTS ***"
{res}*** SIMAN GRAPHS HAVE PASSED ALL THESE TESTS ***
{txt}
{com}. 
. log close
      {txt}name:  {res}<unnamed>
       {txt}log:  {res}C:\git\siman\Ella_testing\testing_graphs_main.smcl
  {txt}log type:  {res}smcl
 {txt}closed on:  {res}14 Nov 2023, 11:44:56
{txt}{.-}
{smcl}
{txt}{sf}{ul off}