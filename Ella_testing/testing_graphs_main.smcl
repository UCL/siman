{smcl}
{com}{sf}{ul off}{txt}{.-}
      name:  {res}<unnamed>
       {txt}log:  {res}C:\git\siman\Ella_testing\testing_graphs_main.smcl
  {txt}log type:  {res}smcl
 {txt}opened on:  {res}28 Aug 2023, 16:49:34
{txt}
{com}. siman which
{txt}C:\git\siman\siman.ado
{res}*!version 0.3  08aug2023
{txt}C:\git\siman\siman_setup.ado
{res}*!   version 0.8.0  04july2023
{txt}C:\git\siman\siman_describe.ado
{res}*! version 0.4     21jul2022  
{txt}C:\git\siman\siman_analyse.ado
{res}*! version 0.6.4   22aug2023   IW: fix bug causing error if truevar also a dgmvar; new force option to pass to simsum
{err}command {bf}siman_analyze{sf} not found as either built-in or ado-file
{txt}C:\git\siman\siman_table.ado
{res}*! version 0.8   23dec2022     IW major rewrite: never pools over dgms, targets or methods
{txt}C:\git\siman\siman_reshape.ado
{res}*! version 0.3.1   08mar2023   nodescribe option
{txt}C:\git\siman\siman_lollyplot.ado
{res}*! version 1.12.3  22aug2023   IW 
{txt}C:\git\siman\siman_zipplot.ado
{res}*! version 1.8.7 15aug2023   EMZ
{txt}C:\git\siman\siman_comparemethodsscatter.ado
{res}*! version 1.9.12 07aug2023
{txt}C:\git\siman\siman_blandaltman.ado
{res}*! version 1.6.7 11july2023
{txt}C:\git\siman\siman_swarm.ado
{res}*! version 1.9.4 15aug2023
{txt}C:\git\siman\siman_scatter.ado
{res}*! version 1.6.5 08Aug2023
{txt}C:\git\siman\siman_nestloop.ado
{res}*! version 1.8.2   17aug2023
{txt}
{com}. 
{txt}end of do-file

{com}. do "C:\Users\rmjlem1\AppData\Local\Temp\STD1080_000000.tmp"
{txt}
{com}.   
. **********************************************************
. * DGM defined by multiple variables with multiple levels
. **********************************************************
. clear all
{res}{txt}
{com}. prog drop _all
{txt}
{com}. use nestloop/res.dta, clear
{txt}
{com}. keep v1 theta rho pc k exppeto expg2 var2peto var2g2
{txt}
{com}. * theta needs to be in integer format for levelsof command to work (doesn't accept non-integer values), so make integer values with non-integer labels
. gen theta_new=2
{txt}
{com}. replace theta_new=1 if theta == 0.5
{txt}(192 real changes made)

{com}. replace theta_new=3 if theta == 0.75
{txt}(192 real changes made)

{com}. replace theta_new=4 if theta == 1 
{txt}(192 real changes made)

{com}. label define theta_new 1 "0.5" 2 "0.67" 3 "0.75" 4 "1"
{txt}
{com}. label values theta_new theta_new
{txt}
{com}. label var theta_new "theta categories"
{txt}
{com}. *br theta theta_new
. drop theta
{txt}
{com}. rename theta_new theta
{res}{txt}
{com}. gen pc_str = ""
{txt}(768 missing values generated)

{com}. replace pc_str = "5%" if pc == 1
{txt}variable {bf}pc_str{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str2{sf}
{txt}(192 real changes made)

{com}. replace pc_str = "10%" if pc == 2
{txt}variable {bf}pc_str{sf} was {bf}{res}str2{sf}{txt} now {bf}{res}str3{sf}
{txt}(192 real changes made)

{com}. replace pc_str = "20%" if pc == 3
{txt}(192 real changes made)

{com}. replace pc_str = "30%" if pc == 4
{txt}(192 real changes made)

{com}. drop pc
{txt}
{com}. rename pc_str pc
{res}{txt}
{com}. siman setup, rep(v1) dgm(theta rho pc k) method(peto g2) estimate(exp) se(var2) true(theta)
{res}  {txt}variable {bf}pc{sf} was {bf}{res}long{sf}{txt} now {bf}{res}byte{sf}
{txt}  (2,304 bytes saved)
{err}Warning: variable pc, which appears in dgm(), was stored as a string. It has been
encoded as numeric so that subsequent siman commands will work. If you require a
different order, encode pc as numeric before running -siman setup-.

{txt}{col 20}SUMMARY OF DATA
_____________________________________________________

The siman format is:{res}{col 35}format 3: long-wide
{txt}The format for targets is:{res}{col 35}long
{txt}The format for methods is:{res}{col 35}wide
{txt}The number of targets is:{res}{col 35}N/A
{txt}The target values are:{res}{col 35}N/A

{txt}The number of methods is:{res}{col 35}2
{txt}The method values are:{res}{col 35}peto g2

Data generating mechanism (dgm)
{txt}The total number of dgms is: {res}{col 35}192
{txt}The dgm variables (# levels): {res}{col 35}theta (4) rho (4) pc (4) k (3) 

Estimates are contained in the dataset

{txt}The estimates stub is:{res}{col 35}exp
{txt}The se stub is:{res}{col 35}var2
{txt}The df stub is:{res}{col 35}N/A
{txt}The ci stubs are:{res}{col 35}N/A
{txt}The p stub is:{res}{col 35}N/A
{txt}The true variable is:{res}{col 35}theta
{txt}_____________________________________________________

{com}. 
{txt}end of do-file

{com}. do "C:\Users\rmjlem1\AppData\Local\Temp\STD1080_000000.tmp"
{txt}
{com}. siman comparemethodsscatter, title("testtitle") subgr(xtit("testaxis")) name("cms_test7", replace) 
    {txt}- set tracedepth 1
    - if mi("`estimate'") | mi("`se'") {c -(}
    = if mi("exp") | mi("var2") {c -(}
      di as error "siman scattercomparemethods requires estimate and se to plot"
      exit 498
      {c )-}
    - if "`method'"=="" {c -(}
    = if "peto g2"=="" {c -(}
      di as error "The variable 'method' is missing so siman comparemethodsscatter can not be created.  Please create a variable in your dataset called method containing the method value(s)."
      exit 498
      {c )-}
    - if `nummethod' < 2 {c -(}
    = if 2 < 2 {c -(}
      di as error "There are not enough methods to compare, siman comparemethods scatter requires at least 2 methods."
      exit 498
      {c )-}
    - if !mi("`debug'") local dicmd dicmd
    = if !mi("") local dicmd dicmd
    - tempfile origdata
    - qui save `origdata'
    = qui save C:\Users\rmjlem1\AppData\Local\Temp\ST_1080_000001.tmp
    - if `nformat'!=1 {c -(}
    = if 3!=1 {c -(}
    - qui siman reshape, longlong
      {hline 78} begin siman {hline}
      - version 13
      - syntax [anything] [if] [in], [which *]
      - if "`anything'"=="cms" local anything comparemethodsscatter
      = if "reshape"=="cms" local anything comparemethodsscatter
      - foreach thing in `_dta[siman_allthings]' {c -(}
      = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 {c -(}
      - local `thing' : char _dta[siman_`thing']
      = local allthings : char _dta[siman_allthings]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local rep : char _dta[siman_rep]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgm : char _dta[siman_dgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local target : char _dta[siman_target]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local method : char _dta[siman_method]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estimate : char _dta[siman_estimate]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local se : char _dta[siman_se]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local df : char _dta[siman_df]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ci : char _dta[siman_ci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local p : char _dta[siman_p]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local true : char _dta[siman_true]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local order : char _dta[siman_order]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local lci : char _dta[siman_lci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local uci : char _dta[siman_uci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifsetup : char _dta[siman_ifsetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local insetup : char _dta[siman_insetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local format : char _dta[siman_format]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetformat : char _dta[siman_targetformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodformat : char _dta[siman_methodformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nformat : char _dta[siman_nformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntarget : char _dta[siman_ntarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ndgm : char _dta[siman_ndgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nmethod : char _dta[siman_nmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numtarget : char _dta[siman_numtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valtarget : char _dta[siman_valtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nummethod : char _dta[siman_nummethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valmethod : char _dta[siman_valmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntrue : char _dta[siman_ntrue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruevalue : char _dta[siman_ntruevalue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmvar : char _dta[siman_dgmvar]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numdgm : char _dta[siman_numdgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmcreated : char _dta[siman_dgmcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetlabels : char _dta[siman_targetlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodcreated : char _dta[siman_methodcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local descriptiontype : char _dta[siman_descriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local cidescriptiontype : char _dta[siman_cidescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truedescriptiontype : char _dta[siman_truedescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estvars : char _dta[siman_estvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sevars : char _dta[siman_sevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dfvars : char _dta[siman_dfvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local civars : char _dta[siman_civars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local pvars : char _dta[siman_pvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truevars : char _dta[siman_truevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simansetuprun : char _dta[siman_simansetuprun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m1 : char _dta[siman_m1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m2 : char _dta[siman_m2]
      - {c )-}
      - local subcmds0 setup
      - local subcmds1 describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop
      - local subcmds2
      - local subcmds `subcmds0' `subcmds1' `subcmds'
      = local subcmds setup describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop 
      - if mi("`anything'") {c -(}
      = if mi("reshape") {c -(}
        di as error "Syntax: siman <subcommand>"
        exit 198
        {c )-}
      - if "`anything'"=="which" {c -(}
      = if "reshape"=="which" {c -(}
        which siman
        foreach subcmd of local subcmds {c -(}
        cap noi which siman_`subcmd'
        {c )-}
        exit
        {c )-}
      - gettoken subcmd rest : anything
      - if length("`subcmd'")>=3 {c -(}
      = if length("reshape")>=3 {c -(}
      - foreach thing in `subcmds' {c -(}
      = foreach thing in setup describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop {c -(}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("setup","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("describe","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("analyse","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("analyze","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("table","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("reshape","reshape")==1 {c -(}
      - local subcmd `thing'
      = local subcmd reshape
      - local knowncmd 1
      - {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("lollyplot","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("zipplot","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("comparemethodsscatter","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("blandaltman","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("swarm","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("scatter","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("nestloop","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - {c )-}
      - if "`subcmd'" == "analyze" local subcmd "analyse"
      = if "reshape" == "analyze" local subcmd "analyse"
      - cap which siman_`subcmd'
      = cap which siman_reshape
      - if _rc {c -(}
        di as error "`subcmd' is not a valid siman subcommand"
        if length("`subcmd'")<3 di as error "Minimum abbreviation length is 3"
        exit 198
        {c )-}
      - local type0 : list subcmd in subcmds0
      - if `type0' & !mi("`allthings'") {c -(}
      = if 0 & !mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2") {c -(}
        di as error "Data are already in siman format"
        exit 459
        {c )-}
      - local type1 : list subcmd in subcmds1
      - if `type1' & mi("`allthings'") {c -(}
      = if 1 & mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2") {c -(}
        di as error "Data are not in siman format: use siman setup"
        exit 459
        {c )-}
      - if mi(`"`options'"') siman_`subcmd' `rest' `if' `in'
      = if mi(`"longlong"') siman_reshape   
      - else siman_`subcmd' `rest' `if' `in', `options'
      = else siman_reshape   , longlong
      {hline 80} end siman {hline}
    - foreach thing in `_dta[siman_allthings]' {c -(}
    = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 {c -(}
    - local `thing' : char _dta[siman_`thing']
    = local allthings : char _dta[siman_allthings]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local rep : char _dta[siman_rep]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgm : char _dta[siman_dgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local target : char _dta[siman_target]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local method : char _dta[siman_method]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local estimate : char _dta[siman_estimate]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local se : char _dta[siman_se]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local df : char _dta[siman_df]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ci : char _dta[siman_ci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local p : char _dta[siman_p]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local true : char _dta[siman_true]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local order : char _dta[siman_order]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local lci : char _dta[siman_lci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local uci : char _dta[siman_uci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ifsetup : char _dta[siman_ifsetup]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local insetup : char _dta[siman_insetup]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local format : char _dta[siman_format]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local targetformat : char _dta[siman_targetformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local methodformat : char _dta[siman_methodformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nformat : char _dta[siman_nformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntarget : char _dta[siman_ntarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ndgm : char _dta[siman_ndgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nmethod : char _dta[siman_nmethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local numtarget : char _dta[siman_numtarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local valtarget : char _dta[siman_valtarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nummethod : char _dta[siman_nummethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local valmethod : char _dta[siman_valmethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntrue : char _dta[siman_ntrue]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntruevalue : char _dta[siman_ntruevalue]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgmvar : char _dta[siman_dgmvar]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local numdgm : char _dta[siman_numdgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgmcreated : char _dta[siman_dgmcreated]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local targetlabels : char _dta[siman_targetlabels]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local methodcreated : char _dta[siman_methodcreated]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local descriptiontype : char _dta[siman_descriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local cidescriptiontype : char _dta[siman_cidescriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local truedescriptiontype : char _dta[siman_truedescriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local estvars : char _dta[siman_estvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local sevars : char _dta[siman_sevars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dfvars : char _dta[siman_dfvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local civars : char _dta[siman_civars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local pvars : char _dta[siman_pvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local truevars : char _dta[siman_truevars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local simansetuprun : char _dta[siman_simansetuprun]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local m1 : char _dta[siman_m1]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local m2 : char _dta[siman_m2]
    - {c )-}
    - {c )-}
    - local methodstringindi = 0
    - capture confirm string variable `method'
    = capture confirm string variable method
    - if !_rc local methodstringindi = 1
    - if mi("`methlist'") & `nummethod' > 5 {c -(}
    = if mi("") & 2 > 5 {c -(}
      di as text "Warning: With `nummethod' methods compared, this plot may be too dense to read.  If you find it unreadable, you can choose the methods to compare using -siman comparemethodsscatter-, methlist(a b) where a and b are the methods you are particularly interested to compare."
      {c )-}
    - cap confirm variable `dgm'
    = cap confirm variable theta rho pc k
    - if !_rc {c -(}
    - local numberdgms: word count `dgm'
    = local numberdgms: word count theta rho pc k
    - if `numberdgms'==1 {c -(}
    = if 4==1 {c -(}
      local dgmlabels 0
      qui tab `dgm'
      cap qui labelsof `dgm'
      cap qui ret list
      if `"`r(labels)'"' != "" {c -(}
      local 0 = `"`r(labels)'"'
      forvalues i = 1/`ndgm' {c -(}
      gettoken `dgm'dlabel`i' 0 : 0, parse(": ")
      local dgmlabels = 1
      {c )-}
      {c )-}
      else {c -(}
      local dgmlabels 0
      qui levels `dgm', local(levels)
      local loop 1
      foreach l of local levels {c -(}
      local `dgm'dlabel`loop' `l'
      local loop = `loop' + 1
      {c )-}
      {c )-}
      {c )-}
    - {c )-}
    - if ("`if'"=="" & "`ifsetup'"!="") local ifscatterc = `"`ifsetup'"'
    = if (""=="" & ""!="") local ifscatterc = `""'
    - else local ifscatterc = `"`if'"'
    = else local ifscatterc = `""'
    - local ifdgm = 0
    - if !mi("`ifscatterc'") {c -(}
    = if !mi("") {c -(}
      cap confirm variable `dgm'
      if !_rc {c -(}
      local numberdgms: word count `dgm'
      if `numberdgms'!=1 {c -(}
      gettoken dgmfilter ifscatterc: ifscatterc, parse("==")
      local ifremove "if "
      local dgmleft: list dgmfilter - ifremove
      local dgmorig = "`dgm'"
      local dgmtodrop: list dgm - dgmleft
      local ifdgm = 1
      gettoken dgmleft2 ifscatterc: ifscatterc, parse("==")
      local dgmfiltervalues = `ifscatterc'
      local ifscatterc = `"`if'"'
      {c )-}
      {c )-}
      {c )-}
    - tempvar touseif
    - qui generate `touseif' = 0
    = qui generate __000000 = 0
    - qui replace `touseif' = 1 `ifscatterc'
    = qui replace __000000 = 1 
    - preserve
    - sort `dgm' `target' `method' `touseif'
    = sort theta rho pc k  method __000000
    - capture by `dgm' `target' `method': assert `touseif'==`touseif'[_n-1] if _n>1
    = capture by theta rho pc k  method: assert __000000==__000000[_n-1] if _n>1
    - if _rc == 9 {c -(}
      di as error "The 'if' option can not be applied to 'rep' in siman comparemethodsscatter (cms).  If you have not specified an 'if' in siman cms, but you specified one in siman setup, then that 'if' will have been applied to siman cms."
      exit 498
      {c )-}
    - restore
    - qui keep if `touseif'
    = qui keep if __000000
    - if ("`in'"=="" & "`insetup'"!="") local inscatterc = `"`insetup'"'
    = if (""=="" & ""!="") local inscatterc = `""'
    - else local inscatterc = `"`in'"'
    = else local inscatterc = `""'
    - tempvar tousein
    - qui generate `tousein' = 0
    = qui generate __000001 = 0
    - qui replace `tousein' = 1 `inscatterc'
    = qui replace __000001 = 1 
    - qui keep if `tousein'
    = qui keep if __000001
    - cap confirm variable `dgm'
    = cap confirm variable theta rho pc k
    - if !_rc {c -(}
    - local numberdgms: word count `dgm'
    = local numberdgms: word count theta rho pc k
    - if `numberdgms'==1 {c -(}
    = if 4==1 {c -(}
      qui tab `dgm'
      local ndgmlabels = `r(r)'
      qui levels `dgm', local(levels)
      tokenize `"`levels'"'
      forvalues i=1/`ndgmlabels' {c -(}
      local d`i' = "``i''"
      if `i'==1 local dgmvalues `d`i''
      else local dgmvalues `dgmvalues' `d`i''
      {c )-}
      {c )-}
    - if `numberdgms'!=1 {c -(}
    = if 4!=1 {c -(}
    - local ndgmlabels = `numberdgms'
    = local ndgmlabels = 4
    - local dgmvalues `dgm'
    = local dgmvalues theta rho pc k
    - {c )-}
    - {c )-}
    - preserve
    - qui drop if `rep'<0
    = qui drop if v1<0
    - if !mi("`methlist'") {c -(}
    = if !mi("") {c -(}
      local methodvalues = "`methlist'"
      local methodcount: word count `methlist'
      tempvar tousemethod
      qui generate `tousemethod' = 0
      tokenize `methlist'
      foreach j in `methodvalues' {c -(}
      if `methodstringindi' == 0 qui replace `tousemethod' = 1 if `method' == `j'
      else if `methodstringindi' == 1 qui replace `tousemethod' = 1 if `method' == "`j'"
      {c )-}
      qui keep if `tousemethod' == 1
      qui drop `tousemethod'
      {c )-}
    - qui capture which labelsof
    - if _rc {c -(}
      di as smcl "labelsof package required, please install by clicking: " `"{c -(}stata ssc install labelsof{c )-}"'
      exit
      {c )-}
    - qui labelsof `method'
    = qui labelsof method
      {hline 75} begin labelsof {hline}
      - version 8
      - syntax name [, Label ]
      - if "`label'"=="" {c -(}
      = if ""=="" {c -(}
      - local labdef: value label `namelist'
      = local labdef: value label method
      - if `"`labdef'"'=="" {c -(}
      = if `""'=="" {c -(}
      - exit
      {hline 77} end labelsof {hline}
    - qui ret list
    - local methodlabels 0
    - if `"`r(labels)'"'!="" {c -(}
    = if `""'!="" {c -(}
      local 0 = `"`r(labels)'"'
      forvalues i = 1/`nummethod' {c -(}
      gettoken mlabel`i' 0 : 0, parse(": ")
      local methodvalues `methodvalues' `mlabel`i''
      local methodlabel`i': word `i' of `methodvalues'
      local mlabelname`i' Method_`methodlabel`i''
      local methodlabels 1
      {c )-}
      {c )-}
    - else {c -(}
    - qui levels `method', local(levels)
    = qui levels method, local(levels)
      {hline 77} begin levels {hline}
      - version 8
      - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
      - if "`separate'" == "" local sep " "
      = if "" == "" local sep " "
      - else local sep "`separate'"
      = else local sep ""
      - if "`missing'" != "" local novarlist "novarlist"
      = if "" != "" local novarlist "novarlist"
      - marksample touse, strok `novarlist'
      = marksample touse, strok 
      - capture confirm numeric variable `varlist'
      = capture confirm numeric variable method
      - local isnum = _rc != 7
      - if `isnum' {c -(}
      = if 0 {c -(}
        capture assert `varlist' == int(`varlist') if `touse'
        if _rc {c -(}
        di as err "`varlist' contains non-integer values"
        exit 459
        {c )-}
        tempname Vals
        qui tab `varlist' if `touse', `missing' matrow(`Vals')
        local nvals = r(r)
        forval i = 1 / `nvals' {c -(}
        local val = `Vals'[`i',1]
        if `i' < `nvals' local vals "`vals'`val'`sep'"
        else local vals "`vals'`val'"
        {c )-}
        {c )-}
      - else {c -(}
      - tempvar select counter
      - bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
      = bysort __000003 method : gen byte __000004 = (_n == 1) * __000003
      - generate `counter' = sum(`select') * (`select' == 1)
      = generate __000005 = sum(__000004) * (__000004 == 1)
      - sort `counter'
      = sort __000005
      - qui count if `counter' == 0
      = qui count if __000005 == 0
      - local j = 1 + r(N)
      - local nvals = _N
      - if "`clean'" != "" {c -(}
      = if "" != "" {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals "`vals'`=`varlist'[`i']'`sep'"
        {c )-}
        else local vals "`vals'`=`varlist'[`i']'"
        {c )-}
        {c )-}
      - else {c -(}
      - forval i = `j' / `nvals' {c -(}
      = forval i = 1535 / 1536 {c -(}
      - if `i' < `nvals' {c -(}
      = if 1535 < 1536 {c -(}
      - local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
      = local vals `"`"g2"' "'
      - {c )-}
      - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
      = else local vals `"`"g2"' `"g2"'"'
      - {c )-}
      - if `i' < `nvals' {c -(}
      = if 1536 < 1536 {c -(}
        local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
        {c )-}
      - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
      = else local vals `"`"g2"' `"peto"'"'
      - {c )-}
      - {c )-}
      - {c )-}
      - di as txt `"`vals'"'
      = di as txt `"`"g2"' `"peto"'"'
      - return local levels `"`vals'"'
      = return local levels `"`"g2"' `"peto"'"'
      - if "`local'" != "" {c -(}
      = if "levels" != "" {c -(}
      - c_local `local' `"`vals'"'
      = c_local levels `"`"g2"' `"peto"'"'
      - {c )-}
      {hline 79} end levels {hline}
    - tokenize `"`levels'"'
    = tokenize `"`"g2"' `"peto"'"'
    - if `methodstringindi'==0 {c -(}
    = if 1==0 {c -(}
      numlist "`levels'"
      forvalues i = 1/`nummethod' {c -(}
      local methodlabel`i': word `i' of `levels'
      local mlabel`i' Method: `i'
      local mlabelname`i' Method_`methodlabel`i''
      local methodlabel`i' `i'
      local methodvalues `methodvalues' `methodlabel`i''
      {c )-}
      {c )-}
    - else if `methodstringindi'==1 {c -(}
    = else if 1==1 {c -(}
    - forvalues i = 1/`nummethod' {c -(}
    = forvalues i = 1/2 {c -(}
    - local methodlabel`i': word `i' of `levels'
    = local methodlabel1: word 1 of `"g2"' `"peto"'
    - local mlabel`i' Method: ``i''
    = local mlabel1 Method: g2
    - local mlabelname`i' Method_`methodlabel`i''
    = local mlabelname1 Method_g2
    - local methodlabel`i' ``i''
    = local methodlabel1 g2
    - local methodvalues `methodvalues' `methodlabel`i''
    = local methodvalues  g2
    - {c )-}
    - local methodlabel`i': word `i' of `levels'
    = local methodlabel2: word 2 of `"g2"' `"peto"'
    - local mlabel`i' Method: ``i''
    = local mlabel2 Method: peto
    - local mlabelname`i' Method_`methodlabel`i''
    = local mlabelname2 Method_peto
    - local methodlabel`i' ``i''
    = local methodlabel2 peto
    - local methodvalues `methodvalues' `methodlabel`i''
    = local methodvalues g2 peto
    - {c )-}
    - {c )-}
    - {c )-}
    - if `nmethod'!=0 {c -(}
    = if 1!=0 {c -(}
    - qui tab `method',m
    = qui tab method,m
    - local nmethodlabels = `r(r)'
    = local nmethodlabels = 2
    - qui levels `method', local(levels)
    = qui levels method, local(levels)
      {hline 77} begin levels {hline}
      - version 8
      - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
      - if "`separate'" == "" local sep " "
      = if "" == "" local sep " "
      - else local sep "`separate'"
      = else local sep ""
      - if "`missing'" != "" local novarlist "novarlist"
      = if "" != "" local novarlist "novarlist"
      - marksample touse, strok `novarlist'
      = marksample touse, strok 
      - capture confirm numeric variable `varlist'
      = capture confirm numeric variable method
      - local isnum = _rc != 7
      - if `isnum' {c -(}
      = if 0 {c -(}
        capture assert `varlist' == int(`varlist') if `touse'
        if _rc {c -(}
        di as err "`varlist' contains non-integer values"
        exit 459
        {c )-}
        tempname Vals
        qui tab `varlist' if `touse', `missing' matrow(`Vals')
        local nvals = r(r)
        forval i = 1 / `nvals' {c -(}
        local val = `Vals'[`i',1]
        if `i' < `nvals' local vals "`vals'`val'`sep'"
        else local vals "`vals'`val'"
        {c )-}
        {c )-}
      - else {c -(}
      - tempvar select counter
      - bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
      = bysort __000003 method : gen byte __000004 = (_n == 1) * __000003
      - generate `counter' = sum(`select') * (`select' == 1)
      = generate __000005 = sum(__000004) * (__000004 == 1)
      - sort `counter'
      = sort __000005
      - qui count if `counter' == 0
      = qui count if __000005 == 0
      - local j = 1 + r(N)
      - local nvals = _N
      - if "`clean'" != "" {c -(}
      = if "" != "" {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals "`vals'`=`varlist'[`i']'`sep'"
        {c )-}
        else local vals "`vals'`=`varlist'[`i']'"
        {c )-}
        {c )-}
      - else {c -(}
      - forval i = `j' / `nvals' {c -(}
      = forval i = 1535 / 1536 {c -(}
      - if `i' < `nvals' {c -(}
      = if 1535 < 1536 {c -(}
      - local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
      = local vals `"`"g2"' "'
      - {c )-}
      - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
      = else local vals `"`"g2"' `"g2"'"'
      - {c )-}
      - if `i' < `nvals' {c -(}
      = if 1536 < 1536 {c -(}
        local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
        {c )-}
      - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
      = else local vals `"`"g2"' `"peto"'"'
      - {c )-}
      - {c )-}
      - {c )-}
      - di as txt `"`vals'"'
      = di as txt `"`"g2"' `"peto"'"'
      - return local levels `"`vals'"'
      = return local levels `"`"g2"' `"peto"'"'
      - if "`local'" != "" {c -(}
      = if "levels" != "" {c -(}
      - c_local `local' `"`vals'"'
      = c_local levels `"`"g2"' `"peto"'"'
      - {c )-}
      {hline 79} end levels {hline}
    - tokenize `"`levels'"'
    = tokenize `"`"g2"' `"peto"'"'
    - forvalues e = 1/`nmethodlabels' {c -(}
    = forvalues e = 1/2 {c -(}
    - local methlabel`e' = "``e''"
    = local methlabel1 = "g2"
    - if `e'==1 local valmethodnumwithlabel `methlabel`e''
    = if 1==1 local valmethodnumwithlabel g2
    - else if `e'>=2 local valmethodnumwithlabel `valmethodnumwithlabel' `methlabel`e''
    = else if 1>=2 local valmethodnumwithlabel g2 g2
    - {c )-}
    - local methlabel`e' = "``e''"
    = local methlabel2 = "peto"
    - if `e'==1 local valmethodnumwithlabel `methlabel`e''
    = if 2==1 local valmethodnumwithlabel peto
    - else if `e'>=2 local valmethodnumwithlabel `valmethodnumwithlabel' `methlabel`e''
    = else if 2>=2 local valmethodnumwithlabel g2 peto
    - {c )-}
    - {c )-}
    - qui siman reshape, longwide
      {hline 78} begin siman {hline}
      - version 13
      - syntax [anything] [if] [in], [which *]
      - if "`anything'"=="cms" local anything comparemethodsscatter
      = if "reshape"=="cms" local anything comparemethodsscatter
      - foreach thing in `_dta[siman_allthings]' {c -(}
      = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 {c -(}
      - local `thing' : char _dta[siman_`thing']
      = local allthings : char _dta[siman_allthings]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local rep : char _dta[siman_rep]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgm : char _dta[siman_dgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local target : char _dta[siman_target]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local method : char _dta[siman_method]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estimate : char _dta[siman_estimate]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local se : char _dta[siman_se]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local df : char _dta[siman_df]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ci : char _dta[siman_ci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local p : char _dta[siman_p]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local true : char _dta[siman_true]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local order : char _dta[siman_order]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local lci : char _dta[siman_lci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local uci : char _dta[siman_uci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifsetup : char _dta[siman_ifsetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local insetup : char _dta[siman_insetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local format : char _dta[siman_format]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetformat : char _dta[siman_targetformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodformat : char _dta[siman_methodformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nformat : char _dta[siman_nformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntarget : char _dta[siman_ntarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ndgm : char _dta[siman_ndgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nmethod : char _dta[siman_nmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numtarget : char _dta[siman_numtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valtarget : char _dta[siman_valtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nummethod : char _dta[siman_nummethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valmethod : char _dta[siman_valmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntrue : char _dta[siman_ntrue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruevalue : char _dta[siman_ntruevalue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmvar : char _dta[siman_dgmvar]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numdgm : char _dta[siman_numdgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmcreated : char _dta[siman_dgmcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetlabels : char _dta[siman_targetlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodcreated : char _dta[siman_methodcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local descriptiontype : char _dta[siman_descriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local cidescriptiontype : char _dta[siman_cidescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truedescriptiontype : char _dta[siman_truedescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estvars : char _dta[siman_estvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sevars : char _dta[siman_sevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dfvars : char _dta[siman_dfvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local civars : char _dta[siman_civars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local pvars : char _dta[siman_pvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truevars : char _dta[siman_truevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simansetuprun : char _dta[siman_simansetuprun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m1 : char _dta[siman_m1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m2 : char _dta[siman_m2]
      - {c )-}
      - local subcmds0 setup
      - local subcmds1 describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop
      - local subcmds2
      - local subcmds `subcmds0' `subcmds1' `subcmds'
      = local subcmds setup describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop 
      - if mi("`anything'") {c -(}
      = if mi("reshape") {c -(}
        di as error "Syntax: siman <subcommand>"
        exit 198
        {c )-}
      - if "`anything'"=="which" {c -(}
      = if "reshape"=="which" {c -(}
        which siman
        foreach subcmd of local subcmds {c -(}
        cap noi which siman_`subcmd'
        {c )-}
        exit
        {c )-}
      - gettoken subcmd rest : anything
      - if length("`subcmd'")>=3 {c -(}
      = if length("reshape")>=3 {c -(}
      - foreach thing in `subcmds' {c -(}
      = foreach thing in setup describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop {c -(}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("setup","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("describe","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("analyse","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("analyze","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("table","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("reshape","reshape")==1 {c -(}
      - local subcmd `thing'
      = local subcmd reshape
      - local knowncmd 1
      - {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("lollyplot","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("zipplot","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("comparemethodsscatter","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("blandaltman","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("swarm","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("scatter","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("nestloop","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - {c )-}
      - if "`subcmd'" == "analyze" local subcmd "analyse"
      = if "reshape" == "analyze" local subcmd "analyse"
      - cap which siman_`subcmd'
      = cap which siman_reshape
      - if _rc {c -(}
        di as error "`subcmd' is not a valid siman subcommand"
        if length("`subcmd'")<3 di as error "Minimum abbreviation length is 3"
        exit 198
        {c )-}
      - local type0 : list subcmd in subcmds0
      - if `type0' & !mi("`allthings'") {c -(}
      = if 0 & !mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2") {c -(}
        di as error "Data are already in siman format"
        exit 459
        {c )-}
      - local type1 : list subcmd in subcmds1
      - if `type1' & mi("`allthings'") {c -(}
      = if 1 & mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2") {c -(}
        di as error "Data are not in siman format: use siman setup"
        exit 459
        {c )-}
      - if mi(`"`options'"') siman_`subcmd' `rest' `if' `in'
      = if mi(`"longwide"') siman_reshape   
      - else siman_`subcmd' `rest' `if' `in', `options'
      = else siman_reshape   , longwide
      {hline 80} end siman {hline}
    - foreach thing in `_dta[siman_allthings]' {c -(}
    = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 {c -(}
    - local `thing' : char _dta[siman_`thing']
    = local allthings : char _dta[siman_allthings]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local rep : char _dta[siman_rep]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgm : char _dta[siman_dgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local target : char _dta[siman_target]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local method : char _dta[siman_method]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local estimate : char _dta[siman_estimate]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local se : char _dta[siman_se]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local df : char _dta[siman_df]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ci : char _dta[siman_ci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local p : char _dta[siman_p]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local true : char _dta[siman_true]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local order : char _dta[siman_order]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local lci : char _dta[siman_lci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local uci : char _dta[siman_uci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ifsetup : char _dta[siman_ifsetup]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local insetup : char _dta[siman_insetup]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local format : char _dta[siman_format]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local targetformat : char _dta[siman_targetformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local methodformat : char _dta[siman_methodformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nformat : char _dta[siman_nformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntarget : char _dta[siman_ntarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ndgm : char _dta[siman_ndgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nmethod : char _dta[siman_nmethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local numtarget : char _dta[siman_numtarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local valtarget : char _dta[siman_valtarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nummethod : char _dta[siman_nummethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local valmethod : char _dta[siman_valmethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntrue : char _dta[siman_ntrue]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntruevalue : char _dta[siman_ntruevalue]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgmvar : char _dta[siman_dgmvar]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local numdgm : char _dta[siman_numdgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgmcreated : char _dta[siman_dgmcreated]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local targetlabels : char _dta[siman_targetlabels]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local methodcreated : char _dta[siman_methodcreated]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local descriptiontype : char _dta[siman_descriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local cidescriptiontype : char _dta[siman_cidescriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local truedescriptiontype : char _dta[siman_truedescriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local estvars : char _dta[siman_estvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local sevars : char _dta[siman_sevars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dfvars : char _dta[siman_dfvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local civars : char _dta[siman_civars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local pvars : char _dta[siman_pvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local truevars : char _dta[siman_truevars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local simansetuprun : char _dta[siman_simansetuprun]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local m1 : char _dta[siman_m1]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local m2 : char _dta[siman_m2]
    - {c )-}
    - foreach u of var * {c -(}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("v1",strlen("v1"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("theta",strlen("theta"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("rho",strlen("rho"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("pc",strlen("pc"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("k",strlen("k"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("expg2",strlen("expg2"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("var2g2",strlen("var2g2"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("exppeto",strlen("exppeto"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("var2peto",strlen("var2peto"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("__000000",strlen("__000000"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("__000001",strlen("__000001"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
    = if substr("exp",strlen("exp"),1)=="_" local estimate = substr("exp", 1, index("exp","_") - 1)
    - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
    = if substr("var2",strlen("var2"),1)=="_" local se = substr("var2", 1, index("var2","_") - 1)
    - if "`subgraphoptions'" == "" {c -(}
    = if "xtit("testaxis")" == "" {c -(}
      local subgraphoptions aspect(1) graphregion(margin(zero)) plotregion(margin(zero)) xtit("") legend(off)
      {c )-}
    - di as text "Working....."
Working.....
    - if `ifdgm' == 1 {c -(}
    = if 0 == 1 {c -(}
      qui drop `dgmtodrop'
      local dgm = "`dgmleft'"
      local dgmvalues = `dgmfiltervalues'
      local numberdgms = 1
      {c )-}
    - if !mi("`methlist'") {c -(}
    = if !mi("") {c -(}
      local numbermethod = `methodcount'
      local methodvalues `methlist'
      {c )-}
    - else local numbermethod = `nummethod'
    = else local numbermethod = 2
    - if mi("`methlist'") | (!mi("`methlist'") & `methodstringindi'==1) local forcommand = "forvalues j = 1/`numbermethod'"
    = if mi("") | (!mi("") & 1==1) local forcommand = "forvalues j = 1/2"
    - else local forcommand = "foreach j in `methodvalues'"
    = else local forcommand = "foreach j in g2 peto"
    - if "`by'"=="" local by ""
    = if ""=="" local by ""
    - else if "`by'"=="`target'" local by by(`target', note("") legend(off))
    = else if ""=="" local by by(, note("") legend(off))
    - else if !mi("`by'") & "`by'"!="`target'" {c -(}
    = else if !mi("") & ""!="" {c -(}
      di as error "Can not have `by' as a 'by' option"
      exit 498
      {c )-}
    - local c 1
    - `forcommand' {c -(}
    = forvalues j = 1/2 {c -(}
    - if `methodstringindi'==0 & `methodlabels' == 0 {c -(}
    = if 1==0 & 0 == 0 {c -(}
      label var `estimate'`j' "`estimate', `mlabel`j''"
      label var `se'`j' "`se', `mlabel`j''"
      local mlabel`c' Method: `j'
      {c )-}
    - else if `methodstringindi'==0 & `methodlabels' == 1 {c -(}
    = else if 1==0 & 0 == 1 {c -(}
      local k : word `j' of `methodvalues'
      label var `estimate'`j' "`estimate', Method_`k'"
      label var `se'`j' "`se', Method_`k'"
      local mlabel`c' Method: `k'
      {c )-}
    - else if `methodstringindi'==1 {c -(}
    = else if 1==1 {c -(}
    - label var `estimate'``j'' "`estimate', Method: ``j''"
    = label var expg2 "exp, Method: g2"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("var", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 16, missing: _label var expg2 "exp, Method: g2"
      - {c )-}
      {hline 80} end label {hline}
    - label var `se'``j'' "`se', Method: ``j''"
    = label var var2g2 "var2, Method: g2"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("var", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 16, missing: _label var var2g2 "var2, Method: g2"
      - {c )-}
      {hline 80} end label {hline}
    - local mlabel`c' Method: ``j''
    = local mlabel1 Method: g2
    - {c )-}
    - if `j'==1 {c -(}
    = if 1==1 {c -(}
    - local pt1 = 0.7
    - local pt2 = 0
    - {c )-}
    - else if `j'==2 {c -(}
    = else if 1==2 {c -(}
      local pt1 = 0.5
      local pt2 = -0.5
      {c )-}
    - else if `j'>2 {c -(}
    = else if 1>2 {c -(}
      local pt1 = 0
      local pt2 = -0.5
      {c )-}
    - `dicmd' twoway scatteri 0 0 (0) "`mlabel`j''" .5 `pt1' (0) "" -.5 `pt2' (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off) `nodraw' mlab(black) `subgraphoptions' nodraw name(`mlabelname`c'', replace)
    =  twoway scatteri 0 0 (0) "Method: g2" .5 .7 (0) "" -.5 0 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_g2, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway scatteri 0 0 (0) "Method: g2" .5 .7 (0) "" -.5 0 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_g2, replace)
      {hline 79} end twoway {hline}
    - local c = `c' + 1
    = local c = 1 + 1
    - {c )-}
    - if `methodstringindi'==0 & `methodlabels' == 0 {c -(}
    = if 1==0 & 0 == 0 {c -(}
      label var `estimate'`j' "`estimate', `mlabel`j''"
      label var `se'`j' "`se', `mlabel`j''"
      local mlabel`c' Method: `j'
      {c )-}
    - else if `methodstringindi'==0 & `methodlabels' == 1 {c -(}
    = else if 1==0 & 0 == 1 {c -(}
      local k : word `j' of `methodvalues'
      label var `estimate'`j' "`estimate', Method_`k'"
      label var `se'`j' "`se', Method_`k'"
      local mlabel`c' Method: `k'
      {c )-}
    - else if `methodstringindi'==1 {c -(}
    = else if 1==1 {c -(}
    - label var `estimate'``j'' "`estimate', Method: ``j''"
    = label var exppeto "exp, Method: peto"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("var", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 16, missing: _label var exppeto "exp, Method: peto"
      - {c )-}
      {hline 80} end label {hline}
    - label var `se'``j'' "`se', Method: ``j''"
    = label var var2peto "var2, Method: peto"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("var", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 16, missing: _label var var2peto "var2, Method: peto"
      - {c )-}
      {hline 80} end label {hline}
    - local mlabel`c' Method: ``j''
    = local mlabel2 Method: peto
    - {c )-}
    - if `j'==1 {c -(}
    = if 2==1 {c -(}
      local pt1 = 0.7
      local pt2 = 0
      {c )-}
    - else if `j'==2 {c -(}
    = else if 2==2 {c -(}
    - local pt1 = 0.5
    - local pt2 = -0.5
    - {c )-}
    - else if `j'>2 {c -(}
    = else if 2>2 {c -(}
      local pt1 = 0
      local pt2 = -0.5
      {c )-}
    - `dicmd' twoway scatteri 0 0 (0) "`mlabel`j''" .5 `pt1' (0) "" -.5 `pt2' (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off) `nodraw' mlab(black) `subgraphoptions' nodraw name(`mlabelname`c'', replace)
    =  twoway scatteri 0 0 (0) "Method: peto" .5 .5 (0) "" -.5 -.5 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_peto, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway scatteri 0 0 (0) "Method: peto" .5 .5 (0) "" -.5 -.5 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_peto, replace)
      {hline 79} end twoway {hline}
    - local c = `c' + 1
    = local c = 2 + 1
    - {c )-}
    - qui tokenize `methodvalues'
    = qui tokenize g2 peto
    - forvalues m = 1/`numbermethod' {c -(}
    = forvalues m = 1/2 {c -(}
    - if `methodstringindi'==0 & mi("`methlist'") {c -(}
    = if 1==0 & mi("") {c -(}
      qui summarize `estimate'`m'
      local minest`m' = `r(min)'
      local maxest`m' = `r(max)'
      qui summarize `se'`m'
      local minse`m' = `r(min)'
      local maxse`m' = `r(max)'
      {c )-}
    - else {c -(}
    - qui summarize `estimate'``m''
    = qui summarize expg2
    - local minest`m' = `r(min)'
    = local minest1 = .4498777091503143
    - local maxest`m' = `r(max)'
    = local maxest1 = 1.095583438873291
    - qui summarize `se'``m''
    = qui summarize var2g2
    - local minse`m' = `r(min)'
    = local minse1 = .0024609714746475
    - local maxse`m' = `r(max)'
    = local maxse1 = .9734957218170166
    - {c )-}
    - if `m'>1 {c -(}
    = if 1>1 {c -(}
      local n = `m' - 1
      if `minest`n'' < `minest`m'' local minest = `minest`n''
      else local minest = `minest`m''
      if `minse`n'' < `minse`m'' local minse = `minse`n''
      else local minse = `minse`m''
      if `maxest`n'' > `maxest`m'' local maxest = `maxest`n''
      else local maxest = `maxest`m''
      if `maxse`n'' > `maxse`m'' local maxse = `maxse`n''
      else local maxse = `maxse`m''
      {c )-}
    - {c )-}
    - if `methodstringindi'==0 & mi("`methlist'") {c -(}
    = if 1==0 & mi("") {c -(}
      qui summarize `estimate'`m'
      local minest`m' = `r(min)'
      local maxest`m' = `r(max)'
      qui summarize `se'`m'
      local minse`m' = `r(min)'
      local maxse`m' = `r(max)'
      {c )-}
    - else {c -(}
    - qui summarize `estimate'``m''
    = qui summarize exppeto
    - local minest`m' = `r(min)'
    = local minest2 = .2799641191959381
    - local maxest`m' = `r(max)'
    = local maxest2 = 1.009488821029663
    - qui summarize `se'``m''
    = qui summarize var2peto
    - local minse`m' = `r(min)'
    = local minse2 = .0011168431956321
    - local maxse`m' = `r(max)'
    = local maxse2 = .0873664394021034
    - {c )-}
    - if `m'>1 {c -(}
    = if 2>1 {c -(}
    - local n = `m' - 1
    = local n = 2 - 1
    - if `minest`n'' < `minest`m'' local minest = `minest`n''
    = if .4498777091503143 < .2799641191959381 local minest = .4498777091503143
    - else local minest = `minest`m''
    = else local minest = .2799641191959381
    - if `minse`n'' < `minse`m'' local minse = `minse`n''
    = if .0024609714746475 < .0011168431956321 local minse = .0024609714746475
    - else local minse = `minse`m''
    = else local minse = .0011168431956321
    - if `maxest`n'' > `maxest`m'' local maxest = `maxest`n''
    = if 1.095583438873291 > 1.009488821029663 local maxest = 1.095583438873291
    - else local maxest = `maxest`m''
    = else local maxest = 1.009488821029663
    - if `maxse`n'' > `maxse`m'' local maxse = `maxse`n''
    = if .9734957218170166 > .0873664394021034 local maxse = .9734957218170166
    - else local maxse = `maxse`m''
    = else local maxse = .0873664394021034
    - {c )-}
    - {c )-}
    - local track 1
    - foreach j in `methodvalues' {c -(}
    = foreach j in g2 peto {c -(}
    - foreach option in `estimate' `se' {c -(}
    = foreach option in exp var2 {c -(}
    - local `option'`j' = "`option'`j'"
    = local expg2 = "expg2"
    - if `track'==1 local `option'list ``option'`j''
    = if 1==1 local explist expg2
    - else if `track'>=2 local `option'list ``option'list' ``option'`j''
    = else if 1>=2 local explist expg2 expg2
    - {c )-}
    - local `option'`j' = "`option'`j'"
    = local var2g2 = "var2g2"
    - if `track'==1 local `option'list ``option'`j''
    = if 1==1 local var2list var2g2
    - else if `track'>=2 local `option'list ``option'list' ``option'`j''
    = else if 1>=2 local var2list var2g2 var2g2
    - {c )-}
    - local track = `track' + 1
    = local track = 1 + 1
    - {c )-}
    - foreach option in `estimate' `se' {c -(}
    = foreach option in exp var2 {c -(}
    - local `option'`j' = "`option'`j'"
    = local exppeto = "exppeto"
    - if `track'==1 local `option'list ``option'`j''
    = if 2==1 local explist exppeto
    - else if `track'>=2 local `option'list ``option'list' ``option'`j''
    = else if 2>=2 local explist expg2 exppeto
    - {c )-}
    - local `option'`j' = "`option'`j'"
    = local var2peto = "var2peto"
    - if `track'==1 local `option'list ``option'`j''
    = if 2==1 local var2list var2peto
    - else if `track'>=2 local `option'list ``option'list' ``option'`j''
    = else if 2>=2 local var2list var2g2 var2peto
    - {c )-}
    - local track = `track' + 1
    = local track = 2 + 1
    - {c )-}
    - if ("`anything'"=="" | "`anything'"=="`estimate'") local varlist ``estimate'list'
    = if (""=="" | ""=="exp") local varlist expg2 exppeto
    - else if ("`anything'"=="`se'") local varlist ``se'list'
    = else if (""=="var2") local varlist var2g2 var2peto
    - local countanything: word count `anything'
    = local countanything: word count 
    - if (`countanything'==1 | `countanything'==0) local half half
    = if (0==1 | 0==0) local half half
    - local name = "simancms"
    - if !mi(`"`options'"') {c -(}
    = if !mi(`"title("testtitle") name("cms_test7", replace)"') {c -(}
    - tempvar _namestring
    - qui gen `_namestring' = `"`options'"'
    = qui gen __000002 = `"title("testtitle") name("cms_test7", replace)"'
    - qui split `_namestring', parse(`"name"')
    = qui split __000002, parse(`"name"')
      {hline 78} begin split {hline}
      - version 8
      - syntax varname(str) [if] [in] [, Generate(str) noTrim Parse(str asis) DESTRING force float Ignore(string asis) percent Limit(numlist int >0 max=1) ]
      - local verpre : display "version " %4.1f _caller() ":"
      - if "`destring'"=="" {c -(}
      = if ""=="" {c -(}
      - foreach option in force float ignore percent {c -(}
      - if `"``option''"'!="" {c -(}
      = if `""'!="" {c -(}
        display as error "may not specify `option' without specifying destring"
        exit 198
        {c )-}
      - {c )-}
      - if `"``option''"'!="" {c -(}
      = if `""'!="" {c -(}
        display as error "may not specify `option' without specifying destring"
        exit 198
        {c )-}
      - {c )-}
      - if `"``option''"'!="" {c -(}
      = if `""'!="" {c -(}
        display as error "may not specify `option' without specifying destring"
        exit 198
        {c )-}
      - {c )-}
      - if `"``option''"'!="" {c -(}
      = if `""'!="" {c -(}
        display as error "may not specify `option' without specifying destring"
        exit 198
        {c )-}
      - {c )-}
      - {c )-}
      - else {c -(}
        if `"`ignore'"'!="" {c -(}
        if _caller() >= 14 {c -(}
        if ustrfindfirst(`"`ignore'"',",") & !ustrfindfirst(`"`ignore'"',`"""') {c -(}
        display as error `"ignore string must be enclosed with quotes to ignore commas or use options"'
        exit 198
        {c )-}
        {c )-}
        `verpre' _parse_ignore `ignore'
        {c )-}
        {c )-}
      - marksample touse, strok
      - qui count if `touse'
      = qui count if __000003
      - if r(N) == 0 {c -(}
        error 2000
        {c )-}
      - if `"`parse'"' == `""' | `"`parse'"' == `""""' {c -(}
      = if `"`"name"'"' == `""' | `"`"name"'"' == `""""' {c -(}
        if "`trim'" != "" {c -(}
        di as err "parsing on spaces incompatible with notrim"
        exit 198
        {c )-}
        local parse `"" ""'
        local trm "trim"
        {c )-}
      - if `"`parse'"' == `""' | `"`parse'"' == `""""' {c -(}
      = if `"`"name"'"' == `""' | `"`"name"'"' == `""""' {c -(}
        local parse `"" ""'
        local trm "trim"
        {c )-}
      - local nparse : word count `parse'
      = local nparse : word count `"name"'
      - tokenize `"`parse'"'
      = tokenize `"`"name"'"'
      - if `"`generate'"' != "" {c -(}
      = if `""' != "" {c -(}
        confirm name `generate'
        if `: word count `generate'' > 1 {c -(}
        di as err "invalid stub `generate'"
        exit 198
        {c )-}
        {c )-}
      - qui {c -(}
      - tempvar vw tp mp pl
      - gen int `tp' = 0
      = gen int __000005 = 0
      - gen int `mp' = 0
      = gen int __000006 = 0
      - gen int `pl' = 0
      = gen int __000007 = 0
      - gen str1 `vw' = ""
      = gen str1 __000004 = ""
      - if "`trim'" == "" {c -(}
      = if "" == "" {c -(}
      - replace `vw' = trim(`varlist') if `touse'
      = replace __000004 = trim(__000002) if __000003
      - {c )-}
      - else {c -(}
        replace `vw' = `varlist' if `touse'
        {c )-}
      - {c )-}
      - if "`generate'" == "" {c -(}
      = if "" == "" {c -(}
      - local generate "`varlist'"
      = local generate "__000002"
      - {c )-}
      - local j = 0
      - local go = 1
      - if "`limit'" == "" {c -(}
      = if "" == "" {c -(}
      - local limit .
      - {c )-}
      - qui while `go' & `j' < `limit' {c -(}
      = qui while 1 & 0 < . {c -(}
      - replace `mp' = .
      = replace __000006 = .
      - replace `pl' = 0
      = replace __000007 = 0
      - forval i = 1 / `nparse' {c -(}
      = forval i = 1 / 1 {c -(}
      - replace `tp' = index(`vw', `"``i''"')
      = replace __000005 = index(__000004, `"name"')
      - replace `mp' = min(`tp', `mp') if `tp'
      = replace __000006 = min(__000005, __000006) if __000005
      - replace `pl' = length(`"``i''"') if `mp' == `tp'
      = replace __000007 = length(`"name"') if __000006 == __000005
      - {c )-}
      - local ++j
      - tempvar part`j'
      = tempvar part1
      - gen str1 `part`j'' = ""
      = gen str1 __000008 = ""
      - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
      = replace __000008 = substr(__000004, 1, __000006-1) if __000006 < .
      - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
      = replace __000004 = (substr(__000004, __000006+__000007, .)) if __000006 < .
      - replace `part`j'' = `vw' if `mp' >= .
      = replace __000008 = __000004 if __000006 >= .
      - replace `vw' = "" if `mp' >= .
      = replace __000004 = "" if __000006 >= .
      - local newvars "`newvars'`generate'`j' "
      = local newvars "__0000021 "
      - capture assert `vw' == ""
      = capture assert __000004 == ""
      - local go = _rc
      - {c )-}
      - qui while `go' & `j' < `limit' {c -(}
      = qui while 9 & 1 < . {c -(}
      - replace `mp' = .
      = replace __000006 = .
      - replace `pl' = 0
      = replace __000007 = 0
      - forval i = 1 / `nparse' {c -(}
      = forval i = 1 / 1 {c -(}
      - replace `tp' = index(`vw', `"``i''"')
      = replace __000005 = index(__000004, `"name"')
      - replace `mp' = min(`tp', `mp') if `tp'
      = replace __000006 = min(__000005, __000006) if __000005
      - replace `pl' = length(`"``i''"') if `mp' == `tp'
      = replace __000007 = length(`"name"') if __000006 == __000005
      - {c )-}
      - local ++j
      - tempvar part`j'
      = tempvar part2
      - gen str1 `part`j'' = ""
      = gen str1 __000009 = ""
      - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
      = replace __000009 = substr(__000004, 1, __000006-1) if __000006 < .
      - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
      = replace __000004 = (substr(__000004, __000006+__000007, .)) if __000006 < .
      - replace `part`j'' = `vw' if `mp' >= .
      = replace __000009 = __000004 if __000006 >= .
      - replace `vw' = "" if `mp' >= .
      = replace __000004 = "" if __000006 >= .
      - local newvars "`newvars'`generate'`j' "
      = local newvars "__0000021 __0000022 "
      - capture assert `vw' == ""
      = capture assert __000004 == ""
      - local go = _rc
      - {c )-}
      - qui while `go' & `j' < `limit' {c -(}
      = qui while 0 & 2 < . {c -(}
        replace `mp' = .
        replace `pl' = 0
        forval i = 1 / `nparse' {c -(}
        replace `tp' = index(`vw', `"``i''"')
        replace `mp' = min(`tp', `mp') if `tp'
        replace `pl' = length(`"``i''"') if `mp' == `tp'
        {c )-}
        local ++j
        tempvar part`j'
        gen str1 `part`j'' = ""
        replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
        replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
        replace `part`j'' = `vw' if `mp' >= .
        replace `vw' = "" if `mp' >= .
        local newvars "`newvars'`generate'`j' "
        capture assert `vw' == ""
        local go = _rc
        {c )-}
      - capture confirm new var `newvars'
      = capture confirm new var __0000021 __0000022 
      - if _rc {c -(}
        di as err "cannot generate new variables using stub `generate'"
        exit _rc
        {c )-}
      - qui forval i = 1 / `j' {c -(}
      = qui forval i = 1 / 2 {c -(}
      - gen str1 `generate'`i' = ""
      = gen str1 __0000021 = ""
      - replace `generate'`i' = `part`i''
      = replace __0000021 = __000008
      - {c )-}
      - gen str1 `generate'`i' = ""
      = gen str1 __0000022 = ""
      - replace `generate'`i' = `part`i''
      = replace __0000022 = __000009
      - {c )-}
      - return local varlist "`newvars'"
      = return local varlist "__0000021 __0000022 "
      - return local nvars "`j'"
      = return local nvars "2"
      - local s = cond(`j' > 1, "s", "")
      = local s = cond(2 > 1, "s", "")
      - if "`destring'" != "" {c -(}
      = if "" != "" {c -(}
        di as res "variable`s' born as string: "
        {c )-}
      - else di as res "variable`s' created as string: "
      = else di as res "variables created as string: "
      - ds `newvars'
      = ds __0000021 __0000022 
      - if "`destring'" != "" {c -(}
      = if "" != "" {c -(}
        if `"`ignore'"' != "" {c -(}
        local ignore `"ignore(`ignore')"'
        {c )-}
        `verpre' destring `newvars', replace `force' `float' `ignore' `percent'
        {c )-}
      {hline 80} end split {hline}
    - local options = `_namestring'1
    = local options = __0000021
    - cap confirm var `_namestring'2
    = cap confirm var __0000022
    - if !_rc {c -(}
    - local namestring = `_namestring'2
    = local namestring = __0000022
    - local name = `namestring'
    = local name = ("cms_test7", replace)
    - {c )-}
    - {c )-}
    - if "`dgm'"=="" local dgmvalues=1
    = if "theta rho pc k"=="" local dgmvalues=1
    - if `numberdgms'==1 {c -(}
    = if 4==1 {c -(}
      foreach m in `dgmvalues' {c -(}
      if !mi("`debug'") di as text "Loop for numberdgms = 1: m = `m'"
      if "`valtarget'"!= "N/A" {c -(}
      qui levelsof `target', local(targetlevels)
      local foreachtarget "`targetlevels'"
      {c )-}
      else local foreachtarget 1
      foreach t in `foreachtarget' {c -(}
      cap confirm numeric variable `target'
      if _rc local iftarget `"& `target' == "`t'""'
      else local iftarget `"& `target' == `t'"'
      if "`valtarget'"== "N/A" local iftarget
      local frtheta `minest' `maxest'
      local frse `minse' `maxse'
      if `methodstringindi'==0 {c -(}
      if mi("`methlist'") {c -(}
      if `methodlabels'!= 1 local methodvalues `valmethod'
      else local methodvalues `valmethodnumwithlabel'
      {c )-}
      local maxmethodvalues : word `numbermethod' of `methodvalues'
      local maxmethodvaluesplus1 = substr("`methodvalues'", -`numbermethod', .)
      local maxmethodvaluesminus1 = substr("`methodvalues'", 1 ,`numbermethod')
      local counter = 1
      local counterplus1 = 2
      foreach j in `maxmethodvaluesminus1' {c -(}
      foreach k in `maxmethodvaluesplus1' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'`j' `estimate'`k' if `dgm'==`m' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'`j'`k'dgm`m'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'`j' `se'`k' if `dgm'==`m' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'`j'`k'dgm`m'tar`t', replace)
      local graphtheta`counter'`counterplus1'`m'`t' `estimate'`j'`k'dgm`m'tar`t'
      local graphse`counter'`counterplus1'`m'`t' `se'`j'`k'dgm`m'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
      else if `methodstringindi'==1 | !mi("`methlist'") {c -(}
      local counter = 1
      local counterplus1 = 2
      local maxmethodvaluesminus1 = `numbermethod' - 1
      forvalues j = 1/`maxmethodvaluesminus1' {c -(}
      forvalues k = 2/`numbermethod' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'``j'' `estimate'``k'' if `dgm'==`m' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'``j''``k''dgm`m'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'``j'' `se'``k'' if `dgm'==`m'`iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'``j''``k''dgm`m'tar`t', replace)
      local graphtheta`counter'`counterplus1'`m'`t' `estimate'``j''``k''dgm`m'tar`t'
      local graphse`counter'`counterplus1'`m'`t' `se'``j''``k''dgm`m'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
      if `targetlabels' == 1 {c -(}
      local tlab: word `t' of `valtarget'
      local targetlab ", `target': `tlab'"
      {c )-}
      else {c -(}
      local tlab `t'
      local targetlab ", `target': `tlab'"
      {c )-}
      if "`valtarget'"== "N/A" local targetlab
      if `numbermethod'==2 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`m'`t'' `graphse12`m'`t'' `mlabelname2' , title("") note("Graphs for `dgm': ``dgm'dlabel`m'' `targetlab'") cols(2) xsize(4) name(`name'_dgm`m'`tlab', replace) `options'
      {c )-}
      else if `numbermethod'==3 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`m'`t'' `graphtheta13`m'`t'' `graphse12`m'`t'' `mlabelname2' `graphtheta23`m'`t'' `graphse13`m'`t'' `graphse23`m'`t'' `mlabelname3' , title("") note("Graphs for `dgm': ``dgm'dlabel`m'' `targetlab'") cols(3) xsize(4) name(`name'_dgm`m'`tlab', replace) `options'
      {c )-}
      else if `numbermethod'>3 {c -(}
      if mi("`anything'") local anything = "est"
      `dicmd' graph matrix `varlist' if `dgm'==`m' `iftarget', `half' `by' title("") note("") name(`name'_`anything'`j'`k'dgm`m'`tlab', replace) `options'
      {c )-}
      {c )-}
      {c )-}
      {c )-}
    - else if `numberdgms' != 1 {c -(}
    = else if 4 != 1 {c -(}
    - foreach dgmvar in `dgmvalues' {c -(}
    = foreach dgmvar in theta rho pc k {c -(}
    - if !mi("`debug'") di as text "Loop for numberdgms > 1: m = `m'"
    = if !mi("") di as text "Loop for numberdgms > 1: m = "
    - local dgmlabels = 0
    - qui tab `dgmvar'
    = qui tab theta
    - local ndgmvar = `r(r)'
    = local ndgmvar = 4
    - cap qui labelsof `dgmvar'
    = cap qui labelsof theta
      {hline 75} begin labelsof {hline}
      - version 8
      - syntax name [, Label ]
      - if "`label'"=="" {c -(}
      = if ""=="" {c -(}
      - local labdef: value label `namelist'
      = local labdef: value label theta
      - if `"`labdef'"'=="" {c -(}
      = if `"theta_new"'=="" {c -(}
        exit
        {c )-}
      - {c )-}
      - else local labdef "`namelist'"
      = else local labdef "theta"
      - tempfile fn
      - qui label save `labdef' using `"`fn'"'
      = qui label save theta_new using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_1080_000004.tmp"'
      - tempname fh
      - file open `fh' using `"`fn'"', read
      = file open __000003 using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_1080_000004.tmp"', read
      - file read `fh' line
      = file read __000003 line
      - local values
      - local labels
      - local space
      - if "`label'"=="" di as txt _n "`namelist' ({c -(}res{c )-}`labdef'{c -(}txt{c )-}):" _n
      = if ""=="" di as txt _n "theta ({c -(}res{c )-}theta_new{c -(}txt{c )-}):" _n
      - else di as txt _n "`labdef':"
      = else di as txt _n "theta_new:"
      - while r(eof)==0 {c -(}
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken label line : line, parse(", ") match(paren)
      - local values "`values'`space'`value'"
      = local values "1"
      - local labels `"`labels'`space'`"`label'"'"'
      = local labels `"`"0.5"'"'
      - di as res %12s "`value'" " " `"`label'"'
      = di as res %12s "1" " " `"0.5"'
      - file read `fh' line
      = file read __000003 line
      - local space " "
      - {c )-}
      - while r(eof)==0 {c -(}
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken label line : line, parse(", ") match(paren)
      - local values "`values'`space'`value'"
      = local values "1 2"
      - local labels `"`labels'`space'`"`label'"'"'
      = local labels `"`"0.5"' `"0.67"'"'
      - di as res %12s "`value'" " " `"`label'"'
      = di as res %12s "2" " " `"0.67"'
      - file read `fh' line
      = file read __000003 line
      - local space " "
      - {c )-}
      - while r(eof)==0 {c -(}
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken label line : line, parse(", ") match(paren)
      - local values "`values'`space'`value'"
      = local values "1 2 3"
      - local labels `"`labels'`space'`"`label'"'"'
      = local labels `"`"0.5"' `"0.67"' `"0.75"'"'
      - di as res %12s "`value'" " " `"`label'"'
      = di as res %12s "3" " " `"0.75"'
      - file read `fh' line
      = file read __000003 line
      - local space " "
      - {c )-}
      - while r(eof)==0 {c -(}
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken label line : line, parse(", ") match(paren)
      - local values "`values'`space'`value'"
      = local values "1 2 3 4"
      - local labels `"`labels'`space'`"`label'"'"'
      = local labels `"`"0.5"' `"0.67"' `"0.75"' `"1"'"'
      - di as res %12s "`value'" " " `"`label'"'
      = di as res %12s "4" " " `"1"'
      - file read `fh' line
      = file read __000003 line
      - local space " "
      - {c )-}
      - while r(eof)==0 {c -(}
        gettoken value line : line
        gettoken value line : line
        gettoken value line : line
        gettoken value line : line
        gettoken label line : line, parse(", ") match(paren)
        local values "`values'`space'`value'"
        local labels `"`labels'`space'`"`label'"'"'
        di as res %12s "`value'" " " `"`label'"'
        file read `fh' line
        local space " "
        {c )-}
      - file close `fh'
      = file close __000003
      - ret local labels `"`labels'"'
      = ret local labels `"`"0.5"' `"0.67"' `"0.75"' `"1"'"'
      - ret local values "`values'"
      = ret local values "1 2 3 4"
      - ret local name "`labdef'"
      = ret local name "theta_new"
      {hline 77} end labelsof {hline}
    - cap qui ret list
    - if `"`r(labels)'"'!="" {c -(}
    = if `"`"0.5"' `"0.67"' `"0.75"' `"1"'"'!="" {c -(}
    - local 0 = `"`r(labels)'"'
    = local 0 = `"`"0.5"' `"0.67"' `"0.75"' `"1"'"'
    - forvalues i = 1/`ndgmvar' {c -(}
    = forvalues i = 1/4 {c -(}
    - gettoken `dgmvar'dlabel`i' 0 : 0, parse(": ")
    = gettoken thetadlabel1 0 : 0, parse(": ")
    - local dgmlabels = 1
    - {c )-}
    - gettoken `dgmvar'dlabel`i' 0 : 0, parse(": ")
    = gettoken thetadlabel2 0 : 0, parse(": ")
    - local dgmlabels = 1
    - {c )-}
    - gettoken `dgmvar'dlabel`i' 0 : 0, parse(": ")
    = gettoken thetadlabel3 0 : 0, parse(": ")
    - local dgmlabels = 1
    - {c )-}
    - gettoken `dgmvar'dlabel`i' 0 : 0, parse(": ")
    = gettoken thetadlabel4 0 : 0, parse(": ")
    - local dgmlabels = 1
    - {c )-}
    - {c )-}
    - else {c -(}
      local dgmlabels = 0
      qui levels `dgmvar', local(levels)
      local loop = 1
      foreach l of local levels {c -(}
      local `dgmvar'dlabel`loop' `l'
      local loop = `loop' + 1
      {c )-}
      {c )-}
    - tempvar _group
    - qui egen `_group' = group(`dgmvalues'), label lname(grouplevels)
    = qui egen __000003 = group(theta rho pc k), label lname(grouplevels)
      {hline 79} begin egen {hline}
      - version 6, missing
      - local cvers = _caller()
      - gettoken type 0 : 0, parse(" =(")
      - gettoken name 0 : 0, parse(" =(")
      - if `"`name'"'=="=" {c -(}
      = if `"="'=="=" {c -(}
      - local name `"`type'"'
      = local name `"__000003"'
      - local type : set type
      - {c )-}
      - else {c -(}
        gettoken eqsign 0 : 0, parse(" =(")
        if `"`eqsign'"' != "=" {c -(}
        error 198
        {c )-}
        {c )-}
      - confirm new variable `name'
      = confirm new variable __000003
      - gettoken fcn 0 : 0, parse(" =(")
      - gettoken args 0 : 0, parse(" ,") match(par)
      - if "`c(adoarchive)'"=="1" {c -(}
      = if ""=="1" {c -(}
        capture qui _stfilearchive find _g`fcn'.ado
        if _rc {c -(}
        di as err in smcl "unknown {c -(}bf:egen{c )-} function {c -(}bf:`fcn'(){c )-}"
        exit 133
        {c )-}
        {c )-}
      - else {c -(}
      - capture qui findfile _g`fcn'.ado
      = capture qui findfile _ggroup.ado
      - if (`"`r(fn)'"' == "") {c -(}
      = if (`"C:\Program Files\Stata16\ado\base/_/_ggroup.ado"' == "") {c -(}
        di as err in smcl "unknown {c -(}bf:egen{c )-} function {c -(}bf:`fcn'(){c )-}"
        exit 133
        {c )-}
      - {c )-}
      - if `"`par'"' != "(" {c -(}
      = if `"("' != "(" {c -(}
        exit 198
        {c )-}
      - if `"`args'"' == "_all" | `"`args'"' == "*" {c -(}
      = if `"theta rho pc k"' == "_all" | `"theta rho pc k"' == "*" {c -(}
        version 7.0, missing
        unab args : _all
        local args : subinstr local args "`_sortindex'" "", all word
        version 6.0, missing
        {c )-}
      - syntax [if] [in] [, *]
      - if _by() {c -(}
        local byopt "by(`_byvars')"
        local cma ","
        {c )-}
      - else if `"`options'"' != "" {c -(}
      = else if `"label lname(grouplevels)"' != "" {c -(}
      - local cma ","
      - {c )-}
      - tempvar dummy
      - global EGEN_Varname `name'
      = global EGEN_Varname __000003
      - version 7.0, missing
      - global EGEN_SVarname `_sortindex'
      = global EGEN_SVarname __000004
      - version 6.0, missing
      - if inlist("`fcn'","mode","concat","group") {c -(}
      = if inlist("group","mode","concat","group") {c -(}
      - local vv : display "version " string(`cvers') ", missing:"
      = local vv : display "version " string(16) ", missing:"
      - {c )-}
      - capture noisily `vv' _g`fcn' `type' `dummy' = (`args') `if' `in' `cma' `byopt' `options'
      = capture noisily version 16, missing: _ggroup float __000005 = (theta rho pc k)   ,  label lname(grouplevels)
      - version 7.0, missing
      - local message $EGEN_Message
      = local message 1
      - version 6.0, missing
      - global EGEN_SVarname
      - global EGEN_Varname
      - global EGEN_Message
      - if _rc {c -(} exit _rc {c )-}
      - if "`message'" == "" {c -(}
      = if "1" == "" {c -(}
        quietly count if missing(`dummy')
        if r(N) {c -(}
        local s = cond(r(N)>1,"s","")
        local N : di %11.0fc r(N)
        local N `N'
        di in bl "(`N' missing value`s' generated)"
        {c )-}
        {c )-}
      - rename `dummy' `name'
      = rename __000005 __000003
      {hline 81} end egen {hline}
    - local group "`_group'"
    = local group "__000003"
    - qui tab `group'
    = qui tab __000003
    - local groupnum = `r(r)'
    = local groupnum = 192
    - if "`numtarget'" == "N/A" local numtargetcheck = 1
    = if "N/A" == "N/A" local numtargetcheck = 1
    - else local numtargetcheck = `numtarget'
    = else local numtargetcheck = N/A
    - if "`groupnum'" == "" local totalgroupnum = 1
    = if "192" == "" local totalgroupnum = 1
    - else local totalgroupnum = `groupnum'
    = else local totalgroupnum = 192
    - local graphnumcheck = `totalgroupnum' * `numtargetcheck'
    = local graphnumcheck = 192 * 1
    - if `graphnumcheck' > 15 {c -(}
    = if 192 > 15 {c -(}
    - di as error "{c -(}it: WARNING: `graphnumcheck' graphs will be created, consider using 'if' option as detailed in {c -(}help              siman_comparemethodsscatter:siman comparemethodsscatter{c )-}{c )-}"
    = di as error "{c -(}it: WARNING: 192 graphs will be created, consider using 'if' option as detailed in {c -(}help              siman_comparemethodsscatter:siman comparemethodsscatter{c )-}{c )-}"
{err}{it: WARNING: 192 graphs will be created, consider using 'if' option as detailed in {help              siman_comparemethodsscatter:siman comparemethodsscatter}}
    {txt}- {c )-}
    - forvalues d = 1/`groupnum' {c -(}
    = forvalues d = 1/192 {c -(}
    - local dgmfilter = "`group'==`d'"
    = local dgmfilter = "__000003==1"
    - local dgmlevels`d' : label grouplevels `d'
    = local dgmlevels1 : label grouplevels 1
    - if "`valtarget'"!= "N/A" {c -(}
    = if "N/A"!= "N/A" {c -(}
      qui levelsof `target', local(targetlevels)
      local foreachtarget "`targetlevels'"
      {c )-}
    - else local foreachtarget 1
    - foreach t in `foreachtarget' {c -(}
    = foreach t in 1 {c -(}
    - cap confirm numeric variable `target'
    = cap confirm numeric variable 
    - if _rc local iftarget `"& `target' == "`t'""'
    = if _rc local iftarget `"&  == "1""'
    - else local iftarget `"& `target' == `t'"'
    = else local iftarget `"&  == 1"'
    - if "`valtarget'"== "N/A" local iftarget
    = if "N/A"== "N/A" local iftarget
    - local frtheta `minest' `maxest'
    = local frtheta .2799641191959381 1.095583438873291
    - local frse `minse' `maxse'
    = local frse .0011168431956321 .9734957218170166
    - if `methodstringindi'==0 {c -(}
    = if 1==0 {c -(}
      if mi("`methlist'") {c -(}
      if `methodlabels'!= 1 local methodvalues `valmethod'
      else local methodvalues `valmethodnumwithlabel'
      {c )-}
      local maxmethodvalues : word `numbermethod' of `methodvalues'
      local maxmethodvaluesplus1 = substr("`methodvalues'", -`numbermethod', .)
      local maxmethodvaluesminus1 = substr("`methodvalues'", 1 ,`numbermethod')
      local counter = 1
      local counterplus1 = 2
      foreach j in `maxmethodvaluesminus1' {c -(}
      foreach k in `maxmethodvaluesplus1' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'`j' `estimate'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`estimate'`j'`k'`d'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'`j' `se'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`se'`j'`k'`d'tar`t', replace)
      local graphtheta`counter'`counterplus1'`d'`t' `estimate'`j'`k'`d'tar`t'
      local graphse`counter'`counterplus1'`d'`t' `se'`j'`k'`d'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
    - else if `methodstringindi'==1 | !mi("`methlist'") {c -(}
    = else if 1==1 | !mi("") {c -(}
    - local counter = 1
    - local counterplus1 = 2
    - local maxmethodvaluesminus1 = `numbermethod' - 1
    = local maxmethodvaluesminus1 = 2 - 1
    - forvalues j = 1/`maxmethodvaluesminus1' {c -(}
    = forvalues j = 1/1 {c -(}
    - forvalues k = 2/`numbermethod' {c -(}
    = forvalues k = 2/2 {c -(}
    - if "`j'" != "`k'" {c -(}
    = if "1" != "2" {c -(}
    - `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'``j'' `estimate'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'``j''``k''`d'tar`t', replace)
    =  twoway (function x, range(.2799641191959381 1.095583438873291) lcolor(gs10)) (scatter expg2 exppeto if __000003==1 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(expg2peto1tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.2799641191959381 1.095583438873291) lcolor(gs10)) (scatter expg2 exppeto if __000003==1 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(expg2peto1tar1, replace)
      {hline 79} end twoway {hline}
    - `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'``j'' `se'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'``j''``k''`d'tar`t', replace)
    =  twoway (function x, range(.0011168431956321 .9734957218170166) lcolor(gs10)) (scatter var2g2 var2peto if __000003==1 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(var2g2peto1tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.0011168431956321 .9734957218170166) lcolor(gs10)) (scatter var2g2 var2peto if __000003==1 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(var2g2peto1tar1, replace)
      {hline 79} end twoway {hline}
    - local graphtheta`counter'`counterplus1'`d'`t' `estimate'``j''``k''`d'tar`t'
    = local graphtheta1211 expg2peto1tar1
    - local graphse`counter'`counterplus1'`d'`t' `se'``j''``k''`d'tar`t'
    = local graphse1211 var2g2peto1tar1
    - local counterplus1 = `counterplus1' + 1
    = local counterplus1 = 2 + 1
    - if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
    = if 3 > 2 local counterplus1 = 2
    - {c )-}
    - {c )-}
    - local counter = `counter' + 1
    = local counter = 1 + 1
    - {c )-}
    - {c )-}
    - if `targetlabels' == 1 {c -(}
    = if 0 == 1 {c -(}
      local tlab: word `t' of `valtarget'
      local targetlab ", `target': `tlab'"
      {c )-}
    - else {c -(}
    - local tlab `t'
    = local tlab 1
    - local targetlab ", `target': `tlab'"
    = local targetlab ", : 1"
    - {c )-}
    - if "`valtarget'"== "N/A" local targetlab
    = if "N/A"== "N/A" local targetlab
    - if `numbermethod'==2 {c -(}
    = if 2==2 {c -(}
    - `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphse12`d'`t'' `mlabelname2',
    =  graph combine Method_g2 expg2peto1tar1 var2g2peto1tar1 Method_peto,
      {hline 78} begin graph {hline}
      - if d(`=c(born_date)') < d(23Jul2004) {c -(}
      = if d(14 Feb 2022) < d(23Jul2004) {c -(}
        di as err "your Stata executable is out of date"
        di as err "    type -update executable- at the Stata prompt"
        exit 498
        {c )-}
      - local ver = string(_caller())
      - if (_caller() < 8.2) version 8
      - else if (_caller() < 10 ) version 8.2
      - else version 10
      - gdi record = yes
      - gdi maybedraw = yes
      - if "`._Gr_Global.isa'" == "" {c -(}
      = if "class" == "" {c -(}
        ._Gr_Global = .global_g.new
        {c )-}
      - ._Gr_Global.callerver = "`ver'"
      = ._Gr_Global.callerver = "16"
      - capture noisily Graph `0'
      = capture noisily Graph combine Method_g2 expg2peto1tar1 var2g2peto1tar1 Method_peto,
{res}      {txt}- local rc = _rc
      - gdi record = yes
      - gdi maybedraw = yes
      - gdi end
      - exit `rc'
      = exit 0
      {hline 80} end graph {hline}
    - title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(2) xsize(4) name(`name'_`d'`tlab', replace) `options'
    = title("") note("Graphs for theta rho pc k: 0.5 no 10% 5 ") cols(2) xsize(4) name(cms_test7_11, replace) title("testtitle") 
{err}command {bf}title{sf} is unrecognized
     {txt} {c )-}
      else if `numbermethod'==3 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphtheta13`d'`t'' `graphse12`d'`t'' `mlabelname2' `graphtheta23`d'`t'' `graphse13`d'`t'' `graphse23`d'`t'' `mlabelname3', title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(3) xsize(4) name(`name'_`d'`tlab', replace) `options'
      {c )-}
      else if `numbermethod'>3 {c -(}
      if mi("`anything'") local anything = "est"
      `dicmd' graph matrix `varlist' if `group'==`d' `iftarget', `half' `by' title("") note("") name(`name'_`anything'`j'`k'`d'`tlab', replace) `options'
      {c )-}
      {c )-}
      {c )-}
      {c )-}
      {c )-}
{search r(199), local:r(199);}

end of do-file

{search r(199), local:r(199);}

{com}. do "C:\Users\rmjlem1\AppData\Local\Temp\STD1080_000000.tmp"
{txt}
{com}. siman comparemethodsscatter, title("testtitle") subgr(xtit("testaxis")) name("cms_test5", replace) 
    {txt}- set tracedepth 1
    - if mi("`estimate'") | mi("`se'") {c -(}
    = if mi("exp") | mi("var2") {c -(}
      di as error "siman scattercomparemethods requires estimate and se to plot"
      exit 498
      {c )-}
    - if "`method'"=="" {c -(}
    = if "method"=="" {c -(}
      di as error "The variable 'method' is missing so siman comparemethodsscatter can not be created.  Please create a variable in your dataset called method containing the method value(s)."
      exit 498
      {c )-}
    - if `nummethod' < 2 {c -(}
    = if 2 < 2 {c -(}
      di as error "There are not enough methods to compare, siman comparemethods scatter requires at least 2 methods."
      exit 498
      {c )-}
    - if !mi("`debug'") local dicmd dicmd
    = if !mi("") local dicmd dicmd
    - tempfile origdata
    - qui save `origdata'
    = qui save C:\Users\rmjlem1\AppData\Local\Temp\ST_1080_000001.tmp
    - if `nformat'!=1 {c -(}
    = if 1!=1 {c -(}
      qui siman reshape, longlong
      foreach thing in `_dta[siman_allthings]' {c -(}
      local `thing' : char _dta[siman_`thing']
      {c )-}
      {c )-}
    - local methodstringindi = 0
    - capture confirm string variable `method'
    = capture confirm string variable method
    - if !_rc local methodstringindi = 1
    - if mi("`methlist'") & `nummethod' > 5 {c -(}
    = if mi("") & 2 > 5 {c -(}
      di as text "Warning: With `nummethod' methods compared, this plot may be too dense to read.  If you find it unreadable, you can choose the methods to compare using -siman comparemethodsscatter-, methlist(a b) where a and b are the methods you are particularly interested to compare."
      {c )-}
    - cap confirm variable `dgm'
    = cap confirm variable theta rho pc k
    - if !_rc {c -(}
    - local numberdgms: word count `dgm'
    = local numberdgms: word count theta rho pc k
    - if `numberdgms'==1 {c -(}
    = if 4==1 {c -(}
      local dgmlabels 0
      qui tab `dgm'
      cap qui labelsof `dgm'
      cap qui ret list
      if `"`r(labels)'"' != "" {c -(}
      local 0 = `"`r(labels)'"'
      forvalues i = 1/`ndgm' {c -(}
      gettoken `dgm'dlabel`i' 0 : 0, parse(": ")
      local dgmlabels = 1
      {c )-}
      {c )-}
      else {c -(}
      local dgmlabels 0
      qui levels `dgm', local(levels)
      local loop 1
      foreach l of local levels {c -(}
      local `dgm'dlabel`loop' `l'
      local loop = `loop' + 1
      {c )-}
      {c )-}
      {c )-}
    - {c )-}
    - if ("`if'"=="" & "`ifsetup'"!="") local ifscatterc = `"`ifsetup'"'
    = if (""=="" & ""!="") local ifscatterc = `""'
    - else local ifscatterc = `"`if'"'
    = else local ifscatterc = `""'
    - local ifdgm = 0
    - if !mi("`ifscatterc'") {c -(}
    = if !mi("") {c -(}
      cap confirm variable `dgm'
      if !_rc {c -(}
      local numberdgms: word count `dgm'
      if `numberdgms'!=1 {c -(}
      gettoken dgmfilter ifscatterc: ifscatterc, parse("==")
      local ifremove "if "
      local dgmleft: list dgmfilter - ifremove
      local dgmorig = "`dgm'"
      local dgmtodrop: list dgm - dgmleft
      local ifdgm = 1
      gettoken dgmleft2 ifscatterc: ifscatterc, parse("==")
      local dgmfiltervalues = `ifscatterc'
      local ifscatterc = `"`if'"'
      {c )-}
      {c )-}
      {c )-}
    - tempvar touseif
    - qui generate `touseif' = 0
    = qui generate __000000 = 0
    - qui replace `touseif' = 1 `ifscatterc'
    = qui replace __000000 = 1 
    - preserve
    - sort `dgm' `target' `method' `touseif'
    = sort theta rho pc k  method __000000
    - capture by `dgm' `target' `method': assert `touseif'==`touseif'[_n-1] if _n>1
    = capture by theta rho pc k  method: assert __000000==__000000[_n-1] if _n>1
    - if _rc == 9 {c -(}
      di as error "The 'if' option can not be applied to 'rep' in siman comparemethodsscatter (cms).  If you have not specified an 'if' in siman cms, but you specified one in siman setup, then that 'if' will have been applied to siman cms."
      exit 498
      {c )-}
    - restore
    - qui keep if `touseif'
    = qui keep if __000000
    - if ("`in'"=="" & "`insetup'"!="") local inscatterc = `"`insetup'"'
    = if (""=="" & ""!="") local inscatterc = `""'
    - else local inscatterc = `"`in'"'
    = else local inscatterc = `""'
    - tempvar tousein
    - qui generate `tousein' = 0
    = qui generate __000001 = 0
    - qui replace `tousein' = 1 `inscatterc'
    = qui replace __000001 = 1 
    - qui keep if `tousein'
    = qui keep if __000001
    - cap confirm variable `dgm'
    = cap confirm variable theta rho pc k
    - if !_rc {c -(}
    - local numberdgms: word count `dgm'
    = local numberdgms: word count theta rho pc k
    - if `numberdgms'==1 {c -(}
    = if 4==1 {c -(}
      qui tab `dgm'
      local ndgmlabels = `r(r)'
      qui levels `dgm', local(levels)
      tokenize `"`levels'"'
      forvalues i=1/`ndgmlabels' {c -(}
      local d`i' = "``i''"
      if `i'==1 local dgmvalues `d`i''
      else local dgmvalues `dgmvalues' `d`i''
      {c )-}
      {c )-}
    - if `numberdgms'!=1 {c -(}
    = if 4!=1 {c -(}
    - local ndgmlabels = `numberdgms'
    = local ndgmlabels = 4
    - local dgmvalues `dgm'
    = local dgmvalues theta rho pc k
    - {c )-}
    - {c )-}
    - preserve
    - qui drop if `rep'<0
    = qui drop if v1<0
    - if !mi("`methlist'") {c -(}
    = if !mi("") {c -(}
      local methodvalues = "`methlist'"
      local methodcount: word count `methlist'
      tempvar tousemethod
      qui generate `tousemethod' = 0
      tokenize `methlist'
      foreach j in `methodvalues' {c -(}
      if `methodstringindi' == 0 qui replace `tousemethod' = 1 if `method' == `j'
      else if `methodstringindi' == 1 qui replace `tousemethod' = 1 if `method' == "`j'"
      {c )-}
      qui keep if `tousemethod' == 1
      qui drop `tousemethod'
      {c )-}
    - qui capture which labelsof
    - if _rc {c -(}
      di as smcl "labelsof package required, please install by clicking: " `"{c -(}stata ssc install labelsof{c )-}"'
      exit
      {c )-}
    - qui labelsof `method'
    = qui labelsof method
      {hline 75} begin labelsof {hline}
      - version 8
      - syntax name [, Label ]
      - if "`label'"=="" {c -(}
      = if ""=="" {c -(}
      - local labdef: value label `namelist'
      = local labdef: value label method
      - if `"`labdef'"'=="" {c -(}
      = if `""'=="" {c -(}
      - exit
      {hline 77} end labelsof {hline}
    - qui ret list
    - local methodlabels 0
    - if `"`r(labels)'"'!="" {c -(}
    = if `""'!="" {c -(}
      local 0 = `"`r(labels)'"'
      forvalues i = 1/`nummethod' {c -(}
      gettoken mlabel`i' 0 : 0, parse(": ")
      local methodvalues `methodvalues' `mlabel`i''
      local methodlabel`i': word `i' of `methodvalues'
      local mlabelname`i' Method_`methodlabel`i''
      local methodlabels 1
      {c )-}
      {c )-}
    - else {c -(}
    - qui levels `method', local(levels)
    = qui levels method, local(levels)
      {hline 77} begin levels {hline}
      - version 8
      - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
      - if "`separate'" == "" local sep " "
      = if "" == "" local sep " "
      - else local sep "`separate'"
      = else local sep ""
      - if "`missing'" != "" local novarlist "novarlist"
      = if "" != "" local novarlist "novarlist"
      - marksample touse, strok `novarlist'
      = marksample touse, strok 
      - capture confirm numeric variable `varlist'
      = capture confirm numeric variable method
      - local isnum = _rc != 7
      - if `isnum' {c -(}
      = if 0 {c -(}
        capture assert `varlist' == int(`varlist') if `touse'
        if _rc {c -(}
        di as err "`varlist' contains non-integer values"
        exit 459
        {c )-}
        tempname Vals
        qui tab `varlist' if `touse', `missing' matrow(`Vals')
        local nvals = r(r)
        forval i = 1 / `nvals' {c -(}
        local val = `Vals'[`i',1]
        if `i' < `nvals' local vals "`vals'`val'`sep'"
        else local vals "`vals'`val'"
        {c )-}
        {c )-}
      - else {c -(}
      - tempvar select counter
      - bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
      = bysort __000003 method : gen byte __000004 = (_n == 1) * __000003
      - generate `counter' = sum(`select') * (`select' == 1)
      = generate __000005 = sum(__000004) * (__000004 == 1)
      - sort `counter'
      = sort __000005
      - qui count if `counter' == 0
      = qui count if __000005 == 0
      - local j = 1 + r(N)
      - local nvals = _N
      - if "`clean'" != "" {c -(}
      = if "" != "" {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals "`vals'`=`varlist'[`i']'`sep'"
        {c )-}
        else local vals "`vals'`=`varlist'[`i']'"
        {c )-}
        {c )-}
      - else {c -(}
      - forval i = `j' / `nvals' {c -(}
      = forval i = 1535 / 1536 {c -(}
      - if `i' < `nvals' {c -(}
      = if 1535 < 1536 {c -(}
      - local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
      = local vals `"`"g2"' "'
      - {c )-}
      - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
      = else local vals `"`"g2"' `"g2"'"'
      - {c )-}
      - if `i' < `nvals' {c -(}
      = if 1536 < 1536 {c -(}
        local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
        {c )-}
      - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
      = else local vals `"`"g2"' `"peto"'"'
      - {c )-}
      - {c )-}
      - {c )-}
      - di as txt `"`vals'"'
      = di as txt `"`"g2"' `"peto"'"'
      - return local levels `"`vals'"'
      = return local levels `"`"g2"' `"peto"'"'
      - if "`local'" != "" {c -(}
      = if "levels" != "" {c -(}
      - c_local `local' `"`vals'"'
      = c_local levels `"`"g2"' `"peto"'"'
      - {c )-}
      {hline 79} end levels {hline}
    - tokenize `"`levels'"'
    = tokenize `"`"g2"' `"peto"'"'
    - if `methodstringindi'==0 {c -(}
    = if 1==0 {c -(}
      numlist "`levels'"
      forvalues i = 1/`nummethod' {c -(}
      local methodlabel`i': word `i' of `levels'
      local mlabel`i' Method: `i'
      local mlabelname`i' Method_`methodlabel`i''
      local methodlabel`i' `i'
      local methodvalues `methodvalues' `methodlabel`i''
      {c )-}
      {c )-}
    - else if `methodstringindi'==1 {c -(}
    = else if 1==1 {c -(}
    - forvalues i = 1/`nummethod' {c -(}
    = forvalues i = 1/2 {c -(}
    - local methodlabel`i': word `i' of `levels'
    = local methodlabel1: word 1 of `"g2"' `"peto"'
    - local mlabel`i' Method: ``i''
    = local mlabel1 Method: g2
    - local mlabelname`i' Method_`methodlabel`i''
    = local mlabelname1 Method_g2
    - local methodlabel`i' ``i''
    = local methodlabel1 g2
    - local methodvalues `methodvalues' `methodlabel`i''
    = local methodvalues  g2
    - {c )-}
    - local methodlabel`i': word `i' of `levels'
    = local methodlabel2: word 2 of `"g2"' `"peto"'
    - local mlabel`i' Method: ``i''
    = local mlabel2 Method: peto
    - local mlabelname`i' Method_`methodlabel`i''
    = local mlabelname2 Method_peto
    - local methodlabel`i' ``i''
    = local methodlabel2 peto
    - local methodvalues `methodvalues' `methodlabel`i''
    = local methodvalues g2 peto
    - {c )-}
    - {c )-}
    - {c )-}
    - if `nmethod'!=0 {c -(}
    = if 1!=0 {c -(}
    - qui tab `method',m
    = qui tab method,m
    - local nmethodlabels = `r(r)'
    = local nmethodlabels = 2
    - qui levels `method', local(levels)
    = qui levels method, local(levels)
      {hline 77} begin levels {hline}
      - version 8
      - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
      - if "`separate'" == "" local sep " "
      = if "" == "" local sep " "
      - else local sep "`separate'"
      = else local sep ""
      - if "`missing'" != "" local novarlist "novarlist"
      = if "" != "" local novarlist "novarlist"
      - marksample touse, strok `novarlist'
      = marksample touse, strok 
      - capture confirm numeric variable `varlist'
      = capture confirm numeric variable method
      - local isnum = _rc != 7
      - if `isnum' {c -(}
      = if 0 {c -(}
        capture assert `varlist' == int(`varlist') if `touse'
        if _rc {c -(}
        di as err "`varlist' contains non-integer values"
        exit 459
        {c )-}
        tempname Vals
        qui tab `varlist' if `touse', `missing' matrow(`Vals')
        local nvals = r(r)
        forval i = 1 / `nvals' {c -(}
        local val = `Vals'[`i',1]
        if `i' < `nvals' local vals "`vals'`val'`sep'"
        else local vals "`vals'`val'"
        {c )-}
        {c )-}
      - else {c -(}
      - tempvar select counter
      - bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
      = bysort __000003 method : gen byte __000004 = (_n == 1) * __000003
      - generate `counter' = sum(`select') * (`select' == 1)
      = generate __000005 = sum(__000004) * (__000004 == 1)
      - sort `counter'
      = sort __000005
      - qui count if `counter' == 0
      = qui count if __000005 == 0
      - local j = 1 + r(N)
      - local nvals = _N
      - if "`clean'" != "" {c -(}
      = if "" != "" {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals "`vals'`=`varlist'[`i']'`sep'"
        {c )-}
        else local vals "`vals'`=`varlist'[`i']'"
        {c )-}
        {c )-}
      - else {c -(}
      - forval i = `j' / `nvals' {c -(}
      = forval i = 1535 / 1536 {c -(}
      - if `i' < `nvals' {c -(}
      = if 1535 < 1536 {c -(}
      - local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
      = local vals `"`"g2"' "'
      - {c )-}
      - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
      = else local vals `"`"g2"' `"g2"'"'
      - {c )-}
      - if `i' < `nvals' {c -(}
      = if 1536 < 1536 {c -(}
        local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
        {c )-}
      - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
      = else local vals `"`"g2"' `"peto"'"'
      - {c )-}
      - {c )-}
      - {c )-}
      - di as txt `"`vals'"'
      = di as txt `"`"g2"' `"peto"'"'
      - return local levels `"`vals'"'
      = return local levels `"`"g2"' `"peto"'"'
      - if "`local'" != "" {c -(}
      = if "levels" != "" {c -(}
      - c_local `local' `"`vals'"'
      = c_local levels `"`"g2"' `"peto"'"'
      - {c )-}
      {hline 79} end levels {hline}
    - tokenize `"`levels'"'
    = tokenize `"`"g2"' `"peto"'"'
    - forvalues e = 1/`nmethodlabels' {c -(}
    = forvalues e = 1/2 {c -(}
    - local methlabel`e' = "``e''"
    = local methlabel1 = "g2"
    - if `e'==1 local valmethodnumwithlabel `methlabel`e''
    = if 1==1 local valmethodnumwithlabel g2
    - else if `e'>=2 local valmethodnumwithlabel `valmethodnumwithlabel' `methlabel`e''
    = else if 1>=2 local valmethodnumwithlabel g2 g2
    - {c )-}
    - local methlabel`e' = "``e''"
    = local methlabel2 = "peto"
    - if `e'==1 local valmethodnumwithlabel `methlabel`e''
    = if 2==1 local valmethodnumwithlabel peto
    - else if `e'>=2 local valmethodnumwithlabel `valmethodnumwithlabel' `methlabel`e''
    = else if 2>=2 local valmethodnumwithlabel g2 peto
    - {c )-}
    - {c )-}
    - qui siman reshape, longwide
      {hline 78} begin siman {hline}
      - version 13
      - syntax [anything] [if] [in], [which *]
      - if "`anything'"=="cms" local anything comparemethodsscatter
      = if "reshape"=="cms" local anything comparemethodsscatter
      - foreach thing in `_dta[siman_allthings]' {c -(}
      = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 {c -(}
      - local `thing' : char _dta[siman_`thing']
      = local allthings : char _dta[siman_allthings]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local rep : char _dta[siman_rep]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgm : char _dta[siman_dgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local target : char _dta[siman_target]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local method : char _dta[siman_method]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estimate : char _dta[siman_estimate]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local se : char _dta[siman_se]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local df : char _dta[siman_df]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ci : char _dta[siman_ci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local p : char _dta[siman_p]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local true : char _dta[siman_true]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local order : char _dta[siman_order]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local lci : char _dta[siman_lci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local uci : char _dta[siman_uci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifsetup : char _dta[siman_ifsetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local insetup : char _dta[siman_insetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local format : char _dta[siman_format]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetformat : char _dta[siman_targetformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodformat : char _dta[siman_methodformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nformat : char _dta[siman_nformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntarget : char _dta[siman_ntarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ndgm : char _dta[siman_ndgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nmethod : char _dta[siman_nmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numtarget : char _dta[siman_numtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valtarget : char _dta[siman_valtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nummethod : char _dta[siman_nummethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valmethod : char _dta[siman_valmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntrue : char _dta[siman_ntrue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruevalue : char _dta[siman_ntruevalue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmvar : char _dta[siman_dgmvar]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numdgm : char _dta[siman_numdgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmcreated : char _dta[siman_dgmcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetlabels : char _dta[siman_targetlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodcreated : char _dta[siman_methodcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local descriptiontype : char _dta[siman_descriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local cidescriptiontype : char _dta[siman_cidescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truedescriptiontype : char _dta[siman_truedescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estvars : char _dta[siman_estvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sevars : char _dta[siman_sevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dfvars : char _dta[siman_dfvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local civars : char _dta[siman_civars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local pvars : char _dta[siman_pvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truevars : char _dta[siman_truevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simansetuprun : char _dta[siman_simansetuprun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m1 : char _dta[siman_m1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m2 : char _dta[siman_m2]
      - {c )-}
      - local subcmds0 setup
      - local subcmds1 describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop
      - local subcmds2
      - local subcmds `subcmds0' `subcmds1' `subcmds'
      = local subcmds setup describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop 
      - if mi("`anything'") {c -(}
      = if mi("reshape") {c -(}
        di as error "Syntax: siman <subcommand>"
        exit 198
        {c )-}
      - if "`anything'"=="which" {c -(}
      = if "reshape"=="which" {c -(}
        which siman
        foreach subcmd of local subcmds {c -(}
        cap noi which siman_`subcmd'
        {c )-}
        exit
        {c )-}
      - gettoken subcmd rest : anything
      - if length("`subcmd'")>=3 {c -(}
      = if length("reshape")>=3 {c -(}
      - foreach thing in `subcmds' {c -(}
      = foreach thing in setup describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop {c -(}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("setup","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("describe","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("analyse","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("analyze","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("table","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("reshape","reshape")==1 {c -(}
      - local subcmd `thing'
      = local subcmd reshape
      - local knowncmd 1
      - {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("lollyplot","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("zipplot","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("comparemethodsscatter","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("blandaltman","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("swarm","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("scatter","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("nestloop","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - {c )-}
      - if "`subcmd'" == "analyze" local subcmd "analyse"
      = if "reshape" == "analyze" local subcmd "analyse"
      - cap which siman_`subcmd'
      = cap which siman_reshape
      - if _rc {c -(}
        di as error "`subcmd' is not a valid siman subcommand"
        if length("`subcmd'")<3 di as error "Minimum abbreviation length is 3"
        exit 198
        {c )-}
      - local type0 : list subcmd in subcmds0
      - if `type0' & !mi("`allthings'") {c -(}
      = if 0 & !mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2") {c -(}
        di as error "Data are already in siman format"
        exit 459
        {c )-}
      - local type1 : list subcmd in subcmds1
      - if `type1' & mi("`allthings'") {c -(}
      = if 1 & mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2") {c -(}
        di as error "Data are not in siman format: use siman setup"
        exit 459
        {c )-}
      - if mi(`"`options'"') siman_`subcmd' `rest' `if' `in'
      = if mi(`"longwide"') siman_reshape   
      - else siman_`subcmd' `rest' `if' `in', `options'
      = else siman_reshape   , longwide
      {hline 80} end siman {hline}
    - foreach thing in `_dta[siman_allthings]' {c -(}
    = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 {c -(}
    - local `thing' : char _dta[siman_`thing']
    = local allthings : char _dta[siman_allthings]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local rep : char _dta[siman_rep]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgm : char _dta[siman_dgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local target : char _dta[siman_target]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local method : char _dta[siman_method]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local estimate : char _dta[siman_estimate]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local se : char _dta[siman_se]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local df : char _dta[siman_df]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ci : char _dta[siman_ci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local p : char _dta[siman_p]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local true : char _dta[siman_true]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local order : char _dta[siman_order]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local lci : char _dta[siman_lci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local uci : char _dta[siman_uci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ifsetup : char _dta[siman_ifsetup]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local insetup : char _dta[siman_insetup]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local format : char _dta[siman_format]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local targetformat : char _dta[siman_targetformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local methodformat : char _dta[siman_methodformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nformat : char _dta[siman_nformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntarget : char _dta[siman_ntarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ndgm : char _dta[siman_ndgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nmethod : char _dta[siman_nmethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local numtarget : char _dta[siman_numtarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local valtarget : char _dta[siman_valtarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nummethod : char _dta[siman_nummethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local valmethod : char _dta[siman_valmethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntrue : char _dta[siman_ntrue]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntruevalue : char _dta[siman_ntruevalue]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgmvar : char _dta[siman_dgmvar]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local numdgm : char _dta[siman_numdgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgmcreated : char _dta[siman_dgmcreated]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local targetlabels : char _dta[siman_targetlabels]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local methodcreated : char _dta[siman_methodcreated]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local descriptiontype : char _dta[siman_descriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local cidescriptiontype : char _dta[siman_cidescriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local truedescriptiontype : char _dta[siman_truedescriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local estvars : char _dta[siman_estvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local sevars : char _dta[siman_sevars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dfvars : char _dta[siman_dfvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local civars : char _dta[siman_civars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local pvars : char _dta[siman_pvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local truevars : char _dta[siman_truevars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local simansetuprun : char _dta[siman_simansetuprun]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local m1 : char _dta[siman_m1]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local m2 : char _dta[siman_m2]
    - {c )-}
    - foreach u of var * {c -(}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("v1",strlen("v1"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("theta",strlen("theta"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("rho",strlen("rho"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("pc",strlen("pc"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("k",strlen("k"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("expg2",strlen("expg2"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("var2g2",strlen("var2g2"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("exppeto",strlen("exppeto"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("var2peto",strlen("var2peto"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("__000000",strlen("__000000"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("__000001",strlen("__000001"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
    = if substr("exp",strlen("exp"),1)=="_" local estimate = substr("exp", 1, index("exp","_") - 1)
    - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
    = if substr("var2",strlen("var2"),1)=="_" local se = substr("var2", 1, index("var2","_") - 1)
    - if "`subgraphoptions'" == "" {c -(}
    = if "xtit("testaxis")" == "" {c -(}
      local subgraphoptions aspect(1) graphregion(margin(zero)) plotregion(margin(zero)) xtit("") legend(off)
      {c )-}
    - di as text "Working....."
Working.....
    - if `ifdgm' == 1 {c -(}
    = if 0 == 1 {c -(}
      qui drop `dgmtodrop'
      local dgm = "`dgmleft'"
      local dgmvalues = `dgmfiltervalues'
      local numberdgms = 1
      {c )-}
    - if !mi("`methlist'") {c -(}
    = if !mi("") {c -(}
      local numbermethod = `methodcount'
      local methodvalues `methlist'
      {c )-}
    - else local numbermethod = `nummethod'
    = else local numbermethod = 2
    - if mi("`methlist'") | (!mi("`methlist'") & `methodstringindi'==1) local forcommand = "forvalues j = 1/`numbermethod'"
    = if mi("") | (!mi("") & 1==1) local forcommand = "forvalues j = 1/2"
    - else local forcommand = "foreach j in `methodvalues'"
    = else local forcommand = "foreach j in g2 peto"
    - if "`by'"=="" local by ""
    = if ""=="" local by ""
    - else if "`by'"=="`target'" local by by(`target', note("") legend(off))
    = else if ""=="" local by by(, note("") legend(off))
    - else if !mi("`by'") & "`by'"!="`target'" {c -(}
    = else if !mi("") & ""!="" {c -(}
      di as error "Can not have `by' as a 'by' option"
      exit 498
      {c )-}
    - local c 1
    - `forcommand' {c -(}
    = forvalues j = 1/2 {c -(}
    - if `methodstringindi'==0 & `methodlabels' == 0 {c -(}
    = if 1==0 & 0 == 0 {c -(}
      label var `estimate'`j' "`estimate', `mlabel`j''"
      label var `se'`j' "`se', `mlabel`j''"
      local mlabel`c' Method: `j'
      {c )-}
    - else if `methodstringindi'==0 & `methodlabels' == 1 {c -(}
    = else if 1==0 & 0 == 1 {c -(}
      local k : word `j' of `methodvalues'
      label var `estimate'`j' "`estimate', Method_`k'"
      label var `se'`j' "`se', Method_`k'"
      local mlabel`c' Method: `k'
      {c )-}
    - else if `methodstringindi'==1 {c -(}
    = else if 1==1 {c -(}
    - label var `estimate'``j'' "`estimate', Method: ``j''"
    = label var expg2 "exp, Method: g2"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("var", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 16, missing: _label var expg2 "exp, Method: g2"
      - {c )-}
      {hline 80} end label {hline}
    - label var `se'``j'' "`se', Method: ``j''"
    = label var var2g2 "var2, Method: g2"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("var", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 16, missing: _label var var2g2 "var2, Method: g2"
      - {c )-}
      {hline 80} end label {hline}
    - local mlabel`c' Method: ``j''
    = local mlabel1 Method: g2
    - {c )-}
    - if `j'==1 {c -(}
    = if 1==1 {c -(}
    - local pt1 = 0.7
    - local pt2 = 0
    - {c )-}
    - else if `j'==2 {c -(}
    = else if 1==2 {c -(}
      local pt1 = 0.5
      local pt2 = -0.5
      {c )-}
    - else if `j'>2 {c -(}
    = else if 1>2 {c -(}
      local pt1 = 0
      local pt2 = -0.5
      {c )-}
    - `dicmd' twoway scatteri 0 0 (0) "`mlabel`j''" .5 `pt1' (0) "" -.5 `pt2' (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off) `nodraw' mlab(black) `subgraphoptions' nodraw name(`mlabelname`c'', replace)
    =  twoway scatteri 0 0 (0) "Method: g2" .5 .7 (0) "" -.5 0 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_g2, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway scatteri 0 0 (0) "Method: g2" .5 .7 (0) "" -.5 0 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_g2, replace)
      {hline 79} end twoway {hline}
    - local c = `c' + 1
    = local c = 1 + 1
    - {c )-}
    - if `methodstringindi'==0 & `methodlabels' == 0 {c -(}
    = if 1==0 & 0 == 0 {c -(}
      label var `estimate'`j' "`estimate', `mlabel`j''"
      label var `se'`j' "`se', `mlabel`j''"
      local mlabel`c' Method: `j'
      {c )-}
    - else if `methodstringindi'==0 & `methodlabels' == 1 {c -(}
    = else if 1==0 & 0 == 1 {c -(}
      local k : word `j' of `methodvalues'
      label var `estimate'`j' "`estimate', Method_`k'"
      label var `se'`j' "`se', Method_`k'"
      local mlabel`c' Method: `k'
      {c )-}
    - else if `methodstringindi'==1 {c -(}
    = else if 1==1 {c -(}
    - label var `estimate'``j'' "`estimate', Method: ``j''"
    = label var exppeto "exp, Method: peto"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("var", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 16, missing: _label var exppeto "exp, Method: peto"
      - {c )-}
      {hline 80} end label {hline}
    - label var `se'``j'' "`se', Method: ``j''"
    = label var var2peto "var2, Method: peto"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("var", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 16, missing: _label var var2peto "var2, Method: peto"
      - {c )-}
      {hline 80} end label {hline}
    - local mlabel`c' Method: ``j''
    = local mlabel2 Method: peto
    - {c )-}
    - if `j'==1 {c -(}
    = if 2==1 {c -(}
      local pt1 = 0.7
      local pt2 = 0
      {c )-}
    - else if `j'==2 {c -(}
    = else if 2==2 {c -(}
    - local pt1 = 0.5
    - local pt2 = -0.5
    - {c )-}
    - else if `j'>2 {c -(}
    = else if 2>2 {c -(}
      local pt1 = 0
      local pt2 = -0.5
      {c )-}
    - `dicmd' twoway scatteri 0 0 (0) "`mlabel`j''" .5 `pt1' (0) "" -.5 `pt2' (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off) `nodraw' mlab(black) `subgraphoptions' nodraw name(`mlabelname`c'', replace)
    =  twoway scatteri 0 0 (0) "Method: peto" .5 .5 (0) "" -.5 -.5 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_peto, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway scatteri 0 0 (0) "Method: peto" .5 .5 (0) "" -.5 -.5 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_peto, replace)
      {hline 79} end twoway {hline}
    - local c = `c' + 1
    = local c = 2 + 1
    - {c )-}
    - qui tokenize `methodvalues'
    = qui tokenize g2 peto
    - forvalues m = 1/`numbermethod' {c -(}
    = forvalues m = 1/2 {c -(}
    - if `methodstringindi'==0 & mi("`methlist'") {c -(}
    = if 1==0 & mi("") {c -(}
      qui summarize `estimate'`m'
      local minest`m' = `r(min)'
      local maxest`m' = `r(max)'
      qui summarize `se'`m'
      local minse`m' = `r(min)'
      local maxse`m' = `r(max)'
      {c )-}
    - else {c -(}
    - qui summarize `estimate'``m''
    = qui summarize expg2
    - local minest`m' = `r(min)'
    = local minest1 = .4498777091503143
    - local maxest`m' = `r(max)'
    = local maxest1 = 1.095583438873291
    - qui summarize `se'``m''
    = qui summarize var2g2
    - local minse`m' = `r(min)'
    = local minse1 = .0024609714746475
    - local maxse`m' = `r(max)'
    = local maxse1 = .9734957218170166
    - {c )-}
    - if `m'>1 {c -(}
    = if 1>1 {c -(}
      local n = `m' - 1
      if `minest`n'' < `minest`m'' local minest = `minest`n''
      else local minest = `minest`m''
      if `minse`n'' < `minse`m'' local minse = `minse`n''
      else local minse = `minse`m''
      if `maxest`n'' > `maxest`m'' local maxest = `maxest`n''
      else local maxest = `maxest`m''
      if `maxse`n'' > `maxse`m'' local maxse = `maxse`n''
      else local maxse = `maxse`m''
      {c )-}
    - {c )-}
    - if `methodstringindi'==0 & mi("`methlist'") {c -(}
    = if 1==0 & mi("") {c -(}
      qui summarize `estimate'`m'
      local minest`m' = `r(min)'
      local maxest`m' = `r(max)'
      qui summarize `se'`m'
      local minse`m' = `r(min)'
      local maxse`m' = `r(max)'
      {c )-}
    - else {c -(}
    - qui summarize `estimate'``m''
    = qui summarize exppeto
    - local minest`m' = `r(min)'
    = local minest2 = .2799641191959381
    - local maxest`m' = `r(max)'
    = local maxest2 = 1.009488821029663
    - qui summarize `se'``m''
    = qui summarize var2peto
    - local minse`m' = `r(min)'
    = local minse2 = .0011168431956321
    - local maxse`m' = `r(max)'
    = local maxse2 = .0873664394021034
    - {c )-}
    - if `m'>1 {c -(}
    = if 2>1 {c -(}
    - local n = `m' - 1
    = local n = 2 - 1
    - if `minest`n'' < `minest`m'' local minest = `minest`n''
    = if .4498777091503143 < .2799641191959381 local minest = .4498777091503143
    - else local minest = `minest`m''
    = else local minest = .2799641191959381
    - if `minse`n'' < `minse`m'' local minse = `minse`n''
    = if .0024609714746475 < .0011168431956321 local minse = .0024609714746475
    - else local minse = `minse`m''
    = else local minse = .0011168431956321
    - if `maxest`n'' > `maxest`m'' local maxest = `maxest`n''
    = if 1.095583438873291 > 1.009488821029663 local maxest = 1.095583438873291
    - else local maxest = `maxest`m''
    = else local maxest = 1.009488821029663
    - if `maxse`n'' > `maxse`m'' local maxse = `maxse`n''
    = if .9734957218170166 > .0873664394021034 local maxse = .9734957218170166
    - else local maxse = `maxse`m''
    = else local maxse = .0873664394021034
    - {c )-}
    - {c )-}
    - local track 1
    - foreach j in `methodvalues' {c -(}
    = foreach j in g2 peto {c -(}
    - foreach option in `estimate' `se' {c -(}
    = foreach option in exp var2 {c -(}
    - local `option'`j' = "`option'`j'"
    = local expg2 = "expg2"
    - if `track'==1 local `option'list ``option'`j''
    = if 1==1 local explist expg2
    - else if `track'>=2 local `option'list ``option'list' ``option'`j''
    = else if 1>=2 local explist expg2 expg2
    - {c )-}
    - local `option'`j' = "`option'`j'"
    = local var2g2 = "var2g2"
    - if `track'==1 local `option'list ``option'`j''
    = if 1==1 local var2list var2g2
    - else if `track'>=2 local `option'list ``option'list' ``option'`j''
    = else if 1>=2 local var2list var2g2 var2g2
    - {c )-}
    - local track = `track' + 1
    = local track = 1 + 1
    - {c )-}
    - foreach option in `estimate' `se' {c -(}
    = foreach option in exp var2 {c -(}
    - local `option'`j' = "`option'`j'"
    = local exppeto = "exppeto"
    - if `track'==1 local `option'list ``option'`j''
    = if 2==1 local explist exppeto
    - else if `track'>=2 local `option'list ``option'list' ``option'`j''
    = else if 2>=2 local explist expg2 exppeto
    - {c )-}
    - local `option'`j' = "`option'`j'"
    = local var2peto = "var2peto"
    - if `track'==1 local `option'list ``option'`j''
    = if 2==1 local var2list var2peto
    - else if `track'>=2 local `option'list ``option'list' ``option'`j''
    = else if 2>=2 local var2list var2g2 var2peto
    - {c )-}
    - local track = `track' + 1
    = local track = 2 + 1
    - {c )-}
    - if ("`anything'"=="" | "`anything'"=="`estimate'") local varlist ``estimate'list'
    = if (""=="" | ""=="exp") local varlist expg2 exppeto
    - else if ("`anything'"=="`se'") local varlist ``se'list'
    = else if (""=="var2") local varlist var2g2 var2peto
    - local countanything: word count `anything'
    = local countanything: word count 
    - if (`countanything'==1 | `countanything'==0) local half half
    = if (0==1 | 0==0) local half half
    - local name = "simancms"
    - if !mi(`"`options'"') {c -(}
    = if !mi(`"title("testtitle") name("cms_test5", replace)"') {c -(}
    - tempvar _namestring
    - qui gen `_namestring' = `"`options'"'
    = qui gen __000002 = `"title("testtitle") name("cms_test5", replace)"'
    - qui split `_namestring', parse(`"name"')
    = qui split __000002, parse(`"name"')
      {hline 78} begin split {hline}
      - version 8
      - syntax varname(str) [if] [in] [, Generate(str) noTrim Parse(str asis) DESTRING force float Ignore(string asis) percent Limit(numlist int >0 max=1) ]
      - local verpre : display "version " %4.1f _caller() ":"
      - if "`destring'"=="" {c -(}
      = if ""=="" {c -(}
      - foreach option in force float ignore percent {c -(}
      - if `"``option''"'!="" {c -(}
      = if `""'!="" {c -(}
        display as error "may not specify `option' without specifying destring"
        exit 198
        {c )-}
      - {c )-}
      - if `"``option''"'!="" {c -(}
      = if `""'!="" {c -(}
        display as error "may not specify `option' without specifying destring"
        exit 198
        {c )-}
      - {c )-}
      - if `"``option''"'!="" {c -(}
      = if `""'!="" {c -(}
        display as error "may not specify `option' without specifying destring"
        exit 198
        {c )-}
      - {c )-}
      - if `"``option''"'!="" {c -(}
      = if `""'!="" {c -(}
        display as error "may not specify `option' without specifying destring"
        exit 198
        {c )-}
      - {c )-}
      - {c )-}
      - else {c -(}
        if `"`ignore'"'!="" {c -(}
        if _caller() >= 14 {c -(}
        if ustrfindfirst(`"`ignore'"',",") & !ustrfindfirst(`"`ignore'"',`"""') {c -(}
        display as error `"ignore string must be enclosed with quotes to ignore commas or use options"'
        exit 198
        {c )-}
        {c )-}
        `verpre' _parse_ignore `ignore'
        {c )-}
        {c )-}
      - marksample touse, strok
      - qui count if `touse'
      = qui count if __000003
      - if r(N) == 0 {c -(}
        error 2000
        {c )-}
      - if `"`parse'"' == `""' | `"`parse'"' == `""""' {c -(}
      = if `"`"name"'"' == `""' | `"`"name"'"' == `""""' {c -(}
        if "`trim'" != "" {c -(}
        di as err "parsing on spaces incompatible with notrim"
        exit 198
        {c )-}
        local parse `"" ""'
        local trm "trim"
        {c )-}
      - if `"`parse'"' == `""' | `"`parse'"' == `""""' {c -(}
      = if `"`"name"'"' == `""' | `"`"name"'"' == `""""' {c -(}
        local parse `"" ""'
        local trm "trim"
        {c )-}
      - local nparse : word count `parse'
      = local nparse : word count `"name"'
      - tokenize `"`parse'"'
      = tokenize `"`"name"'"'
      - if `"`generate'"' != "" {c -(}
      = if `""' != "" {c -(}
        confirm name `generate'
        if `: word count `generate'' > 1 {c -(}
        di as err "invalid stub `generate'"
        exit 198
        {c )-}
        {c )-}
      - qui {c -(}
      - tempvar vw tp mp pl
      - gen int `tp' = 0
      = gen int __000005 = 0
      - gen int `mp' = 0
      = gen int __000006 = 0
      - gen int `pl' = 0
      = gen int __000007 = 0
      - gen str1 `vw' = ""
      = gen str1 __000004 = ""
      - if "`trim'" == "" {c -(}
      = if "" == "" {c -(}
      - replace `vw' = trim(`varlist') if `touse'
      = replace __000004 = trim(__000002) if __000003
      - {c )-}
      - else {c -(}
        replace `vw' = `varlist' if `touse'
        {c )-}
      - {c )-}
      - if "`generate'" == "" {c -(}
      = if "" == "" {c -(}
      - local generate "`varlist'"
      = local generate "__000002"
      - {c )-}
      - local j = 0
      - local go = 1
      - if "`limit'" == "" {c -(}
      = if "" == "" {c -(}
      - local limit .
      - {c )-}
      - qui while `go' & `j' < `limit' {c -(}
      = qui while 1 & 0 < . {c -(}
      - replace `mp' = .
      = replace __000006 = .
      - replace `pl' = 0
      = replace __000007 = 0
      - forval i = 1 / `nparse' {c -(}
      = forval i = 1 / 1 {c -(}
      - replace `tp' = index(`vw', `"``i''"')
      = replace __000005 = index(__000004, `"name"')
      - replace `mp' = min(`tp', `mp') if `tp'
      = replace __000006 = min(__000005, __000006) if __000005
      - replace `pl' = length(`"``i''"') if `mp' == `tp'
      = replace __000007 = length(`"name"') if __000006 == __000005
      - {c )-}
      - local ++j
      - tempvar part`j'
      = tempvar part1
      - gen str1 `part`j'' = ""
      = gen str1 __000008 = ""
      - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
      = replace __000008 = substr(__000004, 1, __000006-1) if __000006 < .
      - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
      = replace __000004 = (substr(__000004, __000006+__000007, .)) if __000006 < .
      - replace `part`j'' = `vw' if `mp' >= .
      = replace __000008 = __000004 if __000006 >= .
      - replace `vw' = "" if `mp' >= .
      = replace __000004 = "" if __000006 >= .
      - local newvars "`newvars'`generate'`j' "
      = local newvars "__0000021 "
      - capture assert `vw' == ""
      = capture assert __000004 == ""
      - local go = _rc
      - {c )-}
      - qui while `go' & `j' < `limit' {c -(}
      = qui while 9 & 1 < . {c -(}
      - replace `mp' = .
      = replace __000006 = .
      - replace `pl' = 0
      = replace __000007 = 0
      - forval i = 1 / `nparse' {c -(}
      = forval i = 1 / 1 {c -(}
      - replace `tp' = index(`vw', `"``i''"')
      = replace __000005 = index(__000004, `"name"')
      - replace `mp' = min(`tp', `mp') if `tp'
      = replace __000006 = min(__000005, __000006) if __000005
      - replace `pl' = length(`"``i''"') if `mp' == `tp'
      = replace __000007 = length(`"name"') if __000006 == __000005
      - {c )-}
      - local ++j
      - tempvar part`j'
      = tempvar part2
      - gen str1 `part`j'' = ""
      = gen str1 __000009 = ""
      - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
      = replace __000009 = substr(__000004, 1, __000006-1) if __000006 < .
      - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
      = replace __000004 = (substr(__000004, __000006+__000007, .)) if __000006 < .
      - replace `part`j'' = `vw' if `mp' >= .
      = replace __000009 = __000004 if __000006 >= .
      - replace `vw' = "" if `mp' >= .
      = replace __000004 = "" if __000006 >= .
      - local newvars "`newvars'`generate'`j' "
      = local newvars "__0000021 __0000022 "
      - capture assert `vw' == ""
      = capture assert __000004 == ""
      - local go = _rc
      - {c )-}
      - qui while `go' & `j' < `limit' {c -(}
      = qui while 0 & 2 < . {c -(}
        replace `mp' = .
        replace `pl' = 0
        forval i = 1 / `nparse' {c -(}
        replace `tp' = index(`vw', `"``i''"')
        replace `mp' = min(`tp', `mp') if `tp'
        replace `pl' = length(`"``i''"') if `mp' == `tp'
        {c )-}
        local ++j
        tempvar part`j'
        gen str1 `part`j'' = ""
        replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
        replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
        replace `part`j'' = `vw' if `mp' >= .
        replace `vw' = "" if `mp' >= .
        local newvars "`newvars'`generate'`j' "
        capture assert `vw' == ""
        local go = _rc
        {c )-}
      - capture confirm new var `newvars'
      = capture confirm new var __0000021 __0000022 
      - if _rc {c -(}
        di as err "cannot generate new variables using stub `generate'"
        exit _rc
        {c )-}
      - qui forval i = 1 / `j' {c -(}
      = qui forval i = 1 / 2 {c -(}
      - gen str1 `generate'`i' = ""
      = gen str1 __0000021 = ""
      - replace `generate'`i' = `part`i''
      = replace __0000021 = __000008
      - {c )-}
      - gen str1 `generate'`i' = ""
      = gen str1 __0000022 = ""
      - replace `generate'`i' = `part`i''
      = replace __0000022 = __000009
      - {c )-}
      - return local varlist "`newvars'"
      = return local varlist "__0000021 __0000022 "
      - return local nvars "`j'"
      = return local nvars "2"
      - local s = cond(`j' > 1, "s", "")
      = local s = cond(2 > 1, "s", "")
      - if "`destring'" != "" {c -(}
      = if "" != "" {c -(}
        di as res "variable`s' born as string: "
        {c )-}
      - else di as res "variable`s' created as string: "
      = else di as res "variables created as string: "
      - ds `newvars'
      = ds __0000021 __0000022 
      - if "`destring'" != "" {c -(}
      = if "" != "" {c -(}
        if `"`ignore'"' != "" {c -(}
        local ignore `"ignore(`ignore')"'
        {c )-}
        `verpre' destring `newvars', replace `force' `float' `ignore' `percent'
        {c )-}
      {hline 80} end split {hline}
    - local options = `_namestring'1
    = local options = __0000021
    - cap confirm var `_namestring'2
    = cap confirm var __0000022
    - if !_rc {c -(}
    - local namestring = `_namestring'2
    = local namestring = __0000022
    - local name = `namestring'
    = local name = ("cms_test5", replace)
    - {c )-}
    - {c )-}
    - if "`dgm'"=="" local dgmvalues=1
    = if "theta rho pc k"=="" local dgmvalues=1
    - if `numberdgms'==1 {c -(}
    = if 4==1 {c -(}
      foreach m in `dgmvalues' {c -(}
      if !mi("`debug'") di as text "Loop for numberdgms = 1: m = `m'"
      if "`valtarget'"!= "N/A" {c -(}
      qui levelsof `target', local(targetlevels)
      local foreachtarget "`targetlevels'"
      {c )-}
      else local foreachtarget 1
      foreach t in `foreachtarget' {c -(}
      cap confirm numeric variable `target'
      if _rc local iftarget `"& `target' == "`t'""'
      else local iftarget `"& `target' == `t'"'
      if "`valtarget'"== "N/A" local iftarget
      local frtheta `minest' `maxest'
      local frse `minse' `maxse'
      if `methodstringindi'==0 {c -(}
      if mi("`methlist'") {c -(}
      if `methodlabels'!= 1 local methodvalues `valmethod'
      else local methodvalues `valmethodnumwithlabel'
      {c )-}
      local maxmethodvalues : word `numbermethod' of `methodvalues'
      local maxmethodvaluesplus1 = substr("`methodvalues'", -`numbermethod', .)
      local maxmethodvaluesminus1 = substr("`methodvalues'", 1 ,`numbermethod')
      local counter = 1
      local counterplus1 = 2
      foreach j in `maxmethodvaluesminus1' {c -(}
      foreach k in `maxmethodvaluesplus1' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'`j' `estimate'`k' if `dgm'==`m' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'`j'`k'dgm`m'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'`j' `se'`k' if `dgm'==`m' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'`j'`k'dgm`m'tar`t', replace)
      local graphtheta`counter'`counterplus1'`m'`t' `estimate'`j'`k'dgm`m'tar`t'
      local graphse`counter'`counterplus1'`m'`t' `se'`j'`k'dgm`m'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
      else if `methodstringindi'==1 | !mi("`methlist'") {c -(}
      local counter = 1
      local counterplus1 = 2
      local maxmethodvaluesminus1 = `numbermethod' - 1
      forvalues j = 1/`maxmethodvaluesminus1' {c -(}
      forvalues k = 2/`numbermethod' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'``j'' `estimate'``k'' if `dgm'==`m' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'``j''``k''dgm`m'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'``j'' `se'``k'' if `dgm'==`m'`iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'``j''``k''dgm`m'tar`t', replace)
      local graphtheta`counter'`counterplus1'`m'`t' `estimate'``j''``k''dgm`m'tar`t'
      local graphse`counter'`counterplus1'`m'`t' `se'``j''``k''dgm`m'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
      if `targetlabels' == 1 {c -(}
      local tlab: word `t' of `valtarget'
      local targetlab ", `target': `tlab'"
      {c )-}
      else {c -(}
      local tlab `t'
      local targetlab ", `target': `tlab'"
      {c )-}
      if "`valtarget'"== "N/A" local targetlab
      if `numbermethod'==2 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`m'`t'' `graphse12`m'`t'' `mlabelname2' , title("") note("Graphs for `dgm': ``dgm'dlabel`m'' `targetlab'") cols(2) xsize(4) name(`name'_dgm`m'`tlab', replace) `options'
      {c )-}
      else if `numbermethod'==3 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`m'`t'' `graphtheta13`m'`t'' `graphse12`m'`t'' `mlabelname2' `graphtheta23`m'`t'' `graphse13`m'`t'' `graphse23`m'`t'' `mlabelname3' , title("") note("Graphs for `dgm': ``dgm'dlabel`m'' `targetlab'") cols(3) xsize(4) name(`name'_dgm`m'`tlab', replace) `options'
      {c )-}
      else if `numbermethod'>3 {c -(}
      if mi("`anything'") local anything = "est"
      `dicmd' graph matrix `varlist' if `dgm'==`m' `iftarget', `half' `by' title("") note("") name(`name'_`anything'`j'`k'dgm`m'`tlab', replace) `options'
      {c )-}
      {c )-}
      {c )-}
      {c )-}
    - else if `numberdgms' != 1 {c -(}
    = else if 4 != 1 {c -(}
    - foreach dgmvar in `dgmvalues' {c -(}
    = foreach dgmvar in theta rho pc k {c -(}
    - if !mi("`debug'") di as text "Loop for numberdgms > 1: m = `m'"
    = if !mi("") di as text "Loop for numberdgms > 1: m = "
    - local dgmlabels = 0
    - qui tab `dgmvar'
    = qui tab theta
    - local ndgmvar = `r(r)'
    = local ndgmvar = 4
    - cap qui labelsof `dgmvar'
    = cap qui labelsof theta
      {hline 75} begin labelsof {hline}
      - version 8
      - syntax name [, Label ]
      - if "`label'"=="" {c -(}
      = if ""=="" {c -(}
      - local labdef: value label `namelist'
      = local labdef: value label theta
      - if `"`labdef'"'=="" {c -(}
      = if `"theta_new"'=="" {c -(}
        exit
        {c )-}
      - {c )-}
      - else local labdef "`namelist'"
      = else local labdef "theta"
      - tempfile fn
      - qui label save `labdef' using `"`fn'"'
      = qui label save theta_new using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_1080_000004.tmp"'
      - tempname fh
      - file open `fh' using `"`fn'"', read
      = file open __000003 using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_1080_000004.tmp"', read
      - file read `fh' line
      = file read __000003 line
      - local values
      - local labels
      - local space
      - if "`label'"=="" di as txt _n "`namelist' ({c -(}res{c )-}`labdef'{c -(}txt{c )-}):" _n
      = if ""=="" di as txt _n "theta ({c -(}res{c )-}theta_new{c -(}txt{c )-}):" _n
      - else di as txt _n "`labdef':"
      = else di as txt _n "theta_new:"
      - while r(eof)==0 {c -(}
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken label line : line, parse(", ") match(paren)
      - local values "`values'`space'`value'"
      = local values "1"
      - local labels `"`labels'`space'`"`label'"'"'
      = local labels `"`"0.5"'"'
      - di as res %12s "`value'" " " `"`label'"'
      = di as res %12s "1" " " `"0.5"'
      - file read `fh' line
      = file read __000003 line
      - local space " "
      - {c )-}
      - while r(eof)==0 {c -(}
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken label line : line, parse(", ") match(paren)
      - local values "`values'`space'`value'"
      = local values "1 2"
      - local labels `"`labels'`space'`"`label'"'"'
      = local labels `"`"0.5"' `"0.67"'"'
      - di as res %12s "`value'" " " `"`label'"'
      = di as res %12s "2" " " `"0.67"'
      - file read `fh' line
      = file read __000003 line
      - local space " "
      - {c )-}
      - while r(eof)==0 {c -(}
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken label line : line, parse(", ") match(paren)
      - local values "`values'`space'`value'"
      = local values "1 2 3"
      - local labels `"`labels'`space'`"`label'"'"'
      = local labels `"`"0.5"' `"0.67"' `"0.75"'"'
      - di as res %12s "`value'" " " `"`label'"'
      = di as res %12s "3" " " `"0.75"'
      - file read `fh' line
      = file read __000003 line
      - local space " "
      - {c )-}
      - while r(eof)==0 {c -(}
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken label line : line, parse(", ") match(paren)
      - local values "`values'`space'`value'"
      = local values "1 2 3 4"
      - local labels `"`labels'`space'`"`label'"'"'
      = local labels `"`"0.5"' `"0.67"' `"0.75"' `"1"'"'
      - di as res %12s "`value'" " " `"`label'"'
      = di as res %12s "4" " " `"1"'
      - file read `fh' line
      = file read __000003 line
      - local space " "
      - {c )-}
      - while r(eof)==0 {c -(}
        gettoken value line : line
        gettoken value line : line
        gettoken value line : line
        gettoken value line : line
        gettoken label line : line, parse(", ") match(paren)
        local values "`values'`space'`value'"
        local labels `"`labels'`space'`"`label'"'"'
        di as res %12s "`value'" " " `"`label'"'
        file read `fh' line
        local space " "
        {c )-}
      - file close `fh'
      = file close __000003
      - ret local labels `"`labels'"'
      = ret local labels `"`"0.5"' `"0.67"' `"0.75"' `"1"'"'
      - ret local values "`values'"
      = ret local values "1 2 3 4"
      - ret local name "`labdef'"
      = ret local name "theta_new"
      {hline 77} end labelsof {hline}
    - cap qui ret list
    - if `"`r(labels)'"'!="" {c -(}
    = if `"`"0.5"' `"0.67"' `"0.75"' `"1"'"'!="" {c -(}
    - local 0 = `"`r(labels)'"'
    = local 0 = `"`"0.5"' `"0.67"' `"0.75"' `"1"'"'
    - forvalues i = 1/`ndgmvar' {c -(}
    = forvalues i = 1/4 {c -(}
    - gettoken `dgmvar'dlabel`i' 0 : 0, parse(": ")
    = gettoken thetadlabel1 0 : 0, parse(": ")
    - local dgmlabels = 1
    - {c )-}
    - gettoken `dgmvar'dlabel`i' 0 : 0, parse(": ")
    = gettoken thetadlabel2 0 : 0, parse(": ")
    - local dgmlabels = 1
    - {c )-}
    - gettoken `dgmvar'dlabel`i' 0 : 0, parse(": ")
    = gettoken thetadlabel3 0 : 0, parse(": ")
    - local dgmlabels = 1
    - {c )-}
    - gettoken `dgmvar'dlabel`i' 0 : 0, parse(": ")
    = gettoken thetadlabel4 0 : 0, parse(": ")
    - local dgmlabels = 1
    - {c )-}
    - {c )-}
    - else {c -(}
      local dgmlabels = 0
      qui levels `dgmvar', local(levels)
      local loop = 1
      foreach l of local levels {c -(}
      local `dgmvar'dlabel`loop' `l'
      local loop = `loop' + 1
      {c )-}
      {c )-}
    - tempvar _group
    - qui egen `_group' = group(`dgmvalues'), label lname(grouplevels)
    = qui egen __000003 = group(theta rho pc k), label lname(grouplevels)
      {hline 79} begin egen {hline}
      - version 6, missing
      - local cvers = _caller()
      - gettoken type 0 : 0, parse(" =(")
      - gettoken name 0 : 0, parse(" =(")
      - if `"`name'"'=="=" {c -(}
      = if `"="'=="=" {c -(}
      - local name `"`type'"'
      = local name `"__000003"'
      - local type : set type
      - {c )-}
      - else {c -(}
        gettoken eqsign 0 : 0, parse(" =(")
        if `"`eqsign'"' != "=" {c -(}
        error 198
        {c )-}
        {c )-}
      - confirm new variable `name'
      = confirm new variable __000003
      - gettoken fcn 0 : 0, parse(" =(")
      - gettoken args 0 : 0, parse(" ,") match(par)
      - if "`c(adoarchive)'"=="1" {c -(}
      = if ""=="1" {c -(}
        capture qui _stfilearchive find _g`fcn'.ado
        if _rc {c -(}
        di as err in smcl "unknown {c -(}bf:egen{c )-} function {c -(}bf:`fcn'(){c )-}"
        exit 133
        {c )-}
        {c )-}
      - else {c -(}
      - capture qui findfile _g`fcn'.ado
      = capture qui findfile _ggroup.ado
      - if (`"`r(fn)'"' == "") {c -(}
      = if (`"C:\Program Files\Stata16\ado\base/_/_ggroup.ado"' == "") {c -(}
        di as err in smcl "unknown {c -(}bf:egen{c )-} function {c -(}bf:`fcn'(){c )-}"
        exit 133
        {c )-}
      - {c )-}
      - if `"`par'"' != "(" {c -(}
      = if `"("' != "(" {c -(}
        exit 198
        {c )-}
      - if `"`args'"' == "_all" | `"`args'"' == "*" {c -(}
      = if `"theta rho pc k"' == "_all" | `"theta rho pc k"' == "*" {c -(}
        version 7.0, missing
        unab args : _all
        local args : subinstr local args "`_sortindex'" "", all word
        version 6.0, missing
        {c )-}
      - syntax [if] [in] [, *]
      - if _by() {c -(}
        local byopt "by(`_byvars')"
        local cma ","
        {c )-}
      - else if `"`options'"' != "" {c -(}
      = else if `"label lname(grouplevels)"' != "" {c -(}
      - local cma ","
      - {c )-}
      - tempvar dummy
      - global EGEN_Varname `name'
      = global EGEN_Varname __000003
      - version 7.0, missing
      - global EGEN_SVarname `_sortindex'
      = global EGEN_SVarname __000004
      - version 6.0, missing
      - if inlist("`fcn'","mode","concat","group") {c -(}
      = if inlist("group","mode","concat","group") {c -(}
      - local vv : display "version " string(`cvers') ", missing:"
      = local vv : display "version " string(16) ", missing:"
      - {c )-}
      - capture noisily `vv' _g`fcn' `type' `dummy' = (`args') `if' `in' `cma' `byopt' `options'
      = capture noisily version 16, missing: _ggroup float __000005 = (theta rho pc k)   ,  label lname(grouplevels)
      - version 7.0, missing
      - local message $EGEN_Message
      = local message 1
      - version 6.0, missing
      - global EGEN_SVarname
      - global EGEN_Varname
      - global EGEN_Message
      - if _rc {c -(} exit _rc {c )-}
      - if "`message'" == "" {c -(}
      = if "1" == "" {c -(}
        quietly count if missing(`dummy')
        if r(N) {c -(}
        local s = cond(r(N)>1,"s","")
        local N : di %11.0fc r(N)
        local N `N'
        di in bl "(`N' missing value`s' generated)"
        {c )-}
        {c )-}
      - rename `dummy' `name'
      = rename __000005 __000003
      {hline 81} end egen {hline}
    - local group "`_group'"
    = local group "__000003"
    - qui tab `group'
    = qui tab __000003
    - local groupnum = `r(r)'
    = local groupnum = 192
    - if "`numtarget'" == "N/A" local numtargetcheck = 1
    = if "N/A" == "N/A" local numtargetcheck = 1
    - else local numtargetcheck = `numtarget'
    = else local numtargetcheck = N/A
    - if "`groupnum'" == "" local totalgroupnum = 1
    = if "192" == "" local totalgroupnum = 1
    - else local totalgroupnum = `groupnum'
    = else local totalgroupnum = 192
    - local graphnumcheck = `totalgroupnum' * `numtargetcheck'
    = local graphnumcheck = 192 * 1
    - if `graphnumcheck' > 15 {c -(}
    = if 192 > 15 {c -(}
    - di as error "{c -(}it: WARNING: `graphnumcheck' graphs will be created, consider using 'if' option as detailed in {c -(}help              siman_comparemethodsscatter:siman comparemethodsscatter{c )-}{c )-}"
    = di as error "{c -(}it: WARNING: 192 graphs will be created, consider using 'if' option as detailed in {c -(}help              siman_comparemethodsscatter:siman comparemethodsscatter{c )-}{c )-}"
{err}{it: WARNING: 192 graphs will be created, consider using 'if' option as detailed in {help              siman_comparemethodsscatter:siman comparemethodsscatter}}
    {txt}- {c )-}
    - forvalues d = 1/`groupnum' {c -(}
    = forvalues d = 1/192 {c -(}
    - local dgmfilter = "`group'==`d'"
    = local dgmfilter = "__000003==1"
    - local dgmlevels`d' : label grouplevels `d'
    = local dgmlevels1 : label grouplevels 1
    - if "`valtarget'"!= "N/A" {c -(}
    = if "N/A"!= "N/A" {c -(}
      qui levelsof `target', local(targetlevels)
      local foreachtarget "`targetlevels'"
      {c )-}
    - else local foreachtarget 1
    - foreach t in `foreachtarget' {c -(}
    = foreach t in 1 {c -(}
    - cap confirm numeric variable `target'
    = cap confirm numeric variable 
    - if _rc local iftarget `"& `target' == "`t'""'
    = if _rc local iftarget `"&  == "1""'
    - else local iftarget `"& `target' == `t'"'
    = else local iftarget `"&  == 1"'
    - if "`valtarget'"== "N/A" local iftarget
    = if "N/A"== "N/A" local iftarget
    - local frtheta `minest' `maxest'
    = local frtheta .2799641191959381 1.095583438873291
    - local frse `minse' `maxse'
    = local frse .0011168431956321 .9734957218170166
    - if `methodstringindi'==0 {c -(}
    = if 1==0 {c -(}
      if mi("`methlist'") {c -(}
      if `methodlabels'!= 1 local methodvalues `valmethod'
      else local methodvalues `valmethodnumwithlabel'
      {c )-}
      local maxmethodvalues : word `numbermethod' of `methodvalues'
      local maxmethodvaluesplus1 = substr("`methodvalues'", -`numbermethod', .)
      local maxmethodvaluesminus1 = substr("`methodvalues'", 1 ,`numbermethod')
      local counter = 1
      local counterplus1 = 2
      foreach j in `maxmethodvaluesminus1' {c -(}
      foreach k in `maxmethodvaluesplus1' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'`j' `estimate'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`estimate'`j'`k'`d'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'`j' `se'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`se'`j'`k'`d'tar`t', replace)
      local graphtheta`counter'`counterplus1'`d'`t' `estimate'`j'`k'`d'tar`t'
      local graphse`counter'`counterplus1'`d'`t' `se'`j'`k'`d'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
    - else if `methodstringindi'==1 | !mi("`methlist'") {c -(}
    = else if 1==1 | !mi("") {c -(}
    - local counter = 1
    - local counterplus1 = 2
    - local maxmethodvaluesminus1 = `numbermethod' - 1
    = local maxmethodvaluesminus1 = 2 - 1
    - forvalues j = 1/`maxmethodvaluesminus1' {c -(}
    = forvalues j = 1/1 {c -(}
    - forvalues k = 2/`numbermethod' {c -(}
    = forvalues k = 2/2 {c -(}
    - if "`j'" != "`k'" {c -(}
    = if "1" != "2" {c -(}
    - `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'``j'' `estimate'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'``j''``k''`d'tar`t', replace)
    =  twoway (function x, range(.2799641191959381 1.095583438873291) lcolor(gs10)) (scatter expg2 exppeto if __000003==1 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(expg2peto1tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.2799641191959381 1.095583438873291) lcolor(gs10)) (scatter expg2 exppeto if __000003==1 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(expg2peto1tar1, replace)
      {hline 79} end twoway {hline}
    - `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'``j'' `se'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'``j''``k''`d'tar`t', replace)
    =  twoway (function x, range(.0011168431956321 .9734957218170166) lcolor(gs10)) (scatter var2g2 var2peto if __000003==1 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(var2g2peto1tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.0011168431956321 .9734957218170166) lcolor(gs10)) (scatter var2g2 var2peto if __000003==1 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(var2g2peto1tar1, replace)
      {hline 79} end twoway {hline}
    - local graphtheta`counter'`counterplus1'`d'`t' `estimate'``j''``k''`d'tar`t'
    = local graphtheta1211 expg2peto1tar1
    - local graphse`counter'`counterplus1'`d'`t' `se'``j''``k''`d'tar`t'
    = local graphse1211 var2g2peto1tar1
    - local counterplus1 = `counterplus1' + 1
    = local counterplus1 = 2 + 1
    - if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
    = if 3 > 2 local counterplus1 = 2
    - {c )-}
    - {c )-}
    - local counter = `counter' + 1
    = local counter = 1 + 1
    - {c )-}
    - {c )-}
    - if `targetlabels' == 1 {c -(}
    = if 0 == 1 {c -(}
      local tlab: word `t' of `valtarget'
      local targetlab ", `target': `tlab'"
      {c )-}
    - else {c -(}
    - local tlab `t'
    = local tlab 1
    - local targetlab ", `target': `tlab'"
    = local targetlab ", : 1"
    - {c )-}
    - if "`valtarget'"== "N/A" local targetlab
    = if "N/A"== "N/A" local targetlab
    - if `numbermethod'==2 {c -(}
    = if 2==2 {c -(}
    - `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphse12`d'`t'' `mlabelname2',
    =  graph combine Method_g2 expg2peto1tar1 var2g2peto1tar1 Method_peto,
      {hline 78} begin graph {hline}
      - if d(`=c(born_date)') < d(23Jul2004) {c -(}
      = if d(14 Feb 2022) < d(23Jul2004) {c -(}
        di as err "your Stata executable is out of date"
        di as err "    type -update executable- at the Stata prompt"
        exit 498
        {c )-}
      - local ver = string(_caller())
      - if (_caller() < 8.2) version 8
      - else if (_caller() < 10 ) version 8.2
      - else version 10
      - gdi record = yes
      - gdi maybedraw = yes
      - if "`._Gr_Global.isa'" == "" {c -(}
      = if "class" == "" {c -(}
        ._Gr_Global = .global_g.new
        {c )-}
      - ._Gr_Global.callerver = "`ver'"
      = ._Gr_Global.callerver = "16"
      - capture noisily Graph `0'
      = capture noisily Graph combine Method_g2 expg2peto1tar1 var2g2peto1tar1 Method_peto,
{res}      {txt}- local rc = _rc
      - gdi record = yes
      - gdi maybedraw = yes
      - gdi end
      - exit `rc'
      = exit 0
      {hline 80} end graph {hline}
    - title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(2) xsize(4) name(`name'_`d'`tlab', replace) `options'
    = title("") note("Graphs for theta rho pc k: 0.5 no 10% 5 ") cols(2) xsize(4) name(cms_test5_11, replace) title("testtitle") 
{err}command {bf}title{sf} is unrecognized
     {txt} {c )-}
      else if `numbermethod'==3 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphtheta13`d'`t'' `graphse12`d'`t'' `mlabelname2' `graphtheta23`d'`t'' `graphse13`d'`t'' `graphse23`d'`t'' `mlabelname3', title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(3) xsize(4) name(`name'_`d'`tlab', replace) `options'
      {c )-}
      else if `numbermethod'>3 {c -(}
      if mi("`anything'") local anything = "est"
      `dicmd' graph matrix `varlist' if `group'==`d' `iftarget', `half' `by' title("") note("") name(`name'_`anything'`j'`k'`d'`tlab', replace) `options'
      {c )-}
      {c )-}
      {c )-}
      {c )-}
      {c )-}
{search r(199), local:r(199);}

end of do-file

{search r(199), local:r(199);}

{com}. do "C:\Users\rmjlem1\AppData\Local\Temp\STD1080_000000.tmp"
{txt}
{com}. 
. * now try with missing target
. use data/simlongESTPM_longE_longM.dta, clear
{txt}
{com}. drop estimand
{txt}
{com}. bysort rep dgm method: gen repitionindi=_n
{txt}
{com}. drop if repitionindi == 2
{txt}(4,000 observations deleted)

{com}. drop repitionindi
{txt}
{com}. siman setup, rep(rep) dgm(dgm) method(method) estimate(est) se(se) true(true)

{txt}{col 20}SUMMARY OF DATA
_____________________________________________________

The siman format is:{res}{col 35}format 1: long-long
{txt}The format for targets is:{res}{col 35}long
{txt}The format for methods is:{res}{col 35}long
{txt}The number of targets is:{res}{col 35}N/A
{txt}The target values are:{res}{col 35}N/A

{txt}The number of methods is:{res}{col 35}2
{txt}The method values are:{res}{col 35}1 2

Data generating mechanism (dgm)
{txt}The total number of dgms is: {res}{col 35}2
{txt}The dgm variables (# levels): {res}{col 35}dgm (2) 

Estimates are contained in the dataset

{txt}The estimates variable is:{res}{col 35}est
{txt}The se variable is:{res}{col 35}se
{txt}The df variable is:{res}{col 35}N/A
{txt}The ci variables are:{res}{col 35}N/A
{txt}The p variable is:{res}{col 35}N/A
{txt}The true variable is:{res}{col 35}true
{txt}_____________________________________________________

{com}. 
{txt}end of do-file

{com}. do "C:\Users\rmjlem1\AppData\Local\Temp\STD1080_000000.tmp"
{txt}
{com}. siman comparemethodsscatter, title("testtitle") subgr(xtit("testaxis")) name("cms_test5", replace) 
    {txt}- set tracedepth 1
    - if mi("`estimate'") | mi("`se'") {c -(}
    = if mi("est") | mi("se") {c -(}
      di as error "siman scattercomparemethods requires estimate and se to plot"
      exit 498
      {c )-}
    - if "`method'"=="" {c -(}
    = if "method"=="" {c -(}
      di as error "The variable 'method' is missing so siman comparemethodsscatter can not be created.  Please create a variable in your dataset called method containing the method value(s)."
      exit 498
      {c )-}
    - if `nummethod' < 2 {c -(}
    = if 2 < 2 {c -(}
      di as error "There are not enough methods to compare, siman comparemethods scatter requires at least 2 methods."
      exit 498
      {c )-}
    - if !mi("`debug'") local dicmd dicmd
    = if !mi("") local dicmd dicmd
    - tempfile origdata
    - qui save `origdata'
    = qui save C:\Users\rmjlem1\AppData\Local\Temp\ST_1080_000001.tmp
    - if `nformat'!=1 {c -(}
    = if 1!=1 {c -(}
      qui siman reshape, longlong
      foreach thing in `_dta[siman_allthings]' {c -(}
      local `thing' : char _dta[siman_`thing']
      {c )-}
      {c )-}
    - local methodstringindi = 0
    - capture confirm string variable `method'
    = capture confirm string variable method
    - if !_rc local methodstringindi = 1
    - if mi("`methlist'") & `nummethod' > 5 {c -(}
    = if mi("") & 2 > 5 {c -(}
      di as text "Warning: With `nummethod' methods compared, this plot may be too dense to read.  If you find it unreadable, you can choose the methods to compare using -siman comparemethodsscatter-, methlist(a b) where a and b are the methods you are particularly interested to compare."
      {c )-}
    - cap confirm variable `dgm'
    = cap confirm variable dgm
    - if !_rc {c -(}
    - local numberdgms: word count `dgm'
    = local numberdgms: word count dgm
    - if `numberdgms'==1 {c -(}
    = if 1==1 {c -(}
    - local dgmlabels 0
    - qui tab `dgm'
    = qui tab dgm
    - cap qui labelsof `dgm'
    = cap qui labelsof dgm
      {hline 75} begin labelsof {hline}
      - version 8
      - syntax name [, Label ]
      - if "`label'"=="" {c -(}
      = if ""=="" {c -(}
      - local labdef: value label `namelist'
      = local labdef: value label dgm
      - if `"`labdef'"'=="" {c -(}
      = if `""'=="" {c -(}
      - exit
      {hline 77} end labelsof {hline}
    - cap qui ret list
    - if `"`r(labels)'"' != "" {c -(}
    = if `""' != "" {c -(}
      local 0 = `"`r(labels)'"'
      forvalues i = 1/`ndgm' {c -(}
      gettoken `dgm'dlabel`i' 0 : 0, parse(": ")
      local dgmlabels = 1
      {c )-}
      {c )-}
    - else {c -(}
    - local dgmlabels 0
    - qui levels `dgm', local(levels)
    = qui levels dgm, local(levels)
      {hline 77} begin levels {hline}
      - version 8
      - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
      - if "`separate'" == "" local sep " "
      = if "" == "" local sep " "
      - else local sep "`separate'"
      = else local sep ""
      - if "`missing'" != "" local novarlist "novarlist"
      = if "" != "" local novarlist "novarlist"
      - marksample touse, strok `novarlist'
      = marksample touse, strok 
      - capture confirm numeric variable `varlist'
      = capture confirm numeric variable dgm
      - local isnum = _rc != 7
      - if `isnum' {c -(}
      = if 1 {c -(}
      - capture assert `varlist' == int(`varlist') if `touse'
      = capture assert dgm == int(dgm) if __000001
      - if _rc {c -(}
        di as err "`varlist' contains non-integer values"
        exit 459
        {c )-}
      - tempname Vals
      - qui tab `varlist' if `touse', `missing' matrow(`Vals')
      = qui tab dgm if __000001,  matrow(__000002)
      - local nvals = r(r)
      - forval i = 1 / `nvals' {c -(}
      = forval i = 1 / 2 {c -(}
      - local val = `Vals'[`i',1]
      = local val = __000002[1,1]
      - if `i' < `nvals' local vals "`vals'`val'`sep'"
      = if 1 < 2 local vals "1 "
      - else local vals "`vals'`val'"
      = else local vals "1 1"
      - {c )-}
      - local val = `Vals'[`i',1]
      = local val = __000002[2,1]
      - if `i' < `nvals' local vals "`vals'`val'`sep'"
      = if 2 < 2 local vals "1 2 "
      - else local vals "`vals'`val'"
      = else local vals "1 2"
      - {c )-}
      - {c )-}
      - else {c -(}
        tempvar select counter
        bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
        generate `counter' = sum(`select') * (`select' == 1)
        sort `counter'
        qui count if `counter' == 0
        local j = 1 + r(N)
        local nvals = _N
        if "`clean'" != "" {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals "`vals'`=`varlist'[`i']'`sep'"
        {c )-}
        else local vals "`vals'`=`varlist'[`i']'"
        {c )-}
        {c )-}
        else {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
        {c )-}
        else local vals `"`vals'`"`=`varlist'[`i']'"'"'
        {c )-}
        {c )-}
        {c )-}
      - di as txt `"`vals'"'
      = di as txt `"1 2"'
      - return local levels `"`vals'"'
      = return local levels `"1 2"'
      - if "`local'" != "" {c -(}
      = if "levels" != "" {c -(}
      - c_local `local' `"`vals'"'
      = c_local levels `"1 2"'
      - {c )-}
      {hline 79} end levels {hline}
    - local loop 1
    - foreach l of local levels {c -(}
    - local `dgm'dlabel`loop' `l'
    = local dgmdlabel1 1
    - local loop = `loop' + 1
    = local loop = 1 + 1
    - {c )-}
    - local `dgm'dlabel`loop' `l'
    = local dgmdlabel2 2
    - local loop = `loop' + 1
    = local loop = 2 + 1
    - {c )-}
    - {c )-}
    - {c )-}
    - {c )-}
    - if ("`if'"=="" & "`ifsetup'"!="") local ifscatterc = `"`ifsetup'"'
    = if (""=="" & ""!="") local ifscatterc = `""'
    - else local ifscatterc = `"`if'"'
    = else local ifscatterc = `""'
    - local ifdgm = 0
    - if !mi("`ifscatterc'") {c -(}
    = if !mi("") {c -(}
      cap confirm variable `dgm'
      if !_rc {c -(}
      local numberdgms: word count `dgm'
      if `numberdgms'!=1 {c -(}
      gettoken dgmfilter ifscatterc: ifscatterc, parse("==")
      local ifremove "if "
      local dgmleft: list dgmfilter - ifremove
      local dgmorig = "`dgm'"
      local dgmtodrop: list dgm - dgmleft
      local ifdgm = 1
      gettoken dgmleft2 ifscatterc: ifscatterc, parse("==")
      local dgmfiltervalues = `ifscatterc'
      local ifscatterc = `"`if'"'
      {c )-}
      {c )-}
      {c )-}
    - tempvar touseif
    - qui generate `touseif' = 0
    = qui generate __000000 = 0
    - qui replace `touseif' = 1 `ifscatterc'
    = qui replace __000000 = 1 
    - preserve
    - sort `dgm' `target' `method' `touseif'
    = sort dgm  method __000000
    - capture by `dgm' `target' `method': assert `touseif'==`touseif'[_n-1] if _n>1
    = capture by dgm  method: assert __000000==__000000[_n-1] if _n>1
    - if _rc == 9 {c -(}
      di as error "The 'if' option can not be applied to 'rep' in siman comparemethodsscatter (cms).  If you have not specified an 'if' in siman cms, but you specified one in siman setup, then that 'if' will have been applied to siman cms."
      exit 498
      {c )-}
    - restore
    - qui keep if `touseif'
    = qui keep if __000000
    - if ("`in'"=="" & "`insetup'"!="") local inscatterc = `"`insetup'"'
    = if (""=="" & ""!="") local inscatterc = `""'
    - else local inscatterc = `"`in'"'
    = else local inscatterc = `""'
    - tempvar tousein
    - qui generate `tousein' = 0
    = qui generate __000001 = 0
    - qui replace `tousein' = 1 `inscatterc'
    = qui replace __000001 = 1 
    - qui keep if `tousein'
    = qui keep if __000001
    - cap confirm variable `dgm'
    = cap confirm variable dgm
    - if !_rc {c -(}
    - local numberdgms: word count `dgm'
    = local numberdgms: word count dgm
    - if `numberdgms'==1 {c -(}
    = if 1==1 {c -(}
    - qui tab `dgm'
    = qui tab dgm
    - local ndgmlabels = `r(r)'
    = local ndgmlabels = 2
    - qui levels `dgm', local(levels)
    = qui levels dgm, local(levels)
      {hline 77} begin levels {hline}
      - version 8
      - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
      - if "`separate'" == "" local sep " "
      = if "" == "" local sep " "
      - else local sep "`separate'"
      = else local sep ""
      - if "`missing'" != "" local novarlist "novarlist"
      = if "" != "" local novarlist "novarlist"
      - marksample touse, strok `novarlist'
      = marksample touse, strok 
      - capture confirm numeric variable `varlist'
      = capture confirm numeric variable dgm
      - local isnum = _rc != 7
      - if `isnum' {c -(}
      = if 1 {c -(}
      - capture assert `varlist' == int(`varlist') if `touse'
      = capture assert dgm == int(dgm) if __000003
      - if _rc {c -(}
        di as err "`varlist' contains non-integer values"
        exit 459
        {c )-}
      - tempname Vals
      - qui tab `varlist' if `touse', `missing' matrow(`Vals')
      = qui tab dgm if __000003,  matrow(__000004)
      - local nvals = r(r)
      - forval i = 1 / `nvals' {c -(}
      = forval i = 1 / 2 {c -(}
      - local val = `Vals'[`i',1]
      = local val = __000004[1,1]
      - if `i' < `nvals' local vals "`vals'`val'`sep'"
      = if 1 < 2 local vals "1 "
      - else local vals "`vals'`val'"
      = else local vals "1 1"
      - {c )-}
      - local val = `Vals'[`i',1]
      = local val = __000004[2,1]
      - if `i' < `nvals' local vals "`vals'`val'`sep'"
      = if 2 < 2 local vals "1 2 "
      - else local vals "`vals'`val'"
      = else local vals "1 2"
      - {c )-}
      - {c )-}
      - else {c -(}
        tempvar select counter
        bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
        generate `counter' = sum(`select') * (`select' == 1)
        sort `counter'
        qui count if `counter' == 0
        local j = 1 + r(N)
        local nvals = _N
        if "`clean'" != "" {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals "`vals'`=`varlist'[`i']'`sep'"
        {c )-}
        else local vals "`vals'`=`varlist'[`i']'"
        {c )-}
        {c )-}
        else {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
        {c )-}
        else local vals `"`vals'`"`=`varlist'[`i']'"'"'
        {c )-}
        {c )-}
        {c )-}
      - di as txt `"`vals'"'
      = di as txt `"1 2"'
      - return local levels `"`vals'"'
      = return local levels `"1 2"'
      - if "`local'" != "" {c -(}
      = if "levels" != "" {c -(}
      - c_local `local' `"`vals'"'
      = c_local levels `"1 2"'
      - {c )-}
      {hline 79} end levels {hline}
    - tokenize `"`levels'"'
    = tokenize `"1 2"'
    - forvalues i=1/`ndgmlabels' {c -(}
    = forvalues i=1/2 {c -(}
    - local d`i' = "``i''"
    = local d1 = "1"
    - if `i'==1 local dgmvalues `d`i''
    = if 1==1 local dgmvalues 1
    - else local dgmvalues `dgmvalues' `d`i''
    = else local dgmvalues 1 1
    - {c )-}
    - local d`i' = "``i''"
    = local d2 = "2"
    - if `i'==1 local dgmvalues `d`i''
    = if 2==1 local dgmvalues 2
    - else local dgmvalues `dgmvalues' `d`i''
    = else local dgmvalues 1 2
    - {c )-}
    - {c )-}
    - if `numberdgms'!=1 {c -(}
    = if 1!=1 {c -(}
      local ndgmlabels = `numberdgms'
      local dgmvalues `dgm'
      {c )-}
    - {c )-}
    - preserve
    - qui drop if `rep'<0
    = qui drop if rep<0
    - if !mi("`methlist'") {c -(}
    = if !mi("") {c -(}
      local methodvalues = "`methlist'"
      local methodcount: word count `methlist'
      tempvar tousemethod
      qui generate `tousemethod' = 0
      tokenize `methlist'
      foreach j in `methodvalues' {c -(}
      if `methodstringindi' == 0 qui replace `tousemethod' = 1 if `method' == `j'
      else if `methodstringindi' == 1 qui replace `tousemethod' = 1 if `method' == "`j'"
      {c )-}
      qui keep if `tousemethod' == 1
      qui drop `tousemethod'
      {c )-}
    - qui capture which labelsof
    - if _rc {c -(}
      di as smcl "labelsof package required, please install by clicking: " `"{c -(}stata ssc install labelsof{c )-}"'
      exit
      {c )-}
    - qui labelsof `method'
    = qui labelsof method
      {hline 75} begin labelsof {hline}
      - version 8
      - syntax name [, Label ]
      - if "`label'"=="" {c -(}
      = if ""=="" {c -(}
      - local labdef: value label `namelist'
      = local labdef: value label method
      - if `"`labdef'"'=="" {c -(}
      = if `""'=="" {c -(}
      - exit
      {hline 77} end labelsof {hline}
    - qui ret list
    - local methodlabels 0
    - if `"`r(labels)'"'!="" {c -(}
    = if `""'!="" {c -(}
      local 0 = `"`r(labels)'"'
      forvalues i = 1/`nummethod' {c -(}
      gettoken mlabel`i' 0 : 0, parse(": ")
      local methodvalues `methodvalues' `mlabel`i''
      local methodlabel`i': word `i' of `methodvalues'
      local mlabelname`i' Method_`methodlabel`i''
      local methodlabels 1
      {c )-}
      {c )-}
    - else {c -(}
    - qui levels `method', local(levels)
    = qui levels method, local(levels)
      {hline 77} begin levels {hline}
      - version 8
      - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
      - if "`separate'" == "" local sep " "
      = if "" == "" local sep " "
      - else local sep "`separate'"
      = else local sep ""
      - if "`missing'" != "" local novarlist "novarlist"
      = if "" != "" local novarlist "novarlist"
      - marksample touse, strok `novarlist'
      = marksample touse, strok 
      - capture confirm numeric variable `varlist'
      = capture confirm numeric variable method
      - local isnum = _rc != 7
      - if `isnum' {c -(}
      = if 1 {c -(}
      - capture assert `varlist' == int(`varlist') if `touse'
      = capture assert method == int(method) if __000003
      - if _rc {c -(}
        di as err "`varlist' contains non-integer values"
        exit 459
        {c )-}
      - tempname Vals
      - qui tab `varlist' if `touse', `missing' matrow(`Vals')
      = qui tab method if __000003,  matrow(__000004)
      - local nvals = r(r)
      - forval i = 1 / `nvals' {c -(}
      = forval i = 1 / 2 {c -(}
      - local val = `Vals'[`i',1]
      = local val = __000004[1,1]
      - if `i' < `nvals' local vals "`vals'`val'`sep'"
      = if 1 < 2 local vals "1 "
      - else local vals "`vals'`val'"
      = else local vals "1 1"
      - {c )-}
      - local val = `Vals'[`i',1]
      = local val = __000004[2,1]
      - if `i' < `nvals' local vals "`vals'`val'`sep'"
      = if 2 < 2 local vals "1 2 "
      - else local vals "`vals'`val'"
      = else local vals "1 2"
      - {c )-}
      - {c )-}
      - else {c -(}
        tempvar select counter
        bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
        generate `counter' = sum(`select') * (`select' == 1)
        sort `counter'
        qui count if `counter' == 0
        local j = 1 + r(N)
        local nvals = _N
        if "`clean'" != "" {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals "`vals'`=`varlist'[`i']'`sep'"
        {c )-}
        else local vals "`vals'`=`varlist'[`i']'"
        {c )-}
        {c )-}
        else {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
        {c )-}
        else local vals `"`vals'`"`=`varlist'[`i']'"'"'
        {c )-}
        {c )-}
        {c )-}
      - di as txt `"`vals'"'
      = di as txt `"1 2"'
      - return local levels `"`vals'"'
      = return local levels `"1 2"'
      - if "`local'" != "" {c -(}
      = if "levels" != "" {c -(}
      - c_local `local' `"`vals'"'
      = c_local levels `"1 2"'
      - {c )-}
      {hline 79} end levels {hline}
    - tokenize `"`levels'"'
    = tokenize `"1 2"'
    - if `methodstringindi'==0 {c -(}
    = if 0==0 {c -(}
    - numlist "`levels'"
    = numlist "1 2"
    - forvalues i = 1/`nummethod' {c -(}
    = forvalues i = 1/2 {c -(}
    - local methodlabel`i': word `i' of `levels'
    = local methodlabel1: word 1 of 1 2
    - local mlabel`i' Method: `i'
    = local mlabel1 Method: 1
    - local mlabelname`i' Method_`methodlabel`i''
    = local mlabelname1 Method_1
    - local methodlabel`i' `i'
    = local methodlabel1 1
    - local methodvalues `methodvalues' `methodlabel`i''
    = local methodvalues  1
    - {c )-}
    - local methodlabel`i': word `i' of `levels'
    = local methodlabel2: word 2 of 1 2
    - local mlabel`i' Method: `i'
    = local mlabel2 Method: 2
    - local mlabelname`i' Method_`methodlabel`i''
    = local mlabelname2 Method_2
    - local methodlabel`i' `i'
    = local methodlabel2 2
    - local methodvalues `methodvalues' `methodlabel`i''
    = local methodvalues 1 2
    - {c )-}
    - {c )-}
    - else if `methodstringindi'==1 {c -(}
    = else if 0==1 {c -(}
      forvalues i = 1/`nummethod' {c -(}
      local methodlabel`i': word `i' of `levels'
      local mlabel`i' Method: ``i''
      local mlabelname`i' Method_`methodlabel`i''
      local methodlabel`i' ``i''
      local methodvalues `methodvalues' `methodlabel`i''
      {c )-}
      {c )-}
    - {c )-}
    - if `nmethod'!=0 {c -(}
    = if 1!=0 {c -(}
    - qui tab `method',m
    = qui tab method,m
    - local nmethodlabels = `r(r)'
    = local nmethodlabels = 2
    - qui levels `method', local(levels)
    = qui levels method, local(levels)
      {hline 77} begin levels {hline}
      - version 8
      - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
      - if "`separate'" == "" local sep " "
      = if "" == "" local sep " "
      - else local sep "`separate'"
      = else local sep ""
      - if "`missing'" != "" local novarlist "novarlist"
      = if "" != "" local novarlist "novarlist"
      - marksample touse, strok `novarlist'
      = marksample touse, strok 
      - capture confirm numeric variable `varlist'
      = capture confirm numeric variable method
      - local isnum = _rc != 7
      - if `isnum' {c -(}
      = if 1 {c -(}
      - capture assert `varlist' == int(`varlist') if `touse'
      = capture assert method == int(method) if __000003
      - if _rc {c -(}
        di as err "`varlist' contains non-integer values"
        exit 459
        {c )-}
      - tempname Vals
      - qui tab `varlist' if `touse', `missing' matrow(`Vals')
      = qui tab method if __000003,  matrow(__000004)
      - local nvals = r(r)
      - forval i = 1 / `nvals' {c -(}
      = forval i = 1 / 2 {c -(}
      - local val = `Vals'[`i',1]
      = local val = __000004[1,1]
      - if `i' < `nvals' local vals "`vals'`val'`sep'"
      = if 1 < 2 local vals "1 "
      - else local vals "`vals'`val'"
      = else local vals "1 1"
      - {c )-}
      - local val = `Vals'[`i',1]
      = local val = __000004[2,1]
      - if `i' < `nvals' local vals "`vals'`val'`sep'"
      = if 2 < 2 local vals "1 2 "
      - else local vals "`vals'`val'"
      = else local vals "1 2"
      - {c )-}
      - {c )-}
      - else {c -(}
        tempvar select counter
        bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
        generate `counter' = sum(`select') * (`select' == 1)
        sort `counter'
        qui count if `counter' == 0
        local j = 1 + r(N)
        local nvals = _N
        if "`clean'" != "" {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals "`vals'`=`varlist'[`i']'`sep'"
        {c )-}
        else local vals "`vals'`=`varlist'[`i']'"
        {c )-}
        {c )-}
        else {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
        {c )-}
        else local vals `"`vals'`"`=`varlist'[`i']'"'"'
        {c )-}
        {c )-}
        {c )-}
      - di as txt `"`vals'"'
      = di as txt `"1 2"'
      - return local levels `"`vals'"'
      = return local levels `"1 2"'
      - if "`local'" != "" {c -(}
      = if "levels" != "" {c -(}
      - c_local `local' `"`vals'"'
      = c_local levels `"1 2"'
      - {c )-}
      {hline 79} end levels {hline}
    - tokenize `"`levels'"'
    = tokenize `"1 2"'
    - forvalues e = 1/`nmethodlabels' {c -(}
    = forvalues e = 1/2 {c -(}
    - local methlabel`e' = "``e''"
    = local methlabel1 = "1"
    - if `e'==1 local valmethodnumwithlabel `methlabel`e''
    = if 1==1 local valmethodnumwithlabel 1
    - else if `e'>=2 local valmethodnumwithlabel `valmethodnumwithlabel' `methlabel`e''
    = else if 1>=2 local valmethodnumwithlabel 1 1
    - {c )-}
    - local methlabel`e' = "``e''"
    = local methlabel2 = "2"
    - if `e'==1 local valmethodnumwithlabel `methlabel`e''
    = if 2==1 local valmethodnumwithlabel 2
    - else if `e'>=2 local valmethodnumwithlabel `valmethodnumwithlabel' `methlabel`e''
    = else if 2>=2 local valmethodnumwithlabel 1 2
    - {c )-}
    - {c )-}
    - qui siman reshape, longwide
      {hline 78} begin siman {hline}
      - version 13
      - syntax [anything] [if] [in], [which *]
      - if "`anything'"=="cms" local anything comparemethodsscatter
      = if "reshape"=="cms" local anything comparemethodsscatter
      - foreach thing in `_dta[siman_allthings]' {c -(}
      = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 {c -(}
      - local `thing' : char _dta[siman_`thing']
      = local allthings : char _dta[siman_allthings]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local rep : char _dta[siman_rep]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgm : char _dta[siman_dgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local target : char _dta[siman_target]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local method : char _dta[siman_method]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estimate : char _dta[siman_estimate]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local se : char _dta[siman_se]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local df : char _dta[siman_df]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ci : char _dta[siman_ci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local p : char _dta[siman_p]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local true : char _dta[siman_true]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local order : char _dta[siman_order]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local lci : char _dta[siman_lci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local uci : char _dta[siman_uci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifsetup : char _dta[siman_ifsetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local insetup : char _dta[siman_insetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local format : char _dta[siman_format]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetformat : char _dta[siman_targetformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodformat : char _dta[siman_methodformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nformat : char _dta[siman_nformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntarget : char _dta[siman_ntarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ndgm : char _dta[siman_ndgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nmethod : char _dta[siman_nmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numtarget : char _dta[siman_numtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valtarget : char _dta[siman_valtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nummethod : char _dta[siman_nummethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valmethod : char _dta[siman_valmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntrue : char _dta[siman_ntrue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruevalue : char _dta[siman_ntruevalue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmvar : char _dta[siman_dgmvar]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numdgm : char _dta[siman_numdgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmcreated : char _dta[siman_dgmcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetlabels : char _dta[siman_targetlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodcreated : char _dta[siman_methodcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local descriptiontype : char _dta[siman_descriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local cidescriptiontype : char _dta[siman_cidescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truedescriptiontype : char _dta[siman_truedescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estvars : char _dta[siman_estvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sevars : char _dta[siman_sevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dfvars : char _dta[siman_dfvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local civars : char _dta[siman_civars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local pvars : char _dta[siman_pvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truevars : char _dta[siman_truevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simansetuprun : char _dta[siman_simansetuprun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m1 : char _dta[siman_m1]
      - {c )-}
      - local subcmds0 setup
      - local subcmds1 describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop
      - local subcmds2
      - local subcmds `subcmds0' `subcmds1' `subcmds'
      = local subcmds setup describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop 
      - if mi("`anything'") {c -(}
      = if mi("reshape") {c -(}
        di as error "Syntax: siman <subcommand>"
        exit 198
        {c )-}
      - if "`anything'"=="which" {c -(}
      = if "reshape"=="which" {c -(}
        which siman
        foreach subcmd of local subcmds {c -(}
        cap noi which siman_`subcmd'
        {c )-}
        exit
        {c )-}
      - gettoken subcmd rest : anything
      - if length("`subcmd'")>=3 {c -(}
      = if length("reshape")>=3 {c -(}
      - foreach thing in `subcmds' {c -(}
      = foreach thing in setup describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop {c -(}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("setup","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("describe","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("analyse","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("analyze","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("table","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("reshape","reshape")==1 {c -(}
      - local subcmd `thing'
      = local subcmd reshape
      - local knowncmd 1
      - {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("lollyplot","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("zipplot","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("comparemethodsscatter","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("blandaltman","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("swarm","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("scatter","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("nestloop","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - {c )-}
      - if "`subcmd'" == "analyze" local subcmd "analyse"
      = if "reshape" == "analyze" local subcmd "analyse"
      - cap which siman_`subcmd'
      = cap which siman_reshape
      - if _rc {c -(}
        di as error "`subcmd' is not a valid siman subcommand"
        if length("`subcmd'")<3 di as error "Minimum abbreviation length is 3"
        exit 198
        {c )-}
      - local type0 : list subcmd in subcmds0
      - if `type0' & !mi("`allthings'") {c -(}
      = if 0 & !mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1") {c -(}
        di as error "Data are already in siman format"
        exit 459
        {c )-}
      - local type1 : list subcmd in subcmds1
      - if `type1' & mi("`allthings'") {c -(}
      = if 1 & mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1") {c -(}
        di as error "Data are not in siman format: use siman setup"
        exit 459
        {c )-}
      - if mi(`"`options'"') siman_`subcmd' `rest' `if' `in'
      = if mi(`"longwide"') siman_reshape   
      - else siman_`subcmd' `rest' `if' `in', `options'
      = else siman_reshape   , longwide
      {hline 80} end siman {hline}
    - foreach thing in `_dta[siman_allthings]' {c -(}
    = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 {c -(}
    - local `thing' : char _dta[siman_`thing']
    = local allthings : char _dta[siman_allthings]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local rep : char _dta[siman_rep]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgm : char _dta[siman_dgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local target : char _dta[siman_target]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local method : char _dta[siman_method]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local estimate : char _dta[siman_estimate]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local se : char _dta[siman_se]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local df : char _dta[siman_df]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ci : char _dta[siman_ci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local p : char _dta[siman_p]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local true : char _dta[siman_true]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local order : char _dta[siman_order]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local lci : char _dta[siman_lci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local uci : char _dta[siman_uci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ifsetup : char _dta[siman_ifsetup]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local insetup : char _dta[siman_insetup]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local format : char _dta[siman_format]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local targetformat : char _dta[siman_targetformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local methodformat : char _dta[siman_methodformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nformat : char _dta[siman_nformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntarget : char _dta[siman_ntarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ndgm : char _dta[siman_ndgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nmethod : char _dta[siman_nmethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local numtarget : char _dta[siman_numtarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local valtarget : char _dta[siman_valtarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nummethod : char _dta[siman_nummethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local valmethod : char _dta[siman_valmethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntrue : char _dta[siman_ntrue]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntruevalue : char _dta[siman_ntruevalue]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgmvar : char _dta[siman_dgmvar]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local numdgm : char _dta[siman_numdgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgmcreated : char _dta[siman_dgmcreated]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local targetlabels : char _dta[siman_targetlabels]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local methodcreated : char _dta[siman_methodcreated]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local descriptiontype : char _dta[siman_descriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local cidescriptiontype : char _dta[siman_cidescriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local truedescriptiontype : char _dta[siman_truedescriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local estvars : char _dta[siman_estvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local sevars : char _dta[siman_sevars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dfvars : char _dta[siman_dfvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local civars : char _dta[siman_civars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local pvars : char _dta[siman_pvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local truevars : char _dta[siman_truevars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local simansetuprun : char _dta[siman_simansetuprun]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local m1 : char _dta[siman_m1]
    - {c )-}
    - foreach u of var * {c -(}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("rep",strlen("rep"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("dgm",strlen("dgm"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("est1",strlen("est1"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("se1",strlen("se1"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("est2",strlen("est2"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("se2",strlen("se2"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("true",strlen("true"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("__000000",strlen("__000000"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("__000001",strlen("__000001"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
    = if substr("est",strlen("est"),1)=="_" local estimate = substr("est", 1, index("est","_") - 1)
    - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
    = if substr("se",strlen("se"),1)=="_" local se = substr("se", 1, index("se","_") - 1)
    - if "`subgraphoptions'" == "" {c -(}
    = if "xtit("testaxis")" == "" {c -(}
      local subgraphoptions aspect(1) graphregion(margin(zero)) plotregion(margin(zero)) xtit("") legend(off)
      {c )-}
    - di as text "Working....."
Working.....
    - if `ifdgm' == 1 {c -(}
    = if 0 == 1 {c -(}
      qui drop `dgmtodrop'
      local dgm = "`dgmleft'"
      local dgmvalues = `dgmfiltervalues'
      local numberdgms = 1
      {c )-}
    - if !mi("`methlist'") {c -(}
    = if !mi("") {c -(}
      local numbermethod = `methodcount'
      local methodvalues `methlist'
      {c )-}
    - else local numbermethod = `nummethod'
    = else local numbermethod = 2
    - if mi("`methlist'") | (!mi("`methlist'") & `methodstringindi'==1) local forcommand = "forvalues j = 1/`numbermethod'"
    = if mi("") | (!mi("") & 0==1) local forcommand = "forvalues j = 1/2"
    - else local forcommand = "foreach j in `methodvalues'"
    = else local forcommand = "foreach j in 1 2"
    - if "`by'"=="" local by ""
    = if ""=="" local by ""
    - else if "`by'"=="`target'" local by by(`target', note("") legend(off))
    = else if ""=="" local by by(, note("") legend(off))
    - else if !mi("`by'") & "`by'"!="`target'" {c -(}
    = else if !mi("") & ""!="" {c -(}
      di as error "Can not have `by' as a 'by' option"
      exit 498
      {c )-}
    - local c 1
    - `forcommand' {c -(}
    = forvalues j = 1/2 {c -(}
    - if `methodstringindi'==0 & `methodlabels' == 0 {c -(}
    = if 0==0 & 0 == 0 {c -(}
    - label var `estimate'`j' "`estimate', `mlabel`j''"
    = label var est1 "est, Method: 1"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("var", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 16, missing: _label var est1 "est, Method: 1"
      - {c )-}
      {hline 80} end label {hline}
    - label var `se'`j' "`se', `mlabel`j''"
    = label var se1 "se, Method: 1"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("var", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 16, missing: _label var se1 "se, Method: 1"
      - {c )-}
      {hline 80} end label {hline}
    - local mlabel`c' Method: `j'
    = local mlabel1 Method: 1
    - {c )-}
    - else if `methodstringindi'==0 & `methodlabels' == 1 {c -(}
    = else if 0==0 & 0 == 1 {c -(}
      local k : word `j' of `methodvalues'
      label var `estimate'`j' "`estimate', Method_`k'"
      label var `se'`j' "`se', Method_`k'"
      local mlabel`c' Method: `k'
      {c )-}
    - else if `methodstringindi'==1 {c -(}
    = else if 0==1 {c -(}
      label var `estimate'``j'' "`estimate', Method: ``j''"
      label var `se'``j'' "`se', Method: ``j''"
      local mlabel`c' Method: ``j''
      {c )-}
    - if `j'==1 {c -(}
    = if 1==1 {c -(}
    - local pt1 = 0.7
    - local pt2 = 0
    - {c )-}
    - else if `j'==2 {c -(}
    = else if 1==2 {c -(}
      local pt1 = 0.5
      local pt2 = -0.5
      {c )-}
    - else if `j'>2 {c -(}
    = else if 1>2 {c -(}
      local pt1 = 0
      local pt2 = -0.5
      {c )-}
    - `dicmd' twoway scatteri 0 0 (0) "`mlabel`j''" .5 `pt1' (0) "" -.5 `pt2' (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off) `nodraw' mlab(black) `subgraphoptions' nodraw name(`mlabelname`c'', replace)
    =  twoway scatteri 0 0 (0) "Method: 1" .5 .7 (0) "" -.5 0 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway scatteri 0 0 (0) "Method: 1" .5 .7 (0) "" -.5 0 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_1, replace)
      {hline 79} end twoway {hline}
    - local c = `c' + 1
    = local c = 1 + 1
    - {c )-}
    - if `methodstringindi'==0 & `methodlabels' == 0 {c -(}
    = if 0==0 & 0 == 0 {c -(}
    - label var `estimate'`j' "`estimate', `mlabel`j''"
    = label var est2 "est, Method: 2"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("var", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 16, missing: _label var est2 "est, Method: 2"
      - {c )-}
      {hline 80} end label {hline}
    - label var `se'`j' "`se', `mlabel`j''"
    = label var se2 "se, Method: 2"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("var", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 16, missing: _label var se2 "se, Method: 2"
      - {c )-}
      {hline 80} end label {hline}
    - local mlabel`c' Method: `j'
    = local mlabel2 Method: 2
    - {c )-}
    - else if `methodstringindi'==0 & `methodlabels' == 1 {c -(}
    = else if 0==0 & 0 == 1 {c -(}
      local k : word `j' of `methodvalues'
      label var `estimate'`j' "`estimate', Method_`k'"
      label var `se'`j' "`se', Method_`k'"
      local mlabel`c' Method: `k'
      {c )-}
    - else if `methodstringindi'==1 {c -(}
    = else if 0==1 {c -(}
      label var `estimate'``j'' "`estimate', Method: ``j''"
      label var `se'``j'' "`se', Method: ``j''"
      local mlabel`c' Method: ``j''
      {c )-}
    - if `j'==1 {c -(}
    = if 2==1 {c -(}
      local pt1 = 0.7
      local pt2 = 0
      {c )-}
    - else if `j'==2 {c -(}
    = else if 2==2 {c -(}
    - local pt1 = 0.5
    - local pt2 = -0.5
    - {c )-}
    - else if `j'>2 {c -(}
    = else if 2>2 {c -(}
      local pt1 = 0
      local pt2 = -0.5
      {c )-}
    - `dicmd' twoway scatteri 0 0 (0) "`mlabel`j''" .5 `pt1' (0) "" -.5 `pt2' (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off) `nodraw' mlab(black) `subgraphoptions' nodraw name(`mlabelname`c'', replace)
    =  twoway scatteri 0 0 (0) "Method: 2" .5 .5 (0) "" -.5 -.5 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_2, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway scatteri 0 0 (0) "Method: 2" .5 .5 (0) "" -.5 -.5 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_2, replace)
      {hline 79} end twoway {hline}
    - local c = `c' + 1
    = local c = 2 + 1
    - {c )-}
    - qui tokenize `methodvalues'
    = qui tokenize 1 2
    - forvalues m = 1/`numbermethod' {c -(}
    = forvalues m = 1/2 {c -(}
    - if `methodstringindi'==0 & mi("`methlist'") {c -(}
    = if 0==0 & mi("") {c -(}
    - qui summarize `estimate'`m'
    = qui summarize est1
    - local minest`m' = `r(min)'
    = local minest1 = -.2678762674331665
    - local maxest`m' = `r(max)'
    = local maxest1 = .3012906610965729
    - qui summarize `se'`m'
    = qui summarize se1
    - local minse`m' = `r(min)'
    = local minse1 = .0658233687281609
    - local maxse`m' = `r(max)'
    = local maxse1 = .1109281778335571
    - {c )-}
    - else {c -(}
      qui summarize `estimate'``m''
      local minest`m' = `r(min)'
      local maxest`m' = `r(max)'
      qui summarize `se'``m''
      local minse`m' = `r(min)'
      local maxse`m' = `r(max)'
      {c )-}
    - if `m'>1 {c -(}
    = if 1>1 {c -(}
      local n = `m' - 1
      if `minest`n'' < `minest`m'' local minest = `minest`n''
      else local minest = `minest`m''
      if `minse`n'' < `minse`m'' local minse = `minse`n''
      else local minse = `minse`m''
      if `maxest`n'' > `maxest`m'' local maxest = `maxest`n''
      else local maxest = `maxest`m''
      if `maxse`n'' > `maxse`m'' local maxse = `maxse`n''
      else local maxse = `maxse`m''
      {c )-}
    - {c )-}
    - if `methodstringindi'==0 & mi("`methlist'") {c -(}
    = if 0==0 & mi("") {c -(}
    - qui summarize `estimate'`m'
    = qui summarize est2
    - local minest`m' = `r(min)'
    = local minest2 = -.3466155827045441
    - local maxest`m' = `r(max)'
    = local maxest2 = .4811812043190002
    - qui summarize `se'`m'
    = qui summarize se2
    - local minse`m' = `r(min)'
    = local minse2 = .0788492411375046
    - local maxse`m' = `r(max)'
    = local maxse2 = .1824655532836914
    - {c )-}
    - else {c -(}
      qui summarize `estimate'``m''
      local minest`m' = `r(min)'
      local maxest`m' = `r(max)'
      qui summarize `se'``m''
      local minse`m' = `r(min)'
      local maxse`m' = `r(max)'
      {c )-}
    - if `m'>1 {c -(}
    = if 2>1 {c -(}
    - local n = `m' - 1
    = local n = 2 - 1
    - if `minest`n'' < `minest`m'' local minest = `minest`n''
    = if -.2678762674331665 < -.3466155827045441 local minest = -.2678762674331665
    - else local minest = `minest`m''
    = else local minest = -.3466155827045441
    - if `minse`n'' < `minse`m'' local minse = `minse`n''
    = if .0658233687281609 < .0788492411375046 local minse = .0658233687281609
    - else local minse = `minse`m''
    = else local minse = .0788492411375046
    - if `maxest`n'' > `maxest`m'' local maxest = `maxest`n''
    = if .3012906610965729 > .4811812043190002 local maxest = .3012906610965729
    - else local maxest = `maxest`m''
    = else local maxest = .4811812043190002
    - if `maxse`n'' > `maxse`m'' local maxse = `maxse`n''
    = if .1109281778335571 > .1824655532836914 local maxse = .1109281778335571
    - else local maxse = `maxse`m''
    = else local maxse = .1824655532836914
    - {c )-}
    - {c )-}
    - local track 1
    - foreach j in `methodvalues' {c -(}
    = foreach j in 1 2 {c -(}
    - foreach option in `estimate' `se' {c -(}
    = foreach option in est se {c -(}
    - local `option'`j' = "`option'`j'"
    = local est1 = "est1"
    - if `track'==1 local `option'list ``option'`j''
    = if 1==1 local estlist est1
    - else if `track'>=2 local `option'list ``option'list' ``option'`j''
    = else if 1>=2 local estlist est1 est1
    - {c )-}
    - local `option'`j' = "`option'`j'"
    = local se1 = "se1"
    - if `track'==1 local `option'list ``option'`j''
    = if 1==1 local selist se1
    - else if `track'>=2 local `option'list ``option'list' ``option'`j''
    = else if 1>=2 local selist se1 se1
    - {c )-}
    - local track = `track' + 1
    = local track = 1 + 1
    - {c )-}
    - foreach option in `estimate' `se' {c -(}
    = foreach option in est se {c -(}
    - local `option'`j' = "`option'`j'"
    = local est2 = "est2"
    - if `track'==1 local `option'list ``option'`j''
    = if 2==1 local estlist est2
    - else if `track'>=2 local `option'list ``option'list' ``option'`j''
    = else if 2>=2 local estlist est1 est2
    - {c )-}
    - local `option'`j' = "`option'`j'"
    = local se2 = "se2"
    - if `track'==1 local `option'list ``option'`j''
    = if 2==1 local selist se2
    - else if `track'>=2 local `option'list ``option'list' ``option'`j''
    = else if 2>=2 local selist se1 se2
    - {c )-}
    - local track = `track' + 1
    = local track = 2 + 1
    - {c )-}
    - if ("`anything'"=="" | "`anything'"=="`estimate'") local varlist ``estimate'list'
    = if (""=="" | ""=="est") local varlist est1 est2
    - else if ("`anything'"=="`se'") local varlist ``se'list'
    = else if (""=="se") local varlist se1 se2
    - local countanything: word count `anything'
    = local countanything: word count 
    - if (`countanything'==1 | `countanything'==0) local half half
    = if (0==1 | 0==0) local half half
    - local name = "simancms"
    - if !mi(`"`options'"') {c -(}
    = if !mi(`"title("testtitle") name("cms_test5", replace)"') {c -(}
    - tempvar _namestring
    - qui gen `_namestring' = `"`options'"'
    = qui gen __000002 = `"title("testtitle") name("cms_test5", replace)"'
    - qui split `_namestring', parse(`"name"')
    = qui split __000002, parse(`"name"')
      {hline 78} begin split {hline}
      - version 8
      - syntax varname(str) [if] [in] [, Generate(str) noTrim Parse(str asis) DESTRING force float Ignore(string asis) percent Limit(numlist int >0 max=1) ]
      - local verpre : display "version " %4.1f _caller() ":"
      - if "`destring'"=="" {c -(}
      = if ""=="" {c -(}
      - foreach option in force float ignore percent {c -(}
      - if `"``option''"'!="" {c -(}
      = if `""'!="" {c -(}
        display as error "may not specify `option' without specifying destring"
        exit 198
        {c )-}
      - {c )-}
      - if `"``option''"'!="" {c -(}
      = if `""'!="" {c -(}
        display as error "may not specify `option' without specifying destring"
        exit 198
        {c )-}
      - {c )-}
      - if `"``option''"'!="" {c -(}
      = if `""'!="" {c -(}
        display as error "may not specify `option' without specifying destring"
        exit 198
        {c )-}
      - {c )-}
      - if `"``option''"'!="" {c -(}
      = if `""'!="" {c -(}
        display as error "may not specify `option' without specifying destring"
        exit 198
        {c )-}
      - {c )-}
      - {c )-}
      - else {c -(}
        if `"`ignore'"'!="" {c -(}
        if _caller() >= 14 {c -(}
        if ustrfindfirst(`"`ignore'"',",") & !ustrfindfirst(`"`ignore'"',`"""') {c -(}
        display as error `"ignore string must be enclosed with quotes to ignore commas or use options"'
        exit 198
        {c )-}
        {c )-}
        `verpre' _parse_ignore `ignore'
        {c )-}
        {c )-}
      - marksample touse, strok
      - qui count if `touse'
      = qui count if __000003
      - if r(N) == 0 {c -(}
        error 2000
        {c )-}
      - if `"`parse'"' == `""' | `"`parse'"' == `""""' {c -(}
      = if `"`"name"'"' == `""' | `"`"name"'"' == `""""' {c -(}
        if "`trim'" != "" {c -(}
        di as err "parsing on spaces incompatible with notrim"
        exit 198
        {c )-}
        local parse `"" ""'
        local trm "trim"
        {c )-}
      - if `"`parse'"' == `""' | `"`parse'"' == `""""' {c -(}
      = if `"`"name"'"' == `""' | `"`"name"'"' == `""""' {c -(}
        local parse `"" ""'
        local trm "trim"
        {c )-}
      - local nparse : word count `parse'
      = local nparse : word count `"name"'
      - tokenize `"`parse'"'
      = tokenize `"`"name"'"'
      - if `"`generate'"' != "" {c -(}
      = if `""' != "" {c -(}
        confirm name `generate'
        if `: word count `generate'' > 1 {c -(}
        di as err "invalid stub `generate'"
        exit 198
        {c )-}
        {c )-}
      - qui {c -(}
      - tempvar vw tp mp pl
      - gen int `tp' = 0
      = gen int __000005 = 0
      - gen int `mp' = 0
      = gen int __000006 = 0
      - gen int `pl' = 0
      = gen int __000007 = 0
      - gen str1 `vw' = ""
      = gen str1 __000004 = ""
      - if "`trim'" == "" {c -(}
      = if "" == "" {c -(}
      - replace `vw' = trim(`varlist') if `touse'
      = replace __000004 = trim(__000002) if __000003
      - {c )-}
      - else {c -(}
        replace `vw' = `varlist' if `touse'
        {c )-}
      - {c )-}
      - if "`generate'" == "" {c -(}
      = if "" == "" {c -(}
      - local generate "`varlist'"
      = local generate "__000002"
      - {c )-}
      - local j = 0
      - local go = 1
      - if "`limit'" == "" {c -(}
      = if "" == "" {c -(}
      - local limit .
      - {c )-}
      - qui while `go' & `j' < `limit' {c -(}
      = qui while 1 & 0 < . {c -(}
      - replace `mp' = .
      = replace __000006 = .
      - replace `pl' = 0
      = replace __000007 = 0
      - forval i = 1 / `nparse' {c -(}
      = forval i = 1 / 1 {c -(}
      - replace `tp' = index(`vw', `"``i''"')
      = replace __000005 = index(__000004, `"name"')
      - replace `mp' = min(`tp', `mp') if `tp'
      = replace __000006 = min(__000005, __000006) if __000005
      - replace `pl' = length(`"``i''"') if `mp' == `tp'
      = replace __000007 = length(`"name"') if __000006 == __000005
      - {c )-}
      - local ++j
      - tempvar part`j'
      = tempvar part1
      - gen str1 `part`j'' = ""
      = gen str1 __000008 = ""
      - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
      = replace __000008 = substr(__000004, 1, __000006-1) if __000006 < .
      - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
      = replace __000004 = (substr(__000004, __000006+__000007, .)) if __000006 < .
      - replace `part`j'' = `vw' if `mp' >= .
      = replace __000008 = __000004 if __000006 >= .
      - replace `vw' = "" if `mp' >= .
      = replace __000004 = "" if __000006 >= .
      - local newvars "`newvars'`generate'`j' "
      = local newvars "__0000021 "
      - capture assert `vw' == ""
      = capture assert __000004 == ""
      - local go = _rc
      - {c )-}
      - qui while `go' & `j' < `limit' {c -(}
      = qui while 9 & 1 < . {c -(}
      - replace `mp' = .
      = replace __000006 = .
      - replace `pl' = 0
      = replace __000007 = 0
      - forval i = 1 / `nparse' {c -(}
      = forval i = 1 / 1 {c -(}
      - replace `tp' = index(`vw', `"``i''"')
      = replace __000005 = index(__000004, `"name"')
      - replace `mp' = min(`tp', `mp') if `tp'
      = replace __000006 = min(__000005, __000006) if __000005
      - replace `pl' = length(`"``i''"') if `mp' == `tp'
      = replace __000007 = length(`"name"') if __000006 == __000005
      - {c )-}
      - local ++j
      - tempvar part`j'
      = tempvar part2
      - gen str1 `part`j'' = ""
      = gen str1 __000009 = ""
      - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
      = replace __000009 = substr(__000004, 1, __000006-1) if __000006 < .
      - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
      = replace __000004 = (substr(__000004, __000006+__000007, .)) if __000006 < .
      - replace `part`j'' = `vw' if `mp' >= .
      = replace __000009 = __000004 if __000006 >= .
      - replace `vw' = "" if `mp' >= .
      = replace __000004 = "" if __000006 >= .
      - local newvars "`newvars'`generate'`j' "
      = local newvars "__0000021 __0000022 "
      - capture assert `vw' == ""
      = capture assert __000004 == ""
      - local go = _rc
      - {c )-}
      - qui while `go' & `j' < `limit' {c -(}
      = qui while 0 & 2 < . {c -(}
        replace `mp' = .
        replace `pl' = 0
        forval i = 1 / `nparse' {c -(}
        replace `tp' = index(`vw', `"``i''"')
        replace `mp' = min(`tp', `mp') if `tp'
        replace `pl' = length(`"``i''"') if `mp' == `tp'
        {c )-}
        local ++j
        tempvar part`j'
        gen str1 `part`j'' = ""
        replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
        replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
        replace `part`j'' = `vw' if `mp' >= .
        replace `vw' = "" if `mp' >= .
        local newvars "`newvars'`generate'`j' "
        capture assert `vw' == ""
        local go = _rc
        {c )-}
      - capture confirm new var `newvars'
      = capture confirm new var __0000021 __0000022 
      - if _rc {c -(}
        di as err "cannot generate new variables using stub `generate'"
        exit _rc
        {c )-}
      - qui forval i = 1 / `j' {c -(}
      = qui forval i = 1 / 2 {c -(}
      - gen str1 `generate'`i' = ""
      = gen str1 __0000021 = ""
      - replace `generate'`i' = `part`i''
      = replace __0000021 = __000008
      - {c )-}
      - gen str1 `generate'`i' = ""
      = gen str1 __0000022 = ""
      - replace `generate'`i' = `part`i''
      = replace __0000022 = __000009
      - {c )-}
      - return local varlist "`newvars'"
      = return local varlist "__0000021 __0000022 "
      - return local nvars "`j'"
      = return local nvars "2"
      - local s = cond(`j' > 1, "s", "")
      = local s = cond(2 > 1, "s", "")
      - if "`destring'" != "" {c -(}
      = if "" != "" {c -(}
        di as res "variable`s' born as string: "
        {c )-}
      - else di as res "variable`s' created as string: "
      = else di as res "variables created as string: "
      - ds `newvars'
      = ds __0000021 __0000022 
      - if "`destring'" != "" {c -(}
      = if "" != "" {c -(}
        if `"`ignore'"' != "" {c -(}
        local ignore `"ignore(`ignore')"'
        {c )-}
        `verpre' destring `newvars', replace `force' `float' `ignore' `percent'
        {c )-}
      {hline 80} end split {hline}
    - local options = `_namestring'1
    = local options = __0000021
    - cap confirm var `_namestring'2
    = cap confirm var __0000022
    - if !_rc {c -(}
    - local namestring = `_namestring'2
    = local namestring = __0000022
    - local name = `namestring'
    = local name = ("cms_test5", replace)
    - {c )-}
    - {c )-}
    - if "`dgm'"=="" local dgmvalues=1
    = if "dgm"=="" local dgmvalues=1
    - if `numberdgms'==1 {c -(}
    = if 1==1 {c -(}
    - foreach m in `dgmvalues' {c -(}
    = foreach m in 1 2 {c -(}
    - if !mi("`debug'") di as text "Loop for numberdgms = 1: m = `m'"
    = if !mi("") di as text "Loop for numberdgms = 1: m = 1"
    - if "`valtarget'"!= "N/A" {c -(}
    = if "N/A"!= "N/A" {c -(}
      qui levelsof `target', local(targetlevels)
      local foreachtarget "`targetlevels'"
      {c )-}
    - else local foreachtarget 1
    - foreach t in `foreachtarget' {c -(}
    = foreach t in 1 {c -(}
    - cap confirm numeric variable `target'
    = cap confirm numeric variable 
    - if _rc local iftarget `"& `target' == "`t'""'
    = if _rc local iftarget `"&  == "1""'
    - else local iftarget `"& `target' == `t'"'
    = else local iftarget `"&  == 1"'
    - if "`valtarget'"== "N/A" local iftarget
    = if "N/A"== "N/A" local iftarget
    - local frtheta `minest' `maxest'
    = local frtheta -.3466155827045441 .4811812043190002
    - local frse `minse' `maxse'
    = local frse .0658233687281609 .1824655532836914
    - if `methodstringindi'==0 {c -(}
    = if 0==0 {c -(}
    - if mi("`methlist'") {c -(}
    = if mi("") {c -(}
    - if `methodlabels'!= 1 local methodvalues `valmethod'
    = if 0!= 1 local methodvalues 1 2
    - else local methodvalues `valmethodnumwithlabel'
    = else local methodvalues 1 2
    - {c )-}
    - local maxmethodvalues : word `numbermethod' of `methodvalues'
    = local maxmethodvalues : word 2 of 1 2
    - local maxmethodvaluesplus1 = substr("`methodvalues'", -`numbermethod', .)
    = local maxmethodvaluesplus1 = substr("1 2", -2, .)
    - local maxmethodvaluesminus1 = substr("`methodvalues'", 1 ,`numbermethod')
    = local maxmethodvaluesminus1 = substr("1 2", 1 ,2)
    - local counter = 1
    - local counterplus1 = 2
    - foreach j in `maxmethodvaluesminus1' {c -(}
    = foreach j in 1  {c -(}
    - foreach k in `maxmethodvaluesplus1' {c -(}
    = foreach k in  2 {c -(}
    - if "`j'" != "`k'" {c -(}
    = if "1" != "2" {c -(}
    - `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'`j' `estimate'`k' if `dgm'==`m' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'`j'`k'dgm`m'tar`t', replace)
    =  twoway (function x, range(-.3466155827045441 .4811812043190002) lcolor(gs10)) (scatter est1 est2 if dgm==1 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(est12dgm1tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(-.3466155827045441 .4811812043190002) lcolor(gs10)) (scatter est1 est2 if dgm==1 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(est12dgm1tar1, replace)
      {hline 79} end twoway {hline}
    - `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'`j' `se'`k' if `dgm'==`m' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'`j'`k'dgm`m'tar`t', replace)
    =  twoway (function x, range(.0658233687281609 .1824655532836914) lcolor(gs10)) (scatter se1 se2 if dgm==1 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(se12dgm1tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.0658233687281609 .1824655532836914) lcolor(gs10)) (scatter se1 se2 if dgm==1 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(se12dgm1tar1, replace)
      {hline 79} end twoway {hline}
    - local graphtheta`counter'`counterplus1'`m'`t' `estimate'`j'`k'dgm`m'tar`t'
    = local graphtheta1211 est12dgm1tar1
    - local graphse`counter'`counterplus1'`m'`t' `se'`j'`k'dgm`m'tar`t'
    = local graphse1211 se12dgm1tar1
    - local counterplus1 = `counterplus1' + 1
    = local counterplus1 = 2 + 1
    - if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
    = if 3 > 2 local counterplus1 = 2
    - {c )-}
    - {c )-}
    - local counter = `counter' + 1
    = local counter = 1 + 1
    - {c )-}
    - {c )-}
    - else if `methodstringindi'==1 | !mi("`methlist'") {c -(}
    = else if 0==1 | !mi("") {c -(}
      local counter = 1
      local counterplus1 = 2
      local maxmethodvaluesminus1 = `numbermethod' - 1
      forvalues j = 1/`maxmethodvaluesminus1' {c -(}
      forvalues k = 2/`numbermethod' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'``j'' `estimate'``k'' if `dgm'==`m' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'``j''``k''dgm`m'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'``j'' `se'``k'' if `dgm'==`m'`iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'``j''``k''dgm`m'tar`t', replace)
      local graphtheta`counter'`counterplus1'`m'`t' `estimate'``j''``k''dgm`m'tar`t'
      local graphse`counter'`counterplus1'`m'`t' `se'``j''``k''dgm`m'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
    - if `targetlabels' == 1 {c -(}
    = if 0 == 1 {c -(}
      local tlab: word `t' of `valtarget'
      local targetlab ", `target': `tlab'"
      {c )-}
    - else {c -(}
    - local tlab `t'
    = local tlab 1
    - local targetlab ", `target': `tlab'"
    = local targetlab ", : 1"
    - {c )-}
    - if "`valtarget'"== "N/A" local targetlab
    = if "N/A"== "N/A" local targetlab
    - if `numbermethod'==2 {c -(}
    = if 2==2 {c -(}
    - `dicmd' graph combine `mlabelname1' `graphtheta12`m'`t'' `graphse12`m'`t'' `mlabelname2' , title("") note("Graphs for `dgm': ``dgm'dlabel`m'' `targetlab'") cols(2) xsize(4) name(`name'_dgm`m'`tlab', replace) `options'
    =  graph combine Method_1 est12dgm1tar1 se12dgm1tar1 Method_2 , title("") note("Graphs for dgm: 1 ") cols(2) xsize(4) name(cms_test5_dgm11, replace) title("testtitle") 
      {hline 78} begin graph {hline}
      - if d(`=c(born_date)') < d(23Jul2004) {c -(}
      = if d(14 Feb 2022) < d(23Jul2004) {c -(}
        di as err "your Stata executable is out of date"
        di as err "    type -update executable- at the Stata prompt"
        exit 498
        {c )-}
      - local ver = string(_caller())
      - if (_caller() < 8.2) version 8
      - else if (_caller() < 10 ) version 8.2
      - else version 10
      - gdi record = yes
      - gdi maybedraw = yes
      - if "`._Gr_Global.isa'" == "" {c -(}
      = if "class" == "" {c -(}
        ._Gr_Global = .global_g.new
        {c )-}
      - ._Gr_Global.callerver = "`ver'"
      = ._Gr_Global.callerver = "16"
      - capture noisily Graph `0'
      = capture noisily Graph combine Method_1 est12dgm1tar1 se12dgm1tar1 Method_2 , title("") note("Graphs for dgm: 1 ") cols(2) xsize(4) name(cms_test5_dgm11, replace) title("testtitle") 
{res}      {txt}- local rc = _rc
      - gdi record = yes
      - gdi maybedraw = yes
      - gdi end
      - exit `rc'
      = exit 0
      {hline 80} end graph {hline}
    - {c )-}
    - else if `numbermethod'==3 {c -(}
    = else if 2==3 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`m'`t'' `graphtheta13`m'`t'' `graphse12`m'`t'' `mlabelname2' `graphtheta23`m'`t'' `graphse13`m'`t'' `graphse23`m'`t'' `mlabelname3' , title("") note("Graphs for `dgm': ``dgm'dlabel`m'' `targetlab'") cols(3) xsize(4) name(`name'_dgm`m'`tlab', replace) `options'
      {c )-}
    - else if `numbermethod'>3 {c -(}
    = else if 2>3 {c -(}
      if mi("`anything'") local anything = "est"
      `dicmd' graph matrix `varlist' if `dgm'==`m' `iftarget', `half' `by' title("") note("") name(`name'_`anything'`j'`k'dgm`m'`tlab', replace) `options'
      {c )-}
    - {c )-}
    - {c )-}
    - if !mi("`debug'") di as text "Loop for numberdgms = 1: m = `m'"
    = if !mi("") di as text "Loop for numberdgms = 1: m = 2"
    - if "`valtarget'"!= "N/A" {c -(}
    = if "N/A"!= "N/A" {c -(}
      qui levelsof `target', local(targetlevels)
      local foreachtarget "`targetlevels'"
      {c )-}
    - else local foreachtarget 1
    - foreach t in `foreachtarget' {c -(}
    = foreach t in 1 {c -(}
    - cap confirm numeric variable `target'
    = cap confirm numeric variable 
    - if _rc local iftarget `"& `target' == "`t'""'
    = if _rc local iftarget `"&  == "1""'
    - else local iftarget `"& `target' == `t'"'
    = else local iftarget `"&  == 1"'
    - if "`valtarget'"== "N/A" local iftarget
    = if "N/A"== "N/A" local iftarget
    - local frtheta `minest' `maxest'
    = local frtheta -.3466155827045441 .4811812043190002
    - local frse `minse' `maxse'
    = local frse .0658233687281609 .1824655532836914
    - if `methodstringindi'==0 {c -(}
    = if 0==0 {c -(}
    - if mi("`methlist'") {c -(}
    = if mi("") {c -(}
    - if `methodlabels'!= 1 local methodvalues `valmethod'
    = if 0!= 1 local methodvalues 1 2
    - else local methodvalues `valmethodnumwithlabel'
    = else local methodvalues 1 2
    - {c )-}
    - local maxmethodvalues : word `numbermethod' of `methodvalues'
    = local maxmethodvalues : word 2 of 1 2
    - local maxmethodvaluesplus1 = substr("`methodvalues'", -`numbermethod', .)
    = local maxmethodvaluesplus1 = substr("1 2", -2, .)
    - local maxmethodvaluesminus1 = substr("`methodvalues'", 1 ,`numbermethod')
    = local maxmethodvaluesminus1 = substr("1 2", 1 ,2)
    - local counter = 1
    - local counterplus1 = 2
    - foreach j in `maxmethodvaluesminus1' {c -(}
    = foreach j in 1  {c -(}
    - foreach k in `maxmethodvaluesplus1' {c -(}
    = foreach k in  2 {c -(}
    - if "`j'" != "`k'" {c -(}
    = if "1" != "2" {c -(}
    - `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'`j' `estimate'`k' if `dgm'==`m' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'`j'`k'dgm`m'tar`t', replace)
    =  twoway (function x, range(-.3466155827045441 .4811812043190002) lcolor(gs10)) (scatter est1 est2 if dgm==2 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(est12dgm2tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(-.3466155827045441 .4811812043190002) lcolor(gs10)) (scatter est1 est2 if dgm==2 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(est12dgm2tar1, replace)
      {hline 79} end twoway {hline}
    - `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'`j' `se'`k' if `dgm'==`m' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'`j'`k'dgm`m'tar`t', replace)
    =  twoway (function x, range(.0658233687281609 .1824655532836914) lcolor(gs10)) (scatter se1 se2 if dgm==2 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(se12dgm2tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.0658233687281609 .1824655532836914) lcolor(gs10)) (scatter se1 se2 if dgm==2 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(se12dgm2tar1, replace)
      {hline 79} end twoway {hline}
    - local graphtheta`counter'`counterplus1'`m'`t' `estimate'`j'`k'dgm`m'tar`t'
    = local graphtheta1221 est12dgm2tar1
    - local graphse`counter'`counterplus1'`m'`t' `se'`j'`k'dgm`m'tar`t'
    = local graphse1221 se12dgm2tar1
    - local counterplus1 = `counterplus1' + 1
    = local counterplus1 = 2 + 1
    - if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
    = if 3 > 2 local counterplus1 = 2
    - {c )-}
    - {c )-}
    - local counter = `counter' + 1
    = local counter = 1 + 1
    - {c )-}
    - {c )-}
    - else if `methodstringindi'==1 | !mi("`methlist'") {c -(}
    = else if 0==1 | !mi("") {c -(}
      local counter = 1
      local counterplus1 = 2
      local maxmethodvaluesminus1 = `numbermethod' - 1
      forvalues j = 1/`maxmethodvaluesminus1' {c -(}
      forvalues k = 2/`numbermethod' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'``j'' `estimate'``k'' if `dgm'==`m' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'``j''``k''dgm`m'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'``j'' `se'``k'' if `dgm'==`m'`iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'``j''``k''dgm`m'tar`t', replace)
      local graphtheta`counter'`counterplus1'`m'`t' `estimate'``j''``k''dgm`m'tar`t'
      local graphse`counter'`counterplus1'`m'`t' `se'``j''``k''dgm`m'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
    - if `targetlabels' == 1 {c -(}
    = if 0 == 1 {c -(}
      local tlab: word `t' of `valtarget'
      local targetlab ", `target': `tlab'"
      {c )-}
    - else {c -(}
    - local tlab `t'
    = local tlab 1
    - local targetlab ", `target': `tlab'"
    = local targetlab ", : 1"
    - {c )-}
    - if "`valtarget'"== "N/A" local targetlab
    = if "N/A"== "N/A" local targetlab
    - if `numbermethod'==2 {c -(}
    = if 2==2 {c -(}
    - `dicmd' graph combine `mlabelname1' `graphtheta12`m'`t'' `graphse12`m'`t'' `mlabelname2' , title("") note("Graphs for `dgm': ``dgm'dlabel`m'' `targetlab'") cols(2) xsize(4) name(`name'_dgm`m'`tlab', replace) `options'
    =  graph combine Method_1 est12dgm2tar1 se12dgm2tar1 Method_2 , title("") note("Graphs for dgm: 2 ") cols(2) xsize(4) name(cms_test5_dgm21, replace) title("testtitle") 
      {hline 78} begin graph {hline}
      - if d(`=c(born_date)') < d(23Jul2004) {c -(}
      = if d(14 Feb 2022) < d(23Jul2004) {c -(}
        di as err "your Stata executable is out of date"
        di as err "    type -update executable- at the Stata prompt"
        exit 498
        {c )-}
      - local ver = string(_caller())
      - if (_caller() < 8.2) version 8
      - else if (_caller() < 10 ) version 8.2
      - else version 10
      - gdi record = yes
      - gdi maybedraw = yes
      - if "`._Gr_Global.isa'" == "" {c -(}
      = if "class" == "" {c -(}
        ._Gr_Global = .global_g.new
        {c )-}
      - ._Gr_Global.callerver = "`ver'"
      = ._Gr_Global.callerver = "16"
      - capture noisily Graph `0'
      = capture noisily Graph combine Method_1 est12dgm2tar1 se12dgm2tar1 Method_2 , title("") note("Graphs for dgm: 2 ") cols(2) xsize(4) name(cms_test5_dgm21, replace) title("testtitle") 
{res}      {txt}- local rc = _rc
      - gdi record = yes
      - gdi maybedraw = yes
      - gdi end
      - exit `rc'
      = exit 0
      {hline 80} end graph {hline}
    - {c )-}
    - else if `numbermethod'==3 {c -(}
    = else if 2==3 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`m'`t'' `graphtheta13`m'`t'' `graphse12`m'`t'' `mlabelname2' `graphtheta23`m'`t'' `graphse13`m'`t'' `graphse23`m'`t'' `mlabelname3' , title("") note("Graphs for `dgm': ``dgm'dlabel`m'' `targetlab'") cols(3) xsize(4) name(`name'_dgm`m'`tlab', replace) `options'
      {c )-}
    - else if `numbermethod'>3 {c -(}
    = else if 2>3 {c -(}
      if mi("`anything'") local anything = "est"
      `dicmd' graph matrix `varlist' if `dgm'==`m' `iftarget', `half' `by' title("") note("") name(`name'_`anything'`j'`k'dgm`m'`tlab', replace) `options'
      {c )-}
    - {c )-}
    - {c )-}
    - {c )-}
    - else if `numberdgms' != 1 {c -(}
    = else if 1 != 1 {c -(}
      foreach dgmvar in `dgmvalues' {c -(}
      if !mi("`debug'") di as text "Loop for numberdgms > 1: m = `m'"
      local dgmlabels = 0
      qui tab `dgmvar'
      local ndgmvar = `r(r)'
      cap qui labelsof `dgmvar'
      cap qui ret list
      if `"`r(labels)'"'!="" {c -(}
      local 0 = `"`r(labels)'"'
      forvalues i = 1/`ndgmvar' {c -(}
      gettoken `dgmvar'dlabel`i' 0 : 0, parse(": ")
      local dgmlabels = 1
      {c )-}
      {c )-}
      else {c -(}
      local dgmlabels = 0
      qui levels `dgmvar', local(levels)
      local loop = 1
      foreach l of local levels {c -(}
      local `dgmvar'dlabel`loop' `l'
      local loop = `loop' + 1
      {c )-}
      {c )-}
      tempvar _group
      qui egen `_group' = group(`dgmvalues'), label lname(grouplevels)
      local group "`_group'"
      qui tab `group'
      local groupnum = `r(r)'
      if "`numtarget'" == "N/A" local numtargetcheck = 1
      else local numtargetcheck = `numtarget'
      if "`groupnum'" == "" local totalgroupnum = 1
      else local totalgroupnum = `groupnum'
      local graphnumcheck = `totalgroupnum' * `numtargetcheck'
      if `graphnumcheck' > 15 {c -(}
      di as error "{c -(}it: WARNING: `graphnumcheck' graphs will be created, consider using 'if' option as detailed in {c -(}help              siman_comparemethodsscatter:siman comparemethodsscatter{c )-}{c )-}"
      {c )-}
      forvalues d = 1/`groupnum' {c -(}
      local dgmfilter = "`group'==`d'"
      local dgmlevels`d' : label grouplevels `d'
      if "`valtarget'"!= "N/A" {c -(}
      qui levelsof `target', local(targetlevels)
      local foreachtarget "`targetlevels'"
      {c )-}
      else local foreachtarget 1
      foreach t in `foreachtarget' {c -(}
      cap confirm numeric variable `target'
      if _rc local iftarget `"& `target' == "`t'""'
      else local iftarget `"& `target' == `t'"'
      if "`valtarget'"== "N/A" local iftarget
      local frtheta `minest' `maxest'
      local frse `minse' `maxse'
      if `methodstringindi'==0 {c -(}
      if mi("`methlist'") {c -(}
      if `methodlabels'!= 1 local methodvalues `valmethod'
      else local methodvalues `valmethodnumwithlabel'
      {c )-}
      local maxmethodvalues : word `numbermethod' of `methodvalues'
      local maxmethodvaluesplus1 = substr("`methodvalues'", -`numbermethod', .)
      local maxmethodvaluesminus1 = substr("`methodvalues'", 1 ,`numbermethod')
      local counter = 1
      local counterplus1 = 2
      foreach j in `maxmethodvaluesminus1' {c -(}
      foreach k in `maxmethodvaluesplus1' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'`j' `estimate'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`estimate'`j'`k'`d'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'`j' `se'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`se'`j'`k'`d'tar`t', replace)
      local graphtheta`counter'`counterplus1'`d'`t' `estimate'`j'`k'`d'tar`t'
      local graphse`counter'`counterplus1'`d'`t' `se'`j'`k'`d'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
      else if `methodstringindi'==1 | !mi("`methlist'") {c -(}
      local counter = 1
      local counterplus1 = 2
      local maxmethodvaluesminus1 = `numbermethod' - 1
      forvalues j = 1/`maxmethodvaluesminus1' {c -(}
      forvalues k = 2/`numbermethod' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'``j'' `estimate'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'``j''``k''`d'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'``j'' `se'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'``j''``k''`d'tar`t', replace)
      local graphtheta`counter'`counterplus1'`d'`t' `estimate'``j''``k''`d'tar`t'
      local graphse`counter'`counterplus1'`d'`t' `se'``j''``k''`d'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
      if `targetlabels' == 1 {c -(}
      local tlab: word `t' of `valtarget'
      local targetlab ", `target': `tlab'"
      {c )-}
      else {c -(}
      local tlab `t'
      local targetlab ", `target': `tlab'"
      {c )-}
      if "`valtarget'"== "N/A" local targetlab
      if `numbermethod'==2 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphse12`d'`t'' `mlabelname2',
      title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(2) xsize(4) name(`name'_`d'`tlab', replace) `options'
      {c )-}
      else if `numbermethod'==3 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphtheta13`d'`t'' `graphse12`d'`t'' `mlabelname2' `graphtheta23`d'`t'' `graphse13`d'`t'' `graphse23`d'`t'' `mlabelname3', title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(3) xsize(4) name(`name'_`d'`tlab', replace) `options'
      {c )-}
      else if `numbermethod'>3 {c -(}
      if mi("`anything'") local anything = "est"
      `dicmd' graph matrix `varlist' if `group'==`d' `iftarget', `half' `by' title("") note("") name(`name'_`anything'`j'`k'`d'`tlab', replace) `options'
      {c )-}
      {c )-}
      {c )-}
      {c )-}
      {c )-}
    - restore
    - local dgm = "`dgmorig'"
    = local dgm = ""
    - qui use `origdata', clear
    = qui use C:\Users\rmjlem1\AppData\Local\Temp\ST_1080_000001.tmp, clear

{com}. 
{txt}end of do-file

{com}. do "C:\Users\rmjlem1\AppData\Local\Temp\STD1080_000000.tmp"
{txt}
{com}. **********************************************************
. * DGM defined by multiple variables with multiple levels
. **********************************************************
. clear all
{res}{txt}
{com}. prog drop _all
{txt}
{com}. use nestloop/res.dta, clear
{txt}
{com}. keep v1 theta rho pc k exppeto expg2 var2peto var2g2
{txt}
{com}. * theta needs to be in integer format for levelsof command to work (doesn't accept non-integer values), so make integer values with non-integer labels
. gen theta_new=2
{txt}
{com}. replace theta_new=1 if theta == 0.5
{txt}(192 real changes made)

{com}. replace theta_new=3 if theta == 0.75
{txt}(192 real changes made)

{com}. replace theta_new=4 if theta == 1 
{txt}(192 real changes made)

{com}. label define theta_new 1 "0.5" 2 "0.67" 3 "0.75" 4 "1"
{txt}
{com}. label values theta_new theta_new
{txt}
{com}. label var theta_new "theta categories"
{txt}
{com}. *br theta theta_new
. drop theta
{txt}
{com}. rename theta_new theta
{res}{txt}
{com}. gen pc_str = ""
{txt}(768 missing values generated)

{com}. replace pc_str = "5%" if pc == 1
{txt}variable {bf}pc_str{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str2{sf}
{txt}(192 real changes made)

{com}. replace pc_str = "10%" if pc == 2
{txt}variable {bf}pc_str{sf} was {bf}{res}str2{sf}{txt} now {bf}{res}str3{sf}
{txt}(192 real changes made)

{com}. replace pc_str = "20%" if pc == 3
{txt}(192 real changes made)

{com}. replace pc_str = "30%" if pc == 4
{txt}(192 real changes made)

{com}. drop pc
{txt}
{com}. rename pc_str pc
{res}{txt}
{com}. siman setup, rep(v1) dgm(theta rho pc k) method(peto g2) estimate(exp) se(var2) true(theta)
{res}  {txt}variable {bf}pc{sf} was {bf}{res}long{sf}{txt} now {bf}{res}byte{sf}
{txt}  (2,304 bytes saved)
{err}Warning: variable pc, which appears in dgm(), was stored as a string. It has been
encoded as numeric so that subsequent siman commands will work. If you require a
different order, encode pc as numeric before running -siman setup-.

{txt}{col 20}SUMMARY OF DATA
_____________________________________________________

The siman format is:{res}{col 35}format 3: long-wide
{txt}The format for targets is:{res}{col 35}long
{txt}The format for methods is:{res}{col 35}wide
{txt}The number of targets is:{res}{col 35}N/A
{txt}The target values are:{res}{col 35}N/A

{txt}The number of methods is:{res}{col 35}2
{txt}The method values are:{res}{col 35}peto g2

Data generating mechanism (dgm)
{txt}The total number of dgms is: {res}{col 35}192
{txt}The dgm variables (# levels): {res}{col 35}theta (4) rho (4) pc (4) k (3) 

Estimates are contained in the dataset

{txt}The estimates stub is:{res}{col 35}exp
{txt}The se stub is:{res}{col 35}var2
{txt}The df stub is:{res}{col 35}N/A
{txt}The ci stubs are:{res}{col 35}N/A
{txt}The p stub is:{res}{col 35}N/A
{txt}The true variable is:{res}{col 35}theta
{txt}_____________________________________________________

{com}. 
{txt}end of do-file

{com}. do "C:\Users\rmjlem1\AppData\Local\Temp\STD1080_000000.tmp"
{txt}
{com}. siman comparemethodsscatter, title("testtitle") subgr(xtit("testaxis")) name("cms_test7", replace) 
    {txt}- set tracedepth 1
    - if mi("`estimate'") | mi("`se'") {c -(}
    = if mi("exp") | mi("var2") {c -(}
      di as error "siman scattercomparemethods requires estimate and se to plot"
      exit 498
      {c )-}
    - if "`method'"=="" {c -(}
    = if "peto g2"=="" {c -(}
      di as error "The variable 'method' is missing so siman comparemethodsscatter can not be created.  Please create a variable in your dataset called method containing the method value(s)."
      exit 498
      {c )-}
    - if `nummethod' < 2 {c -(}
    = if 2 < 2 {c -(}
      di as error "There are not enough methods to compare, siman comparemethods scatter requires at least 2 methods."
      exit 498
      {c )-}
    - if !mi("`debug'") local dicmd dicmd
    = if !mi("") local dicmd dicmd
    - tempfile origdata
    - qui save `origdata'
    = qui save C:\Users\rmjlem1\AppData\Local\Temp\ST_1080_000001.tmp
    - if `nformat'!=1 {c -(}
    = if 3!=1 {c -(}
    - qui siman reshape, longlong
      {hline 78} begin siman {hline}
      - version 13
      - syntax [anything] [if] [in], [which *]
      - if "`anything'"=="cms" local anything comparemethodsscatter
      = if "reshape"=="cms" local anything comparemethodsscatter
      - foreach thing in `_dta[siman_allthings]' {c -(}
      = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 {c -(}
      - local `thing' : char _dta[siman_`thing']
      = local allthings : char _dta[siman_allthings]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local rep : char _dta[siman_rep]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgm : char _dta[siman_dgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local target : char _dta[siman_target]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local method : char _dta[siman_method]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estimate : char _dta[siman_estimate]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local se : char _dta[siman_se]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local df : char _dta[siman_df]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ci : char _dta[siman_ci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local p : char _dta[siman_p]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local true : char _dta[siman_true]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local order : char _dta[siman_order]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local lci : char _dta[siman_lci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local uci : char _dta[siman_uci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifsetup : char _dta[siman_ifsetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local insetup : char _dta[siman_insetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local format : char _dta[siman_format]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetformat : char _dta[siman_targetformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodformat : char _dta[siman_methodformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nformat : char _dta[siman_nformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntarget : char _dta[siman_ntarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ndgm : char _dta[siman_ndgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nmethod : char _dta[siman_nmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numtarget : char _dta[siman_numtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valtarget : char _dta[siman_valtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nummethod : char _dta[siman_nummethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valmethod : char _dta[siman_valmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntrue : char _dta[siman_ntrue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruevalue : char _dta[siman_ntruevalue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmvar : char _dta[siman_dgmvar]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numdgm : char _dta[siman_numdgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmcreated : char _dta[siman_dgmcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetlabels : char _dta[siman_targetlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodcreated : char _dta[siman_methodcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local descriptiontype : char _dta[siman_descriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local cidescriptiontype : char _dta[siman_cidescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truedescriptiontype : char _dta[siman_truedescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estvars : char _dta[siman_estvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sevars : char _dta[siman_sevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dfvars : char _dta[siman_dfvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local civars : char _dta[siman_civars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local pvars : char _dta[siman_pvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truevars : char _dta[siman_truevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simansetuprun : char _dta[siman_simansetuprun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m1 : char _dta[siman_m1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m2 : char _dta[siman_m2]
      - {c )-}
      - local subcmds0 setup
      - local subcmds1 describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop
      - local subcmds2
      - local subcmds `subcmds0' `subcmds1' `subcmds'
      = local subcmds setup describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop 
      - if mi("`anything'") {c -(}
      = if mi("reshape") {c -(}
        di as error "Syntax: siman <subcommand>"
        exit 198
        {c )-}
      - if "`anything'"=="which" {c -(}
      = if "reshape"=="which" {c -(}
        which siman
        foreach subcmd of local subcmds {c -(}
        cap noi which siman_`subcmd'
        {c )-}
        exit
        {c )-}
      - gettoken subcmd rest : anything
      - if length("`subcmd'")>=3 {c -(}
      = if length("reshape")>=3 {c -(}
      - foreach thing in `subcmds' {c -(}
      = foreach thing in setup describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop {c -(}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("setup","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("describe","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("analyse","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("analyze","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("table","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("reshape","reshape")==1 {c -(}
      - local subcmd `thing'
      = local subcmd reshape
      - local knowncmd 1
      - {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("lollyplot","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("zipplot","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("comparemethodsscatter","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("blandaltman","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("swarm","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("scatter","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("nestloop","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - {c )-}
      - if "`subcmd'" == "analyze" local subcmd "analyse"
      = if "reshape" == "analyze" local subcmd "analyse"
      - cap which siman_`subcmd'
      = cap which siman_reshape
      - if _rc {c -(}
        di as error "`subcmd' is not a valid siman subcommand"
        if length("`subcmd'")<3 di as error "Minimum abbreviation length is 3"
        exit 198
        {c )-}
      - local type0 : list subcmd in subcmds0
      - if `type0' & !mi("`allthings'") {c -(}
      = if 0 & !mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2") {c -(}
        di as error "Data are already in siman format"
        exit 459
        {c )-}
      - local type1 : list subcmd in subcmds1
      - if `type1' & mi("`allthings'") {c -(}
      = if 1 & mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2") {c -(}
        di as error "Data are not in siman format: use siman setup"
        exit 459
        {c )-}
      - if mi(`"`options'"') siman_`subcmd' `rest' `if' `in'
      = if mi(`"longlong"') siman_reshape   
      - else siman_`subcmd' `rest' `if' `in', `options'
      = else siman_reshape   , longlong
      {hline 80} end siman {hline}
    - foreach thing in `_dta[siman_allthings]' {c -(}
    = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 {c -(}
    - local `thing' : char _dta[siman_`thing']
    = local allthings : char _dta[siman_allthings]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local rep : char _dta[siman_rep]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgm : char _dta[siman_dgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local target : char _dta[siman_target]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local method : char _dta[siman_method]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local estimate : char _dta[siman_estimate]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local se : char _dta[siman_se]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local df : char _dta[siman_df]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ci : char _dta[siman_ci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local p : char _dta[siman_p]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local true : char _dta[siman_true]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local order : char _dta[siman_order]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local lci : char _dta[siman_lci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local uci : char _dta[siman_uci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ifsetup : char _dta[siman_ifsetup]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local insetup : char _dta[siman_insetup]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local format : char _dta[siman_format]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local targetformat : char _dta[siman_targetformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local methodformat : char _dta[siman_methodformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nformat : char _dta[siman_nformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntarget : char _dta[siman_ntarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ndgm : char _dta[siman_ndgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nmethod : char _dta[siman_nmethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local numtarget : char _dta[siman_numtarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local valtarget : char _dta[siman_valtarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nummethod : char _dta[siman_nummethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local valmethod : char _dta[siman_valmethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntrue : char _dta[siman_ntrue]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntruevalue : char _dta[siman_ntruevalue]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgmvar : char _dta[siman_dgmvar]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local numdgm : char _dta[siman_numdgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgmcreated : char _dta[siman_dgmcreated]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local targetlabels : char _dta[siman_targetlabels]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local methodcreated : char _dta[siman_methodcreated]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local descriptiontype : char _dta[siman_descriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local cidescriptiontype : char _dta[siman_cidescriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local truedescriptiontype : char _dta[siman_truedescriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local estvars : char _dta[siman_estvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local sevars : char _dta[siman_sevars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dfvars : char _dta[siman_dfvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local civars : char _dta[siman_civars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local pvars : char _dta[siman_pvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local truevars : char _dta[siman_truevars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local simansetuprun : char _dta[siman_simansetuprun]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local m1 : char _dta[siman_m1]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local m2 : char _dta[siman_m2]
    - {c )-}
    - {c )-}
    - local methodstringindi = 0
    - capture confirm string variable `method'
    = capture confirm string variable method
    - if !_rc local methodstringindi = 1
    - if mi("`methlist'") & `nummethod' > 5 {c -(}
    = if mi("") & 2 > 5 {c -(}
      di as text "Warning: With `nummethod' methods compared, this plot may be too dense to read.  If you find it unreadable, you can choose the methods to compare using -siman comparemethodsscatter-, methlist(a b) where a and b are the methods you are particularly interested to compare."
      {c )-}
    - cap confirm variable `dgm'
    = cap confirm variable theta rho pc k
    - if !_rc {c -(}
    - local numberdgms: word count `dgm'
    = local numberdgms: word count theta rho pc k
    - if `numberdgms'==1 {c -(}
    = if 4==1 {c -(}
      local dgmlabels 0
      qui tab `dgm'
      cap qui labelsof `dgm'
      cap qui ret list
      if `"`r(labels)'"' != "" {c -(}
      local 0 = `"`r(labels)'"'
      forvalues i = 1/`ndgm' {c -(}
      gettoken `dgm'dlabel`i' 0 : 0, parse(": ")
      local dgmlabels = 1
      {c )-}
      {c )-}
      else {c -(}
      local dgmlabels 0
      qui levels `dgm', local(levels)
      local loop 1
      foreach l of local levels {c -(}
      local `dgm'dlabel`loop' `l'
      local loop = `loop' + 1
      {c )-}
      {c )-}
      {c )-}
    - {c )-}
    - if ("`if'"=="" & "`ifsetup'"!="") local ifscatterc = `"`ifsetup'"'
    = if (""=="" & ""!="") local ifscatterc = `""'
    - else local ifscatterc = `"`if'"'
    = else local ifscatterc = `""'
    - local ifdgm = 0
    - if !mi("`ifscatterc'") {c -(}
    = if !mi("") {c -(}
      cap confirm variable `dgm'
      if !_rc {c -(}
      local numberdgms: word count `dgm'
      if `numberdgms'!=1 {c -(}
      gettoken dgmfilter ifscatterc: ifscatterc, parse("==")
      local ifremove "if "
      local dgmleft: list dgmfilter - ifremove
      local dgmorig = "`dgm'"
      local dgmtodrop: list dgm - dgmleft
      local ifdgm = 1
      gettoken dgmleft2 ifscatterc: ifscatterc, parse("==")
      local dgmfiltervalues = `ifscatterc'
      local ifscatterc = `"`if'"'
      {c )-}
      {c )-}
      {c )-}
    - tempvar touseif
    - qui generate `touseif' = 0
    = qui generate __000000 = 0
    - qui replace `touseif' = 1 `ifscatterc'
    = qui replace __000000 = 1 
    - preserve
    - sort `dgm' `target' `method' `touseif'
    = sort theta rho pc k  method __000000
    - capture by `dgm' `target' `method': assert `touseif'==`touseif'[_n-1] if _n>1
    = capture by theta rho pc k  method: assert __000000==__000000[_n-1] if _n>1
    - if _rc == 9 {c -(}
      di as error "The 'if' option can not be applied to 'rep' in siman comparemethodsscatter (cms).  If you have not specified an 'if' in siman cms, but you specified one in siman setup, then that 'if' will have been applied to siman cms."
      exit 498
      {c )-}
    - restore
    - qui keep if `touseif'
    = qui keep if __000000
    - if ("`in'"=="" & "`insetup'"!="") local inscatterc = `"`insetup'"'
    = if (""=="" & ""!="") local inscatterc = `""'
    - else local inscatterc = `"`in'"'
    = else local inscatterc = `""'
    - tempvar tousein
    - qui generate `tousein' = 0
    = qui generate __000001 = 0
    - qui replace `tousein' = 1 `inscatterc'
    = qui replace __000001 = 1 
    - qui keep if `tousein'
    = qui keep if __000001
    - cap confirm variable `dgm'
    = cap confirm variable theta rho pc k
    - if !_rc {c -(}
    - local numberdgms: word count `dgm'
    = local numberdgms: word count theta rho pc k
    - if `numberdgms'==1 {c -(}
    = if 4==1 {c -(}
      qui tab `dgm'
      local ndgmlabels = `r(r)'
      qui levels `dgm', local(levels)
      tokenize `"`levels'"'
      forvalues i=1/`ndgmlabels' {c -(}
      local d`i' = "``i''"
      if `i'==1 local dgmvalues `d`i''
      else local dgmvalues `dgmvalues' `d`i''
      {c )-}
      {c )-}
    - if `numberdgms'!=1 {c -(}
    = if 4!=1 {c -(}
    - local ndgmlabels = `numberdgms'
    = local ndgmlabels = 4
    - local dgmvalues `dgm'
    = local dgmvalues theta rho pc k
    - {c )-}
    - {c )-}
    - preserve
    - qui drop if `rep'<0
    = qui drop if v1<0
    - if !mi("`methlist'") {c -(}
    = if !mi("") {c -(}
      local methodvalues = "`methlist'"
      local methodcount: word count `methlist'
      tempvar tousemethod
      qui generate `tousemethod' = 0
      tokenize `methlist'
      foreach j in `methodvalues' {c -(}
      if `methodstringindi' == 0 qui replace `tousemethod' = 1 if `method' == `j'
      else if `methodstringindi' == 1 qui replace `tousemethod' = 1 if `method' == "`j'"
      {c )-}
      qui keep if `tousemethod' == 1
      qui drop `tousemethod'
      {c )-}
    - qui capture which labelsof
    - if _rc {c -(}
      di as smcl "labelsof package required, please install by clicking: " `"{c -(}stata ssc install labelsof{c )-}"'
      exit
      {c )-}
    - qui labelsof `method'
    = qui labelsof method
      {hline 75} begin labelsof {hline}
      - version 8
      - syntax name [, Label ]
      - if "`label'"=="" {c -(}
      = if ""=="" {c -(}
      - local labdef: value label `namelist'
      = local labdef: value label method
      - if `"`labdef'"'=="" {c -(}
      = if `""'=="" {c -(}
      - exit
      {hline 77} end labelsof {hline}
    - qui ret list
    - local methodlabels 0
    - if `"`r(labels)'"'!="" {c -(}
    = if `""'!="" {c -(}
      local 0 = `"`r(labels)'"'
      forvalues i = 1/`nummethod' {c -(}
      gettoken mlabel`i' 0 : 0, parse(": ")
      local methodvalues `methodvalues' `mlabel`i''
      local methodlabel`i': word `i' of `methodvalues'
      local mlabelname`i' Method_`methodlabel`i''
      local methodlabels 1
      {c )-}
      {c )-}
    - else {c -(}
    - qui levels `method', local(levels)
    = qui levels method, local(levels)
      {hline 77} begin levels {hline}
      - version 8
      - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
      - if "`separate'" == "" local sep " "
      = if "" == "" local sep " "
      - else local sep "`separate'"
      = else local sep ""
      - if "`missing'" != "" local novarlist "novarlist"
      = if "" != "" local novarlist "novarlist"
      - marksample touse, strok `novarlist'
      = marksample touse, strok 
      - capture confirm numeric variable `varlist'
      = capture confirm numeric variable method
      - local isnum = _rc != 7
      - if `isnum' {c -(}
      = if 0 {c -(}
        capture assert `varlist' == int(`varlist') if `touse'
        if _rc {c -(}
        di as err "`varlist' contains non-integer values"
        exit 459
        {c )-}
        tempname Vals
        qui tab `varlist' if `touse', `missing' matrow(`Vals')
        local nvals = r(r)
        forval i = 1 / `nvals' {c -(}
        local val = `Vals'[`i',1]
        if `i' < `nvals' local vals "`vals'`val'`sep'"
        else local vals "`vals'`val'"
        {c )-}
        {c )-}
      - else {c -(}
      - tempvar select counter
      - bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
      = bysort __000003 method : gen byte __000004 = (_n == 1) * __000003
      - generate `counter' = sum(`select') * (`select' == 1)
      = generate __000005 = sum(__000004) * (__000004 == 1)
      - sort `counter'
      = sort __000005
      - qui count if `counter' == 0
      = qui count if __000005 == 0
      - local j = 1 + r(N)
      - local nvals = _N
      - if "`clean'" != "" {c -(}
      = if "" != "" {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals "`vals'`=`varlist'[`i']'`sep'"
        {c )-}
        else local vals "`vals'`=`varlist'[`i']'"
        {c )-}
        {c )-}
      - else {c -(}
      - forval i = `j' / `nvals' {c -(}
      = forval i = 1535 / 1536 {c -(}
      - if `i' < `nvals' {c -(}
      = if 1535 < 1536 {c -(}
      - local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
      = local vals `"`"g2"' "'
      - {c )-}
      - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
      = else local vals `"`"g2"' `"g2"'"'
      - {c )-}
      - if `i' < `nvals' {c -(}
      = if 1536 < 1536 {c -(}
        local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
        {c )-}
      - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
      = else local vals `"`"g2"' `"peto"'"'
      - {c )-}
      - {c )-}
      - {c )-}
      - di as txt `"`vals'"'
      = di as txt `"`"g2"' `"peto"'"'
      - return local levels `"`vals'"'
      = return local levels `"`"g2"' `"peto"'"'
      - if "`local'" != "" {c -(}
      = if "levels" != "" {c -(}
      - c_local `local' `"`vals'"'
      = c_local levels `"`"g2"' `"peto"'"'
      - {c )-}
      {hline 79} end levels {hline}
    - tokenize `"`levels'"'
    = tokenize `"`"g2"' `"peto"'"'
    - if `methodstringindi'==0 {c -(}
    = if 1==0 {c -(}
      numlist "`levels'"
      forvalues i = 1/`nummethod' {c -(}
      local methodlabel`i': word `i' of `levels'
      local mlabel`i' Method: `i'
      local mlabelname`i' Method_`methodlabel`i''
      local methodlabel`i' `i'
      local methodvalues `methodvalues' `methodlabel`i''
      {c )-}
      {c )-}
    - else if `methodstringindi'==1 {c -(}
    = else if 1==1 {c -(}
    - forvalues i = 1/`nummethod' {c -(}
    = forvalues i = 1/2 {c -(}
    - local methodlabel`i': word `i' of `levels'
    = local methodlabel1: word 1 of `"g2"' `"peto"'
    - local mlabel`i' Method: ``i''
    = local mlabel1 Method: g2
    - local mlabelname`i' Method_`methodlabel`i''
    = local mlabelname1 Method_g2
    - local methodlabel`i' ``i''
    = local methodlabel1 g2
    - local methodvalues `methodvalues' `methodlabel`i''
    = local methodvalues  g2
    - {c )-}
    - local methodlabel`i': word `i' of `levels'
    = local methodlabel2: word 2 of `"g2"' `"peto"'
    - local mlabel`i' Method: ``i''
    = local mlabel2 Method: peto
    - local mlabelname`i' Method_`methodlabel`i''
    = local mlabelname2 Method_peto
    - local methodlabel`i' ``i''
    = local methodlabel2 peto
    - local methodvalues `methodvalues' `methodlabel`i''
    = local methodvalues g2 peto
    - {c )-}
    - {c )-}
    - {c )-}
    - if `nmethod'!=0 {c -(}
    = if 1!=0 {c -(}
    - qui tab `method',m
    = qui tab method,m
    - local nmethodlabels = `r(r)'
    = local nmethodlabels = 2
    - qui levels `method', local(levels)
    = qui levels method, local(levels)
      {hline 77} begin levels {hline}
      - version 8
      - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
      - if "`separate'" == "" local sep " "
      = if "" == "" local sep " "
      - else local sep "`separate'"
      = else local sep ""
      - if "`missing'" != "" local novarlist "novarlist"
      = if "" != "" local novarlist "novarlist"
      - marksample touse, strok `novarlist'
      = marksample touse, strok 
      - capture confirm numeric variable `varlist'
      = capture confirm numeric variable method
      - local isnum = _rc != 7
      - if `isnum' {c -(}
      = if 0 {c -(}
        capture assert `varlist' == int(`varlist') if `touse'
        if _rc {c -(}
        di as err "`varlist' contains non-integer values"
        exit 459
        {c )-}
        tempname Vals
        qui tab `varlist' if `touse', `missing' matrow(`Vals')
        local nvals = r(r)
        forval i = 1 / `nvals' {c -(}
        local val = `Vals'[`i',1]
        if `i' < `nvals' local vals "`vals'`val'`sep'"
        else local vals "`vals'`val'"
        {c )-}
        {c )-}
      - else {c -(}
      - tempvar select counter
      - bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
      = bysort __000003 method : gen byte __000004 = (_n == 1) * __000003
      - generate `counter' = sum(`select') * (`select' == 1)
      = generate __000005 = sum(__000004) * (__000004 == 1)
      - sort `counter'
      = sort __000005
      - qui count if `counter' == 0
      = qui count if __000005 == 0
      - local j = 1 + r(N)
      - local nvals = _N
      - if "`clean'" != "" {c -(}
      = if "" != "" {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals "`vals'`=`varlist'[`i']'`sep'"
        {c )-}
        else local vals "`vals'`=`varlist'[`i']'"
        {c )-}
        {c )-}
      - else {c -(}
      - forval i = `j' / `nvals' {c -(}
      = forval i = 1535 / 1536 {c -(}
      - if `i' < `nvals' {c -(}
      = if 1535 < 1536 {c -(}
      - local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
      = local vals `"`"g2"' "'
      - {c )-}
      - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
      = else local vals `"`"g2"' `"g2"'"'
      - {c )-}
      - if `i' < `nvals' {c -(}
      = if 1536 < 1536 {c -(}
        local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
        {c )-}
      - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
      = else local vals `"`"g2"' `"peto"'"'
      - {c )-}
      - {c )-}
      - {c )-}
      - di as txt `"`vals'"'
      = di as txt `"`"g2"' `"peto"'"'
      - return local levels `"`vals'"'
      = return local levels `"`"g2"' `"peto"'"'
      - if "`local'" != "" {c -(}
      = if "levels" != "" {c -(}
      - c_local `local' `"`vals'"'
      = c_local levels `"`"g2"' `"peto"'"'
      - {c )-}
      {hline 79} end levels {hline}
    - tokenize `"`levels'"'
    = tokenize `"`"g2"' `"peto"'"'
    - forvalues e = 1/`nmethodlabels' {c -(}
    = forvalues e = 1/2 {c -(}
    - local methlabel`e' = "``e''"
    = local methlabel1 = "g2"
    - if `e'==1 local valmethodnumwithlabel `methlabel`e''
    = if 1==1 local valmethodnumwithlabel g2
    - else if `e'>=2 local valmethodnumwithlabel `valmethodnumwithlabel' `methlabel`e''
    = else if 1>=2 local valmethodnumwithlabel g2 g2
    - {c )-}
    - local methlabel`e' = "``e''"
    = local methlabel2 = "peto"
    - if `e'==1 local valmethodnumwithlabel `methlabel`e''
    = if 2==1 local valmethodnumwithlabel peto
    - else if `e'>=2 local valmethodnumwithlabel `valmethodnumwithlabel' `methlabel`e''
    = else if 2>=2 local valmethodnumwithlabel g2 peto
    - {c )-}
    - {c )-}
    - qui siman reshape, longwide
      {hline 78} begin siman {hline}
      - version 13
      - syntax [anything] [if] [in], [which *]
      - if "`anything'"=="cms" local anything comparemethodsscatter
      = if "reshape"=="cms" local anything comparemethodsscatter
      - foreach thing in `_dta[siman_allthings]' {c -(}
      = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 {c -(}
      - local `thing' : char _dta[siman_`thing']
      = local allthings : char _dta[siman_allthings]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local rep : char _dta[siman_rep]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgm : char _dta[siman_dgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local target : char _dta[siman_target]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local method : char _dta[siman_method]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estimate : char _dta[siman_estimate]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local se : char _dta[siman_se]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local df : char _dta[siman_df]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ci : char _dta[siman_ci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local p : char _dta[siman_p]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local true : char _dta[siman_true]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local order : char _dta[siman_order]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local lci : char _dta[siman_lci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local uci : char _dta[siman_uci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifsetup : char _dta[siman_ifsetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local insetup : char _dta[siman_insetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local format : char _dta[siman_format]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetformat : char _dta[siman_targetformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodformat : char _dta[siman_methodformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nformat : char _dta[siman_nformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntarget : char _dta[siman_ntarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ndgm : char _dta[siman_ndgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nmethod : char _dta[siman_nmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numtarget : char _dta[siman_numtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valtarget : char _dta[siman_valtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nummethod : char _dta[siman_nummethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valmethod : char _dta[siman_valmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntrue : char _dta[siman_ntrue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruevalue : char _dta[siman_ntruevalue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmvar : char _dta[siman_dgmvar]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numdgm : char _dta[siman_numdgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmcreated : char _dta[siman_dgmcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetlabels : char _dta[siman_targetlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodcreated : char _dta[siman_methodcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local descriptiontype : char _dta[siman_descriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local cidescriptiontype : char _dta[siman_cidescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truedescriptiontype : char _dta[siman_truedescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estvars : char _dta[siman_estvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sevars : char _dta[siman_sevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dfvars : char _dta[siman_dfvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local civars : char _dta[siman_civars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local pvars : char _dta[siman_pvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truevars : char _dta[siman_truevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simansetuprun : char _dta[siman_simansetuprun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m1 : char _dta[siman_m1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m2 : char _dta[siman_m2]
      - {c )-}
      - local subcmds0 setup
      - local subcmds1 describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop
      - local subcmds2
      - local subcmds `subcmds0' `subcmds1' `subcmds'
      = local subcmds setup describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop 
      - if mi("`anything'") {c -(}
      = if mi("reshape") {c -(}
        di as error "Syntax: siman <subcommand>"
        exit 198
        {c )-}
      - if "`anything'"=="which" {c -(}
      = if "reshape"=="which" {c -(}
        which siman
        foreach subcmd of local subcmds {c -(}
        cap noi which siman_`subcmd'
        {c )-}
        exit
        {c )-}
      - gettoken subcmd rest : anything
      - if length("`subcmd'")>=3 {c -(}
      = if length("reshape")>=3 {c -(}
      - foreach thing in `subcmds' {c -(}
      = foreach thing in setup describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop {c -(}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("setup","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("describe","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("analyse","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("analyze","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("table","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("reshape","reshape")==1 {c -(}
      - local subcmd `thing'
      = local subcmd reshape
      - local knowncmd 1
      - {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("lollyplot","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("zipplot","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("comparemethodsscatter","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("blandaltman","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("swarm","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("scatter","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("nestloop","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - {c )-}
      - if "`subcmd'" == "analyze" local subcmd "analyse"
      = if "reshape" == "analyze" local subcmd "analyse"
      - cap which siman_`subcmd'
      = cap which siman_reshape
      - if _rc {c -(}
        di as error "`subcmd' is not a valid siman subcommand"
        if length("`subcmd'")<3 di as error "Minimum abbreviation length is 3"
        exit 198
        {c )-}
      - local type0 : list subcmd in subcmds0
      - if `type0' & !mi("`allthings'") {c -(}
      = if 0 & !mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2") {c -(}
        di as error "Data are already in siman format"
        exit 459
        {c )-}
      - local type1 : list subcmd in subcmds1
      - if `type1' & mi("`allthings'") {c -(}
      = if 1 & mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2") {c -(}
        di as error "Data are not in siman format: use siman setup"
        exit 459
        {c )-}
      - if mi(`"`options'"') siman_`subcmd' `rest' `if' `in'
      = if mi(`"longwide"') siman_reshape   
      - else siman_`subcmd' `rest' `if' `in', `options'
      = else siman_reshape   , longwide
      {hline 80} end siman {hline}
    - foreach thing in `_dta[siman_allthings]' {c -(}
    = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 {c -(}
    - local `thing' : char _dta[siman_`thing']
    = local allthings : char _dta[siman_allthings]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local rep : char _dta[siman_rep]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgm : char _dta[siman_dgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local target : char _dta[siman_target]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local method : char _dta[siman_method]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local estimate : char _dta[siman_estimate]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local se : char _dta[siman_se]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local df : char _dta[siman_df]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ci : char _dta[siman_ci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local p : char _dta[siman_p]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local true : char _dta[siman_true]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local order : char _dta[siman_order]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local lci : char _dta[siman_lci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local uci : char _dta[siman_uci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ifsetup : char _dta[siman_ifsetup]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local insetup : char _dta[siman_insetup]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local format : char _dta[siman_format]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local targetformat : char _dta[siman_targetformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local methodformat : char _dta[siman_methodformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nformat : char _dta[siman_nformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntarget : char _dta[siman_ntarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ndgm : char _dta[siman_ndgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nmethod : char _dta[siman_nmethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local numtarget : char _dta[siman_numtarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local valtarget : char _dta[siman_valtarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nummethod : char _dta[siman_nummethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local valmethod : char _dta[siman_valmethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntrue : char _dta[siman_ntrue]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntruevalue : char _dta[siman_ntruevalue]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgmvar : char _dta[siman_dgmvar]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local numdgm : char _dta[siman_numdgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgmcreated : char _dta[siman_dgmcreated]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local targetlabels : char _dta[siman_targetlabels]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local methodcreated : char _dta[siman_methodcreated]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local descriptiontype : char _dta[siman_descriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local cidescriptiontype : char _dta[siman_cidescriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local truedescriptiontype : char _dta[siman_truedescriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local estvars : char _dta[siman_estvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local sevars : char _dta[siman_sevars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dfvars : char _dta[siman_dfvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local civars : char _dta[siman_civars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local pvars : char _dta[siman_pvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local truevars : char _dta[siman_truevars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local simansetuprun : char _dta[siman_simansetuprun]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local m1 : char _dta[siman_m1]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local m2 : char _dta[siman_m2]
    - {c )-}
    - foreach u of var * {c -(}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("v1",strlen("v1"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("theta",strlen("theta"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("rho",strlen("rho"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("pc",strlen("pc"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("k",strlen("k"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("expg2",strlen("expg2"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("var2g2",strlen("var2g2"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("exppeto",strlen("exppeto"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("var2peto",strlen("var2peto"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("__000000",strlen("__000000"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("__000001",strlen("__000001"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
    = if substr("exp",strlen("exp"),1)=="_" local estimate = substr("exp", 1, index("exp","_") - 1)
    - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
    = if substr("var2",strlen("var2"),1)=="_" local se = substr("var2", 1, index("var2","_") - 1)
    - if "`subgraphoptions'" == "" {c -(}
    = if "xtit("testaxis")" == "" {c -(}
      local subgraphoptions aspect(1) graphregion(margin(zero)) plotregion(margin(zero)) xtit("") legend(off)
      {c )-}
    - di as text "Working....."
Working.....
    - if `ifdgm' == 1 {c -(}
    = if 0 == 1 {c -(}
      qui drop `dgmtodrop'
      local dgm = "`dgmleft'"
      local dgmvalues = `dgmfiltervalues'
      local numberdgms = 1
      {c )-}
    - if !mi("`methlist'") {c -(}
    = if !mi("") {c -(}
      local numbermethod = `methodcount'
      local methodvalues `methlist'
      {c )-}
    - else local numbermethod = `nummethod'
    = else local numbermethod = 2
    - if mi("`methlist'") | (!mi("`methlist'") & `methodstringindi'==1) local forcommand = "forvalues j = 1/`numbermethod'"
    = if mi("") | (!mi("") & 1==1) local forcommand = "forvalues j = 1/2"
    - else local forcommand = "foreach j in `methodvalues'"
    = else local forcommand = "foreach j in g2 peto"
    - if "`by'"=="" local by ""
    = if ""=="" local by ""
    - else if "`by'"=="`target'" local by by(`target', note("") legend(off))
    = else if ""=="" local by by(, note("") legend(off))
    - else if !mi("`by'") & "`by'"!="`target'" {c -(}
    = else if !mi("") & ""!="" {c -(}
      di as error "Can not have `by' as a 'by' option"
      exit 498
      {c )-}
    - local c 1
    - `forcommand' {c -(}
    = forvalues j = 1/2 {c -(}
    - if `methodstringindi'==0 & `methodlabels' == 0 {c -(}
    = if 1==0 & 0 == 0 {c -(}
      label var `estimate'`j' "`estimate', `mlabel`j''"
      label var `se'`j' "`se', `mlabel`j''"
      local mlabel`c' Method: `j'
      {c )-}
    - else if `methodstringindi'==0 & `methodlabels' == 1 {c -(}
    = else if 1==0 & 0 == 1 {c -(}
      local k : word `j' of `methodvalues'
      label var `estimate'`j' "`estimate', Method_`k'"
      label var `se'`j' "`se', Method_`k'"
      local mlabel`c' Method: `k'
      {c )-}
    - else if `methodstringindi'==1 {c -(}
    = else if 1==1 {c -(}
    - label var `estimate'``j'' "`estimate', Method: ``j''"
    = label var expg2 "exp, Method: g2"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("var", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 16, missing: _label var expg2 "exp, Method: g2"
      - {c )-}
      {hline 80} end label {hline}
    - label var `se'``j'' "`se', Method: ``j''"
    = label var var2g2 "var2, Method: g2"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("var", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 16, missing: _label var var2g2 "var2, Method: g2"
      - {c )-}
      {hline 80} end label {hline}
    - local mlabel`c' Method: ``j''
    = local mlabel1 Method: g2
    - {c )-}
    - if `j'==1 {c -(}
    = if 1==1 {c -(}
    - local pt1 = 0.7
    - local pt2 = 0
    - {c )-}
    - else if `j'==2 {c -(}
    = else if 1==2 {c -(}
      local pt1 = 0.5
      local pt2 = -0.5
      {c )-}
    - else if `j'>2 {c -(}
    = else if 1>2 {c -(}
      local pt1 = 0
      local pt2 = -0.5
      {c )-}
    - `dicmd' twoway scatteri 0 0 (0) "`mlabel`j''" .5 `pt1' (0) "" -.5 `pt2' (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off) `nodraw' mlab(black) `subgraphoptions' nodraw name(`mlabelname`c'', replace)
    =  twoway scatteri 0 0 (0) "Method: g2" .5 .7 (0) "" -.5 0 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_g2, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway scatteri 0 0 (0) "Method: g2" .5 .7 (0) "" -.5 0 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_g2, replace)
      {hline 79} end twoway {hline}
    - local c = `c' + 1
    = local c = 1 + 1
    - {c )-}
    - if `methodstringindi'==0 & `methodlabels' == 0 {c -(}
    = if 1==0 & 0 == 0 {c -(}
      label var `estimate'`j' "`estimate', `mlabel`j''"
      label var `se'`j' "`se', `mlabel`j''"
      local mlabel`c' Method: `j'
      {c )-}
    - else if `methodstringindi'==0 & `methodlabels' == 1 {c -(}
    = else if 1==0 & 0 == 1 {c -(}
      local k : word `j' of `methodvalues'
      label var `estimate'`j' "`estimate', Method_`k'"
      label var `se'`j' "`se', Method_`k'"
      local mlabel`c' Method: `k'
      {c )-}
    - else if `methodstringindi'==1 {c -(}
    = else if 1==1 {c -(}
    - label var `estimate'``j'' "`estimate', Method: ``j''"
    = label var exppeto "exp, Method: peto"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("var", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 16, missing: _label var exppeto "exp, Method: peto"
      - {c )-}
      {hline 80} end label {hline}
    - label var `se'``j'' "`se', Method: ``j''"
    = label var var2peto "var2, Method: peto"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("var", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 16, missing: _label var var2peto "var2, Method: peto"
      - {c )-}
      {hline 80} end label {hline}
    - local mlabel`c' Method: ``j''
    = local mlabel2 Method: peto
    - {c )-}
    - if `j'==1 {c -(}
    = if 2==1 {c -(}
      local pt1 = 0.7
      local pt2 = 0
      {c )-}
    - else if `j'==2 {c -(}
    = else if 2==2 {c -(}
    - local pt1 = 0.5
    - local pt2 = -0.5
    - {c )-}
    - else if `j'>2 {c -(}
    = else if 2>2 {c -(}
      local pt1 = 0
      local pt2 = -0.5
      {c )-}
    - `dicmd' twoway scatteri 0 0 (0) "`mlabel`j''" .5 `pt1' (0) "" -.5 `pt2' (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off) `nodraw' mlab(black) `subgraphoptions' nodraw name(`mlabelname`c'', replace)
    =  twoway scatteri 0 0 (0) "Method: peto" .5 .5 (0) "" -.5 -.5 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_peto, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway scatteri 0 0 (0) "Method: peto" .5 .5 (0) "" -.5 -.5 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_peto, replace)
      {hline 79} end twoway {hline}
    - local c = `c' + 1
    = local c = 2 + 1
    - {c )-}
    - qui tokenize `methodvalues'
    = qui tokenize g2 peto
    - forvalues m = 1/`numbermethod' {c -(}
    = forvalues m = 1/2 {c -(}
    - if `methodstringindi'==0 & mi("`methlist'") {c -(}
    = if 1==0 & mi("") {c -(}
      qui summarize `estimate'`m'
      local minest`m' = `r(min)'
      local maxest`m' = `r(max)'
      qui summarize `se'`m'
      local minse`m' = `r(min)'
      local maxse`m' = `r(max)'
      {c )-}
    - else {c -(}
    - qui summarize `estimate'``m''
    = qui summarize expg2
    - local minest`m' = `r(min)'
    = local minest1 = .4498777091503143
    - local maxest`m' = `r(max)'
    = local maxest1 = 1.095583438873291
    - qui summarize `se'``m''
    = qui summarize var2g2
    - local minse`m' = `r(min)'
    = local minse1 = .0024609714746475
    - local maxse`m' = `r(max)'
    = local maxse1 = .9734957218170166
    - {c )-}
    - if `m'>1 {c -(}
    = if 1>1 {c -(}
      local n = `m' - 1
      if `minest`n'' < `minest`m'' local minest = `minest`n''
      else local minest = `minest`m''
      if `minse`n'' < `minse`m'' local minse = `minse`n''
      else local minse = `minse`m''
      if `maxest`n'' > `maxest`m'' local maxest = `maxest`n''
      else local maxest = `maxest`m''
      if `maxse`n'' > `maxse`m'' local maxse = `maxse`n''
      else local maxse = `maxse`m''
      {c )-}
    - {c )-}
    - if `methodstringindi'==0 & mi("`methlist'") {c -(}
    = if 1==0 & mi("") {c -(}
      qui summarize `estimate'`m'
      local minest`m' = `r(min)'
      local maxest`m' = `r(max)'
      qui summarize `se'`m'
      local minse`m' = `r(min)'
      local maxse`m' = `r(max)'
      {c )-}
    - else {c -(}
    - qui summarize `estimate'``m''
    = qui summarize exppeto
    - local minest`m' = `r(min)'
    = local minest2 = .2799641191959381
    - local maxest`m' = `r(max)'
    = local maxest2 = 1.009488821029663
    - qui summarize `se'``m''
    = qui summarize var2peto
    - local minse`m' = `r(min)'
    = local minse2 = .0011168431956321
    - local maxse`m' = `r(max)'
    = local maxse2 = .0873664394021034
    - {c )-}
    - if `m'>1 {c -(}
    = if 2>1 {c -(}
    - local n = `m' - 1
    = local n = 2 - 1
    - if `minest`n'' < `minest`m'' local minest = `minest`n''
    = if .4498777091503143 < .2799641191959381 local minest = .4498777091503143
    - else local minest = `minest`m''
    = else local minest = .2799641191959381
    - if `minse`n'' < `minse`m'' local minse = `minse`n''
    = if .0024609714746475 < .0011168431956321 local minse = .0024609714746475
    - else local minse = `minse`m''
    = else local minse = .0011168431956321
    - if `maxest`n'' > `maxest`m'' local maxest = `maxest`n''
    = if 1.095583438873291 > 1.009488821029663 local maxest = 1.095583438873291
    - else local maxest = `maxest`m''
    = else local maxest = 1.009488821029663
    - if `maxse`n'' > `maxse`m'' local maxse = `maxse`n''
    = if .9734957218170166 > .0873664394021034 local maxse = .9734957218170166
    - else local maxse = `maxse`m''
    = else local maxse = .0873664394021034
    - {c )-}
    - {c )-}
    - local track 1
    - foreach j in `methodvalues' {c -(}
    = foreach j in g2 peto {c -(}
    - foreach option in `estimate' `se' {c -(}
    = foreach option in exp var2 {c -(}
    - local `option'`j' = "`option'`j'"
    = local expg2 = "expg2"
    - if `track'==1 local `option'list ``option'`j''
    = if 1==1 local explist expg2
    - else if `track'>=2 local `option'list ``option'list' ``option'`j''
    = else if 1>=2 local explist expg2 expg2
    - {c )-}
    - local `option'`j' = "`option'`j'"
    = local var2g2 = "var2g2"
    - if `track'==1 local `option'list ``option'`j''
    = if 1==1 local var2list var2g2
    - else if `track'>=2 local `option'list ``option'list' ``option'`j''
    = else if 1>=2 local var2list var2g2 var2g2
    - {c )-}
    - local track = `track' + 1
    = local track = 1 + 1
    - {c )-}
    - foreach option in `estimate' `se' {c -(}
    = foreach option in exp var2 {c -(}
    - local `option'`j' = "`option'`j'"
    = local exppeto = "exppeto"
    - if `track'==1 local `option'list ``option'`j''
    = if 2==1 local explist exppeto
    - else if `track'>=2 local `option'list ``option'list' ``option'`j''
    = else if 2>=2 local explist expg2 exppeto
    - {c )-}
    - local `option'`j' = "`option'`j'"
    = local var2peto = "var2peto"
    - if `track'==1 local `option'list ``option'`j''
    = if 2==1 local var2list var2peto
    - else if `track'>=2 local `option'list ``option'list' ``option'`j''
    = else if 2>=2 local var2list var2g2 var2peto
    - {c )-}
    - local track = `track' + 1
    = local track = 2 + 1
    - {c )-}
    - if ("`anything'"=="" | "`anything'"=="`estimate'") local varlist ``estimate'list'
    = if (""=="" | ""=="exp") local varlist expg2 exppeto
    - else if ("`anything'"=="`se'") local varlist ``se'list'
    = else if (""=="var2") local varlist var2g2 var2peto
    - local countanything: word count `anything'
    = local countanything: word count 
    - if (`countanything'==1 | `countanything'==0) local half half
    = if (0==1 | 0==0) local half half
    - local name = "simancms"
    - if !mi(`"`options'"') {c -(}
    = if !mi(`"title("testtitle") name("cms_test7", replace)"') {c -(}
    - tempvar _namestring
    - qui gen `_namestring' = `"`options'"'
    = qui gen __000002 = `"title("testtitle") name("cms_test7", replace)"'
    - qui split `_namestring', parse(`"name"')
    = qui split __000002, parse(`"name"')
      {hline 78} begin split {hline}
      - version 8
      - syntax varname(str) [if] [in] [, Generate(str) noTrim Parse(str asis) DESTRING force float Ignore(string asis) percent Limit(numlist int >0 max=1) ]
      - local verpre : display "version " %4.1f _caller() ":"
      - if "`destring'"=="" {c -(}
      = if ""=="" {c -(}
      - foreach option in force float ignore percent {c -(}
      - if `"``option''"'!="" {c -(}
      = if `""'!="" {c -(}
        display as error "may not specify `option' without specifying destring"
        exit 198
        {c )-}
      - {c )-}
      - if `"``option''"'!="" {c -(}
      = if `""'!="" {c -(}
        display as error "may not specify `option' without specifying destring"
        exit 198
        {c )-}
      - {c )-}
      - if `"``option''"'!="" {c -(}
      = if `""'!="" {c -(}
        display as error "may not specify `option' without specifying destring"
        exit 198
        {c )-}
      - {c )-}
      - if `"``option''"'!="" {c -(}
      = if `""'!="" {c -(}
        display as error "may not specify `option' without specifying destring"
        exit 198
        {c )-}
      - {c )-}
      - {c )-}
      - else {c -(}
        if `"`ignore'"'!="" {c -(}
        if _caller() >= 14 {c -(}
        if ustrfindfirst(`"`ignore'"',",") & !ustrfindfirst(`"`ignore'"',`"""') {c -(}
        display as error `"ignore string must be enclosed with quotes to ignore commas or use options"'
        exit 198
        {c )-}
        {c )-}
        `verpre' _parse_ignore `ignore'
        {c )-}
        {c )-}
      - marksample touse, strok
      - qui count if `touse'
      = qui count if __000003
      - if r(N) == 0 {c -(}
        error 2000
        {c )-}
      - if `"`parse'"' == `""' | `"`parse'"' == `""""' {c -(}
      = if `"`"name"'"' == `""' | `"`"name"'"' == `""""' {c -(}
        if "`trim'" != "" {c -(}
        di as err "parsing on spaces incompatible with notrim"
        exit 198
        {c )-}
        local parse `"" ""'
        local trm "trim"
        {c )-}
      - if `"`parse'"' == `""' | `"`parse'"' == `""""' {c -(}
      = if `"`"name"'"' == `""' | `"`"name"'"' == `""""' {c -(}
        local parse `"" ""'
        local trm "trim"
        {c )-}
      - local nparse : word count `parse'
      = local nparse : word count `"name"'
      - tokenize `"`parse'"'
      = tokenize `"`"name"'"'
      - if `"`generate'"' != "" {c -(}
      = if `""' != "" {c -(}
        confirm name `generate'
        if `: word count `generate'' > 1 {c -(}
        di as err "invalid stub `generate'"
        exit 198
        {c )-}
        {c )-}
      - qui {c -(}
      - tempvar vw tp mp pl
      - gen int `tp' = 0
      = gen int __000005 = 0
      - gen int `mp' = 0
      = gen int __000006 = 0
      - gen int `pl' = 0
      = gen int __000007 = 0
      - gen str1 `vw' = ""
      = gen str1 __000004 = ""
      - if "`trim'" == "" {c -(}
      = if "" == "" {c -(}
      - replace `vw' = trim(`varlist') if `touse'
      = replace __000004 = trim(__000002) if __000003
      - {c )-}
      - else {c -(}
        replace `vw' = `varlist' if `touse'
        {c )-}
      - {c )-}
      - if "`generate'" == "" {c -(}
      = if "" == "" {c -(}
      - local generate "`varlist'"
      = local generate "__000002"
      - {c )-}
      - local j = 0
      - local go = 1
      - if "`limit'" == "" {c -(}
      = if "" == "" {c -(}
      - local limit .
      - {c )-}
      - qui while `go' & `j' < `limit' {c -(}
      = qui while 1 & 0 < . {c -(}
      - replace `mp' = .
      = replace __000006 = .
      - replace `pl' = 0
      = replace __000007 = 0
      - forval i = 1 / `nparse' {c -(}
      = forval i = 1 / 1 {c -(}
      - replace `tp' = index(`vw', `"``i''"')
      = replace __000005 = index(__000004, `"name"')
      - replace `mp' = min(`tp', `mp') if `tp'
      = replace __000006 = min(__000005, __000006) if __000005
      - replace `pl' = length(`"``i''"') if `mp' == `tp'
      = replace __000007 = length(`"name"') if __000006 == __000005
      - {c )-}
      - local ++j
      - tempvar part`j'
      = tempvar part1
      - gen str1 `part`j'' = ""
      = gen str1 __000008 = ""
      - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
      = replace __000008 = substr(__000004, 1, __000006-1) if __000006 < .
      - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
      = replace __000004 = (substr(__000004, __000006+__000007, .)) if __000006 < .
      - replace `part`j'' = `vw' if `mp' >= .
      = replace __000008 = __000004 if __000006 >= .
      - replace `vw' = "" if `mp' >= .
      = replace __000004 = "" if __000006 >= .
      - local newvars "`newvars'`generate'`j' "
      = local newvars "__0000021 "
      - capture assert `vw' == ""
      = capture assert __000004 == ""
      - local go = _rc
      - {c )-}
      - qui while `go' & `j' < `limit' {c -(}
      = qui while 9 & 1 < . {c -(}
      - replace `mp' = .
      = replace __000006 = .
      - replace `pl' = 0
      = replace __000007 = 0
      - forval i = 1 / `nparse' {c -(}
      = forval i = 1 / 1 {c -(}
      - replace `tp' = index(`vw', `"``i''"')
      = replace __000005 = index(__000004, `"name"')
      - replace `mp' = min(`tp', `mp') if `tp'
      = replace __000006 = min(__000005, __000006) if __000005
      - replace `pl' = length(`"``i''"') if `mp' == `tp'
      = replace __000007 = length(`"name"') if __000006 == __000005
      - {c )-}
      - local ++j
      - tempvar part`j'
      = tempvar part2
      - gen str1 `part`j'' = ""
      = gen str1 __000009 = ""
      - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
      = replace __000009 = substr(__000004, 1, __000006-1) if __000006 < .
      - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
      = replace __000004 = (substr(__000004, __000006+__000007, .)) if __000006 < .
      - replace `part`j'' = `vw' if `mp' >= .
      = replace __000009 = __000004 if __000006 >= .
      - replace `vw' = "" if `mp' >= .
      = replace __000004 = "" if __000006 >= .
      - local newvars "`newvars'`generate'`j' "
      = local newvars "__0000021 __0000022 "
      - capture assert `vw' == ""
      = capture assert __000004 == ""
      - local go = _rc
      - {c )-}
      - qui while `go' & `j' < `limit' {c -(}
      = qui while 0 & 2 < . {c -(}
        replace `mp' = .
        replace `pl' = 0
        forval i = 1 / `nparse' {c -(}
        replace `tp' = index(`vw', `"``i''"')
        replace `mp' = min(`tp', `mp') if `tp'
        replace `pl' = length(`"``i''"') if `mp' == `tp'
        {c )-}
        local ++j
        tempvar part`j'
        gen str1 `part`j'' = ""
        replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
        replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
        replace `part`j'' = `vw' if `mp' >= .
        replace `vw' = "" if `mp' >= .
        local newvars "`newvars'`generate'`j' "
        capture assert `vw' == ""
        local go = _rc
        {c )-}
      - capture confirm new var `newvars'
      = capture confirm new var __0000021 __0000022 
      - if _rc {c -(}
        di as err "cannot generate new variables using stub `generate'"
        exit _rc
        {c )-}
      - qui forval i = 1 / `j' {c -(}
      = qui forval i = 1 / 2 {c -(}
      - gen str1 `generate'`i' = ""
      = gen str1 __0000021 = ""
      - replace `generate'`i' = `part`i''
      = replace __0000021 = __000008
      - {c )-}
      - gen str1 `generate'`i' = ""
      = gen str1 __0000022 = ""
      - replace `generate'`i' = `part`i''
      = replace __0000022 = __000009
      - {c )-}
      - return local varlist "`newvars'"
      = return local varlist "__0000021 __0000022 "
      - return local nvars "`j'"
      = return local nvars "2"
      - local s = cond(`j' > 1, "s", "")
      = local s = cond(2 > 1, "s", "")
      - if "`destring'" != "" {c -(}
      = if "" != "" {c -(}
        di as res "variable`s' born as string: "
        {c )-}
      - else di as res "variable`s' created as string: "
      = else di as res "variables created as string: "
      - ds `newvars'
      = ds __0000021 __0000022 
      - if "`destring'" != "" {c -(}
      = if "" != "" {c -(}
        if `"`ignore'"' != "" {c -(}
        local ignore `"ignore(`ignore')"'
        {c )-}
        `verpre' destring `newvars', replace `force' `float' `ignore' `percent'
        {c )-}
      {hline 80} end split {hline}
    - local options = `_namestring'1
    = local options = __0000021
    - cap confirm var `_namestring'2
    = cap confirm var __0000022
    - if !_rc {c -(}
    - local namestring = `_namestring'2
    = local namestring = __0000022
    - local name = `namestring'
    = local name = ("cms_test7", replace)
    - {c )-}
    - {c )-}
    - if "`dgm'"=="" local dgmvalues=1
    = if "theta rho pc k"=="" local dgmvalues=1
    - if `numberdgms'==1 {c -(}
    = if 4==1 {c -(}
      foreach m in `dgmvalues' {c -(}
      if !mi("`debug'") di as text "Loop for numberdgms = 1: m = `m'"
      if "`valtarget'"!= "N/A" {c -(}
      qui levelsof `target', local(targetlevels)
      local foreachtarget "`targetlevels'"
      {c )-}
      else local foreachtarget 1
      foreach t in `foreachtarget' {c -(}
      cap confirm numeric variable `target'
      if _rc local iftarget `"& `target' == "`t'""'
      else local iftarget `"& `target' == `t'"'
      if "`valtarget'"== "N/A" local iftarget
      local frtheta `minest' `maxest'
      local frse `minse' `maxse'
      if `methodstringindi'==0 {c -(}
      if mi("`methlist'") {c -(}
      if `methodlabels'!= 1 local methodvalues `valmethod'
      else local methodvalues `valmethodnumwithlabel'
      {c )-}
      local maxmethodvalues : word `numbermethod' of `methodvalues'
      local maxmethodvaluesplus1 = substr("`methodvalues'", -`numbermethod', .)
      local maxmethodvaluesminus1 = substr("`methodvalues'", 1 ,`numbermethod')
      local counter = 1
      local counterplus1 = 2
      foreach j in `maxmethodvaluesminus1' {c -(}
      foreach k in `maxmethodvaluesplus1' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'`j' `estimate'`k' if `dgm'==`m' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'`j'`k'dgm`m'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'`j' `se'`k' if `dgm'==`m' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'`j'`k'dgm`m'tar`t', replace)
      local graphtheta`counter'`counterplus1'`m'`t' `estimate'`j'`k'dgm`m'tar`t'
      local graphse`counter'`counterplus1'`m'`t' `se'`j'`k'dgm`m'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
      else if `methodstringindi'==1 | !mi("`methlist'") {c -(}
      local counter = 1
      local counterplus1 = 2
      local maxmethodvaluesminus1 = `numbermethod' - 1
      forvalues j = 1/`maxmethodvaluesminus1' {c -(}
      forvalues k = 2/`numbermethod' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'``j'' `estimate'``k'' if `dgm'==`m' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'``j''``k''dgm`m'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'``j'' `se'``k'' if `dgm'==`m'`iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'``j''``k''dgm`m'tar`t', replace)
      local graphtheta`counter'`counterplus1'`m'`t' `estimate'``j''``k''dgm`m'tar`t'
      local graphse`counter'`counterplus1'`m'`t' `se'``j''``k''dgm`m'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
      if `targetlabels' == 1 {c -(}
      local tlab: word `t' of `valtarget'
      local targetlab ", `target': `tlab'"
      {c )-}
      else {c -(}
      local tlab `t'
      local targetlab ", `target': `tlab'"
      {c )-}
      if "`valtarget'"== "N/A" local targetlab
      if `numbermethod'==2 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`m'`t'' `graphse12`m'`t'' `mlabelname2' , title("") note("Graphs for `dgm': ``dgm'dlabel`m'' `targetlab'") cols(2) xsize(4) name(`name'_dgm`m'`tlab', replace) `options'
      {c )-}
      else if `numbermethod'==3 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`m'`t'' `graphtheta13`m'`t'' `graphse12`m'`t'' `mlabelname2' `graphtheta23`m'`t'' `graphse13`m'`t'' `graphse23`m'`t'' `mlabelname3' , title("") note("Graphs for `dgm': ``dgm'dlabel`m'' `targetlab'") cols(3) xsize(4) name(`name'_dgm`m'`tlab', replace) `options'
      {c )-}
      else if `numbermethod'>3 {c -(}
      if mi("`anything'") local anything = "est"
      `dicmd' graph matrix `varlist' if `dgm'==`m' `iftarget', `half' `by' title("") note("") name(`name'_`anything'`j'`k'dgm`m'`tlab', replace) `options'
      {c )-}
      {c )-}
      {c )-}
      {c )-}
    - else if `numberdgms' != 1 {c -(}
    = else if 4 != 1 {c -(}
    - foreach dgmvar in `dgmvalues' {c -(}
    = foreach dgmvar in theta rho pc k {c -(}
    - if !mi("`debug'") di as text "Loop for numberdgms > 1: m = `m'"
    = if !mi("") di as text "Loop for numberdgms > 1: m = "
    - local dgmlabels = 0
    - qui tab `dgmvar'
    = qui tab theta
    - local ndgmvar = `r(r)'
    = local ndgmvar = 4
    - cap qui labelsof `dgmvar'
    = cap qui labelsof theta
      {hline 75} begin labelsof {hline}
      - version 8
      - syntax name [, Label ]
      - if "`label'"=="" {c -(}
      = if ""=="" {c -(}
      - local labdef: value label `namelist'
      = local labdef: value label theta
      - if `"`labdef'"'=="" {c -(}
      = if `"theta_new"'=="" {c -(}
        exit
        {c )-}
      - {c )-}
      - else local labdef "`namelist'"
      = else local labdef "theta"
      - tempfile fn
      - qui label save `labdef' using `"`fn'"'
      = qui label save theta_new using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_1080_000004.tmp"'
      - tempname fh
      - file open `fh' using `"`fn'"', read
      = file open __000003 using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_1080_000004.tmp"', read
      - file read `fh' line
      = file read __000003 line
      - local values
      - local labels
      - local space
      - if "`label'"=="" di as txt _n "`namelist' ({c -(}res{c )-}`labdef'{c -(}txt{c )-}):" _n
      = if ""=="" di as txt _n "theta ({c -(}res{c )-}theta_new{c -(}txt{c )-}):" _n
      - else di as txt _n "`labdef':"
      = else di as txt _n "theta_new:"
      - while r(eof)==0 {c -(}
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken label line : line, parse(", ") match(paren)
      - local values "`values'`space'`value'"
      = local values "1"
      - local labels `"`labels'`space'`"`label'"'"'
      = local labels `"`"0.5"'"'
      - di as res %12s "`value'" " " `"`label'"'
      = di as res %12s "1" " " `"0.5"'
      - file read `fh' line
      = file read __000003 line
      - local space " "
      - {c )-}
      - while r(eof)==0 {c -(}
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken label line : line, parse(", ") match(paren)
      - local values "`values'`space'`value'"
      = local values "1 2"
      - local labels `"`labels'`space'`"`label'"'"'
      = local labels `"`"0.5"' `"0.67"'"'
      - di as res %12s "`value'" " " `"`label'"'
      = di as res %12s "2" " " `"0.67"'
      - file read `fh' line
      = file read __000003 line
      - local space " "
      - {c )-}
      - while r(eof)==0 {c -(}
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken label line : line, parse(", ") match(paren)
      - local values "`values'`space'`value'"
      = local values "1 2 3"
      - local labels `"`labels'`space'`"`label'"'"'
      = local labels `"`"0.5"' `"0.67"' `"0.75"'"'
      - di as res %12s "`value'" " " `"`label'"'
      = di as res %12s "3" " " `"0.75"'
      - file read `fh' line
      = file read __000003 line
      - local space " "
      - {c )-}
      - while r(eof)==0 {c -(}
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken label line : line, parse(", ") match(paren)
      - local values "`values'`space'`value'"
      = local values "1 2 3 4"
      - local labels `"`labels'`space'`"`label'"'"'
      = local labels `"`"0.5"' `"0.67"' `"0.75"' `"1"'"'
      - di as res %12s "`value'" " " `"`label'"'
      = di as res %12s "4" " " `"1"'
      - file read `fh' line
      = file read __000003 line
      - local space " "
      - {c )-}
      - while r(eof)==0 {c -(}
        gettoken value line : line
        gettoken value line : line
        gettoken value line : line
        gettoken value line : line
        gettoken label line : line, parse(", ") match(paren)
        local values "`values'`space'`value'"
        local labels `"`labels'`space'`"`label'"'"'
        di as res %12s "`value'" " " `"`label'"'
        file read `fh' line
        local space " "
        {c )-}
      - file close `fh'
      = file close __000003
      - ret local labels `"`labels'"'
      = ret local labels `"`"0.5"' `"0.67"' `"0.75"' `"1"'"'
      - ret local values "`values'"
      = ret local values "1 2 3 4"
      - ret local name "`labdef'"
      = ret local name "theta_new"
      {hline 77} end labelsof {hline}
    - cap qui ret list
    - if `"`r(labels)'"'!="" {c -(}
    = if `"`"0.5"' `"0.67"' `"0.75"' `"1"'"'!="" {c -(}
    - local 0 = `"`r(labels)'"'
    = local 0 = `"`"0.5"' `"0.67"' `"0.75"' `"1"'"'
    - forvalues i = 1/`ndgmvar' {c -(}
    = forvalues i = 1/4 {c -(}
    - gettoken `dgmvar'dlabel`i' 0 : 0, parse(": ")
    = gettoken thetadlabel1 0 : 0, parse(": ")
    - local dgmlabels = 1
    - {c )-}
    - gettoken `dgmvar'dlabel`i' 0 : 0, parse(": ")
    = gettoken thetadlabel2 0 : 0, parse(": ")
    - local dgmlabels = 1
    - {c )-}
    - gettoken `dgmvar'dlabel`i' 0 : 0, parse(": ")
    = gettoken thetadlabel3 0 : 0, parse(": ")
    - local dgmlabels = 1
    - {c )-}
    - gettoken `dgmvar'dlabel`i' 0 : 0, parse(": ")
    = gettoken thetadlabel4 0 : 0, parse(": ")
    - local dgmlabels = 1
    - {c )-}
    - {c )-}
    - else {c -(}
      local dgmlabels = 0
      qui levels `dgmvar', local(levels)
      local loop = 1
      foreach l of local levels {c -(}
      local `dgmvar'dlabel`loop' `l'
      local loop = `loop' + 1
      {c )-}
      {c )-}
    - tempvar _group
    - qui egen `_group' = group(`dgmvalues'), label lname(grouplevels)
    = qui egen __000003 = group(theta rho pc k), label lname(grouplevels)
      {hline 79} begin egen {hline}
      - version 6, missing
      - local cvers = _caller()
      - gettoken type 0 : 0, parse(" =(")
      - gettoken name 0 : 0, parse(" =(")
      - if `"`name'"'=="=" {c -(}
      = if `"="'=="=" {c -(}
      - local name `"`type'"'
      = local name `"__000003"'
      - local type : set type
      - {c )-}
      - else {c -(}
        gettoken eqsign 0 : 0, parse(" =(")
        if `"`eqsign'"' != "=" {c -(}
        error 198
        {c )-}
        {c )-}
      - confirm new variable `name'
      = confirm new variable __000003
      - gettoken fcn 0 : 0, parse(" =(")
      - gettoken args 0 : 0, parse(" ,") match(par)
      - if "`c(adoarchive)'"=="1" {c -(}
      = if ""=="1" {c -(}
        capture qui _stfilearchive find _g`fcn'.ado
        if _rc {c -(}
        di as err in smcl "unknown {c -(}bf:egen{c )-} function {c -(}bf:`fcn'(){c )-}"
        exit 133
        {c )-}
        {c )-}
      - else {c -(}
      - capture qui findfile _g`fcn'.ado
      = capture qui findfile _ggroup.ado
      - if (`"`r(fn)'"' == "") {c -(}
      = if (`"C:\Program Files\Stata16\ado\base/_/_ggroup.ado"' == "") {c -(}
        di as err in smcl "unknown {c -(}bf:egen{c )-} function {c -(}bf:`fcn'(){c )-}"
        exit 133
        {c )-}
      - {c )-}
      - if `"`par'"' != "(" {c -(}
      = if `"("' != "(" {c -(}
        exit 198
        {c )-}
      - if `"`args'"' == "_all" | `"`args'"' == "*" {c -(}
      = if `"theta rho pc k"' == "_all" | `"theta rho pc k"' == "*" {c -(}
        version 7.0, missing
        unab args : _all
        local args : subinstr local args "`_sortindex'" "", all word
        version 6.0, missing
        {c )-}
      - syntax [if] [in] [, *]
      - if _by() {c -(}
        local byopt "by(`_byvars')"
        local cma ","
        {c )-}
      - else if `"`options'"' != "" {c -(}
      = else if `"label lname(grouplevels)"' != "" {c -(}
      - local cma ","
      - {c )-}
      - tempvar dummy
      - global EGEN_Varname `name'
      = global EGEN_Varname __000003
      - version 7.0, missing
      - global EGEN_SVarname `_sortindex'
      = global EGEN_SVarname __000004
      - version 6.0, missing
      - if inlist("`fcn'","mode","concat","group") {c -(}
      = if inlist("group","mode","concat","group") {c -(}
      - local vv : display "version " string(`cvers') ", missing:"
      = local vv : display "version " string(16) ", missing:"
      - {c )-}
      - capture noisily `vv' _g`fcn' `type' `dummy' = (`args') `if' `in' `cma' `byopt' `options'
      = capture noisily version 16, missing: _ggroup float __000005 = (theta rho pc k)   ,  label lname(grouplevels)
      - version 7.0, missing
      - local message $EGEN_Message
      = local message 1
      - version 6.0, missing
      - global EGEN_SVarname
      - global EGEN_Varname
      - global EGEN_Message
      - if _rc {c -(} exit _rc {c )-}
      - if "`message'" == "" {c -(}
      = if "1" == "" {c -(}
        quietly count if missing(`dummy')
        if r(N) {c -(}
        local s = cond(r(N)>1,"s","")
        local N : di %11.0fc r(N)
        local N `N'
        di in bl "(`N' missing value`s' generated)"
        {c )-}
        {c )-}
      - rename `dummy' `name'
      = rename __000005 __000003
      {hline 81} end egen {hline}
    - local group "`_group'"
    = local group "__000003"
    - qui tab `group'
    = qui tab __000003
    - local groupnum = `r(r)'
    = local groupnum = 192
    - if "`numtarget'" == "N/A" local numtargetcheck = 1
    = if "N/A" == "N/A" local numtargetcheck = 1
    - else local numtargetcheck = `numtarget'
    = else local numtargetcheck = N/A
    - if "`groupnum'" == "" local totalgroupnum = 1
    = if "192" == "" local totalgroupnum = 1
    - else local totalgroupnum = `groupnum'
    = else local totalgroupnum = 192
    - local graphnumcheck = `totalgroupnum' * `numtargetcheck'
    = local graphnumcheck = 192 * 1
    - if `graphnumcheck' > 15 {c -(}
    = if 192 > 15 {c -(}
    - di as error "{c -(}it: WARNING: `graphnumcheck' graphs will be created, consider using 'if' option as detailed in {c -(}help              siman_comparemethodsscatter:siman comparemethodsscatter{c )-}{c )-}"
    = di as error "{c -(}it: WARNING: 192 graphs will be created, consider using 'if' option as detailed in {c -(}help              siman_comparemethodsscatter:siman comparemethodsscatter{c )-}{c )-}"
{err}{it: WARNING: 192 graphs will be created, consider using 'if' option as detailed in {help              siman_comparemethodsscatter:siman comparemethodsscatter}}
    {txt}- {c )-}
    - forvalues d = 1/`groupnum' {c -(}
    = forvalues d = 1/192 {c -(}
    - local dgmfilter = "`group'==`d'"
    = local dgmfilter = "__000003==1"
    - local dgmlevels`d' : label grouplevels `d'
    = local dgmlevels1 : label grouplevels 1
    - if "`valtarget'"!= "N/A" {c -(}
    = if "N/A"!= "N/A" {c -(}
      qui levelsof `target', local(targetlevels)
      local foreachtarget "`targetlevels'"
      {c )-}
    - else local foreachtarget 1
    - foreach t in `foreachtarget' {c -(}
    = foreach t in 1 {c -(}
    - cap confirm numeric variable `target'
    = cap confirm numeric variable 
    - if _rc local iftarget `"& `target' == "`t'""'
    = if _rc local iftarget `"&  == "1""'
    - else local iftarget `"& `target' == `t'"'
    = else local iftarget `"&  == 1"'
    - if "`valtarget'"== "N/A" local iftarget
    = if "N/A"== "N/A" local iftarget
    - local frtheta `minest' `maxest'
    = local frtheta .2799641191959381 1.095583438873291
    - local frse `minse' `maxse'
    = local frse .0011168431956321 .9734957218170166
    - if `methodstringindi'==0 {c -(}
    = if 1==0 {c -(}
      if mi("`methlist'") {c -(}
      if `methodlabels'!= 1 local methodvalues `valmethod'
      else local methodvalues `valmethodnumwithlabel'
      {c )-}
      local maxmethodvalues : word `numbermethod' of `methodvalues'
      local maxmethodvaluesplus1 = substr("`methodvalues'", -`numbermethod', .)
      local maxmethodvaluesminus1 = substr("`methodvalues'", 1 ,`numbermethod')
      local counter = 1
      local counterplus1 = 2
      foreach j in `maxmethodvaluesminus1' {c -(}
      foreach k in `maxmethodvaluesplus1' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'`j' `estimate'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`estimate'`j'`k'`d'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'`j' `se'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`se'`j'`k'`d'tar`t', replace)
      local graphtheta`counter'`counterplus1'`d'`t' `estimate'`j'`k'`d'tar`t'
      local graphse`counter'`counterplus1'`d'`t' `se'`j'`k'`d'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
    - else if `methodstringindi'==1 | !mi("`methlist'") {c -(}
    = else if 1==1 | !mi("") {c -(}
    - local counter = 1
    - local counterplus1 = 2
    - local maxmethodvaluesminus1 = `numbermethod' - 1
    = local maxmethodvaluesminus1 = 2 - 1
    - forvalues j = 1/`maxmethodvaluesminus1' {c -(}
    = forvalues j = 1/1 {c -(}
    - forvalues k = 2/`numbermethod' {c -(}
    = forvalues k = 2/2 {c -(}
    - if "`j'" != "`k'" {c -(}
    = if "1" != "2" {c -(}
    - `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'``j'' `estimate'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'``j''``k''`d'tar`t', replace)
    =  twoway (function x, range(.2799641191959381 1.095583438873291) lcolor(gs10)) (scatter expg2 exppeto if __000003==1 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(expg2peto1tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.2799641191959381 1.095583438873291) lcolor(gs10)) (scatter expg2 exppeto if __000003==1 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(expg2peto1tar1, replace)
      {hline 79} end twoway {hline}
    - `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'``j'' `se'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'``j''``k''`d'tar`t', replace)
    =  twoway (function x, range(.0011168431956321 .9734957218170166) lcolor(gs10)) (scatter var2g2 var2peto if __000003==1 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(var2g2peto1tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.0011168431956321 .9734957218170166) lcolor(gs10)) (scatter var2g2 var2peto if __000003==1 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(var2g2peto1tar1, replace)
      {hline 79} end twoway {hline}
    - local graphtheta`counter'`counterplus1'`d'`t' `estimate'``j''``k''`d'tar`t'
    = local graphtheta1211 expg2peto1tar1
    - local graphse`counter'`counterplus1'`d'`t' `se'``j''``k''`d'tar`t'
    = local graphse1211 var2g2peto1tar1
    - local counterplus1 = `counterplus1' + 1
    = local counterplus1 = 2 + 1
    - if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
    = if 3 > 2 local counterplus1 = 2
    - {c )-}
    - {c )-}
    - local counter = `counter' + 1
    = local counter = 1 + 1
    - {c )-}
    - {c )-}
    - if `targetlabels' == 1 {c -(}
    = if 0 == 1 {c -(}
      local tlab: word `t' of `valtarget'
      local targetlab ", `target': `tlab'"
      {c )-}
    - else {c -(}
    - local tlab `t'
    = local tlab 1
    - local targetlab ", `target': `tlab'"
    = local targetlab ", : 1"
    - {c )-}
    - if "`valtarget'"== "N/A" local targetlab
    = if "N/A"== "N/A" local targetlab
    - if `numbermethod'==2 {c -(}
    = if 2==2 {c -(}
    - `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphse12`d'`t'' `mlabelname2',
    =  graph combine Method_g2 expg2peto1tar1 var2g2peto1tar1 Method_peto,
      {hline 78} begin graph {hline}
      - if d(`=c(born_date)') < d(23Jul2004) {c -(}
      = if d(14 Feb 2022) < d(23Jul2004) {c -(}
        di as err "your Stata executable is out of date"
        di as err "    type -update executable- at the Stata prompt"
        exit 498
        {c )-}
      - local ver = string(_caller())
      - if (_caller() < 8.2) version 8
      - else if (_caller() < 10 ) version 8.2
      - else version 10
      - gdi record = yes
      - gdi maybedraw = yes
      - if "`._Gr_Global.isa'" == "" {c -(}
      = if "class" == "" {c -(}
        ._Gr_Global = .global_g.new
        {c )-}
      - ._Gr_Global.callerver = "`ver'"
      = ._Gr_Global.callerver = "16"
      - capture noisily Graph `0'
      = capture noisily Graph combine Method_g2 expg2peto1tar1 var2g2peto1tar1 Method_peto,
{res}      {txt}- local rc = _rc
      - gdi record = yes
      - gdi maybedraw = yes
      - gdi end
      - exit `rc'
      = exit 0
      {hline 80} end graph {hline}
    - title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(2) xsize(4) name(`name'_`d'`tlab', replace) `options'
    = title("") note("Graphs for theta rho pc k: 0.5 no 10% 5 ") cols(2) xsize(4) name(cms_test7_11, replace) title("testtitle") 
{err}command {bf}title{sf} is unrecognized
     {txt} {c )-}
      else if `numbermethod'==3 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphtheta13`d'`t'' `graphse12`d'`t'' `mlabelname2' `graphtheta23`d'`t'' `graphse13`d'`t'' `graphse23`d'`t'' `mlabelname3', title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(3) xsize(4) name(`name'_`d'`tlab', replace) `options'
      {c )-}
      else if `numbermethod'>3 {c -(}
      if mi("`anything'") local anything = "est"
      `dicmd' graph matrix `varlist' if `group'==`d' `iftarget', `half' `by' title("") note("") name(`name'_`anything'`j'`k'`d'`tlab', replace) `options'
      {c )-}
      {c )-}
      {c )-}
      {c )-}
      {c )-}
{search r(199), local:r(199);}

end of do-file

{search r(199), local:r(199);}

{com}. clear all
{res}
{com}. prog drop _all

. do "C:\Users\rmjlem1\AppData\Local\Temp\STD1080_000000.tmp"
{txt}
{com}. **********************************************************
. * DGM defined by multiple variables with multiple levels
. **********************************************************
. clear all
{res}{txt}
{com}. prog drop _all
{txt}
{com}. use nestloop/res.dta, clear
{txt}
{com}. keep v1 theta rho pc k exppeto expg2 var2peto var2g2
{txt}
{com}. * theta needs to be in integer format for levelsof command to work (doesn't accept non-integer values), so make integer values with non-integer labels
. gen theta_new=2
{txt}
{com}. replace theta_new=1 if theta == 0.5
{txt}(192 real changes made)

{com}. replace theta_new=3 if theta == 0.75
{txt}(192 real changes made)

{com}. replace theta_new=4 if theta == 1 
{txt}(192 real changes made)

{com}. label define theta_new 1 "0.5" 2 "0.67" 3 "0.75" 4 "1"
{txt}
{com}. label values theta_new theta_new
{txt}
{com}. label var theta_new "theta categories"
{txt}
{com}. *br theta theta_new
. drop theta
{txt}
{com}. rename theta_new theta
{res}{txt}
{com}. gen pc_str = ""
{txt}(768 missing values generated)

{com}. replace pc_str = "5%" if pc == 1
{txt}variable {bf}pc_str{sf} was {bf}{res}str1{sf}{txt} now {bf}{res}str2{sf}
{txt}(192 real changes made)

{com}. replace pc_str = "10%" if pc == 2
{txt}variable {bf}pc_str{sf} was {bf}{res}str2{sf}{txt} now {bf}{res}str3{sf}
{txt}(192 real changes made)

{com}. replace pc_str = "20%" if pc == 3
{txt}(192 real changes made)

{com}. replace pc_str = "30%" if pc == 4
{txt}(192 real changes made)

{com}. drop pc
{txt}
{com}. rename pc_str pc
{res}{txt}
{com}. siman setup, rep(v1) dgm(theta rho pc k) method(peto g2) estimate(exp) se(var2) true(theta)
{res}  {txt}variable {bf}pc{sf} was {bf}{res}long{sf}{txt} now {bf}{res}byte{sf}
{txt}  (2,304 bytes saved)
{err}Warning: variable pc, which appears in dgm(), was stored as a string. It has been
encoded as numeric so that subsequent siman commands will work. If you require a
different order, encode pc as numeric before running -siman setup-.

{txt}{col 20}SUMMARY OF DATA
_____________________________________________________

The siman format is:{res}{col 35}format 3: long-wide
{txt}The format for targets is:{res}{col 35}long
{txt}The format for methods is:{res}{col 35}wide
{txt}The number of targets is:{res}{col 35}N/A
{txt}The target values are:{res}{col 35}N/A

{txt}The number of methods is:{res}{col 35}2
{txt}The method values are:{res}{col 35}peto g2

Data generating mechanism (dgm)
{txt}The total number of dgms is: {res}{col 35}192
{txt}The dgm variables (# levels): {res}{col 35}theta (4) rho (4) pc (4) k (3) 

Estimates are contained in the dataset

{txt}The estimates stub is:{res}{col 35}exp
{txt}The se stub is:{res}{col 35}var2
{txt}The df stub is:{res}{col 35}N/A
{txt}The ci stubs are:{res}{col 35}N/A
{txt}The p stub is:{res}{col 35}N/A
{txt}The true variable is:{res}{col 35}theta
{txt}_____________________________________________________

{com}. 
{txt}end of do-file

{com}. do "C:\Users\rmjlem1\AppData\Local\Temp\STD1080_000000.tmp"
{txt}
{com}. siman comparemethodsscatter, title("testtitle") subgr(xtit("testaxis")) name("cms_test7", replace) 
    {txt}- set tracedepth 1
    - if mi("`estimate'") | mi("`se'") {c -(}
    = if mi("exp") | mi("var2") {c -(}
      di as error "siman scattercomparemethods requires estimate and se to plot"
      exit 498
      {c )-}
    - if "`method'"=="" {c -(}
    = if "peto g2"=="" {c -(}
      di as error "The variable 'method' is missing so siman comparemethodsscatter can not be created.  Please create a variable in your dataset called method containing the method value(s)."
      exit 498
      {c )-}
    - if `nummethod' < 2 {c -(}
    = if 2 < 2 {c -(}
      di as error "There are not enough methods to compare, siman comparemethods scatter requires at least 2 methods."
      exit 498
      {c )-}
    - if !mi("`debug'") local dicmd dicmd
    = if !mi("") local dicmd dicmd
    - tempfile origdata
    - qui save `origdata'
    = qui save C:\Users\rmjlem1\AppData\Local\Temp\ST_1080_000001.tmp
    - if `nformat'!=1 {c -(}
    = if 3!=1 {c -(}
    - qui siman reshape, longlong
      {hline 78} begin siman {hline}
      - version 13
      - syntax [anything] [if] [in], [which *]
      - if "`anything'"=="cms" local anything comparemethodsscatter
      = if "reshape"=="cms" local anything comparemethodsscatter
      - foreach thing in `_dta[siman_allthings]' {c -(}
      = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 {c -(}
      - local `thing' : char _dta[siman_`thing']
      = local allthings : char _dta[siman_allthings]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local rep : char _dta[siman_rep]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgm : char _dta[siman_dgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local target : char _dta[siman_target]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local method : char _dta[siman_method]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estimate : char _dta[siman_estimate]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local se : char _dta[siman_se]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local df : char _dta[siman_df]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ci : char _dta[siman_ci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local p : char _dta[siman_p]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local true : char _dta[siman_true]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local order : char _dta[siman_order]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local lci : char _dta[siman_lci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local uci : char _dta[siman_uci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifsetup : char _dta[siman_ifsetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local insetup : char _dta[siman_insetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local format : char _dta[siman_format]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetformat : char _dta[siman_targetformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodformat : char _dta[siman_methodformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nformat : char _dta[siman_nformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntarget : char _dta[siman_ntarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ndgm : char _dta[siman_ndgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nmethod : char _dta[siman_nmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numtarget : char _dta[siman_numtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valtarget : char _dta[siman_valtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nummethod : char _dta[siman_nummethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valmethod : char _dta[siman_valmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntrue : char _dta[siman_ntrue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruevalue : char _dta[siman_ntruevalue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmvar : char _dta[siman_dgmvar]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numdgm : char _dta[siman_numdgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmcreated : char _dta[siman_dgmcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetlabels : char _dta[siman_targetlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodcreated : char _dta[siman_methodcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local descriptiontype : char _dta[siman_descriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local cidescriptiontype : char _dta[siman_cidescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truedescriptiontype : char _dta[siman_truedescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estvars : char _dta[siman_estvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sevars : char _dta[siman_sevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dfvars : char _dta[siman_dfvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local civars : char _dta[siman_civars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local pvars : char _dta[siman_pvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truevars : char _dta[siman_truevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simansetuprun : char _dta[siman_simansetuprun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m1 : char _dta[siman_m1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m2 : char _dta[siman_m2]
      - {c )-}
      - local subcmds0 setup
      - local subcmds1 describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop
      - local subcmds2
      - local subcmds `subcmds0' `subcmds1' `subcmds'
      = local subcmds setup describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop 
      - if mi("`anything'") {c -(}
      = if mi("reshape") {c -(}
        di as error "Syntax: siman <subcommand>"
        exit 198
        {c )-}
      - if "`anything'"=="which" {c -(}
      = if "reshape"=="which" {c -(}
        which siman
        foreach subcmd of local subcmds {c -(}
        cap noi which siman_`subcmd'
        {c )-}
        exit
        {c )-}
      - gettoken subcmd rest : anything
      - if length("`subcmd'")>=3 {c -(}
      = if length("reshape")>=3 {c -(}
      - foreach thing in `subcmds' {c -(}
      = foreach thing in setup describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop {c -(}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("setup","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("describe","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("analyse","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("analyze","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("table","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("reshape","reshape")==1 {c -(}
      - local subcmd `thing'
      = local subcmd reshape
      - local knowncmd 1
      - {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("lollyplot","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("zipplot","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("comparemethodsscatter","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("blandaltman","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("swarm","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("scatter","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("nestloop","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - {c )-}
      - if "`subcmd'" == "analyze" local subcmd "analyse"
      = if "reshape" == "analyze" local subcmd "analyse"
      - cap which siman_`subcmd'
      = cap which siman_reshape
      - if _rc {c -(}
        di as error "`subcmd' is not a valid siman subcommand"
        if length("`subcmd'")<3 di as error "Minimum abbreviation length is 3"
        exit 198
        {c )-}
      - local type0 : list subcmd in subcmds0
      - if `type0' & !mi("`allthings'") {c -(}
      = if 0 & !mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2") {c -(}
        di as error "Data are already in siman format"
        exit 459
        {c )-}
      - local type1 : list subcmd in subcmds1
      - if `type1' & mi("`allthings'") {c -(}
      = if 1 & mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2") {c -(}
        di as error "Data are not in siman format: use siman setup"
        exit 459
        {c )-}
      - if mi(`"`options'"') siman_`subcmd' `rest' `if' `in'
      = if mi(`"longlong"') siman_reshape   
      - else siman_`subcmd' `rest' `if' `in', `options'
      = else siman_reshape   , longlong
      {hline 80} end siman {hline}
    - foreach thing in `_dta[siman_allthings]' {c -(}
    = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 {c -(}
    - local `thing' : char _dta[siman_`thing']
    = local allthings : char _dta[siman_allthings]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local rep : char _dta[siman_rep]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgm : char _dta[siman_dgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local target : char _dta[siman_target]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local method : char _dta[siman_method]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local estimate : char _dta[siman_estimate]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local se : char _dta[siman_se]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local df : char _dta[siman_df]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ci : char _dta[siman_ci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local p : char _dta[siman_p]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local true : char _dta[siman_true]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local order : char _dta[siman_order]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local lci : char _dta[siman_lci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local uci : char _dta[siman_uci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ifsetup : char _dta[siman_ifsetup]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local insetup : char _dta[siman_insetup]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local format : char _dta[siman_format]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local targetformat : char _dta[siman_targetformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local methodformat : char _dta[siman_methodformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nformat : char _dta[siman_nformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntarget : char _dta[siman_ntarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ndgm : char _dta[siman_ndgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nmethod : char _dta[siman_nmethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local numtarget : char _dta[siman_numtarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local valtarget : char _dta[siman_valtarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nummethod : char _dta[siman_nummethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local valmethod : char _dta[siman_valmethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntrue : char _dta[siman_ntrue]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntruevalue : char _dta[siman_ntruevalue]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgmvar : char _dta[siman_dgmvar]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local numdgm : char _dta[siman_numdgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgmcreated : char _dta[siman_dgmcreated]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local targetlabels : char _dta[siman_targetlabels]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local methodcreated : char _dta[siman_methodcreated]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local descriptiontype : char _dta[siman_descriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local cidescriptiontype : char _dta[siman_cidescriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local truedescriptiontype : char _dta[siman_truedescriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local estvars : char _dta[siman_estvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local sevars : char _dta[siman_sevars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dfvars : char _dta[siman_dfvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local civars : char _dta[siman_civars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local pvars : char _dta[siman_pvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local truevars : char _dta[siman_truevars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local simansetuprun : char _dta[siman_simansetuprun]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local m1 : char _dta[siman_m1]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local m2 : char _dta[siman_m2]
    - {c )-}
    - {c )-}
    - local methodstringindi = 0
    - capture confirm string variable `method'
    = capture confirm string variable method
    - if !_rc local methodstringindi = 1
    - if mi("`methlist'") & `nummethod' > 5 {c -(}
    = if mi("") & 2 > 5 {c -(}
      di as text "Warning: With `nummethod' methods compared, this plot may be too dense to read.  If you find it unreadable, you can choose the methods to compare using -siman comparemethodsscatter-, methlist(a b) where a and b are the methods you are particularly interested to compare."
      {c )-}
    - cap confirm variable `dgm'
    = cap confirm variable theta rho pc k
    - if !_rc {c -(}
    - local numberdgms: word count `dgm'
    = local numberdgms: word count theta rho pc k
    - if `numberdgms'==1 {c -(}
    = if 4==1 {c -(}
      local dgmlabels 0
      qui tab `dgm'
      cap qui labelsof `dgm'
      cap qui ret list
      if `"`r(labels)'"' != "" {c -(}
      local 0 = `"`r(labels)'"'
      forvalues i = 1/`ndgm' {c -(}
      gettoken `dgm'dlabel`i' 0 : 0, parse(": ")
      local dgmlabels = 1
      {c )-}
      {c )-}
      else {c -(}
      local dgmlabels 0
      qui levels `dgm', local(levels)
      local loop 1
      foreach l of local levels {c -(}
      local `dgm'dlabel`loop' `l'
      local loop = `loop' + 1
      {c )-}
      {c )-}
      {c )-}
    - {c )-}
    - if ("`if'"=="" & "`ifsetup'"!="") local ifscatterc = `"`ifsetup'"'
    = if (""=="" & ""!="") local ifscatterc = `""'
    - else local ifscatterc = `"`if'"'
    = else local ifscatterc = `""'
    - local ifdgm = 0
    - if !mi("`ifscatterc'") {c -(}
    = if !mi("") {c -(}
      cap confirm variable `dgm'
      if !_rc {c -(}
      local numberdgms: word count `dgm'
      if `numberdgms'!=1 {c -(}
      gettoken dgmfilter ifscatterc: ifscatterc, parse("==")
      local ifremove "if "
      local dgmleft: list dgmfilter - ifremove
      local dgmorig = "`dgm'"
      local dgmtodrop: list dgm - dgmleft
      local ifdgm = 1
      gettoken dgmleft2 ifscatterc: ifscatterc, parse("==")
      local dgmfiltervalues = `ifscatterc'
      local ifscatterc = `"`if'"'
      {c )-}
      {c )-}
      {c )-}
    - tempvar touseif
    - qui generate `touseif' = 0
    = qui generate __000000 = 0
    - qui replace `touseif' = 1 `ifscatterc'
    = qui replace __000000 = 1 
    - preserve
    - sort `dgm' `target' `method' `touseif'
    = sort theta rho pc k  method __000000
    - capture by `dgm' `target' `method': assert `touseif'==`touseif'[_n-1] if _n>1
    = capture by theta rho pc k  method: assert __000000==__000000[_n-1] if _n>1
    - if _rc == 9 {c -(}
      di as error "The 'if' option can not be applied to 'rep' in siman comparemethodsscatter (cms).  If you have not specified an 'if' in siman cms, but you specified one in siman setup, then that 'if' will have been applied to siman cms."
      exit 498
      {c )-}
    - restore
    - qui keep if `touseif'
    = qui keep if __000000
    - if ("`in'"=="" & "`insetup'"!="") local inscatterc = `"`insetup'"'
    = if (""=="" & ""!="") local inscatterc = `""'
    - else local inscatterc = `"`in'"'
    = else local inscatterc = `""'
    - tempvar tousein
    - qui generate `tousein' = 0
    = qui generate __000001 = 0
    - qui replace `tousein' = 1 `inscatterc'
    = qui replace __000001 = 1 
    - qui keep if `tousein'
    = qui keep if __000001
    - cap confirm variable `dgm'
    = cap confirm variable theta rho pc k
    - if !_rc {c -(}
    - local numberdgms: word count `dgm'
    = local numberdgms: word count theta rho pc k
    - if `numberdgms'==1 {c -(}
    = if 4==1 {c -(}
      qui tab `dgm'
      local ndgmlabels = `r(r)'
      qui levels `dgm', local(levels)
      tokenize `"`levels'"'
      forvalues i=1/`ndgmlabels' {c -(}
      local d`i' = "``i''"
      if `i'==1 local dgmvalues `d`i''
      else local dgmvalues `dgmvalues' `d`i''
      {c )-}
      {c )-}
    - if `numberdgms'!=1 {c -(}
    = if 4!=1 {c -(}
    - local ndgmlabels = `numberdgms'
    = local ndgmlabels = 4
    - local dgmvalues `dgm'
    = local dgmvalues theta rho pc k
    - {c )-}
    - {c )-}
    - preserve
    - qui drop if `rep'<0
    = qui drop if v1<0
    - if !mi("`methlist'") {c -(}
    = if !mi("") {c -(}
      local methodvalues = "`methlist'"
      local methodcount: word count `methlist'
      tempvar tousemethod
      qui generate `tousemethod' = 0
      tokenize `methlist'
      foreach j in `methodvalues' {c -(}
      if `methodstringindi' == 0 qui replace `tousemethod' = 1 if `method' == `j'
      else if `methodstringindi' == 1 qui replace `tousemethod' = 1 if `method' == "`j'"
      {c )-}
      qui keep if `tousemethod' == 1
      qui drop `tousemethod'
      {c )-}
    - qui capture which labelsof
    - if _rc {c -(}
      di as smcl "labelsof package required, please install by clicking: " `"{c -(}stata ssc install labelsof{c )-}"'
      exit
      {c )-}
    - qui labelsof `method'
    = qui labelsof method
      {hline 75} begin labelsof {hline}
      - version 8
      - syntax name [, Label ]
      - if "`label'"=="" {c -(}
      = if ""=="" {c -(}
      - local labdef: value label `namelist'
      = local labdef: value label method
      - if `"`labdef'"'=="" {c -(}
      = if `""'=="" {c -(}
      - exit
      {hline 77} end labelsof {hline}
    - qui ret list
    - local methodlabels 0
    - if `"`r(labels)'"'!="" {c -(}
    = if `""'!="" {c -(}
      local 0 = `"`r(labels)'"'
      forvalues i = 1/`nummethod' {c -(}
      gettoken mlabel`i' 0 : 0, parse(": ")
      local methodvalues `methodvalues' `mlabel`i''
      local methodlabel`i': word `i' of `methodvalues'
      local mlabelname`i' Method_`methodlabel`i''
      local methodlabels 1
      {c )-}
      {c )-}
    - else {c -(}
    - qui levels `method', local(levels)
    = qui levels method, local(levels)
      {hline 77} begin levels {hline}
      - version 8
      - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
      - if "`separate'" == "" local sep " "
      = if "" == "" local sep " "
      - else local sep "`separate'"
      = else local sep ""
      - if "`missing'" != "" local novarlist "novarlist"
      = if "" != "" local novarlist "novarlist"
      - marksample touse, strok `novarlist'
      = marksample touse, strok 
      - capture confirm numeric variable `varlist'
      = capture confirm numeric variable method
      - local isnum = _rc != 7
      - if `isnum' {c -(}
      = if 0 {c -(}
        capture assert `varlist' == int(`varlist') if `touse'
        if _rc {c -(}
        di as err "`varlist' contains non-integer values"
        exit 459
        {c )-}
        tempname Vals
        qui tab `varlist' if `touse', `missing' matrow(`Vals')
        local nvals = r(r)
        forval i = 1 / `nvals' {c -(}
        local val = `Vals'[`i',1]
        if `i' < `nvals' local vals "`vals'`val'`sep'"
        else local vals "`vals'`val'"
        {c )-}
        {c )-}
      - else {c -(}
      - tempvar select counter
      - bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
      = bysort __000003 method : gen byte __000004 = (_n == 1) * __000003
      - generate `counter' = sum(`select') * (`select' == 1)
      = generate __000005 = sum(__000004) * (__000004 == 1)
      - sort `counter'
      = sort __000005
      - qui count if `counter' == 0
      = qui count if __000005 == 0
      - local j = 1 + r(N)
      - local nvals = _N
      - if "`clean'" != "" {c -(}
      = if "" != "" {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals "`vals'`=`varlist'[`i']'`sep'"
        {c )-}
        else local vals "`vals'`=`varlist'[`i']'"
        {c )-}
        {c )-}
      - else {c -(}
      - forval i = `j' / `nvals' {c -(}
      = forval i = 1535 / 1536 {c -(}
      - if `i' < `nvals' {c -(}
      = if 1535 < 1536 {c -(}
      - local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
      = local vals `"`"g2"' "'
      - {c )-}
      - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
      = else local vals `"`"g2"' `"g2"'"'
      - {c )-}
      - if `i' < `nvals' {c -(}
      = if 1536 < 1536 {c -(}
        local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
        {c )-}
      - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
      = else local vals `"`"g2"' `"peto"'"'
      - {c )-}
      - {c )-}
      - {c )-}
      - di as txt `"`vals'"'
      = di as txt `"`"g2"' `"peto"'"'
      - return local levels `"`vals'"'
      = return local levels `"`"g2"' `"peto"'"'
      - if "`local'" != "" {c -(}
      = if "levels" != "" {c -(}
      - c_local `local' `"`vals'"'
      = c_local levels `"`"g2"' `"peto"'"'
      - {c )-}
      {hline 79} end levels {hline}
    - tokenize `"`levels'"'
    = tokenize `"`"g2"' `"peto"'"'
    - if `methodstringindi'==0 {c -(}
    = if 1==0 {c -(}
      numlist "`levels'"
      forvalues i = 1/`nummethod' {c -(}
      local methodlabel`i': word `i' of `levels'
      local mlabel`i' Method: `i'
      local mlabelname`i' Method_`methodlabel`i''
      local methodlabel`i' `i'
      local methodvalues `methodvalues' `methodlabel`i''
      {c )-}
      {c )-}
    - else if `methodstringindi'==1 {c -(}
    = else if 1==1 {c -(}
    - forvalues i = 1/`nummethod' {c -(}
    = forvalues i = 1/2 {c -(}
    - local methodlabel`i': word `i' of `levels'
    = local methodlabel1: word 1 of `"g2"' `"peto"'
    - local mlabel`i' Method: ``i''
    = local mlabel1 Method: g2
    - local mlabelname`i' Method_`methodlabel`i''
    = local mlabelname1 Method_g2
    - local methodlabel`i' ``i''
    = local methodlabel1 g2
    - local methodvalues `methodvalues' `methodlabel`i''
    = local methodvalues  g2
    - {c )-}
    - local methodlabel`i': word `i' of `levels'
    = local methodlabel2: word 2 of `"g2"' `"peto"'
    - local mlabel`i' Method: ``i''
    = local mlabel2 Method: peto
    - local mlabelname`i' Method_`methodlabel`i''
    = local mlabelname2 Method_peto
    - local methodlabel`i' ``i''
    = local methodlabel2 peto
    - local methodvalues `methodvalues' `methodlabel`i''
    = local methodvalues g2 peto
    - {c )-}
    - {c )-}
    - {c )-}
    - if `nmethod'!=0 {c -(}
    = if 1!=0 {c -(}
    - qui tab `method',m
    = qui tab method,m
    - local nmethodlabels = `r(r)'
    = local nmethodlabels = 2
    - qui levels `method', local(levels)
    = qui levels method, local(levels)
      {hline 77} begin levels {hline}
      - version 8
      - syntax varname [if] [in] [, Separate(str) MISSing Local(str) Clean ]
      - if "`separate'" == "" local sep " "
      = if "" == "" local sep " "
      - else local sep "`separate'"
      = else local sep ""
      - if "`missing'" != "" local novarlist "novarlist"
      = if "" != "" local novarlist "novarlist"
      - marksample touse, strok `novarlist'
      = marksample touse, strok 
      - capture confirm numeric variable `varlist'
      = capture confirm numeric variable method
      - local isnum = _rc != 7
      - if `isnum' {c -(}
      = if 0 {c -(}
        capture assert `varlist' == int(`varlist') if `touse'
        if _rc {c -(}
        di as err "`varlist' contains non-integer values"
        exit 459
        {c )-}
        tempname Vals
        qui tab `varlist' if `touse', `missing' matrow(`Vals')
        local nvals = r(r)
        forval i = 1 / `nvals' {c -(}
        local val = `Vals'[`i',1]
        if `i' < `nvals' local vals "`vals'`val'`sep'"
        else local vals "`vals'`val'"
        {c )-}
        {c )-}
      - else {c -(}
      - tempvar select counter
      - bysort `touse' `varlist' : gen byte `select' = (_n == 1) * `touse'
      = bysort __000003 method : gen byte __000004 = (_n == 1) * __000003
      - generate `counter' = sum(`select') * (`select' == 1)
      = generate __000005 = sum(__000004) * (__000004 == 1)
      - sort `counter'
      = sort __000005
      - qui count if `counter' == 0
      = qui count if __000005 == 0
      - local j = 1 + r(N)
      - local nvals = _N
      - if "`clean'" != "" {c -(}
      = if "" != "" {c -(}
        forval i = `j' / `nvals' {c -(}
        if `i' < `nvals' {c -(}
        local vals "`vals'`=`varlist'[`i']'`sep'"
        {c )-}
        else local vals "`vals'`=`varlist'[`i']'"
        {c )-}
        {c )-}
      - else {c -(}
      - forval i = `j' / `nvals' {c -(}
      = forval i = 1535 / 1536 {c -(}
      - if `i' < `nvals' {c -(}
      = if 1535 < 1536 {c -(}
      - local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
      = local vals `"`"g2"' "'
      - {c )-}
      - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
      = else local vals `"`"g2"' `"g2"'"'
      - {c )-}
      - if `i' < `nvals' {c -(}
      = if 1536 < 1536 {c -(}
        local vals `"`vals'`"`=`varlist'[`i']'"'`sep'"'
        {c )-}
      - else local vals `"`vals'`"`=`varlist'[`i']'"'"'
      = else local vals `"`"g2"' `"peto"'"'
      - {c )-}
      - {c )-}
      - {c )-}
      - di as txt `"`vals'"'
      = di as txt `"`"g2"' `"peto"'"'
      - return local levels `"`vals'"'
      = return local levels `"`"g2"' `"peto"'"'
      - if "`local'" != "" {c -(}
      = if "levels" != "" {c -(}
      - c_local `local' `"`vals'"'
      = c_local levels `"`"g2"' `"peto"'"'
      - {c )-}
      {hline 79} end levels {hline}
    - tokenize `"`levels'"'
    = tokenize `"`"g2"' `"peto"'"'
    - forvalues e = 1/`nmethodlabels' {c -(}
    = forvalues e = 1/2 {c -(}
    - local methlabel`e' = "``e''"
    = local methlabel1 = "g2"
    - if `e'==1 local valmethodnumwithlabel `methlabel`e''
    = if 1==1 local valmethodnumwithlabel g2
    - else if `e'>=2 local valmethodnumwithlabel `valmethodnumwithlabel' `methlabel`e''
    = else if 1>=2 local valmethodnumwithlabel g2 g2
    - {c )-}
    - local methlabel`e' = "``e''"
    = local methlabel2 = "peto"
    - if `e'==1 local valmethodnumwithlabel `methlabel`e''
    = if 2==1 local valmethodnumwithlabel peto
    - else if `e'>=2 local valmethodnumwithlabel `valmethodnumwithlabel' `methlabel`e''
    = else if 2>=2 local valmethodnumwithlabel g2 peto
    - {c )-}
    - {c )-}
    - qui siman reshape, longwide
      {hline 78} begin siman {hline}
      - version 13
      - syntax [anything] [if] [in], [which *]
      - if "`anything'"=="cms" local anything comparemethodsscatter
      = if "reshape"=="cms" local anything comparemethodsscatter
      - foreach thing in `_dta[siman_allthings]' {c -(}
      = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 {c -(}
      - local `thing' : char _dta[siman_`thing']
      = local allthings : char _dta[siman_allthings]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local rep : char _dta[siman_rep]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgm : char _dta[siman_dgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local target : char _dta[siman_target]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local method : char _dta[siman_method]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estimate : char _dta[siman_estimate]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local se : char _dta[siman_se]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local df : char _dta[siman_df]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ci : char _dta[siman_ci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local p : char _dta[siman_p]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local true : char _dta[siman_true]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local order : char _dta[siman_order]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local lci : char _dta[siman_lci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local uci : char _dta[siman_uci]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ifsetup : char _dta[siman_ifsetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local insetup : char _dta[siman_insetup]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local format : char _dta[siman_format]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetformat : char _dta[siman_targetformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodformat : char _dta[siman_methodformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nformat : char _dta[siman_nformat]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntarget : char _dta[siman_ntarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ndgm : char _dta[siman_ndgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nmethod : char _dta[siman_nmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numtarget : char _dta[siman_numtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valtarget : char _dta[siman_valtarget]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local nummethod : char _dta[siman_nummethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local valmethod : char _dta[siman_valmethod]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntrue : char _dta[siman_ntrue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local ntruevalue : char _dta[siman_ntruevalue]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmvar : char _dta[siman_dgmvar]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local numdgm : char _dta[siman_numdgm]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dgmcreated : char _dta[siman_dgmcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local targetlabels : char _dta[siman_targetlabels]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local methodcreated : char _dta[siman_methodcreated]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local descriptiontype : char _dta[siman_descriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local cidescriptiontype : char _dta[siman_cidescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truedescriptiontype : char _dta[siman_truedescriptiontype]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local estvars : char _dta[siman_estvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local sevars : char _dta[siman_sevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local dfvars : char _dta[siman_dfvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local civars : char _dta[siman_civars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local pvars : char _dta[siman_pvars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local truevars : char _dta[siman_truevars]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local simansetuprun : char _dta[siman_simansetuprun]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m1 : char _dta[siman_m1]
      - {c )-}
      - local `thing' : char _dta[siman_`thing']
      = local m2 : char _dta[siman_m2]
      - {c )-}
      - local subcmds0 setup
      - local subcmds1 describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop
      - local subcmds2
      - local subcmds `subcmds0' `subcmds1' `subcmds'
      = local subcmds setup describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop 
      - if mi("`anything'") {c -(}
      = if mi("reshape") {c -(}
        di as error "Syntax: siman <subcommand>"
        exit 198
        {c )-}
      - if "`anything'"=="which" {c -(}
      = if "reshape"=="which" {c -(}
        which siman
        foreach subcmd of local subcmds {c -(}
        cap noi which siman_`subcmd'
        {c )-}
        exit
        {c )-}
      - gettoken subcmd rest : anything
      - if length("`subcmd'")>=3 {c -(}
      = if length("reshape")>=3 {c -(}
      - foreach thing in `subcmds' {c -(}
      = foreach thing in setup describe analyse analyze table reshape lollyplot zipplot comparemethodsscatter blandaltman swarm scatter nestloop {c -(}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("setup","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("describe","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("analyse","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("analyze","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("table","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("reshape","reshape")==1 {c -(}
      - local subcmd `thing'
      = local subcmd reshape
      - local knowncmd 1
      - {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("lollyplot","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("zipplot","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("comparemethodsscatter","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("blandaltman","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("swarm","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("scatter","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - if strpos("`thing'","`subcmd'")==1 {c -(}
      = if strpos("nestloop","reshape")==1 {c -(}
        local subcmd `thing'
        local knowncmd 1
        {c )-}
      - {c )-}
      - {c )-}
      - if "`subcmd'" == "analyze" local subcmd "analyse"
      = if "reshape" == "analyze" local subcmd "analyse"
      - cap which siman_`subcmd'
      = cap which siman_reshape
      - if _rc {c -(}
        di as error "`subcmd' is not a valid siman subcommand"
        if length("`subcmd'")<3 di as error "Minimum abbreviation length is 3"
        exit 198
        {c )-}
      - local type0 : list subcmd in subcmds0
      - if `type0' & !mi("`allthings'") {c -(}
      = if 0 & !mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2") {c -(}
        di as error "Data are already in siman format"
        exit 459
        {c )-}
      - local type1 : list subcmd in subcmds1
      - if `type1' & mi("`allthings'") {c -(}
      = if 1 & mi("allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2") {c -(}
        di as error "Data are not in siman format: use siman setup"
        exit 459
        {c )-}
      - if mi(`"`options'"') siman_`subcmd' `rest' `if' `in'
      = if mi(`"longwide"') siman_reshape   
      - else siman_`subcmd' `rest' `if' `in', `options'
      = else siman_reshape   , longwide
      {hline 80} end siman {hline}
    - foreach thing in `_dta[siman_allthings]' {c -(}
    = foreach thing in allthings rep dgm target method estimate se df ci p true order lci uci ifsetup insetup format targetformat methodformat nformat ntarget ndgm nmethod numtarget valtarget nummethod valmethod ntrue ntruevalue dgmvar numdgm dgmcreated targetlabels methodcreated descriptiontype cidescriptiontype truedescriptiontype estvars sevars dfvars civars pvars truevars simansetuprun m1 m2 {c -(}
    - local `thing' : char _dta[siman_`thing']
    = local allthings : char _dta[siman_allthings]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local rep : char _dta[siman_rep]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgm : char _dta[siman_dgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local target : char _dta[siman_target]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local method : char _dta[siman_method]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local estimate : char _dta[siman_estimate]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local se : char _dta[siman_se]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local df : char _dta[siman_df]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ci : char _dta[siman_ci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local p : char _dta[siman_p]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local true : char _dta[siman_true]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local order : char _dta[siman_order]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local lci : char _dta[siman_lci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local uci : char _dta[siman_uci]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ifsetup : char _dta[siman_ifsetup]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local insetup : char _dta[siman_insetup]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local format : char _dta[siman_format]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local targetformat : char _dta[siman_targetformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local methodformat : char _dta[siman_methodformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nformat : char _dta[siman_nformat]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntarget : char _dta[siman_ntarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ndgm : char _dta[siman_ndgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nmethod : char _dta[siman_nmethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local numtarget : char _dta[siman_numtarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local valtarget : char _dta[siman_valtarget]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local nummethod : char _dta[siman_nummethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local valmethod : char _dta[siman_valmethod]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntrue : char _dta[siman_ntrue]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local ntruevalue : char _dta[siman_ntruevalue]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgmvar : char _dta[siman_dgmvar]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local numdgm : char _dta[siman_numdgm]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dgmcreated : char _dta[siman_dgmcreated]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local targetlabels : char _dta[siman_targetlabels]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local methodcreated : char _dta[siman_methodcreated]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local descriptiontype : char _dta[siman_descriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local cidescriptiontype : char _dta[siman_cidescriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local truedescriptiontype : char _dta[siman_truedescriptiontype]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local estvars : char _dta[siman_estvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local sevars : char _dta[siman_sevars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local dfvars : char _dta[siman_dfvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local civars : char _dta[siman_civars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local pvars : char _dta[siman_pvars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local truevars : char _dta[siman_truevars]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local simansetuprun : char _dta[siman_simansetuprun]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local m1 : char _dta[siman_m1]
    - {c )-}
    - local `thing' : char _dta[siman_`thing']
    = local m2 : char _dta[siman_m2]
    - {c )-}
    - foreach u of var * {c -(}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("v1",strlen("v1"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("theta",strlen("theta"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("rho",strlen("rho"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("pc",strlen("pc"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("k",strlen("k"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("expg2",strlen("expg2"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("var2g2",strlen("var2g2"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("exppeto",strlen("exppeto"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("var2peto",strlen("var2peto"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("__000000",strlen("__000000"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`u'",strlen("`u'"),1)=="_" {c -(}
    = if substr("__000001",strlen("__000001"),1)=="_" {c -(}
      local U = substr("`u'", 1, index("`u'","_") - 1)
      if "`U'" != "" {c -(}
      capture rename `u' `U'
      if _rc di as txt "problem with `u'"
      {c )-}
      {c )-}
    - {c )-}
    - if substr("`estimate'",strlen("`estimate'"),1)=="_" local estimate = substr("`estimate'", 1, index("`estimate'","_") - 1)
    = if substr("exp",strlen("exp"),1)=="_" local estimate = substr("exp", 1, index("exp","_") - 1)
    - if substr("`se'",strlen("`se'"),1)=="_" local se = substr("`se'", 1, index("`se'","_") - 1)
    = if substr("var2",strlen("var2"),1)=="_" local se = substr("var2", 1, index("var2","_") - 1)
    - if "`subgraphoptions'" == "" {c -(}
    = if "xtit("testaxis")" == "" {c -(}
      local subgraphoptions aspect(1) graphregion(margin(zero)) plotregion(margin(zero)) xtit("") legend(off)
      {c )-}
    - di as text "Working....."
Working.....
    - if `ifdgm' == 1 {c -(}
    = if 0 == 1 {c -(}
      qui drop `dgmtodrop'
      local dgm = "`dgmleft'"
      local dgmvalues = `dgmfiltervalues'
      local numberdgms = 1
      {c )-}
    - if !mi("`methlist'") {c -(}
    = if !mi("") {c -(}
      local numbermethod = `methodcount'
      local methodvalues `methlist'
      {c )-}
    - else local numbermethod = `nummethod'
    = else local numbermethod = 2
    - if mi("`methlist'") | (!mi("`methlist'") & `methodstringindi'==1) local forcommand = "forvalues j = 1/`numbermethod'"
    = if mi("") | (!mi("") & 1==1) local forcommand = "forvalues j = 1/2"
    - else local forcommand = "foreach j in `methodvalues'"
    = else local forcommand = "foreach j in g2 peto"
    - if "`by'"=="" local by ""
    = if ""=="" local by ""
    - else if "`by'"=="`target'" local by by(`target', note("") legend(off))
    = else if ""=="" local by by(, note("") legend(off))
    - else if !mi("`by'") & "`by'"!="`target'" {c -(}
    = else if !mi("") & ""!="" {c -(}
      di as error "Can not have `by' as a 'by' option"
      exit 498
      {c )-}
    - local c 1
    - `forcommand' {c -(}
    = forvalues j = 1/2 {c -(}
    - if `methodstringindi'==0 & `methodlabels' == 0 {c -(}
    = if 1==0 & 0 == 0 {c -(}
      label var `estimate'`j' "`estimate', `mlabel`j''"
      label var `se'`j' "`se', `mlabel`j''"
      local mlabel`c' Method: `j'
      {c )-}
    - else if `methodstringindi'==0 & `methodlabels' == 1 {c -(}
    = else if 1==0 & 0 == 1 {c -(}
      local k : word `j' of `methodvalues'
      label var `estimate'`j' "`estimate', Method_`k'"
      label var `se'`j' "`se', Method_`k'"
      local mlabel`c' Method: `k'
      {c )-}
    - else if `methodstringindi'==1 {c -(}
    = else if 1==1 {c -(}
    - label var `estimate'``j'' "`estimate', Method: ``j''"
    = label var expg2 "exp, Method: g2"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("var", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 16, missing: _label var expg2 "exp, Method: g2"
      - {c )-}
      {hline 80} end label {hline}
    - label var `se'``j'' "`se', Method: ``j''"
    = label var var2g2 "var2, Method: g2"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("var", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 16, missing: _label var var2g2 "var2, Method: g2"
      - {c )-}
      {hline 80} end label {hline}
    - local mlabel`c' Method: ``j''
    = local mlabel1 Method: g2
    - {c )-}
    - if `j'==1 {c -(}
    = if 1==1 {c -(}
    - local pt1 = 0.7
    - local pt2 = 0
    - {c )-}
    - else if `j'==2 {c -(}
    = else if 1==2 {c -(}
      local pt1 = 0.5
      local pt2 = -0.5
      {c )-}
    - else if `j'>2 {c -(}
    = else if 1>2 {c -(}
      local pt1 = 0
      local pt2 = -0.5
      {c )-}
    - `dicmd' twoway scatteri 0 0 (0) "`mlabel`j''" .5 `pt1' (0) "" -.5 `pt2' (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off) `nodraw' mlab(black) `subgraphoptions' nodraw name(`mlabelname`c'', replace)
    =  twoway scatteri 0 0 (0) "Method: g2" .5 .7 (0) "" -.5 0 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_g2, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway scatteri 0 0 (0) "Method: g2" .5 .7 (0) "" -.5 0 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_g2, replace)
      {hline 79} end twoway {hline}
    - local c = `c' + 1
    = local c = 1 + 1
    - {c )-}
    - if `methodstringindi'==0 & `methodlabels' == 0 {c -(}
    = if 1==0 & 0 == 0 {c -(}
      label var `estimate'`j' "`estimate', `mlabel`j''"
      label var `se'`j' "`se', `mlabel`j''"
      local mlabel`c' Method: `j'
      {c )-}
    - else if `methodstringindi'==0 & `methodlabels' == 1 {c -(}
    = else if 1==0 & 0 == 1 {c -(}
      local k : word `j' of `methodvalues'
      label var `estimate'`j' "`estimate', Method_`k'"
      label var `se'`j' "`se', Method_`k'"
      local mlabel`c' Method: `k'
      {c )-}
    - else if `methodstringindi'==1 {c -(}
    = else if 1==1 {c -(}
    - label var `estimate'``j'' "`estimate', Method: ``j''"
    = label var exppeto "exp, Method: peto"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("var", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 16, missing: _label var exppeto "exp, Method: peto"
      - {c )-}
      {hline 80} end label {hline}
    - label var `se'``j'' "`se', Method: ``j''"
    = label var var2peto "var2, Method: peto"
      {hline 78} begin label {hline}
      - version 10.0
      - local vv : display "version " string(_caller()) ", missing:"
      - gettoken val : 0
      - if (strpos("`val'", "val") > 0 ) {c -(}
      = if (strpos("var", "val") > 0 ) {c -(}
        gettoken val 0 : 0
        syntax anything [, nofix]
        if "`fix'" != "" {c -(}
        local fix ", nofix"
        {c )-}
        gettoken var rest : anything
        while `"`rest'"' != "" {c -(}
        gettoken lab rest : rest
        local label "`lab'"
        {c )-}
        local vlist : list anything - lab
        if "`lab'" == "." {c -(}
        local lab ""
        {c )-}
        foreach var of varlist `vlist' {c -(}
        `vv' _label `val' `var' `lab' `fix'
        {c )-}
        {c )-}
      - else {c -(}
      - `vv' _label `macval(0)'
      = version 16, missing: _label var var2peto "var2, Method: peto"
      - {c )-}
      {hline 80} end label {hline}
    - local mlabel`c' Method: ``j''
    = local mlabel2 Method: peto
    - {c )-}
    - if `j'==1 {c -(}
    = if 2==1 {c -(}
      local pt1 = 0.7
      local pt2 = 0
      {c )-}
    - else if `j'==2 {c -(}
    = else if 2==2 {c -(}
    - local pt1 = 0.5
    - local pt2 = -0.5
    - {c )-}
    - else if `j'>2 {c -(}
    = else if 2>2 {c -(}
      local pt1 = 0
      local pt2 = -0.5
      {c )-}
    - `dicmd' twoway scatteri 0 0 (0) "`mlabel`j''" .5 `pt1' (0) "" -.5 `pt2' (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off) `nodraw' mlab(black) `subgraphoptions' nodraw name(`mlabelname`c'', replace)
    =  twoway scatteri 0 0 (0) "Method: peto" .5 .5 (0) "" -.5 -.5 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_peto, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway scatteri 0 0 (0) "Method: peto" .5 .5 (0) "" -.5 -.5 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_peto, replace)
      {hline 79} end twoway {hline}
    - local c = `c' + 1
    = local c = 2 + 1
    - {c )-}
    - qui tokenize `methodvalues'
    = qui tokenize g2 peto
    - forvalues m = 1/`numbermethod' {c -(}
    = forvalues m = 1/2 {c -(}
    - if `methodstringindi'==0 & mi("`methlist'") {c -(}
    = if 1==0 & mi("") {c -(}
      qui summarize `estimate'`m'
      local minest`m' = `r(min)'
      local maxest`m' = `r(max)'
      qui summarize `se'`m'
      local minse`m' = `r(min)'
      local maxse`m' = `r(max)'
      {c )-}
    - else {c -(}
    - qui summarize `estimate'``m''
    = qui summarize expg2
    - local minest`m' = `r(min)'
    = local minest1 = .4498777091503143
    - local maxest`m' = `r(max)'
    = local maxest1 = 1.095583438873291
    - qui summarize `se'``m''
    = qui summarize var2g2
    - local minse`m' = `r(min)'
    = local minse1 = .0024609714746475
    - local maxse`m' = `r(max)'
    = local maxse1 = .9734957218170166
    - {c )-}
    - if `m'>1 {c -(}
    = if 1>1 {c -(}
      local n = `m' - 1
      if `minest`n'' < `minest`m'' local minest = `minest`n''
      else local minest = `minest`m''
      if `minse`n'' < `minse`m'' local minse = `minse`n''
      else local minse = `minse`m''
      if `maxest`n'' > `maxest`m'' local maxest = `maxest`n''
      else local maxest = `maxest`m''
      if `maxse`n'' > `maxse`m'' local maxse = `maxse`n''
      else local maxse = `maxse`m''
      {c )-}
    - {c )-}
    - if `methodstringindi'==0 & mi("`methlist'") {c -(}
    = if 1==0 & mi("") {c -(}
      qui summarize `estimate'`m'
      local minest`m' = `r(min)'
      local maxest`m' = `r(max)'
      qui summarize `se'`m'
      local minse`m' = `r(min)'
      local maxse`m' = `r(max)'
      {c )-}
    - else {c -(}
    - qui summarize `estimate'``m''
    = qui summarize exppeto
    - local minest`m' = `r(min)'
    = local minest2 = .2799641191959381
    - local maxest`m' = `r(max)'
    = local maxest2 = 1.009488821029663
    - qui summarize `se'``m''
    = qui summarize var2peto
    - local minse`m' = `r(min)'
    = local minse2 = .0011168431956321
    - local maxse`m' = `r(max)'
    = local maxse2 = .0873664394021034
    - {c )-}
    - if `m'>1 {c -(}
    = if 2>1 {c -(}
    - local n = `m' - 1
    = local n = 2 - 1
    - if `minest`n'' < `minest`m'' local minest = `minest`n''
    = if .4498777091503143 < .2799641191959381 local minest = .4498777091503143
    - else local minest = `minest`m''
    = else local minest = .2799641191959381
    - if `minse`n'' < `minse`m'' local minse = `minse`n''
    = if .0024609714746475 < .0011168431956321 local minse = .0024609714746475
    - else local minse = `minse`m''
    = else local minse = .0011168431956321
    - if `maxest`n'' > `maxest`m'' local maxest = `maxest`n''
    = if 1.095583438873291 > 1.009488821029663 local maxest = 1.095583438873291
    - else local maxest = `maxest`m''
    = else local maxest = 1.009488821029663
    - if `maxse`n'' > `maxse`m'' local maxse = `maxse`n''
    = if .9734957218170166 > .0873664394021034 local maxse = .9734957218170166
    - else local maxse = `maxse`m''
    = else local maxse = .0873664394021034
    - {c )-}
    - {c )-}
    - local track 1
    - foreach j in `methodvalues' {c -(}
    = foreach j in g2 peto {c -(}
    - foreach option in `estimate' `se' {c -(}
    = foreach option in exp var2 {c -(}
    - local `option'`j' = "`option'`j'"
    = local expg2 = "expg2"
    - if `track'==1 local `option'list ``option'`j''
    = if 1==1 local explist expg2
    - else if `track'>=2 local `option'list ``option'list' ``option'`j''
    = else if 1>=2 local explist expg2 expg2
    - {c )-}
    - local `option'`j' = "`option'`j'"
    = local var2g2 = "var2g2"
    - if `track'==1 local `option'list ``option'`j''
    = if 1==1 local var2list var2g2
    - else if `track'>=2 local `option'list ``option'list' ``option'`j''
    = else if 1>=2 local var2list var2g2 var2g2
    - {c )-}
    - local track = `track' + 1
    = local track = 1 + 1
    - {c )-}
    - foreach option in `estimate' `se' {c -(}
    = foreach option in exp var2 {c -(}
    - local `option'`j' = "`option'`j'"
    = local exppeto = "exppeto"
    - if `track'==1 local `option'list ``option'`j''
    = if 2==1 local explist exppeto
    - else if `track'>=2 local `option'list ``option'list' ``option'`j''
    = else if 2>=2 local explist expg2 exppeto
    - {c )-}
    - local `option'`j' = "`option'`j'"
    = local var2peto = "var2peto"
    - if `track'==1 local `option'list ``option'`j''
    = if 2==1 local var2list var2peto
    - else if `track'>=2 local `option'list ``option'list' ``option'`j''
    = else if 2>=2 local var2list var2g2 var2peto
    - {c )-}
    - local track = `track' + 1
    = local track = 2 + 1
    - {c )-}
    - if ("`anything'"=="" | "`anything'"=="`estimate'") local varlist ``estimate'list'
    = if (""=="" | ""=="exp") local varlist expg2 exppeto
    - else if ("`anything'"=="`se'") local varlist ``se'list'
    = else if (""=="var2") local varlist var2g2 var2peto
    - local countanything: word count `anything'
    = local countanything: word count 
    - if (`countanything'==1 | `countanything'==0) local half half
    = if (0==1 | 0==0) local half half
    - local name = "simancms"
    - if !mi(`"`options'"') {c -(}
    = if !mi(`"title("testtitle") name("cms_test7", replace)"') {c -(}
    - tempvar _namestring
    - qui gen `_namestring' = `"`options'"'
    = qui gen __000002 = `"title("testtitle") name("cms_test7", replace)"'
    - qui split `_namestring', parse(`"name"')
    = qui split __000002, parse(`"name"')
      {hline 78} begin split {hline}
      - version 8
      - syntax varname(str) [if] [in] [, Generate(str) noTrim Parse(str asis) DESTRING force float Ignore(string asis) percent Limit(numlist int >0 max=1) ]
      - local verpre : display "version " %4.1f _caller() ":"
      - if "`destring'"=="" {c -(}
      = if ""=="" {c -(}
      - foreach option in force float ignore percent {c -(}
      - if `"``option''"'!="" {c -(}
      = if `""'!="" {c -(}
        display as error "may not specify `option' without specifying destring"
        exit 198
        {c )-}
      - {c )-}
      - if `"``option''"'!="" {c -(}
      = if `""'!="" {c -(}
        display as error "may not specify `option' without specifying destring"
        exit 198
        {c )-}
      - {c )-}
      - if `"``option''"'!="" {c -(}
      = if `""'!="" {c -(}
        display as error "may not specify `option' without specifying destring"
        exit 198
        {c )-}
      - {c )-}
      - if `"``option''"'!="" {c -(}
      = if `""'!="" {c -(}
        display as error "may not specify `option' without specifying destring"
        exit 198
        {c )-}
      - {c )-}
      - {c )-}
      - else {c -(}
        if `"`ignore'"'!="" {c -(}
        if _caller() >= 14 {c -(}
        if ustrfindfirst(`"`ignore'"',",") & !ustrfindfirst(`"`ignore'"',`"""') {c -(}
        display as error `"ignore string must be enclosed with quotes to ignore commas or use options"'
        exit 198
        {c )-}
        {c )-}
        `verpre' _parse_ignore `ignore'
        {c )-}
        {c )-}
      - marksample touse, strok
      - qui count if `touse'
      = qui count if __000003
      - if r(N) == 0 {c -(}
        error 2000
        {c )-}
      - if `"`parse'"' == `""' | `"`parse'"' == `""""' {c -(}
      = if `"`"name"'"' == `""' | `"`"name"'"' == `""""' {c -(}
        if "`trim'" != "" {c -(}
        di as err "parsing on spaces incompatible with notrim"
        exit 198
        {c )-}
        local parse `"" ""'
        local trm "trim"
        {c )-}
      - if `"`parse'"' == `""' | `"`parse'"' == `""""' {c -(}
      = if `"`"name"'"' == `""' | `"`"name"'"' == `""""' {c -(}
        local parse `"" ""'
        local trm "trim"
        {c )-}
      - local nparse : word count `parse'
      = local nparse : word count `"name"'
      - tokenize `"`parse'"'
      = tokenize `"`"name"'"'
      - if `"`generate'"' != "" {c -(}
      = if `""' != "" {c -(}
        confirm name `generate'
        if `: word count `generate'' > 1 {c -(}
        di as err "invalid stub `generate'"
        exit 198
        {c )-}
        {c )-}
      - qui {c -(}
      - tempvar vw tp mp pl
      - gen int `tp' = 0
      = gen int __000005 = 0
      - gen int `mp' = 0
      = gen int __000006 = 0
      - gen int `pl' = 0
      = gen int __000007 = 0
      - gen str1 `vw' = ""
      = gen str1 __000004 = ""
      - if "`trim'" == "" {c -(}
      = if "" == "" {c -(}
      - replace `vw' = trim(`varlist') if `touse'
      = replace __000004 = trim(__000002) if __000003
      - {c )-}
      - else {c -(}
        replace `vw' = `varlist' if `touse'
        {c )-}
      - {c )-}
      - if "`generate'" == "" {c -(}
      = if "" == "" {c -(}
      - local generate "`varlist'"
      = local generate "__000002"
      - {c )-}
      - local j = 0
      - local go = 1
      - if "`limit'" == "" {c -(}
      = if "" == "" {c -(}
      - local limit .
      - {c )-}
      - qui while `go' & `j' < `limit' {c -(}
      = qui while 1 & 0 < . {c -(}
      - replace `mp' = .
      = replace __000006 = .
      - replace `pl' = 0
      = replace __000007 = 0
      - forval i = 1 / `nparse' {c -(}
      = forval i = 1 / 1 {c -(}
      - replace `tp' = index(`vw', `"``i''"')
      = replace __000005 = index(__000004, `"name"')
      - replace `mp' = min(`tp', `mp') if `tp'
      = replace __000006 = min(__000005, __000006) if __000005
      - replace `pl' = length(`"``i''"') if `mp' == `tp'
      = replace __000007 = length(`"name"') if __000006 == __000005
      - {c )-}
      - local ++j
      - tempvar part`j'
      = tempvar part1
      - gen str1 `part`j'' = ""
      = gen str1 __000008 = ""
      - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
      = replace __000008 = substr(__000004, 1, __000006-1) if __000006 < .
      - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
      = replace __000004 = (substr(__000004, __000006+__000007, .)) if __000006 < .
      - replace `part`j'' = `vw' if `mp' >= .
      = replace __000008 = __000004 if __000006 >= .
      - replace `vw' = "" if `mp' >= .
      = replace __000004 = "" if __000006 >= .
      - local newvars "`newvars'`generate'`j' "
      = local newvars "__0000021 "
      - capture assert `vw' == ""
      = capture assert __000004 == ""
      - local go = _rc
      - {c )-}
      - qui while `go' & `j' < `limit' {c -(}
      = qui while 9 & 1 < . {c -(}
      - replace `mp' = .
      = replace __000006 = .
      - replace `pl' = 0
      = replace __000007 = 0
      - forval i = 1 / `nparse' {c -(}
      = forval i = 1 / 1 {c -(}
      - replace `tp' = index(`vw', `"``i''"')
      = replace __000005 = index(__000004, `"name"')
      - replace `mp' = min(`tp', `mp') if `tp'
      = replace __000006 = min(__000005, __000006) if __000005
      - replace `pl' = length(`"``i''"') if `mp' == `tp'
      = replace __000007 = length(`"name"') if __000006 == __000005
      - {c )-}
      - local ++j
      - tempvar part`j'
      = tempvar part2
      - gen str1 `part`j'' = ""
      = gen str1 __000009 = ""
      - replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
      = replace __000009 = substr(__000004, 1, __000006-1) if __000006 < .
      - replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
      = replace __000004 = (substr(__000004, __000006+__000007, .)) if __000006 < .
      - replace `part`j'' = `vw' if `mp' >= .
      = replace __000009 = __000004 if __000006 >= .
      - replace `vw' = "" if `mp' >= .
      = replace __000004 = "" if __000006 >= .
      - local newvars "`newvars'`generate'`j' "
      = local newvars "__0000021 __0000022 "
      - capture assert `vw' == ""
      = capture assert __000004 == ""
      - local go = _rc
      - {c )-}
      - qui while `go' & `j' < `limit' {c -(}
      = qui while 0 & 2 < . {c -(}
        replace `mp' = .
        replace `pl' = 0
        forval i = 1 / `nparse' {c -(}
        replace `tp' = index(`vw', `"``i''"')
        replace `mp' = min(`tp', `mp') if `tp'
        replace `pl' = length(`"``i''"') if `mp' == `tp'
        {c )-}
        local ++j
        tempvar part`j'
        gen str1 `part`j'' = ""
        replace `part`j'' = substr(`vw', 1, `mp'-1) if `mp' < .
        replace `vw' = `trm'(substr(`vw', `mp'+`pl', .)) if `mp' < .
        replace `part`j'' = `vw' if `mp' >= .
        replace `vw' = "" if `mp' >= .
        local newvars "`newvars'`generate'`j' "
        capture assert `vw' == ""
        local go = _rc
        {c )-}
      - capture confirm new var `newvars'
      = capture confirm new var __0000021 __0000022 
      - if _rc {c -(}
        di as err "cannot generate new variables using stub `generate'"
        exit _rc
        {c )-}
      - qui forval i = 1 / `j' {c -(}
      = qui forval i = 1 / 2 {c -(}
      - gen str1 `generate'`i' = ""
      = gen str1 __0000021 = ""
      - replace `generate'`i' = `part`i''
      = replace __0000021 = __000008
      - {c )-}
      - gen str1 `generate'`i' = ""
      = gen str1 __0000022 = ""
      - replace `generate'`i' = `part`i''
      = replace __0000022 = __000009
      - {c )-}
      - return local varlist "`newvars'"
      = return local varlist "__0000021 __0000022 "
      - return local nvars "`j'"
      = return local nvars "2"
      - local s = cond(`j' > 1, "s", "")
      = local s = cond(2 > 1, "s", "")
      - if "`destring'" != "" {c -(}
      = if "" != "" {c -(}
        di as res "variable`s' born as string: "
        {c )-}
      - else di as res "variable`s' created as string: "
      = else di as res "variables created as string: "
      - ds `newvars'
      = ds __0000021 __0000022 
      - if "`destring'" != "" {c -(}
      = if "" != "" {c -(}
        if `"`ignore'"' != "" {c -(}
        local ignore `"ignore(`ignore')"'
        {c )-}
        `verpre' destring `newvars', replace `force' `float' `ignore' `percent'
        {c )-}
      {hline 80} end split {hline}
    - local options = `_namestring'1
    = local options = __0000021
    - cap confirm var `_namestring'2
    = cap confirm var __0000022
    - if !_rc {c -(}
    - local namestring = `_namestring'2
    = local namestring = __0000022
    - local name = `namestring'
    = local name = ("cms_test7", replace)
    - {c )-}
    - {c )-}
    - if "`dgm'"=="" local dgmvalues=1
    = if "theta rho pc k"=="" local dgmvalues=1
    - if `numberdgms'==1 {c -(}
    = if 4==1 {c -(}
      foreach m in `dgmvalues' {c -(}
      if !mi("`debug'") di as text "Loop for numberdgms = 1: m = `m'"
      if "`valtarget'"!= "N/A" {c -(}
      qui levelsof `target', local(targetlevels)
      local foreachtarget "`targetlevels'"
      {c )-}
      else local foreachtarget 1
      foreach t in `foreachtarget' {c -(}
      cap confirm numeric variable `target'
      if _rc local iftarget `"& `target' == "`t'""'
      else local iftarget `"& `target' == `t'"'
      if "`valtarget'"== "N/A" local iftarget
      local frtheta `minest' `maxest'
      local frse `minse' `maxse'
      if `methodstringindi'==0 {c -(}
      if mi("`methlist'") {c -(}
      if `methodlabels'!= 1 local methodvalues `valmethod'
      else local methodvalues `valmethodnumwithlabel'
      {c )-}
      local maxmethodvalues : word `numbermethod' of `methodvalues'
      local maxmethodvaluesplus1 = substr("`methodvalues'", -`numbermethod', .)
      local maxmethodvaluesminus1 = substr("`methodvalues'", 1 ,`numbermethod')
      local counter = 1
      local counterplus1 = 2
      foreach j in `maxmethodvaluesminus1' {c -(}
      foreach k in `maxmethodvaluesplus1' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'`j' `estimate'`k' if `dgm'==`m' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'`j'`k'dgm`m'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'`j' `se'`k' if `dgm'==`m' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'`j'`k'dgm`m'tar`t', replace)
      local graphtheta`counter'`counterplus1'`m'`t' `estimate'`j'`k'dgm`m'tar`t'
      local graphse`counter'`counterplus1'`m'`t' `se'`j'`k'dgm`m'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
      else if `methodstringindi'==1 | !mi("`methlist'") {c -(}
      local counter = 1
      local counterplus1 = 2
      local maxmethodvaluesminus1 = `numbermethod' - 1
      forvalues j = 1/`maxmethodvaluesminus1' {c -(}
      forvalues k = 2/`numbermethod' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'``j'' `estimate'``k'' if `dgm'==`m' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'``j''``k''dgm`m'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'``j'' `se'``k'' if `dgm'==`m'`iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'``j''``k''dgm`m'tar`t', replace)
      local graphtheta`counter'`counterplus1'`m'`t' `estimate'``j''``k''dgm`m'tar`t'
      local graphse`counter'`counterplus1'`m'`t' `se'``j''``k''dgm`m'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
      if `targetlabels' == 1 {c -(}
      local tlab: word `t' of `valtarget'
      local targetlab ", `target': `tlab'"
      {c )-}
      else {c -(}
      local tlab `t'
      local targetlab ", `target': `tlab'"
      {c )-}
      if "`valtarget'"== "N/A" local targetlab
      if `numbermethod'==2 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`m'`t'' `graphse12`m'`t'' `mlabelname2' , title("") note("Graphs for `dgm': ``dgm'dlabel`m'' `targetlab'") cols(2) xsize(4) name(`name'_dgm`m'`tlab', replace) `options'
      {c )-}
      else if `numbermethod'==3 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`m'`t'' `graphtheta13`m'`t'' `graphse12`m'`t'' `mlabelname2' `graphtheta23`m'`t'' `graphse13`m'`t'' `graphse23`m'`t'' `mlabelname3' , title("") note("Graphs for `dgm': ``dgm'dlabel`m'' `targetlab'") cols(3) xsize(4) name(`name'_dgm`m'`tlab', replace) `options'
      {c )-}
      else if `numbermethod'>3 {c -(}
      if mi("`anything'") local anything = "est"
      `dicmd' graph matrix `varlist' if `dgm'==`m' `iftarget', `half' `by' title("") note("") name(`name'_`anything'`j'`k'dgm`m'`tlab', replace) `options'
      {c )-}
      {c )-}
      {c )-}
      {c )-}
    - else if `numberdgms' != 1 {c -(}
    = else if 4 != 1 {c -(}
    - foreach dgmvar in `dgmvalues' {c -(}
    = foreach dgmvar in theta rho pc k {c -(}
    - if !mi("`debug'") di as text "Loop for numberdgms > 1: m = `m'"
    = if !mi("") di as text "Loop for numberdgms > 1: m = "
    - local dgmlabels = 0
    - qui tab `dgmvar'
    = qui tab theta
    - local ndgmvar = `r(r)'
    = local ndgmvar = 4
    - cap qui labelsof `dgmvar'
    = cap qui labelsof theta
      {hline 75} begin labelsof {hline}
      - version 8
      - syntax name [, Label ]
      - if "`label'"=="" {c -(}
      = if ""=="" {c -(}
      - local labdef: value label `namelist'
      = local labdef: value label theta
      - if `"`labdef'"'=="" {c -(}
      = if `"theta_new"'=="" {c -(}
        exit
        {c )-}
      - {c )-}
      - else local labdef "`namelist'"
      = else local labdef "theta"
      - tempfile fn
      - qui label save `labdef' using `"`fn'"'
      = qui label save theta_new using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_1080_000004.tmp"'
      - tempname fh
      - file open `fh' using `"`fn'"', read
      = file open __000003 using `"C:\Users\rmjlem1\AppData\Local\Temp\ST_1080_000004.tmp"', read
      - file read `fh' line
      = file read __000003 line
      - local values
      - local labels
      - local space
      - if "`label'"=="" di as txt _n "`namelist' ({c -(}res{c )-}`labdef'{c -(}txt{c )-}):" _n
      = if ""=="" di as txt _n "theta ({c -(}res{c )-}theta_new{c -(}txt{c )-}):" _n
      - else di as txt _n "`labdef':"
      = else di as txt _n "theta_new:"
      - while r(eof)==0 {c -(}
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken label line : line, parse(", ") match(paren)
      - local values "`values'`space'`value'"
      = local values "1"
      - local labels `"`labels'`space'`"`label'"'"'
      = local labels `"`"0.5"'"'
      - di as res %12s "`value'" " " `"`label'"'
      = di as res %12s "1" " " `"0.5"'
      - file read `fh' line
      = file read __000003 line
      - local space " "
      - {c )-}
      - while r(eof)==0 {c -(}
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken label line : line, parse(", ") match(paren)
      - local values "`values'`space'`value'"
      = local values "1 2"
      - local labels `"`labels'`space'`"`label'"'"'
      = local labels `"`"0.5"' `"0.67"'"'
      - di as res %12s "`value'" " " `"`label'"'
      = di as res %12s "2" " " `"0.67"'
      - file read `fh' line
      = file read __000003 line
      - local space " "
      - {c )-}
      - while r(eof)==0 {c -(}
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken label line : line, parse(", ") match(paren)
      - local values "`values'`space'`value'"
      = local values "1 2 3"
      - local labels `"`labels'`space'`"`label'"'"'
      = local labels `"`"0.5"' `"0.67"' `"0.75"'"'
      - di as res %12s "`value'" " " `"`label'"'
      = di as res %12s "3" " " `"0.75"'
      - file read `fh' line
      = file read __000003 line
      - local space " "
      - {c )-}
      - while r(eof)==0 {c -(}
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken value line : line
      - gettoken label line : line, parse(", ") match(paren)
      - local values "`values'`space'`value'"
      = local values "1 2 3 4"
      - local labels `"`labels'`space'`"`label'"'"'
      = local labels `"`"0.5"' `"0.67"' `"0.75"' `"1"'"'
      - di as res %12s "`value'" " " `"`label'"'
      = di as res %12s "4" " " `"1"'
      - file read `fh' line
      = file read __000003 line
      - local space " "
      - {c )-}
      - while r(eof)==0 {c -(}
        gettoken value line : line
        gettoken value line : line
        gettoken value line : line
        gettoken value line : line
        gettoken label line : line, parse(", ") match(paren)
        local values "`values'`space'`value'"
        local labels `"`labels'`space'`"`label'"'"'
        di as res %12s "`value'" " " `"`label'"'
        file read `fh' line
        local space " "
        {c )-}
      - file close `fh'
      = file close __000003
      - ret local labels `"`labels'"'
      = ret local labels `"`"0.5"' `"0.67"' `"0.75"' `"1"'"'
      - ret local values "`values'"
      = ret local values "1 2 3 4"
      - ret local name "`labdef'"
      = ret local name "theta_new"
      {hline 77} end labelsof {hline}
    - cap qui ret list
    - if `"`r(labels)'"'!="" {c -(}
    = if `"`"0.5"' `"0.67"' `"0.75"' `"1"'"'!="" {c -(}
    - local 0 = `"`r(labels)'"'
    = local 0 = `"`"0.5"' `"0.67"' `"0.75"' `"1"'"'
    - forvalues i = 1/`ndgmvar' {c -(}
    = forvalues i = 1/4 {c -(}
    - gettoken `dgmvar'dlabel`i' 0 : 0, parse(": ")
    = gettoken thetadlabel1 0 : 0, parse(": ")
    - local dgmlabels = 1
    - {c )-}
    - gettoken `dgmvar'dlabel`i' 0 : 0, parse(": ")
    = gettoken thetadlabel2 0 : 0, parse(": ")
    - local dgmlabels = 1
    - {c )-}
    - gettoken `dgmvar'dlabel`i' 0 : 0, parse(": ")
    = gettoken thetadlabel3 0 : 0, parse(": ")
    - local dgmlabels = 1
    - {c )-}
    - gettoken `dgmvar'dlabel`i' 0 : 0, parse(": ")
    = gettoken thetadlabel4 0 : 0, parse(": ")
    - local dgmlabels = 1
    - {c )-}
    - {c )-}
    - else {c -(}
      local dgmlabels = 0
      qui levels `dgmvar', local(levels)
      local loop = 1
      foreach l of local levels {c -(}
      local `dgmvar'dlabel`loop' `l'
      local loop = `loop' + 1
      {c )-}
      {c )-}
    - tempvar _group
    - qui egen `_group' = group(`dgmvalues'), label lname(grouplevels)
    = qui egen __000003 = group(theta rho pc k), label lname(grouplevels)
      {hline 79} begin egen {hline}
      - version 6, missing
      - local cvers = _caller()
      - gettoken type 0 : 0, parse(" =(")
      - gettoken name 0 : 0, parse(" =(")
      - if `"`name'"'=="=" {c -(}
      = if `"="'=="=" {c -(}
      - local name `"`type'"'
      = local name `"__000003"'
      - local type : set type
      - {c )-}
      - else {c -(}
        gettoken eqsign 0 : 0, parse(" =(")
        if `"`eqsign'"' != "=" {c -(}
        error 198
        {c )-}
        {c )-}
      - confirm new variable `name'
      = confirm new variable __000003
      - gettoken fcn 0 : 0, parse(" =(")
      - gettoken args 0 : 0, parse(" ,") match(par)
      - if "`c(adoarchive)'"=="1" {c -(}
      = if ""=="1" {c -(}
        capture qui _stfilearchive find _g`fcn'.ado
        if _rc {c -(}
        di as err in smcl "unknown {c -(}bf:egen{c )-} function {c -(}bf:`fcn'(){c )-}"
        exit 133
        {c )-}
        {c )-}
      - else {c -(}
      - capture qui findfile _g`fcn'.ado
      = capture qui findfile _ggroup.ado
      - if (`"`r(fn)'"' == "") {c -(}
      = if (`"C:\Program Files\Stata16\ado\base/_/_ggroup.ado"' == "") {c -(}
        di as err in smcl "unknown {c -(}bf:egen{c )-} function {c -(}bf:`fcn'(){c )-}"
        exit 133
        {c )-}
      - {c )-}
      - if `"`par'"' != "(" {c -(}
      = if `"("' != "(" {c -(}
        exit 198
        {c )-}
      - if `"`args'"' == "_all" | `"`args'"' == "*" {c -(}
      = if `"theta rho pc k"' == "_all" | `"theta rho pc k"' == "*" {c -(}
        version 7.0, missing
        unab args : _all
        local args : subinstr local args "`_sortindex'" "", all word
        version 6.0, missing
        {c )-}
      - syntax [if] [in] [, *]
      - if _by() {c -(}
        local byopt "by(`_byvars')"
        local cma ","
        {c )-}
      - else if `"`options'"' != "" {c -(}
      = else if `"label lname(grouplevels)"' != "" {c -(}
      - local cma ","
      - {c )-}
      - tempvar dummy
      - global EGEN_Varname `name'
      = global EGEN_Varname __000003
      - version 7.0, missing
      - global EGEN_SVarname `_sortindex'
      = global EGEN_SVarname __000004
      - version 6.0, missing
      - if inlist("`fcn'","mode","concat","group") {c -(}
      = if inlist("group","mode","concat","group") {c -(}
      - local vv : display "version " string(`cvers') ", missing:"
      = local vv : display "version " string(16) ", missing:"
      - {c )-}
      - capture noisily `vv' _g`fcn' `type' `dummy' = (`args') `if' `in' `cma' `byopt' `options'
      = capture noisily version 16, missing: _ggroup float __000005 = (theta rho pc k)   ,  label lname(grouplevels)
      - version 7.0, missing
      - local message $EGEN_Message
      = local message 1
      - version 6.0, missing
      - global EGEN_SVarname
      - global EGEN_Varname
      - global EGEN_Message
      - if _rc {c -(} exit _rc {c )-}
      - if "`message'" == "" {c -(}
      = if "1" == "" {c -(}
        quietly count if missing(`dummy')
        if r(N) {c -(}
        local s = cond(r(N)>1,"s","")
        local N : di %11.0fc r(N)
        local N `N'
        di in bl "(`N' missing value`s' generated)"
        {c )-}
        {c )-}
      - rename `dummy' `name'
      = rename __000005 __000003
      {hline 81} end egen {hline}
    - local group "`_group'"
    = local group "__000003"
    - qui tab `group'
    = qui tab __000003
    - local groupnum = `r(r)'
    = local groupnum = 192
    - if "`numtarget'" == "N/A" local numtargetcheck = 1
    = if "N/A" == "N/A" local numtargetcheck = 1
    - else local numtargetcheck = `numtarget'
    = else local numtargetcheck = N/A
    - if "`groupnum'" == "" local totalgroupnum = 1
    = if "192" == "" local totalgroupnum = 1
    - else local totalgroupnum = `groupnum'
    = else local totalgroupnum = 192
    - local graphnumcheck = `totalgroupnum' * `numtargetcheck'
    = local graphnumcheck = 192 * 1
    - if `graphnumcheck' > 15 {c -(}
    = if 192 > 15 {c -(}
    - di as error "{c -(}it: WARNING: `graphnumcheck' graphs will be created, consider using 'if' option as detailed in {c -(}help              siman_comparemethodsscatter:siman comparemethodsscatter{c )-}{c )-}"
    = di as error "{c -(}it: WARNING: 192 graphs will be created, consider using 'if' option as detailed in {c -(}help              siman_comparemethodsscatter:siman comparemethodsscatter{c )-}{c )-}"
{err}{it: WARNING: 192 graphs will be created, consider using 'if' option as detailed in {help              siman_comparemethodsscatter:siman comparemethodsscatter}}
    {txt}- {c )-}
    - forvalues d = 1/`groupnum' {c -(}
    = forvalues d = 1/192 {c -(}
    - local dgmfilter = "`group'==`d'"
    = local dgmfilter = "__000003==1"
    - local dgmlevels`d' : label grouplevels `d'
    = local dgmlevels1 : label grouplevels 1
    - if "`valtarget'"!= "N/A" {c -(}
    = if "N/A"!= "N/A" {c -(}
      qui levelsof `target', local(targetlevels)
      local foreachtarget "`targetlevels'"
      {c )-}
    - else local foreachtarget 1
    - foreach t in `foreachtarget' {c -(}
    = foreach t in 1 {c -(}
    - cap confirm numeric variable `target'
    = cap confirm numeric variable 
    - if _rc local iftarget `"& `target' == "`t'""'
    = if _rc local iftarget `"&  == "1""'
    - else local iftarget `"& `target' == `t'"'
    = else local iftarget `"&  == 1"'
    - if "`valtarget'"== "N/A" local iftarget
    = if "N/A"== "N/A" local iftarget
    - local frtheta `minest' `maxest'
    = local frtheta .2799641191959381 1.095583438873291
    - local frse `minse' `maxse'
    = local frse .0011168431956321 .9734957218170166
    - if `methodstringindi'==0 {c -(}
    = if 1==0 {c -(}
      if mi("`methlist'") {c -(}
      if `methodlabels'!= 1 local methodvalues `valmethod'
      else local methodvalues `valmethodnumwithlabel'
      {c )-}
      local maxmethodvalues : word `numbermethod' of `methodvalues'
      local maxmethodvaluesplus1 = substr("`methodvalues'", -`numbermethod', .)
      local maxmethodvaluesminus1 = substr("`methodvalues'", 1 ,`numbermethod')
      local counter = 1
      local counterplus1 = 2
      foreach j in `maxmethodvaluesminus1' {c -(}
      foreach k in `maxmethodvaluesplus1' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'`j' `estimate'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`estimate'`j'`k'`d'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'`j' `se'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`se'`j'`k'`d'tar`t', replace)
      local graphtheta`counter'`counterplus1'`d'`t' `estimate'`j'`k'`d'tar`t'
      local graphse`counter'`counterplus1'`d'`t' `se'`j'`k'`d'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
    - else if `methodstringindi'==1 | !mi("`methlist'") {c -(}
    = else if 1==1 | !mi("") {c -(}
    - local counter = 1
    - local counterplus1 = 2
    - local maxmethodvaluesminus1 = `numbermethod' - 1
    = local maxmethodvaluesminus1 = 2 - 1
    - forvalues j = 1/`maxmethodvaluesminus1' {c -(}
    = forvalues j = 1/1 {c -(}
    - forvalues k = 2/`numbermethod' {c -(}
    = forvalues k = 2/2 {c -(}
    - if "`j'" != "`k'" {c -(}
    = if "1" != "2" {c -(}
    - `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'``j'' `estimate'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'``j''``k''`d'tar`t', replace)
    =  twoway (function x, range(.2799641191959381 1.095583438873291) lcolor(gs10)) (scatter expg2 exppeto if __000003==1 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(expg2peto1tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.2799641191959381 1.095583438873291) lcolor(gs10)) (scatter expg2 exppeto if __000003==1 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(expg2peto1tar1, replace)
      {hline 79} end twoway {hline}
    - `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'``j'' `se'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'``j''``k''`d'tar`t', replace)
    =  twoway (function x, range(.0011168431956321 .9734957218170166) lcolor(gs10)) (scatter var2g2 var2peto if __000003==1 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(var2g2peto1tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.0011168431956321 .9734957218170166) lcolor(gs10)) (scatter var2g2 var2peto if __000003==1 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(var2g2peto1tar1, replace)
      {hline 79} end twoway {hline}
    - local graphtheta`counter'`counterplus1'`d'`t' `estimate'``j''``k''`d'tar`t'
    = local graphtheta1211 expg2peto1tar1
    - local graphse`counter'`counterplus1'`d'`t' `se'``j''``k''`d'tar`t'
    = local graphse1211 var2g2peto1tar1
    - local counterplus1 = `counterplus1' + 1
    = local counterplus1 = 2 + 1
    - if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
    = if 3 > 2 local counterplus1 = 2
    - {c )-}
    - {c )-}
    - local counter = `counter' + 1
    = local counter = 1 + 1
    - {c )-}
    - {c )-}
    - if `targetlabels' == 1 {c -(}
    = if 0 == 1 {c -(}
      local tlab: word `t' of `valtarget'
      local targetlab ", `target': `tlab'"
      {c )-}
    - else {c -(}
    - local tlab `t'
    = local tlab 1
    - local targetlab ", `target': `tlab'"
    = local targetlab ", : 1"
    - {c )-}
    - if "`valtarget'"== "N/A" local targetlab
    = if "N/A"== "N/A" local targetlab
    - if `numbermethod'==2 {c -(}
    = if 2==2 {c -(}
    - `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphse12`d'`t'' `mlabelname2', title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(2) xsize(4) name(`name'_`d'`tlab', replace) `options'
    =  graph combine Method_g2 expg2peto1tar1 var2g2peto1tar1 Method_peto, title("") note("Graphs for theta rho pc k: 0.5 no 10% 5 ") cols(2) xsize(4) name(cms_test7_11, replace) title("testtitle") 
      {hline 78} begin graph {hline}
      - if d(`=c(born_date)') < d(23Jul2004) {c -(}
      = if d(14 Feb 2022) < d(23Jul2004) {c -(}
        di as err "your Stata executable is out of date"
        di as err "    type -update executable- at the Stata prompt"
        exit 498
        {c )-}
      - local ver = string(_caller())
      - if (_caller() < 8.2) version 8
      - else if (_caller() < 10 ) version 8.2
      - else version 10
      - gdi record = yes
      - gdi maybedraw = yes
      - if "`._Gr_Global.isa'" == "" {c -(}
      = if "class" == "" {c -(}
        ._Gr_Global = .global_g.new
        {c )-}
      - ._Gr_Global.callerver = "`ver'"
      = ._Gr_Global.callerver = "16"
      - capture noisily Graph `0'
      = capture noisily Graph combine Method_g2 expg2peto1tar1 var2g2peto1tar1 Method_peto, title("") note("Graphs for theta rho pc k: 0.5 no 10% 5 ") cols(2) xsize(4) name(cms_test7_11, replace) title("testtitle") 
{res}      {txt}- local rc = _rc
      - gdi record = yes
      - gdi maybedraw = yes
      - gdi end
      - exit `rc'
      = exit 0
      {hline 80} end graph {hline}
    - {c )-}
    - else if `numbermethod'==3 {c -(}
    = else if 2==3 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphtheta13`d'`t'' `graphse12`d'`t'' `mlabelname2' `graphtheta23`d'`t'' `graphse13`d'`t'' `graphse23`d'`t'' `mlabelname3', title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(3) xsize(4) name(`name'_`d'`tlab', replace) `options'
      {c )-}
    - else if `numbermethod'>3 {c -(}
    = else if 2>3 {c -(}
      if mi("`anything'") local anything = "est"
      `dicmd' graph matrix `varlist' if `group'==`d' `iftarget', `half' `by' title("") note("") name(`name'_`anything'`j'`k'`d'`tlab', replace) `options'
      {c )-}
    - {c )-}
    - {c )-}
    - local dgmfilter = "`group'==`d'"
    = local dgmfilter = "__000003==2"
    - local dgmlevels`d' : label grouplevels `d'
    = local dgmlevels2 : label grouplevels 2
    - if "`valtarget'"!= "N/A" {c -(}
    = if "N/A"!= "N/A" {c -(}
      qui levelsof `target', local(targetlevels)
      local foreachtarget "`targetlevels'"
      {c )-}
    - else local foreachtarget 1
    - foreach t in `foreachtarget' {c -(}
    = foreach t in 1 {c -(}
    - cap confirm numeric variable `target'
    = cap confirm numeric variable 
    - if _rc local iftarget `"& `target' == "`t'""'
    = if _rc local iftarget `"&  == "1""'
    - else local iftarget `"& `target' == `t'"'
    = else local iftarget `"&  == 1"'
    - if "`valtarget'"== "N/A" local iftarget
    = if "N/A"== "N/A" local iftarget
    - local frtheta `minest' `maxest'
    = local frtheta .2799641191959381 1.095583438873291
    - local frse `minse' `maxse'
    = local frse .0011168431956321 .9734957218170166
    - if `methodstringindi'==0 {c -(}
    = if 1==0 {c -(}
      if mi("`methlist'") {c -(}
      if `methodlabels'!= 1 local methodvalues `valmethod'
      else local methodvalues `valmethodnumwithlabel'
      {c )-}
      local maxmethodvalues : word `numbermethod' of `methodvalues'
      local maxmethodvaluesplus1 = substr("`methodvalues'", -`numbermethod', .)
      local maxmethodvaluesminus1 = substr("`methodvalues'", 1 ,`numbermethod')
      local counter = 1
      local counterplus1 = 2
      foreach j in `maxmethodvaluesminus1' {c -(}
      foreach k in `maxmethodvaluesplus1' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'`j' `estimate'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`estimate'`j'`k'`d'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'`j' `se'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`se'`j'`k'`d'tar`t', replace)
      local graphtheta`counter'`counterplus1'`d'`t' `estimate'`j'`k'`d'tar`t'
      local graphse`counter'`counterplus1'`d'`t' `se'`j'`k'`d'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
    - else if `methodstringindi'==1 | !mi("`methlist'") {c -(}
    = else if 1==1 | !mi("") {c -(}
    - local counter = 1
    - local counterplus1 = 2
    - local maxmethodvaluesminus1 = `numbermethod' - 1
    = local maxmethodvaluesminus1 = 2 - 1
    - forvalues j = 1/`maxmethodvaluesminus1' {c -(}
    = forvalues j = 1/1 {c -(}
    - forvalues k = 2/`numbermethod' {c -(}
    = forvalues k = 2/2 {c -(}
    - if "`j'" != "`k'" {c -(}
    = if "1" != "2" {c -(}
    - `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'``j'' `estimate'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'``j''``k''`d'tar`t', replace)
    =  twoway (function x, range(.2799641191959381 1.095583438873291) lcolor(gs10)) (scatter expg2 exppeto if __000003==2 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(expg2peto2tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.2799641191959381 1.095583438873291) lcolor(gs10)) (scatter expg2 exppeto if __000003==2 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(expg2peto2tar1, replace)
      {hline 79} end twoway {hline}
    - `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'``j'' `se'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'``j''``k''`d'tar`t', replace)
    =  twoway (function x, range(.0011168431956321 .9734957218170166) lcolor(gs10)) (scatter var2g2 var2peto if __000003==2 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(var2g2peto2tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.0011168431956321 .9734957218170166) lcolor(gs10)) (scatter var2g2 var2peto if __000003==2 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(var2g2peto2tar1, replace)
      {hline 79} end twoway {hline}
    - local graphtheta`counter'`counterplus1'`d'`t' `estimate'``j''``k''`d'tar`t'
    = local graphtheta1221 expg2peto2tar1
    - local graphse`counter'`counterplus1'`d'`t' `se'``j''``k''`d'tar`t'
    = local graphse1221 var2g2peto2tar1
    - local counterplus1 = `counterplus1' + 1
    = local counterplus1 = 2 + 1
    - if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
    = if 3 > 2 local counterplus1 = 2
    - {c )-}
    - {c )-}
    - local counter = `counter' + 1
    = local counter = 1 + 1
    - {c )-}
    - {c )-}
    - if `targetlabels' == 1 {c -(}
    = if 0 == 1 {c -(}
      local tlab: word `t' of `valtarget'
      local targetlab ", `target': `tlab'"
      {c )-}
    - else {c -(}
    - local tlab `t'
    = local tlab 1
    - local targetlab ", `target': `tlab'"
    = local targetlab ", : 1"
    - {c )-}
    - if "`valtarget'"== "N/A" local targetlab
    = if "N/A"== "N/A" local targetlab
    - if `numbermethod'==2 {c -(}
    = if 2==2 {c -(}
    - `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphse12`d'`t'' `mlabelname2', title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(2) xsize(4) name(`name'_`d'`tlab', replace) `options'
    =  graph combine Method_g2 expg2peto2tar1 var2g2peto2tar1 Method_peto, title("") note("Graphs for theta rho pc k: 0.5 no 10% 10 ") cols(2) xsize(4) name(cms_test7_21, replace) title("testtitle") 
      {hline 78} begin graph {hline}
      - if d(`=c(born_date)') < d(23Jul2004) {c -(}
      = if d(14 Feb 2022) < d(23Jul2004) {c -(}
        di as err "your Stata executable is out of date"
        di as err "    type -update executable- at the Stata prompt"
        exit 498
        {c )-}
      - local ver = string(_caller())
      - if (_caller() < 8.2) version 8
      - else if (_caller() < 10 ) version 8.2
      - else version 10
      - gdi record = yes
      - gdi maybedraw = yes
      - if "`._Gr_Global.isa'" == "" {c -(}
      = if "class" == "" {c -(}
        ._Gr_Global = .global_g.new
        {c )-}
      - ._Gr_Global.callerver = "`ver'"
      = ._Gr_Global.callerver = "16"
      - capture noisily Graph `0'
      = capture noisily Graph combine Method_g2 expg2peto2tar1 var2g2peto2tar1 Method_peto, title("") note("Graphs for theta rho pc k: 0.5 no 10% 10 ") cols(2) xsize(4) name(cms_test7_21, replace) title("testtitle") 
{res}      {txt}- local rc = _rc
      - gdi record = yes
      - gdi maybedraw = yes
      - gdi end
      - exit `rc'
      = exit 0
      {hline 80} end graph {hline}
    - {c )-}
    - else if `numbermethod'==3 {c -(}
    = else if 2==3 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphtheta13`d'`t'' `graphse12`d'`t'' `mlabelname2' `graphtheta23`d'`t'' `graphse13`d'`t'' `graphse23`d'`t'' `mlabelname3', title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(3) xsize(4) name(`name'_`d'`tlab', replace) `options'
      {c )-}
    - else if `numbermethod'>3 {c -(}
    = else if 2>3 {c -(}
      if mi("`anything'") local anything = "est"
      `dicmd' graph matrix `varlist' if `group'==`d' `iftarget', `half' `by' title("") note("") name(`name'_`anything'`j'`k'`d'`tlab', replace) `options'
      {c )-}
    - {c )-}
    - {c )-}
    - local dgmfilter = "`group'==`d'"
    = local dgmfilter = "__000003==3"
    - local dgmlevels`d' : label grouplevels `d'
    = local dgmlevels3 : label grouplevels 3
    - if "`valtarget'"!= "N/A" {c -(}
    = if "N/A"!= "N/A" {c -(}
      qui levelsof `target', local(targetlevels)
      local foreachtarget "`targetlevels'"
      {c )-}
    - else local foreachtarget 1
    - foreach t in `foreachtarget' {c -(}
    = foreach t in 1 {c -(}
    - cap confirm numeric variable `target'
    = cap confirm numeric variable 
    - if _rc local iftarget `"& `target' == "`t'""'
    = if _rc local iftarget `"&  == "1""'
    - else local iftarget `"& `target' == `t'"'
    = else local iftarget `"&  == 1"'
    - if "`valtarget'"== "N/A" local iftarget
    = if "N/A"== "N/A" local iftarget
    - local frtheta `minest' `maxest'
    = local frtheta .2799641191959381 1.095583438873291
    - local frse `minse' `maxse'
    = local frse .0011168431956321 .9734957218170166
    - if `methodstringindi'==0 {c -(}
    = if 1==0 {c -(}
      if mi("`methlist'") {c -(}
      if `methodlabels'!= 1 local methodvalues `valmethod'
      else local methodvalues `valmethodnumwithlabel'
      {c )-}
      local maxmethodvalues : word `numbermethod' of `methodvalues'
      local maxmethodvaluesplus1 = substr("`methodvalues'", -`numbermethod', .)
      local maxmethodvaluesminus1 = substr("`methodvalues'", 1 ,`numbermethod')
      local counter = 1
      local counterplus1 = 2
      foreach j in `maxmethodvaluesminus1' {c -(}
      foreach k in `maxmethodvaluesplus1' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'`j' `estimate'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`estimate'`j'`k'`d'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'`j' `se'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`se'`j'`k'`d'tar`t', replace)
      local graphtheta`counter'`counterplus1'`d'`t' `estimate'`j'`k'`d'tar`t'
      local graphse`counter'`counterplus1'`d'`t' `se'`j'`k'`d'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
    - else if `methodstringindi'==1 | !mi("`methlist'") {c -(}
    = else if 1==1 | !mi("") {c -(}
    - local counter = 1
    - local counterplus1 = 2
    - local maxmethodvaluesminus1 = `numbermethod' - 1
    = local maxmethodvaluesminus1 = 2 - 1
    - forvalues j = 1/`maxmethodvaluesminus1' {c -(}
    = forvalues j = 1/1 {c -(}
    - forvalues k = 2/`numbermethod' {c -(}
    = forvalues k = 2/2 {c -(}
    - if "`j'" != "`k'" {c -(}
    = if "1" != "2" {c -(}
    - `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'``j'' `estimate'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'``j''``k''`d'tar`t', replace)
    =  twoway (function x, range(.2799641191959381 1.095583438873291) lcolor(gs10)) (scatter expg2 exppeto if __000003==3 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(expg2peto3tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.2799641191959381 1.095583438873291) lcolor(gs10)) (scatter expg2 exppeto if __000003==3 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(expg2peto3tar1, replace)
      {hline 79} end twoway {hline}
    - `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'``j'' `se'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'``j''``k''`d'tar`t', replace)
    =  twoway (function x, range(.0011168431956321 .9734957218170166) lcolor(gs10)) (scatter var2g2 var2peto if __000003==3 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(var2g2peto3tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.0011168431956321 .9734957218170166) lcolor(gs10)) (scatter var2g2 var2peto if __000003==3 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(var2g2peto3tar1, replace)
      {hline 79} end twoway {hline}
    - local graphtheta`counter'`counterplus1'`d'`t' `estimate'``j''``k''`d'tar`t'
    = local graphtheta1231 expg2peto3tar1
    - local graphse`counter'`counterplus1'`d'`t' `se'``j''``k''`d'tar`t'
    = local graphse1231 var2g2peto3tar1
    - local counterplus1 = `counterplus1' + 1
    = local counterplus1 = 2 + 1
    - if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
    = if 3 > 2 local counterplus1 = 2
    - {c )-}
    - {c )-}
    - local counter = `counter' + 1
    = local counter = 1 + 1
    - {c )-}
    - {c )-}
    - if `targetlabels' == 1 {c -(}
    = if 0 == 1 {c -(}
      local tlab: word `t' of `valtarget'
      local targetlab ", `target': `tlab'"
      {c )-}
    - else {c -(}
    - local tlab `t'
    = local tlab 1
    - local targetlab ", `target': `tlab'"
    = local targetlab ", : 1"
    - {c )-}
    - if "`valtarget'"== "N/A" local targetlab
    = if "N/A"== "N/A" local targetlab
    - if `numbermethod'==2 {c -(}
    = if 2==2 {c -(}
    - `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphse12`d'`t'' `mlabelname2', title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(2) xsize(4) name(`name'_`d'`tlab', replace) `options'
    =  graph combine Method_g2 expg2peto3tar1 var2g2peto3tar1 Method_peto, title("") note("Graphs for theta rho pc k: 0.5 no 10% 20 ") cols(2) xsize(4) name(cms_test7_31, replace) title("testtitle") 
      {hline 78} begin graph {hline}
      - if d(`=c(born_date)') < d(23Jul2004) {c -(}
      = if d(14 Feb 2022) < d(23Jul2004) {c -(}
        di as err "your Stata executable is out of date"
        di as err "    type -update executable- at the Stata prompt"
        exit 498
        {c )-}
      - local ver = string(_caller())
      - if (_caller() < 8.2) version 8
      - else if (_caller() < 10 ) version 8.2
      - else version 10
      - gdi record = yes
      - gdi maybedraw = yes
      - if "`._Gr_Global.isa'" == "" {c -(}
      = if "class" == "" {c -(}
        ._Gr_Global = .global_g.new
        {c )-}
      - ._Gr_Global.callerver = "`ver'"
      = ._Gr_Global.callerver = "16"
      - capture noisily Graph `0'
      = capture noisily Graph combine Method_g2 expg2peto3tar1 var2g2peto3tar1 Method_peto, title("") note("Graphs for theta rho pc k: 0.5 no 10% 20 ") cols(2) xsize(4) name(cms_test7_31, replace) title("testtitle") 
{res}      {txt}- local rc = _rc
      - gdi record = yes
      - gdi maybedraw = yes
      - gdi end
      - exit `rc'
      = exit 0
      {hline 80} end graph {hline}
    - {c )-}
    - else if `numbermethod'==3 {c -(}
    = else if 2==3 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphtheta13`d'`t'' `graphse12`d'`t'' `mlabelname2' `graphtheta23`d'`t'' `graphse13`d'`t'' `graphse23`d'`t'' `mlabelname3', title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(3) xsize(4) name(`name'_`d'`tlab', replace) `options'
      {c )-}
    - else if `numbermethod'>3 {c -(}
    = else if 2>3 {c -(}
      if mi("`anything'") local anything = "est"
      `dicmd' graph matrix `varlist' if `group'==`d' `iftarget', `half' `by' title("") note("") name(`name'_`anything'`j'`k'`d'`tlab', replace) `options'
      {c )-}
    - {c )-}
    - {c )-}
    - local dgmfilter = "`group'==`d'"
    = local dgmfilter = "__000003==4"
    - local dgmlevels`d' : label grouplevels `d'
    = local dgmlevels4 : label grouplevels 4
    - if "`valtarget'"!= "N/A" {c -(}
    = if "N/A"!= "N/A" {c -(}
      qui levelsof `target', local(targetlevels)
      local foreachtarget "`targetlevels'"
      {c )-}
    - else local foreachtarget 1
    - foreach t in `foreachtarget' {c -(}
    = foreach t in 1 {c -(}
    - cap confirm numeric variable `target'
    = cap confirm numeric variable 
    - if _rc local iftarget `"& `target' == "`t'""'
    = if _rc local iftarget `"&  == "1""'
    - else local iftarget `"& `target' == `t'"'
    = else local iftarget `"&  == 1"'
    - if "`valtarget'"== "N/A" local iftarget
    = if "N/A"== "N/A" local iftarget
    - local frtheta `minest' `maxest'
    = local frtheta .2799641191959381 1.095583438873291
    - local frse `minse' `maxse'
    = local frse .0011168431956321 .9734957218170166
    - if `methodstringindi'==0 {c -(}
    = if 1==0 {c -(}
      if mi("`methlist'") {c -(}
      if `methodlabels'!= 1 local methodvalues `valmethod'
      else local methodvalues `valmethodnumwithlabel'
      {c )-}
      local maxmethodvalues : word `numbermethod' of `methodvalues'
      local maxmethodvaluesplus1 = substr("`methodvalues'", -`numbermethod', .)
      local maxmethodvaluesminus1 = substr("`methodvalues'", 1 ,`numbermethod')
      local counter = 1
      local counterplus1 = 2
      foreach j in `maxmethodvaluesminus1' {c -(}
      foreach k in `maxmethodvaluesplus1' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'`j' `estimate'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`estimate'`j'`k'`d'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'`j' `se'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`se'`j'`k'`d'tar`t', replace)
      local graphtheta`counter'`counterplus1'`d'`t' `estimate'`j'`k'`d'tar`t'
      local graphse`counter'`counterplus1'`d'`t' `se'`j'`k'`d'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
    - else if `methodstringindi'==1 | !mi("`methlist'") {c -(}
    = else if 1==1 | !mi("") {c -(}
    - local counter = 1
    - local counterplus1 = 2
    - local maxmethodvaluesminus1 = `numbermethod' - 1
    = local maxmethodvaluesminus1 = 2 - 1
    - forvalues j = 1/`maxmethodvaluesminus1' {c -(}
    = forvalues j = 1/1 {c -(}
    - forvalues k = 2/`numbermethod' {c -(}
    = forvalues k = 2/2 {c -(}
    - if "`j'" != "`k'" {c -(}
    = if "1" != "2" {c -(}
    - `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'``j'' `estimate'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'``j''``k''`d'tar`t', replace)
    =  twoway (function x, range(.2799641191959381 1.095583438873291) lcolor(gs10)) (scatter expg2 exppeto if __000003==4 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(expg2peto4tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.2799641191959381 1.095583438873291) lcolor(gs10)) (scatter expg2 exppeto if __000003==4 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(expg2peto4tar1, replace)
      {hline 79} end twoway {hline}
    - `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'``j'' `se'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'``j''``k''`d'tar`t', replace)
    =  twoway (function x, range(.0011168431956321 .9734957218170166) lcolor(gs10)) (scatter var2g2 var2peto if __000003==4 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(var2g2peto4tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.0011168431956321 .9734957218170166) lcolor(gs10)) (scatter var2g2 var2peto if __000003==4 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(var2g2peto4tar1, replace)
      {hline 79} end twoway {hline}
    - local graphtheta`counter'`counterplus1'`d'`t' `estimate'``j''``k''`d'tar`t'
    = local graphtheta1241 expg2peto4tar1
    - local graphse`counter'`counterplus1'`d'`t' `se'``j''``k''`d'tar`t'
    = local graphse1241 var2g2peto4tar1
    - local counterplus1 = `counterplus1' + 1
    = local counterplus1 = 2 + 1
    - if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
    = if 3 > 2 local counterplus1 = 2
    - {c )-}
    - {c )-}
    - local counter = `counter' + 1
    = local counter = 1 + 1
    - {c )-}
    - {c )-}
    - if `targetlabels' == 1 {c -(}
    = if 0 == 1 {c -(}
      local tlab: word `t' of `valtarget'
      local targetlab ", `target': `tlab'"
      {c )-}
    - else {c -(}
    - local tlab `t'
    = local tlab 1
    - local targetlab ", `target': `tlab'"
    = local targetlab ", : 1"
    - {c )-}
    - if "`valtarget'"== "N/A" local targetlab
    = if "N/A"== "N/A" local targetlab
    - if `numbermethod'==2 {c -(}
    = if 2==2 {c -(}
    - `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphse12`d'`t'' `mlabelname2', title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(2) xsize(4) name(`name'_`d'`tlab', replace) `options'
    =  graph combine Method_g2 expg2peto4tar1 var2g2peto4tar1 Method_peto, title("") note("Graphs for theta rho pc k: 0.5 no 20% 5 ") cols(2) xsize(4) name(cms_test7_41, replace) title("testtitle") 
      {hline 78} begin graph {hline}
      - if d(`=c(born_date)') < d(23Jul2004) {c -(}
      = if d(14 Feb 2022) < d(23Jul2004) {c -(}
        di as err "your Stata executable is out of date"
        di as err "    type -update executable- at the Stata prompt"
        exit 498
        {c )-}
      - local ver = string(_caller())
      - if (_caller() < 8.2) version 8
      - else if (_caller() < 10 ) version 8.2
      - else version 10
      - gdi record = yes
      - gdi maybedraw = yes
      - if "`._Gr_Global.isa'" == "" {c -(}
      = if "class" == "" {c -(}
        ._Gr_Global = .global_g.new
        {c )-}
      - ._Gr_Global.callerver = "`ver'"
      = ._Gr_Global.callerver = "16"
      - capture noisily Graph `0'
      = capture noisily Graph combine Method_g2 expg2peto4tar1 var2g2peto4tar1 Method_peto, title("") note("Graphs for theta rho pc k: 0.5 no 20% 5 ") cols(2) xsize(4) name(cms_test7_41, replace) title("testtitle") 
{res}      {txt}- local rc = _rc
      - gdi record = yes
      - gdi maybedraw = yes
      - gdi end
      - exit `rc'
      = exit 0
      {hline 80} end graph {hline}
    - {c )-}
    - else if `numbermethod'==3 {c -(}
    = else if 2==3 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphtheta13`d'`t'' `graphse12`d'`t'' `mlabelname2' `graphtheta23`d'`t'' `graphse13`d'`t'' `graphse23`d'`t'' `mlabelname3', title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(3) xsize(4) name(`name'_`d'`tlab', replace) `options'
      {c )-}
    - else if `numbermethod'>3 {c -(}
    = else if 2>3 {c -(}
      if mi("`anything'") local anything = "est"
      `dicmd' graph matrix `varlist' if `group'==`d' `iftarget', `half' `by' title("") note("") name(`name'_`anything'`j'`k'`d'`tlab', replace) `options'
      {c )-}
    - {c )-}
    - {c )-}
    - local dgmfilter = "`group'==`d'"
    = local dgmfilter = "__000003==5"
    - local dgmlevels`d' : label grouplevels `d'
    = local dgmlevels5 : label grouplevels 5
    - if "`valtarget'"!= "N/A" {c -(}
    = if "N/A"!= "N/A" {c -(}
      qui levelsof `target', local(targetlevels)
      local foreachtarget "`targetlevels'"
      {c )-}
    - else local foreachtarget 1
    - foreach t in `foreachtarget' {c -(}
    = foreach t in 1 {c -(}
    - cap confirm numeric variable `target'
    = cap confirm numeric variable 
    - if _rc local iftarget `"& `target' == "`t'""'
    = if _rc local iftarget `"&  == "1""'
    - else local iftarget `"& `target' == `t'"'
    = else local iftarget `"&  == 1"'
    - if "`valtarget'"== "N/A" local iftarget
    = if "N/A"== "N/A" local iftarget
    - local frtheta `minest' `maxest'
    = local frtheta .2799641191959381 1.095583438873291
    - local frse `minse' `maxse'
    = local frse .0011168431956321 .9734957218170166
    - if `methodstringindi'==0 {c -(}
    = if 1==0 {c -(}
      if mi("`methlist'") {c -(}
      if `methodlabels'!= 1 local methodvalues `valmethod'
      else local methodvalues `valmethodnumwithlabel'
      {c )-}
      local maxmethodvalues : word `numbermethod' of `methodvalues'
      local maxmethodvaluesplus1 = substr("`methodvalues'", -`numbermethod', .)
      local maxmethodvaluesminus1 = substr("`methodvalues'", 1 ,`numbermethod')
      local counter = 1
      local counterplus1 = 2
      foreach j in `maxmethodvaluesminus1' {c -(}
      foreach k in `maxmethodvaluesplus1' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'`j' `estimate'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`estimate'`j'`k'`d'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'`j' `se'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`se'`j'`k'`d'tar`t', replace)
      local graphtheta`counter'`counterplus1'`d'`t' `estimate'`j'`k'`d'tar`t'
      local graphse`counter'`counterplus1'`d'`t' `se'`j'`k'`d'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
    - else if `methodstringindi'==1 | !mi("`methlist'") {c -(}
    = else if 1==1 | !mi("") {c -(}
    - local counter = 1
    - local counterplus1 = 2
    - local maxmethodvaluesminus1 = `numbermethod' - 1
    = local maxmethodvaluesminus1 = 2 - 1
    - forvalues j = 1/`maxmethodvaluesminus1' {c -(}
    = forvalues j = 1/1 {c -(}
    - forvalues k = 2/`numbermethod' {c -(}
    = forvalues k = 2/2 {c -(}
    - if "`j'" != "`k'" {c -(}
    = if "1" != "2" {c -(}
    - `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'``j'' `estimate'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'``j''``k''`d'tar`t', replace)
    =  twoway (function x, range(.2799641191959381 1.095583438873291) lcolor(gs10)) (scatter expg2 exppeto if __000003==5 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(expg2peto5tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.2799641191959381 1.095583438873291) lcolor(gs10)) (scatter expg2 exppeto if __000003==5 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(expg2peto5tar1, replace)
      {hline 79} end twoway {hline}
    - `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'``j'' `se'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'``j''``k''`d'tar`t', replace)
    =  twoway (function x, range(.0011168431956321 .9734957218170166) lcolor(gs10)) (scatter var2g2 var2peto if __000003==5 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(var2g2peto5tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.0011168431956321 .9734957218170166) lcolor(gs10)) (scatter var2g2 var2peto if __000003==5 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(var2g2peto5tar1, replace)
      {hline 79} end twoway {hline}
    - local graphtheta`counter'`counterplus1'`d'`t' `estimate'``j''``k''`d'tar`t'
    = local graphtheta1251 expg2peto5tar1
    - local graphse`counter'`counterplus1'`d'`t' `se'``j''``k''`d'tar`t'
    = local graphse1251 var2g2peto5tar1
    - local counterplus1 = `counterplus1' + 1
    = local counterplus1 = 2 + 1
    - if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
    = if 3 > 2 local counterplus1 = 2
    - {c )-}
    - {c )-}
    - local counter = `counter' + 1
    = local counter = 1 + 1
    - {c )-}
    - {c )-}
    - if `targetlabels' == 1 {c -(}
    = if 0 == 1 {c -(}
      local tlab: word `t' of `valtarget'
      local targetlab ", `target': `tlab'"
      {c )-}
    - else {c -(}
    - local tlab `t'
    = local tlab 1
    - local targetlab ", `target': `tlab'"
    = local targetlab ", : 1"
    - {c )-}
    - if "`valtarget'"== "N/A" local targetlab
    = if "N/A"== "N/A" local targetlab
    - if `numbermethod'==2 {c -(}
    = if 2==2 {c -(}
    - `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphse12`d'`t'' `mlabelname2', title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(2) xsize(4) name(`name'_`d'`tlab', replace) `options'
    =  graph combine Method_g2 expg2peto5tar1 var2g2peto5tar1 Method_peto, title("") note("Graphs for theta rho pc k: 0.5 no 20% 10 ") cols(2) xsize(4) name(cms_test7_51, replace) title("testtitle") 
      {hline 78} begin graph {hline}
      - if d(`=c(born_date)') < d(23Jul2004) {c -(}
      = if d(14 Feb 2022) < d(23Jul2004) {c -(}
        di as err "your Stata executable is out of date"
        di as err "    type -update executable- at the Stata prompt"
        exit 498
        {c )-}
      - local ver = string(_caller())
      - if (_caller() < 8.2) version 8
      - else if (_caller() < 10 ) version 8.2
      - else version 10
      - gdi record = yes
      - gdi maybedraw = yes
      - if "`._Gr_Global.isa'" == "" {c -(}
      = if "class" == "" {c -(}
        ._Gr_Global = .global_g.new
        {c )-}
      - ._Gr_Global.callerver = "`ver'"
      = ._Gr_Global.callerver = "16"
      - capture noisily Graph `0'
      = capture noisily Graph combine Method_g2 expg2peto5tar1 var2g2peto5tar1 Method_peto, title("") note("Graphs for theta rho pc k: 0.5 no 20% 10 ") cols(2) xsize(4) name(cms_test7_51, replace) title("testtitle") 
{res}      {txt}- local rc = _rc
      - gdi record = yes
      - gdi maybedraw = yes
      - gdi end
      - exit `rc'
      = exit 0
      {hline 80} end graph {hline}
    - {c )-}
    - else if `numbermethod'==3 {c -(}
    = else if 2==3 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphtheta13`d'`t'' `graphse12`d'`t'' `mlabelname2' `graphtheta23`d'`t'' `graphse13`d'`t'' `graphse23`d'`t'' `mlabelname3', title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(3) xsize(4) name(`name'_`d'`tlab', replace) `options'
      {c )-}
    - else if `numbermethod'>3 {c -(}
    = else if 2>3 {c -(}
      if mi("`anything'") local anything = "est"
      `dicmd' graph matrix `varlist' if `group'==`d' `iftarget', `half' `by' title("") note("") name(`name'_`anything'`j'`k'`d'`tlab', replace) `options'
      {c )-}
    - {c )-}
    - {c )-}
    - local dgmfilter = "`group'==`d'"
    = local dgmfilter = "__000003==6"
    - local dgmlevels`d' : label grouplevels `d'
    = local dgmlevels6 : label grouplevels 6
    - if "`valtarget'"!= "N/A" {c -(}
    = if "N/A"!= "N/A" {c -(}
      qui levelsof `target', local(targetlevels)
      local foreachtarget "`targetlevels'"
      {c )-}
    - else local foreachtarget 1
    - foreach t in `foreachtarget' {c -(}
    = foreach t in 1 {c -(}
    - cap confirm numeric variable `target'
    = cap confirm numeric variable 
    - if _rc local iftarget `"& `target' == "`t'""'
    = if _rc local iftarget `"&  == "1""'
    - else local iftarget `"& `target' == `t'"'
    = else local iftarget `"&  == 1"'
    - if "`valtarget'"== "N/A" local iftarget
    = if "N/A"== "N/A" local iftarget
    - local frtheta `minest' `maxest'
    = local frtheta .2799641191959381 1.095583438873291
    - local frse `minse' `maxse'
    = local frse .0011168431956321 .9734957218170166
    - if `methodstringindi'==0 {c -(}
    = if 1==0 {c -(}
      if mi("`methlist'") {c -(}
      if `methodlabels'!= 1 local methodvalues `valmethod'
      else local methodvalues `valmethodnumwithlabel'
      {c )-}
      local maxmethodvalues : word `numbermethod' of `methodvalues'
      local maxmethodvaluesplus1 = substr("`methodvalues'", -`numbermethod', .)
      local maxmethodvaluesminus1 = substr("`methodvalues'", 1 ,`numbermethod')
      local counter = 1
      local counterplus1 = 2
      foreach j in `maxmethodvaluesminus1' {c -(}
      foreach k in `maxmethodvaluesplus1' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'`j' `estimate'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`estimate'`j'`k'`d'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'`j' `se'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`se'`j'`k'`d'tar`t', replace)
      local graphtheta`counter'`counterplus1'`d'`t' `estimate'`j'`k'`d'tar`t'
      local graphse`counter'`counterplus1'`d'`t' `se'`j'`k'`d'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
    - else if `methodstringindi'==1 | !mi("`methlist'") {c -(}
    = else if 1==1 | !mi("") {c -(}
    - local counter = 1
    - local counterplus1 = 2
    - local maxmethodvaluesminus1 = `numbermethod' - 1
    = local maxmethodvaluesminus1 = 2 - 1
    - forvalues j = 1/`maxmethodvaluesminus1' {c -(}
    = forvalues j = 1/1 {c -(}
    - forvalues k = 2/`numbermethod' {c -(}
    = forvalues k = 2/2 {c -(}
    - if "`j'" != "`k'" {c -(}
    = if "1" != "2" {c -(}
    - `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'``j'' `estimate'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'``j''``k''`d'tar`t', replace)
    =  twoway (function x, range(.2799641191959381 1.095583438873291) lcolor(gs10)) (scatter expg2 exppeto if __000003==6 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(expg2peto6tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.2799641191959381 1.095583438873291) lcolor(gs10)) (scatter expg2 exppeto if __000003==6 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(expg2peto6tar1, replace)
      {hline 79} end twoway {hline}
    - `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'``j'' `se'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'``j''``k''`d'tar`t', replace)
    =  twoway (function x, range(.0011168431956321 .9734957218170166) lcolor(gs10)) (scatter var2g2 var2peto if __000003==6 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(var2g2peto6tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.0011168431956321 .9734957218170166) lcolor(gs10)) (scatter var2g2 var2peto if __000003==6 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(var2g2peto6tar1, replace)
      {hline 79} end twoway {hline}
    - local graphtheta`counter'`counterplus1'`d'`t' `estimate'``j''``k''`d'tar`t'
    = local graphtheta1261 expg2peto6tar1
    - local graphse`counter'`counterplus1'`d'`t' `se'``j''``k''`d'tar`t'
    = local graphse1261 var2g2peto6tar1
    - local counterplus1 = `counterplus1' + 1
    = local counterplus1 = 2 + 1
    - if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
    = if 3 > 2 local counterplus1 = 2
    - {c )-}
    - {c )-}
    - local counter = `counter' + 1
    = local counter = 1 + 1
    - {c )-}
    - {c )-}
    - if `targetlabels' == 1 {c -(}
    = if 0 == 1 {c -(}
      local tlab: word `t' of `valtarget'
      local targetlab ", `target': `tlab'"
      {c )-}
    - else {c -(}
    - local tlab `t'
    = local tlab 1
    - local targetlab ", `target': `tlab'"
    = local targetlab ", : 1"
    - {c )-}
    - if "`valtarget'"== "N/A" local targetlab
    = if "N/A"== "N/A" local targetlab
    - if `numbermethod'==2 {c -(}
    = if 2==2 {c -(}
    - `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphse12`d'`t'' `mlabelname2', title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(2) xsize(4) name(`name'_`d'`tlab', replace) `options'
    =  graph combine Method_g2 expg2peto6tar1 var2g2peto6tar1 Method_peto, title("") note("Graphs for theta rho pc k: 0.5 no 20% 20 ") cols(2) xsize(4) name(cms_test7_61, replace) title("testtitle") 
      {hline 78} begin graph {hline}
      - if d(`=c(born_date)') < d(23Jul2004) {c -(}
      = if d(14 Feb 2022) < d(23Jul2004) {c -(}
        di as err "your Stata executable is out of date"
        di as err "    type -update executable- at the Stata prompt"
        exit 498
        {c )-}
      - local ver = string(_caller())
      - if (_caller() < 8.2) version 8
      - else if (_caller() < 10 ) version 8.2
      - else version 10
      - gdi record = yes
      - gdi maybedraw = yes
      - if "`._Gr_Global.isa'" == "" {c -(}
      = if "class" == "" {c -(}
        ._Gr_Global = .global_g.new
        {c )-}
      - ._Gr_Global.callerver = "`ver'"
      = ._Gr_Global.callerver = "16"
      - capture noisily Graph `0'
      = capture noisily Graph combine Method_g2 expg2peto6tar1 var2g2peto6tar1 Method_peto, title("") note("Graphs for theta rho pc k: 0.5 no 20% 20 ") cols(2) xsize(4) name(cms_test7_61, replace) title("testtitle") 
{res}      {txt}- local rc = _rc
      - gdi record = yes
      - gdi maybedraw = yes
      - gdi end
      - exit `rc'
      = exit 0
      {hline 80} end graph {hline}
    - {c )-}
    - else if `numbermethod'==3 {c -(}
    = else if 2==3 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphtheta13`d'`t'' `graphse12`d'`t'' `mlabelname2' `graphtheta23`d'`t'' `graphse13`d'`t'' `graphse23`d'`t'' `mlabelname3', title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(3) xsize(4) name(`name'_`d'`tlab', replace) `options'
      {c )-}
    - else if `numbermethod'>3 {c -(}
    = else if 2>3 {c -(}
      if mi("`anything'") local anything = "est"
      `dicmd' graph matrix `varlist' if `group'==`d' `iftarget', `half' `by' title("") note("") name(`name'_`anything'`j'`k'`d'`tlab', replace) `options'
      {c )-}
    - {c )-}
    - {c )-}
    - local dgmfilter = "`group'==`d'"
    = local dgmfilter = "__000003==7"
    - local dgmlevels`d' : label grouplevels `d'
    = local dgmlevels7 : label grouplevels 7
    - if "`valtarget'"!= "N/A" {c -(}
    = if "N/A"!= "N/A" {c -(}
      qui levelsof `target', local(targetlevels)
      local foreachtarget "`targetlevels'"
      {c )-}
    - else local foreachtarget 1
    - foreach t in `foreachtarget' {c -(}
    = foreach t in 1 {c -(}
    - cap confirm numeric variable `target'
    = cap confirm numeric variable 
    - if _rc local iftarget `"& `target' == "`t'""'
    = if _rc local iftarget `"&  == "1""'
    - else local iftarget `"& `target' == `t'"'
    = else local iftarget `"&  == 1"'
    - if "`valtarget'"== "N/A" local iftarget
    = if "N/A"== "N/A" local iftarget
    - local frtheta `minest' `maxest'
    = local frtheta .2799641191959381 1.095583438873291
    - local frse `minse' `maxse'
    = local frse .0011168431956321 .9734957218170166
    - if `methodstringindi'==0 {c -(}
    = if 1==0 {c -(}
      if mi("`methlist'") {c -(}
      if `methodlabels'!= 1 local methodvalues `valmethod'
      else local methodvalues `valmethodnumwithlabel'
      {c )-}
      local maxmethodvalues : word `numbermethod' of `methodvalues'
      local maxmethodvaluesplus1 = substr("`methodvalues'", -`numbermethod', .)
      local maxmethodvaluesminus1 = substr("`methodvalues'", 1 ,`numbermethod')
      local counter = 1
      local counterplus1 = 2
      foreach j in `maxmethodvaluesminus1' {c -(}
      foreach k in `maxmethodvaluesplus1' {c -(}
      if "`j'" != "`k'" {c -(}
      `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'`j' `estimate'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`estimate'`j'`k'`d'tar`t', replace)
      `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'`j' `se'`k' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny)), xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw `by' name(`se'`j'`k'`d'tar`t', replace)
      local graphtheta`counter'`counterplus1'`d'`t' `estimate'`j'`k'`d'tar`t'
      local graphse`counter'`counterplus1'`d'`t' `se'`j'`k'`d'tar`t'
      local counterplus1 = `counterplus1' + 1
      if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
      {c )-}
      {c )-}
      local counter = `counter' + 1
      {c )-}
      {c )-}
    - else if `methodstringindi'==1 | !mi("`methlist'") {c -(}
    = else if 1==1 | !mi("") {c -(}
    - local counter = 1
    - local counterplus1 = 2
    - local maxmethodvaluesminus1 = `numbermethod' - 1
    = local maxmethodvaluesminus1 = 2 - 1
    - forvalues j = 1/`maxmethodvaluesminus1' {c -(}
    = forvalues j = 1/1 {c -(}
    - forvalues k = 2/`numbermethod' {c -(}
    = forvalues k = 2/2 {c -(}
    - if "`j'" != "`k'" {c -(}
    = if "1" != "2" {c -(}
    - `dicmd' twoway (function x, range(`frtheta') lcolor(gs10)) (scatter `estimate'``j'' `estimate'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`estimate'``j''``k''`d'tar`t', replace)
    =  twoway (function x, range(.2799641191959381 1.095583438873291) lcolor(gs10)) (scatter expg2 exppeto if __000003==7 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(expg2peto7tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.2799641191959381 1.095583438873291) lcolor(gs10)) (scatter expg2 exppeto if __000003==7 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Estimate", size(medium)) legend(off) xtit("testaxis") nodraw),  name(expg2peto7tar1, replace)
      {hline 79} end twoway {hline}
    - `dicmd' twoway (function x, range(`frse') lcolor(gs10)) (scatter `se'``j'' `se'``k'' if `dgmfilter' `iftarget', ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) `subgraphoptions' nodraw), `by' name(`se'``j''``k''`d'tar`t', replace)
    =  twoway (function x, range(.0011168431956321 .9734957218170166) lcolor(gs10)) (scatter var2g2 var2peto if __000003==7 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(var2g2peto7tar1, replace)
      {hline 77} begin twoway {hline}
      - graph twoway `0'
      = graph twoway (function x, range(.0011168431956321 .9734957218170166) lcolor(gs10)) (scatter var2g2 var2peto if __000003==7 , ms(o) mlc(white%1) msize(tiny) xtit("") ytit("Standard Error", size(medium)) legend(off) xtit("testaxis") nodraw),  name(var2g2peto7tar1, replace)
      {hline 79} end twoway {hline}
    - local graphtheta`counter'`counterplus1'`d'`t' `estimate'``j''``k''`d'tar`t'
    = local graphtheta1271 expg2peto7tar1
    - local graphse`counter'`counterplus1'`d'`t' `se'``j''``k''`d'tar`t'
    = local graphse1271 var2g2peto7tar1
    - local counterplus1 = `counterplus1' + 1
    = local counterplus1 = 2 + 1
    - if `counterplus1' > `numbermethod' local counterplus1 = `numbermethod'
    = if 3 > 2 local counterplus1 = 2
    - {c )-}
    - {c )-}
    - local counter = `counter' + 1
    = local counter = 1 + 1
    - {c )-}
    - {c )-}
    - if `targetlabels' == 1 {c -(}
    = if 0 == 1 {c -(}
      local tlab: word `t' of `valtarget'
      local targetlab ", `target': `tlab'"
      {c )-}
    - else {c -(}
    - local tlab `t'
    = local tlab 1
    - local targetlab ", `target': `tlab'"
    = local targetlab ", : 1"
    - {c )-}
    - if "`valtarget'"== "N/A" local targetlab
    = if "N/A"== "N/A" local targetlab
    - if `numbermethod'==2 {c -(}
    = if 2==2 {c -(}
    - `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphse12`d'`t'' `mlabelname2', title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(2) xsize(4) name(`name'_`d'`tlab', replace) `options'
    =  graph combine Method_g2 expg2peto7tar1 var2g2peto7tar1 Method_peto, title("") note("Graphs for theta rho pc k: 0.5 no 30% 5 ") cols(2) xsize(4) name(cms_test7_71, replace) title("testtitle") 
      {hline 78} begin graph {hline}
      - if d(`=c(born_date)') < d(23Jul2004) {c -(}
      = if d(14 Feb 2022) < d(23Jul2004) {c -(}
        di as err "your Stata executable is out of date"
        di as err "    type -update executable- at the Stata prompt"
        exit 498
        {c )-}
      - local ver = string(_caller())
      - if (_caller() < 8.2) version 8
      - else if (_caller() < 10 ) version 8.2
      - else version 10
      - gdi record = yes
      - gdi maybedraw = yes
      - if "`._Gr_Global.isa'" == "" {c -(}
      = if "class" == "" {c -(}
        ._Gr_Global = .global_g.new
        {c )-}
      - ._Gr_Global.callerver = "`ver'"
      = ._Gr_Global.callerver = "16"
      - capture noisily Graph `0'
      = capture noisily Graph combine Method_g2 expg2peto7tar1 var2g2peto7tar1 Method_peto, title("") note("Graphs for theta rho pc k: 0.5 no 30% 5 ") cols(2) xsize(4) name(cms_test7_71, replace) title("testtitle") 
{err}error (1) reading file
Error in file, skipping lines:
 <EndItem>
source and target types are not compatible
     may not assign instances of incompatible classes
error (4019) reading file
Error in file, skipping lines:
 .sersets[1] = .__Map.K144f8718.ref
.insert (plotregion1 = .plotregion.new , style(scheme twoway) graph(__key(1cff8a38))) at 1 1
.plotregion1.style.editstyle boxstyle(none) editcopy
.plotregion1.Declare plot1 = .yxview.new , type(scatter) serset() yvariable() xvariable()  lvariable() pvariable() plotregion(__key(1d0d7d98)) style(scheme p1) 
.plotregion1.plot1.style.editstyle marker(symbol(i)) label(textstyle(size(vlarge))) editcopy
.plotregion1.clear_scales
.plotregion1.reset_scales , noclear
.n_views = 1
.n_plotregions = 1
.last_style = 1
.x_scales = `" "1""'
.y_scales = `" "1""'
.create_axes 1 1 "9" "" 9
.insert (legend = .legend_g.new, graphs(__key(1cff8a38)) style(scheme)) below plotregion1 , ring(3) 
.legend.style.editstyle box_alignment(S) editcopy
.legend.holes = ""
.legend.style.editstyle  force_draw(no) force_nodraw(yes) editcopy
.legend.insert (note = .sized_textbox.new, mtextq(`""') style(scheme leg_note) ) below plotregion1 , ring(3) 
.legend.note.style.editstyle box_alignment(SW) editcopy
.legend.note.style.editstyle horizontal(left) editcopy
.legend.insert (caption = .sized_textbox.new, mtextq(`""') style(scheme leg_caption) ) below plotregion1 , ring(5) 
.legend.caption.style.editstyle box_alignment(SW) editcopy
.legend.caption.style.editstyle horizontal(left) editcopy
.legend.insert (subtitle = .sized_textbox.new, mtextq(`""') style(scheme leg_subtitle) ) above plotregion1 , ring(6) 
.legend.subtitle.style.editstyle box_alignment(N) editcopy
.legend.subtitle.style.editstyle horizontal(center) editcopy
.legend.insert (title = .sized_textbox.new, mtextq(`""') style(scheme leg_title) ) above plotregion1 , ring(7) 
.legend.title.style.editstyle box_alignment(N) editcopy
.legend.title.style.editstyle horizontal(center) editcopy
.legend.rebuild
.legend.repositionkeys
.xaxis1.addmin -1
.xaxis1.addmax 1
.xaxis1.style.editstyle  linestyle(none) editcopy
.xaxis1.major.clear
.xaxis1.major.none_ticks
.xaxis1.reset_scale reinit
.xaxis1.title.edit , mtextq(`""""')   replace
.xaxis1.title.edit , mtextq(`""testaxis""')   replace
.yaxis1.addmin -1
.yaxis1.addmax 1
.yaxis1.style.editstyle  linestyle(none) editcopy
.yaxis1.major.clear
.yaxis1.major.none_ticks
.yaxis1.reset_scale reinit
.yaxis1.title.edit , mtextq(`""""')   replace
.insert (r1title = .sized_textbox.new, mtextq(`""') style(scheme r1title) orientation(vertical)) rightof plotregion1 , ring(1) 
.insert (r2title = .sized_textbox.new, mtextq(`""') style(scheme r2title) orientation(vertical)) rightof plotregion1 , ring(2) 
.insert (l1title = .sized_textbox.new, mtextq(`""') style(scheme l1title) orientation(vertical)) leftof plotregion1 , ring(1) 
.insert (l2title = .sized_textbox.new, mtextq(`""') style(scheme l2title) orientation(vertical)) leftof plotregion1 , ring(2) 
.insert (t1title = .sized_textbox.new, mtextq(`""') style(scheme t1title) ) above plotregion1 , ring(1) 
.insert (t2title = .sized_textbox.new, mtextq(`""') style(scheme t2title) ) above plotregion1 , ring(2) 
.insert (b1title = .sized_textbox.new, mtextq(`""') style(scheme b1title) ) below plotregion1 , ring(1) 
.insert (b2title = .sized_textbox.new, mtextq(`""') style(scheme b1title) ) below plotregion1 , ring(2) 
.insert (note = .sized_textbox.new, mtextq(`""') style(scheme note) ) below plotregion1 , ring(4) 
.note.style.editstyle box_alignment(SW) editcopy
.note.style.editstyle horizontal(left) editcopy
.insert (caption = .sized_textbox.new, mtextq(`""') style(scheme caption) ) below plotregion1 , ring(5) 
.caption.style.editstyle box_alignment(SW) editcopy
.caption.style.editstyle horizontal(left) editcopy
.insert (subtitle = .sized_textbox.new, mtextq(`""') style(scheme subtitle) ) above plotregion1 , ring(6) 
.subtitle.style.editstyle box_alignment(N) editcopy
.subtitle.style.editstyle horizontal(center) editcopy
.insert (title = .sized_textbox.new, mtextq(`""') style(scheme title) ) above plotregion1 , ring(7) 
.title.style.editstyle box_alignment(N) editcopy
.title.style.editstyle horizontal(center) editcopy
.insert (spacert = .spacer.new) above plotregion1 , ring(11)
.insert (spacerb = .spacer.new) below plotregion1 , ring(11)
.insert (spacerl = .spacer.new) leftof plotregion1 , ring(11)
.insert (spacerr = .spacer.new) rightof plotregion1 , ring(11)
.command = `"twoway scatteri 0 0 (0) "Method: peto" .5 .5 (0) "" -.5 -.5 (0) "", yscale(range(-1 1)) xscale(range(-1 1)) plotregion(style(none)) yscale(lstyle(none)) xscale(lstyle(none)) msym(i) mlabs(vlarge) xlab(none) ylab(none) xtit("") ytit("") legend(off)  mlab(black) xtit("testaxis") nodraw name(Method_peto, replace)"'
.date = "28 Aug 2023"
.time = "16:53:58"
.dta_file = ""
.dta_date = ""
<EndItem>
__000007.gversion invalid name
      {txt}- local rc = _rc
      - gdi record = yes
      - gdi maybedraw = yes
      - gdi end
      - exit `rc'
      = exit 198
      {hline 80} end graph {hline}
      {c )-}
      else if `numbermethod'==3 {c -(}
      `dicmd' graph combine `mlabelname1' `graphtheta12`d'`t'' `graphtheta13`d'`t'' `graphse12`d'`t'' `mlabelname2' `graphtheta23`d'`t'' `graphse13`d'`t'' `graphse23`d'`t'' `mlabelname3', title("") note("Graphs for `dgmvalues': `dgmlevels`d'' `targetlab'") cols(3) xsize(4) name(`name'_`d'`tlab', replace) `options'
      {c )-}
      else if `numbermethod'>3 {c -(}
      if mi("`anything'") local anything = "est"
      `dicmd' graph matrix `varlist' if `group'==`d' `iftarget', `half' `by' title("") note("") name(`name'_`anything'`j'`k'`d'`tlab', replace) `options'
      {c )-}
      {c )-}
      {c )-}
      {c )-}
      {c )-}
{search r(198), local:r(198);}

end of do-file

{search r(198), local:r(198);}

{com}. do "C:\Users\rmjlem1\AppData\Local\Temp\STD1080_000000.tmp"
{txt}
{com}. siman zipplot, scheme(scheme(s2color)) legend(order(3 "Carrot" 4 "Stalk")) xtit("x-title") ytit("y-title") ylab(0 40 100) noncoveroptions(pstyle(p3)) ///
> coveroptions(pstyle(p4)) scatteroptions(mcol(gray%50)) truegraphoptions(pstyle(p6)) name("zipplot_test7", replace)
{err}{it: WARNING: 96 panels will be created, consider using 'if' or 'by' options as detailed in {help siman_zipplot:siman zipplot}}
{res}{err}{hline 2}Break{hline 2}
{txt}{search r(1), local:r(1);}

end of do-file

{err}{hline 2}Break{hline 2}
{txt}{search r(1), local:r(1);}

{com}. exit, clear
